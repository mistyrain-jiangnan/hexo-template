[
  {
    "id": 61153090,
    "slug": "tgkgfr",
    "title": "32+ vue 修饰符",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 3,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-09T03:03:17.987Z",
      "updated_at": "2021-12-09T03:03:17.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-09T03:02:57.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-09T03:02:57.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"pxcyU\"></a>\n# \n<a name=\"th4rJ\"></a>\n# 前言\nvue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！<br />耽误您15分钟您可以收获：\n\n1. 32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用\n1. 如何利用webpack动态注册vue路由，再也不手写路由配置啦！\n\n文章中例子都放在了github源码上，也可以点击直接看例子\n<a name=\"Q2cOK\"></a>\n# 如何动态注册路由？\n文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.<br />有什么办法可以帮我们自动完成路由注册呢？\n<a name=\"kP2Yc\"></a>\n## 1. 文件目录结构\n目录结构（已去除其他文件目录）大概如下\n```javascript\n├── package.json\n└── src\n    ├── App.vue\n    ├── main.js\n    ├── router.js\n    └── views\n        ├── About.vue\n        ├── Home.vue\n        └── modifiers\n            ├── capture.vue\n            ├── once.vue\n            ├── order.vue\n            ├── passive.vue\n            ├── prevent.vue\n            ├── self.vue\n            └── stop.vue\n            └── ...\n```\n<a name=\"rxTi1\"></a>\n## 2. 期望的路由配置\n最终给到vue-router的配置大概长下面这个样子，每个配置最重要的部分分别是path、name和component\n```javascript\n[\n  {\n    \"path\": \"/home\",\n    \"name\": \"home\",\n    \"component\": {\n      \"name\": \"Home\",\n      \"methods\": {},\n      \"staticRenderFns\": [],\n      \"_compiled\": true,\n      \"_scopeId\": \"data-v-fae5bece\",\n      \"beforeCreate\": [\n        null\n      ],\n      \"beforeDestroy\": [\n        null\n      ],\n      \"__file\": \"src/views/Home.vue\"\n    }\n  },\n  {\n    \"path\": \"/modifiers/capture\",\n    \"name\": \"modifiersCapture\",\n    \"component\": {\n      \"name\": \"capture\",\n      \"methods\": {},\n      \"staticRenderFns\": [],\n      \"_compiled\": true,\n      \"_scopeId\": \"data-v-63b4eeee\",\n      \"beforeCreate\": [\n        null\n      ],\n      \"beforeDestroy\": [\n        null\n      ],\n      \"__file\": \"src/views/modifiers/capture.vue\"\n    }\n  },\n  ... // 其他路由配置\n]\n```\n\n\n<a name=\"r0SDU\"></a>\n## 3. require.context实现动态注册路由\n借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下\n```javascript\nconst registerRoutes = () => {\n  const contextInfo = require.context('./views', true, /.vue$/)\n  const routes = contextInfo.keys().map((filePath) => {\n    // filePath 形如 ./Home.vue、./modifiers/capture.vue\n    // path我们希望是/home、/modifiers/capture\n    // 所以需要把开头的./和.vue都替换为空\n    const path = filePath.toLowerCase().replace(/^\\.|\\.vue/g, '')\n    // name的话将/home、/modifiers/capture转成小驼峰即可\n    // 把开头的/先替换掉，再把第一个/后的单词变成大写就可以了\n    const name = path.replace(/^\\//, '').replace(/\\/(\\w)/, ($0, $1) => $1.toUpperCase())\n    // 通过require去读取.vue文件内容\n    const component = require(`./views${filePath.replace(/^\\./, '')}`).default\n\n    return {\n      path,\n      name,\n      component\n    }\n  })\n\n  return routes\n}\n\n```\n​\n\n**效果**<br />经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果\n\n<a name=\"C7PDV\"></a>\n# 事件修饰符\n<a name=\"NdTWe\"></a>\n## 1. 阻止冒泡的两种方式\n\n\n```javascript\n<template>\n  <div class=\"parent\" @click=\"onClickParent\">\n    我是爸爸\n    <div class=\"child\" @click=\"onClickChild\">\n      我是儿子\n    </div>\n  </div> \n</template>\n\nexport default {\n  name: 'stop',\n  methods: {\n    onClickParent () {\n      console.log('我是爸爸')\n    },\n    onClickChild () {\n      console.log('我是儿子')\n    }\n  }\n}\n```\n\n\n点**击子节点**的时候因为事件冒泡的缘故不仅会打印出我是儿子还会打印我是爸爸。有什么办法可以阻止子节点的**事件冒泡**呢？<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=ufdb6c334&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u3a2a87aa-6cbd-4bcb-a622-0c7fdbb416c)<br />\n\n<a name=\"oWzps\"></a>\n### 1 .stop\n只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。<br />当添加上.stop修饰符时，只会出现我是儿子\n```javascript\n<template>\n  <div class=\"parent\" @click=\"onClickParent\">\n    我是爸爸\n    <div class=\"child\" @click.stop=\"onClickChild\">\n      我是儿子\n    </div>\n  </div> \n</template>\n```\n<a name=\"uNVNl\"></a>\n### 2. event.stopPropagation\n当然了，我们也可以通过调用event.stopPropagation来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节\n```javascript\nexport default {\n  name: 'stop',\n  methods: {\n    onClickChild (event) {\n      console.log('我是儿子')\n      event.stopPropagation()\n    }\n  }\n}\n```\n<a name=\"IIPEs\"></a>\n## 2. 阻止默认事件的两种方式\nvue中阻止冒泡有两种方式，那阻止默认事件呢？\n<a name=\"fkfpq\"></a>\n### 1 .prevent\n```javascript\n<template>\n  <div class=\"prevent\">\n    <a href=\"https://juejin.cn/\" @click=\"onNoPrevent\">点击跳转掘金</a>\n    <br />\n    <br />\n    <a href=\"https://juejin.cn/\" @click.prevent=\"onPrevent\">阻止默认事件，无法跳转掘金</a>\n  </div>\n</template>\n\nexport default {\n  name: 'prevent',\n  methods: {\n    onNoPrevent () {\n      console.log('未阻止默认事件')\n    },\n    onPrevent () {\n      console.log('阻止默认事件')\n    }\n  }\n}\n```\n只要添加.prevent轻松实现阻止默认事件\n<a name=\"B1pgj\"></a>\n### 2.event.preventDefault()\n和阻止冒泡一样，我们也可以通过调用事件对象的preventDefault方法来阻止默认事件\n```javascript\nexport default {\n  name: 'prevent',\n  methods: {\n    onPrevent (event) {\n      console.log('阻止默认事件')\n      event.preventDefault()\n    }\n  }\n}\n```\n<a name=\"LqMyK\"></a>\n## 3 .capture\n默认情况下，事件流是以冒泡(由里向外)的形式传递的，如果想以捕获（由外向里）的形式应该怎么办呢？\n```javascript\n<template>\n  <div class=\"capture parent\" @click.capture=\"onClickParent\">\n    父节点\n    <div class=\"child\" @click.capture=\"onClickChild\">自节点</div>\n  </div>\n</template>\n\nexport default {\n  name: 'capture',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n```\n​\n\n不加catpture修饰符，点击**子节点**会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了\n<a name=\"HAwJz\"></a>\n## 4 .self\n只有当event.target是当前元素自身时才会触发事件回调函数\n```javascript\n<template>\n  <div class=\"self\" @click.self=\"onClickSelf\">\n    <div class=\"inner\" @click=\"onClickInner\"></div>\n  </div>\n</template>\n\nexport default {\n  name: 'self',\n  methods: {\n    onClickSelf () {\n      console.log('我是self节点')\n    },\n    onClickInner () {\n      console.log('我是inner节点')\n    }\n  }\n}\n```\n​\n\n不加self修饰符的话，点击inner节点也会触发self的事件，加了之后只有触发事件的元素本身是self，才会打印出我是self节点\n<a name=\"RQFsF\"></a>\n## 暂停一下：修饰符的顺序如何理解？\n已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=ue6c22681&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u4fe3b80c-310b-44fe-8997-3fbdc0a61e3)<br />image.png<br />**怎么理解呢？我们来看两个栗子**\n```javascript\n<template>\n  <div class=\"order\">\n    <div class=\"order-0\">\n      <a href=\"https://juejin.cn/\" class=\"order-parent\" @click.self.prevent=\"onClickParent\">\n        我是父节点，会跳转掘金\n        <br />\n        <span class=\"order-child\" @click=\"onClickChild\">\n          我是子节点\n        </span>\n      </a>\n      <hr />\n    </div>\n    <div class=\"order-2\">\n      <a href=\"https://juejin.cn/\" class=\"order-parent\" @click.prevent.self=\"onClickParent\">\n        我是父节点，无法跳转掘金\n        <br />\n        <span class=\"order-child\" @click=\"onClickChild\">\n          我是子节点\n        </span>\n      </a>\n    </div>\n  </div> \n</template>\n\nexport default {\n  name: 'order',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n\n```\n您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？\n\n1. 首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件\n1. 点击下面的父节点会打印出**我是父节点**，但是**不会跳转掘金**\n1. 点击上面的父节点**会**打印出**我是父节点**,**也不会跳转掘金**\n\n但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是**会**<br />**为什么？**<br />a@click.self.prevent=\"onClickParent\"的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行onClickParent回调。<br />而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就不会阻止默认事件(此时也就发生跳转了)，当然也不会触发onClickParent回调<br />同理来我们分析一下a@click.prevent.self=\"onClickParent\"<br />不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行onClickParent回调函数。<br />\n<br />**回过头看，你理解事件的顺序含义了吗？**\n<a name=\"DH91z\"></a>\n## 5. once\n顾名思义，事件只会触发一次\n```javascript\n<template>\n  <div class=\"once\" @click.once=\"onClickOnce\">\n    只触发一次\n  </div>\n</template>\n\nexport default {\n  name: 'once',\n  methods: {\n    onClickOnce () {\n      console.log('once，我只会触发一次点击事件回调')\n    }\n  }\n}\n```\n触发一次点击之后，任我再怎么点，回调怎也不会触发了。\n<a name=\"rB1Mt\"></a>\n## 6 .native\n我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用.native修饰符可以帮我们办到这点<br />**native.vue**\n```javascript\n<template>\n  <div class=\"native-custom\">\n    <input type=\"text\" @keydown=\"onKeydown\">\n  </div>\n</template>\n\nexport default {\n  name: 'nativeCustom',\n  methods: {\n    onKeydown () {\n      this.$emit('onKeydown')\n    }\n  }\n}\n```\n**custom.vue**\n```javascript\n<template>\n  <div class=\"native\">\n    <!-- 加上.native之后原生事件才得以监听成功 -->\n    <NativeCustom @onKeydown=\"onKeydown\" @click.native=\"onClick\" />\n  </div>\n</template>\n\nimport NativeCustom from '../../components/native.vue'\n\nexport default {\n  name: 'native',\n  components: {\n    NativeCustom\n  },\n  methods: {\n    onKeydown () {\n      console.log('onKeydown')\n    },\n    onClick () {\n      console.log('onClick')\n    }\n  }\n}\n\n```\n<a name=\"R2RfU\"></a>\n## 7 .passive\nvue对应 addEventListener 中的 passive 选项提供了 .passive 修饰符\n```javascript\n<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --> \n<!-- 而不会等待 `onScroll` 完成 --> \n<!-- 这其中包含 `event.preventDefault()` 的情况 --> \n\n<div v-on:scroll.passive=\"onScroll\">...</div>\n```\n**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**<br />**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**<br />**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**\n<a name=\"qD7c9\"></a>\n# v-bind修饰符\n<a name=\"Z7kub\"></a>\n## 8 .sync\n当我们想要在父组件和子组件之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要.sync修饰符即可办到<br />\n\n<a name=\"KZCOv\"></a>\n## 9 .camel\n.camel 修饰符允许在使用 DOM 模板时将 v-bind property 名称驼峰化，例如 SVG 的 viewBox property：​\n<a name=\"gux0B\"></a>\n## 10 .prop\n关于.prop修饰符官网只有这句话 .prop  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。<br />**有啥作用？**\n\n1. 通过自定义属性存储变量，避免暴露数据\n1. 防止污染 HTML 结构\n\n比如有以下代码\n```javascript\n<template>\n  <div class=\"prop\">\n    <div class=\"prop-item\" :my-name=\"prop\"></div>\n    // 最终变成了 <div my-name=\"hello prop\" class=\"prop-item\"></div>\n    <div class=\"prop-item\" :my-name.prop=\"prop2\"></div>\n    // 最终变成了<div class=\"prop-item\"></div>\n    <button @click=\"onGetResult\">获取结果</button>\n  </div>\n</template>\n\nexport default {\n  name: 'prop',\n  data () {\n    return {\n      prop: 'hello prop',\n      prop2: 'hello prop2'\n    }\n  },\n  methods: {\n    onGetResult () {\n      const $refProp = this.$refs.prop\n      const $refProp2 = this.$refs.prop2\n\n      console.log($refProp.getAttribute('my-name')) // hello prop\n      console.log($refProp2.getAttribute('my-name')) // null\n    }\n  }\n}\n\n```\n从示例上可以看出未使用.prop修饰符的my-name属性会绑定到dom节点的attribute，从而出现暴露的情况。\n<a name=\"NWe8M\"></a>\n# 鼠标修饰符\n当咱们想监听用户点击了左键、右键或者中键时也有修饰符可以快捷使用，分别是.left、.right、middle，来看个例子试试<br />根据MDN MouseEvent.button，介绍。<br />在最外层div.mouse监听mousedown事件，看下用户点击的是鼠标哪个键，三个button分别用三个修饰符快捷方式监听左键、中键、右键并打印出left、middle、right\n```javascript\n<template>\n  <div class=\"mouse\" @mousedown=\"onMousedown\">\n    <button @click.left=\"onClickBtn('left')\">left</button>\n    <button @click.middle=\"onClickBtn('middle')\">middle</button>\n    <button @click.right=\"onClickBtn('right')\">right</button>\n  </div>\n</template>\n\nexport default {\n  name: 'mouse',\n  mounted () {\n\n  },\n  methods: {\n    onClickBtn (msg) {\n      console.log(msg)\n    },\n    onMousedown (event) {\n      const mosueMsgMap = {\n        0: '鼠标左键',\n        1: '鼠标中键',\n        2: '鼠标右键'\n      }\n      console.log('点击了', mosueMsgMap[event.button])\n    }\n  }\n}\n```\n**没有带鼠标回来，中键点击暂时不能演示，后续会补上**<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718538-11650970-9341-438b-b845-a67688ff5897.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=u4ad4c271&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u74db735d-39da-43ad-b642-b24eee0ddf1)<br />mouse.gif\n<a name=\"fFSe7\"></a>\n## 11 .left\n同上例子，监听鼠标左键点击\n<a name=\"it85P\"></a>\n## 12 .right\n同上例子，监听鼠标右键点击\n<a name=\"LAxXy\"></a>\n## 13 .middle\n同上例子，监听鼠标中键点击\n<a name=\"hzYRz\"></a>\n# 表单相关修饰符\n<a name=\"Yph9D\"></a>\n## 14 .trim\n对于输入的内容，希望可以过滤首尾空格应该怎么做呢？\n```javascript\n<template>\n  <div class=\"trim\">\n    <div class=\"trim-item\">\n      <input type=\"text\" v-model=\"name\">\n      <p>用户名：<span>{{ name }}</span></p>\n    </div>\n    <div class=\"trim-item\">\n      <input type=\"text\" v-model.trim=\"name2\">\n      <p>用户名2：<span>{{ name2 }}</span></p>\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'trim',\n  data () {\n    return {\n      name: '',\n      name2: '',\n    }\n  },\n  watch: {\n    name (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n    name2 (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n  }\n}\n```\n**.trim修饰符可以很方便做到**\n<a name=\"S4q4U\"></a>\n## 15 .lazy\nv-model大家都很熟悉，默认情况下，每次input事件触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？<br />**思路1：** 绑定change事件，在事件回调中手动获取target的值<br />**思路2：** 直接使用.lazy修饰符即可达到效果\n```javascript\n<template>\n  <div class=\"lazy\">\n    <div class=\"lazy-item\">\n      <input type=\"text\" v-model=\"text\">\n      <p>无.lazy: {{ text }}</p>\n    </div>\n\n    <div class=\"lazy-item\">\n      <input type=\"text\" v-model.lazy=\"text2\">\n      <p>.lazy: {{ text2 }}</p>\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      text: '',\n      text2: ''\n    }\n  }\n}\n```\n可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，text2的数据才更新了\n<a name=\"LkaRe\"></a>\n## 16 .number\n我们知道input输入框的type哪怕是number得到的值的类型也是string，如果我们想直接拿到number类型的数据，有不想麻烦的手动转换应该怎么办呢？\n```javascript\n<template>\n  <div class=\"number\">\n    <div class=\"number-item\">\n      <p>无.number </p>\n      <input type=\"number\" v-model=\"number\">\n    </div>\n    <div class=\"number-item\">\n      <p>type:text .number </p>\n      <input type=\"text\" v-model.number=\"number1\">\n    </div>\n    <div class=\"number-item\">\n      <p>type:number .number </p>\n      <input type=\"number\" v-model.number=\"number2\">\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      number: 0,\n      number1: '',\n      number2: '',\n    }\n  },\n  watch: {\n    number (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number1 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number2 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n  }\n}\n```\n\n\n1. 第一个输入框的类型是number，但是得到的值是string\n1. 第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 parseFloat() 解析，则会返回原始的值。）\n1. 第三个输入框的类型是number，最后得到的值也是number\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=u91c65a41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u41d07f12-da60-4a2b-8499-f0209ae7331)<br />number.gif\n<a name=\"tKRUK\"></a>\n# 系统修饰符\n当点击事件或者键盘事件需要系统键同时按下才触发时.ctrl、.alt、.shift、.meta可以帮大忙噢！<br />**如下代码**\n\n1. 全局监听keydown事件，尝试看.ctrl、.alt、.shift、.meta是否被按下\n1. 分别给四个按钮加上 .ctrl、.alt、.shift、.meta修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效\n\n**注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发**\n```javascript\n<template>\n  <div class=\"system\">\n    <p>{{ msg }}</p>\n    <div class=\"buttons\">\n      <button @click.ctrl=\"onClickButon('ctrl')\">ctrl</button>\n      <button @click.alt=\"onClickButon('alt')\">alt</button>\n      <button @click.shift=\"onClickButon('shift')\">shift</button>\n      <button @click.meta=\"onClickButon('meta')\">meta</button>\n    </div>\n  </div>  \n</template>\n\nexport default {\n  name: 'system',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) => {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}\n```\n<a name=\"vrHrH\"></a>\n## 17 .ctrl\n仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"EDUwo\"></a>\n## 18 .alt\n仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"JBKLM\"></a>\n## 19 .shift\n仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"UnowS\"></a>\n## 20 .meta\n仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Xw5H6\"></a>\n## 21 .exact\n严格来说这.exact不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发.alt也可以触发.shift。<br />还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=uaac7048a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u98a03c13-3c8f-42ff-aaf6-d3be97c1223)<br />system2.gif\n\n1. **只想某个系统修饰键按下时才触发点击**\n1. **没有任何系统修饰符被按下的时候才触发点击**\n\n要实现上面的需求.exact就派上用场了，用上面的例子稍作改造\n```javascript\n<template>\n  <div class=\"extra\">\n    <p>{{ msg }}</p>\n    <div class=\"buttons\">\n      <button @click.ctrl.exact=\"onClickButon('ctrl')\">ctrl</button>\n      <button @click.alt.exact=\"onClickButon('alt')\">alt</button>\n      <button @click.shift.exact=\"onClickButon('shift')\">shift</button>\n      <button @click.meta.exact=\"onClickButon('meta')\">meta</button>\n      <button @click.exact=\"onClickButon('非系统键')\">非系统键</button>\n    </div>\n  </div>  \n</template>\n\nexport default {\n  name: 'extra',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) => {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}\n```\n<a name=\"QRDoL\"></a>\n# 按键修饰符\n在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。<br />如下代码，我们分别给enter、tab、delete等按键指定了keydown事件，当在指定的输入框中按下指定的键盘，会打印出enter、tab、delete等，其他按键在输入框中无法触发该console\n```javascript\n<template>\n  <div class=\"key-modifiers\">\n    <div class=\"key-modifiers-item\">\n      enter:\n      <input type=\"text\" @keydown.enter=\"onKeydown('enter')\">\n    </div>\n    <div class=\"key-modifiers-item\">\n      tab:\n      <input type=\"text\" @keydown.tab=\"onKeydown('tab')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      delete:\n      <input type=\"text\" @keydown.delete=\"onKeydown('delete')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      esc:\n      <input type=\"text\" @keydown.esc=\"onKeydown('esc')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      space:\n      <input type=\"text\" @keydown.space=\"onKeydown('space')\">\n    </div> \n    <div class=\"key-modifiers-item\">\n      up:\n      <input type=\"text\" @keydown.up=\"onKeydown('up')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      down:\n      <input type=\"text\" @keydown.down=\"onKeydown('down')\">\n    </div> \n    <div class=\"key-modifiers-item\">\n      left:\n      <input type=\"text\" @keydown.left=\"onKeydown('left')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      right:\n      <input type=\"text\" @keydown.right=\"onKeydown('right')\">\n    </div>  \n    \n    <div class=\"key-modifiers-item\">\n      page-down:\n      <input type=\"text\" @keydown.page-down=\"onKeydown('page-down')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      page-up:\n      <input type=\"text\" @keydown.page-up=\"onKeydown('page-up')\">\n    </div>  \n  </div>\n</template>\n\nexport default {\n  name: 'keyModifiers',\n  methods: {\n    onKeydown (keyName) {\n      console.log(keyName)\n    }\n  }\n}\n\n```\n<a name=\"C8jGV\"></a>\n## 22 .enter\n在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Jw4r0\"></a>\n## 23 .tab\n在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"U7gUW\"></a>\n## 24 .delete\n在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"q769F\"></a>\n## 25 .esc\n在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"lSVHX\"></a>\n## 26 .space\n在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"CJR2h\"></a>\n## 27 .up\n在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"jtFso\"></a>\n## 28 .down\n在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"KcsBn\"></a>\n## 29 .left\n在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Mrnjd\"></a>\n## 30 .right\n在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"P5Hyd\"></a>\n## 31 .page-down\n在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"vV3ei\"></a>\n## 32 .page-up\n在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"iSrWh\"></a>\n# 如何自定义按键修饰符\nvue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？<br />通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。\n\n```javascript\nVue.config.keyCodes = {\n  q: 81\n}\n\n<div class=\"custom\">\n  <input type=\"text\" @keydown.q=\"f1Keydown\">\n</div>\n\nexport default {\n  name: 'custom',\n  methods: {\n    f1Keydown () {\n      console.log('按下了q')\n    }\n  }\n}\n```\n\n\n",
    "body_draft": "<a name=\"pxcyU\"></a>\n# \n<a name=\"th4rJ\"></a>\n# 前言\nvue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！<br />耽误您15分钟您可以收获：\n\n1. 32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用\n1. 如何利用webpack动态注册vue路由，再也不手写路由配置啦！\n\n文章中例子都放在了github源码上，也可以点击直接看例子\n<a name=\"Q2cOK\"></a>\n# 如何动态注册路由？\n文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.<br />有什么办法可以帮我们自动完成路由注册呢？\n<a name=\"kP2Yc\"></a>\n## 1. 文件目录结构\n目录结构（已去除其他文件目录）大概如下\n```javascript\n├── package.json\n└── src\n    ├── App.vue\n    ├── main.js\n    ├── router.js\n    └── views\n        ├── About.vue\n        ├── Home.vue\n        └── modifiers\n            ├── capture.vue\n            ├── once.vue\n            ├── order.vue\n            ├── passive.vue\n            ├── prevent.vue\n            ├── self.vue\n            └── stop.vue\n            └── ...\n```\n<a name=\"rxTi1\"></a>\n## 2. 期望的路由配置\n最终给到vue-router的配置大概长下面这个样子，每个配置最重要的部分分别是path、name和component\n```javascript\n[\n  {\n    \"path\": \"/home\",\n    \"name\": \"home\",\n    \"component\": {\n      \"name\": \"Home\",\n      \"methods\": {},\n      \"staticRenderFns\": [],\n      \"_compiled\": true,\n      \"_scopeId\": \"data-v-fae5bece\",\n      \"beforeCreate\": [\n        null\n      ],\n      \"beforeDestroy\": [\n        null\n      ],\n      \"__file\": \"src/views/Home.vue\"\n    }\n  },\n  {\n    \"path\": \"/modifiers/capture\",\n    \"name\": \"modifiersCapture\",\n    \"component\": {\n      \"name\": \"capture\",\n      \"methods\": {},\n      \"staticRenderFns\": [],\n      \"_compiled\": true,\n      \"_scopeId\": \"data-v-63b4eeee\",\n      \"beforeCreate\": [\n        null\n      ],\n      \"beforeDestroy\": [\n        null\n      ],\n      \"__file\": \"src/views/modifiers/capture.vue\"\n    }\n  },\n  ... // 其他路由配置\n]\n```\n\n\n<a name=\"r0SDU\"></a>\n## 3. require.context实现动态注册路由\n借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下\n```javascript\nconst registerRoutes = () => {\n  const contextInfo = require.context('./views', true, /.vue$/)\n  const routes = contextInfo.keys().map((filePath) => {\n    // filePath 形如 ./Home.vue、./modifiers/capture.vue\n    // path我们希望是/home、/modifiers/capture\n    // 所以需要把开头的./和.vue都替换为空\n    const path = filePath.toLowerCase().replace(/^\\.|\\.vue/g, '')\n    // name的话将/home、/modifiers/capture转成小驼峰即可\n    // 把开头的/先替换掉，再把第一个/后的单词变成大写就可以了\n    const name = path.replace(/^\\//, '').replace(/\\/(\\w)/, ($0, $1) => $1.toUpperCase())\n    // 通过require去读取.vue文件内容\n    const component = require(`./views${filePath.replace(/^\\./, '')}`).default\n\n    return {\n      path,\n      name,\n      component\n    }\n  })\n\n  return routes\n}\n\n```\n​\n\n**效果**<br />经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果\n\n<a name=\"C7PDV\"></a>\n# 事件修饰符\n<a name=\"NdTWe\"></a>\n## 1. 阻止冒泡的两种方式\n\n\n```javascript\n<template>\n  <div class=\"parent\" @click=\"onClickParent\">\n    我是爸爸\n    <div class=\"child\" @click=\"onClickChild\">\n      我是儿子\n    </div>\n  </div> \n</template>\n\nexport default {\n  name: 'stop',\n  methods: {\n    onClickParent () {\n      console.log('我是爸爸')\n    },\n    onClickChild () {\n      console.log('我是儿子')\n    }\n  }\n}\n```\n\n\n点**击子节点**的时候因为事件冒泡的缘故不仅会打印出我是儿子还会打印我是爸爸。有什么办法可以阻止子节点的**事件冒泡**呢？<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=ufdb6c334&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u3a2a87aa-6cbd-4bcb-a622-0c7fdbb416c)<br />\n\n<a name=\"oWzps\"></a>\n### 1 .stop\n只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。<br />当添加上.stop修饰符时，只会出现我是儿子\n```javascript\n<template>\n  <div class=\"parent\" @click=\"onClickParent\">\n    我是爸爸\n    <div class=\"child\" @click.stop=\"onClickChild\">\n      我是儿子\n    </div>\n  </div> \n</template>\n```\n<a name=\"uNVNl\"></a>\n### 2. event.stopPropagation\n当然了，我们也可以通过调用event.stopPropagation来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节\n```javascript\nexport default {\n  name: 'stop',\n  methods: {\n    onClickChild (event) {\n      console.log('我是儿子')\n      event.stopPropagation()\n    }\n  }\n}\n```\n<a name=\"IIPEs\"></a>\n## 2. 阻止默认事件的两种方式\nvue中阻止冒泡有两种方式，那阻止默认事件呢？\n<a name=\"fkfpq\"></a>\n### 1 .prevent\n```javascript\n<template>\n  <div class=\"prevent\">\n    <a href=\"https://juejin.cn/\" @click=\"onNoPrevent\">点击跳转掘金</a>\n    <br />\n    <br />\n    <a href=\"https://juejin.cn/\" @click.prevent=\"onPrevent\">阻止默认事件，无法跳转掘金</a>\n  </div>\n</template>\n\nexport default {\n  name: 'prevent',\n  methods: {\n    onNoPrevent () {\n      console.log('未阻止默认事件')\n    },\n    onPrevent () {\n      console.log('阻止默认事件')\n    }\n  }\n}\n```\n只要添加.prevent轻松实现阻止默认事件\n<a name=\"B1pgj\"></a>\n### 2.event.preventDefault()\n和阻止冒泡一样，我们也可以通过调用事件对象的preventDefault方法来阻止默认事件\n```javascript\nexport default {\n  name: 'prevent',\n  methods: {\n    onPrevent (event) {\n      console.log('阻止默认事件')\n      event.preventDefault()\n    }\n  }\n}\n```\n<a name=\"LqMyK\"></a>\n## 3 .capture\n默认情况下，事件流是以冒泡(由里向外)的形式传递的，如果想以捕获（由外向里）的形式应该怎么办呢？\n```javascript\n<template>\n  <div class=\"capture parent\" @click.capture=\"onClickParent\">\n    父节点\n    <div class=\"child\" @click.capture=\"onClickChild\">自节点</div>\n  </div>\n</template>\n\nexport default {\n  name: 'capture',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n```\n​\n\n不加catpture修饰符，点击**子节点**会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了\n<a name=\"HAwJz\"></a>\n## 4 .self\n只有当event.target是当前元素自身时才会触发事件回调函数\n```javascript\n<template>\n  <div class=\"self\" @click.self=\"onClickSelf\">\n    <div class=\"inner\" @click=\"onClickInner\"></div>\n  </div>\n</template>\n\nexport default {\n  name: 'self',\n  methods: {\n    onClickSelf () {\n      console.log('我是self节点')\n    },\n    onClickInner () {\n      console.log('我是inner节点')\n    }\n  }\n}\n```\n​\n\n不加self修饰符的话，点击inner节点也会触发self的事件，加了之后只有触发事件的元素本身是self，才会打印出我是self节点\n<a name=\"RQFsF\"></a>\n## 暂停一下：修饰符的顺序如何理解？\n已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=ue6c22681&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u4fe3b80c-310b-44fe-8997-3fbdc0a61e3)<br />image.png<br />**怎么理解呢？我们来看两个栗子**\n```javascript\n<template>\n  <div class=\"order\">\n    <div class=\"order-0\">\n      <a href=\"https://juejin.cn/\" class=\"order-parent\" @click.self.prevent=\"onClickParent\">\n        我是父节点，会跳转掘金\n        <br />\n        <span class=\"order-child\" @click=\"onClickChild\">\n          我是子节点\n        </span>\n      </a>\n      <hr />\n    </div>\n    <div class=\"order-2\">\n      <a href=\"https://juejin.cn/\" class=\"order-parent\" @click.prevent.self=\"onClickParent\">\n        我是父节点，无法跳转掘金\n        <br />\n        <span class=\"order-child\" @click=\"onClickChild\">\n          我是子节点\n        </span>\n      </a>\n    </div>\n  </div> \n</template>\n\nexport default {\n  name: 'order',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n\n```\n您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？\n\n1. 首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件\n1. 点击下面的父节点会打印出**我是父节点**，但是**不会跳转掘金**\n1. 点击上面的父节点**会**打印出**我是父节点**,**也不会跳转掘金**\n\n但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是**会**<br />**为什么？**<br />a@click.self.prevent=\"onClickParent\"的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行onClickParent回调。<br />而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就不会阻止默认事件(此时也就发生跳转了)，当然也不会触发onClickParent回调<br />同理来我们分析一下a@click.prevent.self=\"onClickParent\"<br />不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行onClickParent回调函数。<br />\n<br />**回过头看，你理解事件的顺序含义了吗？**\n<a name=\"DH91z\"></a>\n## 5. once\n顾名思义，事件只会触发一次\n```javascript\n<template>\n  <div class=\"once\" @click.once=\"onClickOnce\">\n    只触发一次\n  </div>\n</template>\n\nexport default {\n  name: 'once',\n  methods: {\n    onClickOnce () {\n      console.log('once，我只会触发一次点击事件回调')\n    }\n  }\n}\n```\n触发一次点击之后，任我再怎么点，回调怎也不会触发了。\n<a name=\"rB1Mt\"></a>\n## 6 .native\n我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用.native修饰符可以帮我们办到这点<br />**native.vue**\n```javascript\n<template>\n  <div class=\"native-custom\">\n    <input type=\"text\" @keydown=\"onKeydown\">\n  </div>\n</template>\n\nexport default {\n  name: 'nativeCustom',\n  methods: {\n    onKeydown () {\n      this.$emit('onKeydown')\n    }\n  }\n}\n```\n**custom.vue**\n```javascript\n<template>\n  <div class=\"native\">\n    <!-- 加上.native之后原生事件才得以监听成功 -->\n    <NativeCustom @onKeydown=\"onKeydown\" @click.native=\"onClick\" />\n  </div>\n</template>\n\nimport NativeCustom from '../../components/native.vue'\n\nexport default {\n  name: 'native',\n  components: {\n    NativeCustom\n  },\n  methods: {\n    onKeydown () {\n      console.log('onKeydown')\n    },\n    onClick () {\n      console.log('onClick')\n    }\n  }\n}\n\n```\n<a name=\"R2RfU\"></a>\n## 7 .passive\nvue对应 addEventListener 中的 passive 选项提供了 .passive 修饰符\n```javascript\n<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --> \n<!-- 而不会等待 `onScroll` 完成 --> \n<!-- 这其中包含 `event.preventDefault()` 的情况 --> \n\n<div v-on:scroll.passive=\"onScroll\">...</div>\n```\n**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**<br />**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**<br />**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**\n<a name=\"qD7c9\"></a>\n# v-bind修饰符\n<a name=\"Z7kub\"></a>\n## 8 .sync\n当我们想要在父组件和子组件之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要.sync修饰符即可办到<br />\n\n<a name=\"KZCOv\"></a>\n## 9 .camel\n.camel 修饰符允许在使用 DOM 模板时将 v-bind property 名称驼峰化，例如 SVG 的 viewBox property：​\n<a name=\"gux0B\"></a>\n## 10 .prop\n关于.prop修饰符官网只有这句话 .prop  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。<br />**有啥作用？**\n\n1. 通过自定义属性存储变量，避免暴露数据\n1. 防止污染 HTML 结构\n\n比如有以下代码\n```javascript\n<template>\n  <div class=\"prop\">\n    <div class=\"prop-item\" :my-name=\"prop\"></div>\n    // 最终变成了 <div my-name=\"hello prop\" class=\"prop-item\"></div>\n    <div class=\"prop-item\" :my-name.prop=\"prop2\"></div>\n    // 最终变成了<div class=\"prop-item\"></div>\n    <button @click=\"onGetResult\">获取结果</button>\n  </div>\n</template>\n\nexport default {\n  name: 'prop',\n  data () {\n    return {\n      prop: 'hello prop',\n      prop2: 'hello prop2'\n    }\n  },\n  methods: {\n    onGetResult () {\n      const $refProp = this.$refs.prop\n      const $refProp2 = this.$refs.prop2\n\n      console.log($refProp.getAttribute('my-name')) // hello prop\n      console.log($refProp2.getAttribute('my-name')) // null\n    }\n  }\n}\n\n```\n从示例上可以看出未使用.prop修饰符的my-name属性会绑定到dom节点的attribute，从而出现暴露的情况。\n<a name=\"NWe8M\"></a>\n# 鼠标修饰符\n当咱们想监听用户点击了左键、右键或者中键时也有修饰符可以快捷使用，分别是.left、.right、middle，来看个例子试试<br />根据MDN MouseEvent.button，介绍。<br />在最外层div.mouse监听mousedown事件，看下用户点击的是鼠标哪个键，三个button分别用三个修饰符快捷方式监听左键、中键、右键并打印出left、middle、right\n```javascript\n<template>\n  <div class=\"mouse\" @mousedown=\"onMousedown\">\n    <button @click.left=\"onClickBtn('left')\">left</button>\n    <button @click.middle=\"onClickBtn('middle')\">middle</button>\n    <button @click.right=\"onClickBtn('right')\">right</button>\n  </div>\n</template>\n\nexport default {\n  name: 'mouse',\n  mounted () {\n\n  },\n  methods: {\n    onClickBtn (msg) {\n      console.log(msg)\n    },\n    onMousedown (event) {\n      const mosueMsgMap = {\n        0: '鼠标左键',\n        1: '鼠标中键',\n        2: '鼠标右键'\n      }\n      console.log('点击了', mosueMsgMap[event.button])\n    }\n  }\n}\n```\n**没有带鼠标回来，中键点击暂时不能演示，后续会补上**<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718538-11650970-9341-438b-b845-a67688ff5897.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=u4ad4c271&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u74db735d-39da-43ad-b642-b24eee0ddf1)<br />mouse.gif\n<a name=\"fFSe7\"></a>\n## 11 .left\n同上例子，监听鼠标左键点击\n<a name=\"it85P\"></a>\n## 12 .right\n同上例子，监听鼠标右键点击\n<a name=\"LAxXy\"></a>\n## 13 .middle\n同上例子，监听鼠标中键点击\n<a name=\"hzYRz\"></a>\n# 表单相关修饰符\n<a name=\"Yph9D\"></a>\n## 14 .trim\n对于输入的内容，希望可以过滤首尾空格应该怎么做呢？\n```javascript\n<template>\n  <div class=\"trim\">\n    <div class=\"trim-item\">\n      <input type=\"text\" v-model=\"name\">\n      <p>用户名：<span>{{ name }}</span></p>\n    </div>\n    <div class=\"trim-item\">\n      <input type=\"text\" v-model.trim=\"name2\">\n      <p>用户名2：<span>{{ name2 }}</span></p>\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'trim',\n  data () {\n    return {\n      name: '',\n      name2: '',\n    }\n  },\n  watch: {\n    name (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n    name2 (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n  }\n}\n```\n**.trim修饰符可以很方便做到**\n<a name=\"S4q4U\"></a>\n## 15 .lazy\nv-model大家都很熟悉，默认情况下，每次input事件触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？<br />**思路1：** 绑定change事件，在事件回调中手动获取target的值<br />**思路2：** 直接使用.lazy修饰符即可达到效果\n```javascript\n<template>\n  <div class=\"lazy\">\n    <div class=\"lazy-item\">\n      <input type=\"text\" v-model=\"text\">\n      <p>无.lazy: {{ text }}</p>\n    </div>\n\n    <div class=\"lazy-item\">\n      <input type=\"text\" v-model.lazy=\"text2\">\n      <p>.lazy: {{ text2 }}</p>\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      text: '',\n      text2: ''\n    }\n  }\n}\n```\n可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，text2的数据才更新了\n<a name=\"LkaRe\"></a>\n## 16 .number\n我们知道input输入框的type哪怕是number得到的值的类型也是string，如果我们想直接拿到number类型的数据，有不想麻烦的手动转换应该怎么办呢？\n```javascript\n<template>\n  <div class=\"number\">\n    <div class=\"number-item\">\n      <p>无.number </p>\n      <input type=\"number\" v-model=\"number\">\n    </div>\n    <div class=\"number-item\">\n      <p>type:text .number </p>\n      <input type=\"text\" v-model.number=\"number1\">\n    </div>\n    <div class=\"number-item\">\n      <p>type:number .number </p>\n      <input type=\"number\" v-model.number=\"number2\">\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      number: 0,\n      number1: '',\n      number2: '',\n    }\n  },\n  watch: {\n    number (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number1 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number2 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n  }\n}\n```\n\n\n1. 第一个输入框的类型是number，但是得到的值是string\n1. 第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 parseFloat() 解析，则会返回原始的值。）\n1. 第三个输入框的类型是number，最后得到的值也是number\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=u91c65a41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u41d07f12-da60-4a2b-8499-f0209ae7331)<br />number.gif\n<a name=\"tKRUK\"></a>\n# 系统修饰符\n当点击事件或者键盘事件需要系统键同时按下才触发时.ctrl、.alt、.shift、.meta可以帮大忙噢！<br />**如下代码**\n\n1. 全局监听keydown事件，尝试看.ctrl、.alt、.shift、.meta是否被按下\n1. 分别给四个按钮加上 .ctrl、.alt、.shift、.meta修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效\n\n**注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发**\n```javascript\n<template>\n  <div class=\"system\">\n    <p>{{ msg }}</p>\n    <div class=\"buttons\">\n      <button @click.ctrl=\"onClickButon('ctrl')\">ctrl</button>\n      <button @click.alt=\"onClickButon('alt')\">alt</button>\n      <button @click.shift=\"onClickButon('shift')\">shift</button>\n      <button @click.meta=\"onClickButon('meta')\">meta</button>\n    </div>\n  </div>  \n</template>\n\nexport default {\n  name: 'system',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) => {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}\n```\n<a name=\"vrHrH\"></a>\n## 17 .ctrl\n仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"EDUwo\"></a>\n## 18 .alt\n仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"JBKLM\"></a>\n## 19 .shift\n仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"UnowS\"></a>\n## 20 .meta\n仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Xw5H6\"></a>\n## 21 .exact\n严格来说这.exact不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发.alt也可以触发.shift。<br />还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=uaac7048a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u98a03c13-3c8f-42ff-aaf6-d3be97c1223)<br />system2.gif\n\n1. **只想某个系统修饰键按下时才触发点击**\n1. **没有任何系统修饰符被按下的时候才触发点击**\n\n要实现上面的需求.exact就派上用场了，用上面的例子稍作改造\n```javascript\n<template>\n  <div class=\"extra\">\n    <p>{{ msg }}</p>\n    <div class=\"buttons\">\n      <button @click.ctrl.exact=\"onClickButon('ctrl')\">ctrl</button>\n      <button @click.alt.exact=\"onClickButon('alt')\">alt</button>\n      <button @click.shift.exact=\"onClickButon('shift')\">shift</button>\n      <button @click.meta.exact=\"onClickButon('meta')\">meta</button>\n      <button @click.exact=\"onClickButon('非系统键')\">非系统键</button>\n    </div>\n  </div>  \n</template>\n\nexport default {\n  name: 'extra',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) => {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}\n```\n<a name=\"QRDoL\"></a>\n# 按键修饰符\n在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。<br />如下代码，我们分别给enter、tab、delete等按键指定了keydown事件，当在指定的输入框中按下指定的键盘，会打印出enter、tab、delete等，其他按键在输入框中无法触发该console\n```javascript\n<template>\n  <div class=\"key-modifiers\">\n    <div class=\"key-modifiers-item\">\n      enter:\n      <input type=\"text\" @keydown.enter=\"onKeydown('enter')\">\n    </div>\n    <div class=\"key-modifiers-item\">\n      tab:\n      <input type=\"text\" @keydown.tab=\"onKeydown('tab')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      delete:\n      <input type=\"text\" @keydown.delete=\"onKeydown('delete')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      esc:\n      <input type=\"text\" @keydown.esc=\"onKeydown('esc')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      space:\n      <input type=\"text\" @keydown.space=\"onKeydown('space')\">\n    </div> \n    <div class=\"key-modifiers-item\">\n      up:\n      <input type=\"text\" @keydown.up=\"onKeydown('up')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      down:\n      <input type=\"text\" @keydown.down=\"onKeydown('down')\">\n    </div> \n    <div class=\"key-modifiers-item\">\n      left:\n      <input type=\"text\" @keydown.left=\"onKeydown('left')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      right:\n      <input type=\"text\" @keydown.right=\"onKeydown('right')\">\n    </div>  \n    \n    <div class=\"key-modifiers-item\">\n      page-down:\n      <input type=\"text\" @keydown.page-down=\"onKeydown('page-down')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      page-up:\n      <input type=\"text\" @keydown.page-up=\"onKeydown('page-up')\">\n    </div>  \n  </div>\n</template>\n\nexport default {\n  name: 'keyModifiers',\n  methods: {\n    onKeydown (keyName) {\n      console.log(keyName)\n    }\n  }\n}\n\n```\n<a name=\"C8jGV\"></a>\n## 22 .enter\n在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Jw4r0\"></a>\n## 23 .tab\n在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"U7gUW\"></a>\n## 24 .delete\n在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"q769F\"></a>\n## 25 .esc\n在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"lSVHX\"></a>\n## 26 .space\n在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"CJR2h\"></a>\n## 27 .up\n在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"jtFso\"></a>\n## 28 .down\n在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"KcsBn\"></a>\n## 29 .left\n在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Mrnjd\"></a>\n## 30 .right\n在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"P5Hyd\"></a>\n## 31 .page-down\n在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"vV3ei\"></a>\n## 32 .page-up\n在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"iSrWh\"></a>\n# 如何自定义按键修饰符\nvue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？<br />通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。\n\n```javascript\nVue.config.keyCodes = {\n  q: 81\n}\n\n<div class=\"custom\">\n  <input type=\"text\" @keydown.q=\"f1Keydown\">\n</div>\n\nexport default {\n  name: 'custom',\n  methods: {\n    f1Keydown () {\n      console.log('按下了q')\n    }\n  }\n}\n```\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"pxcyU\"></h1><h1 id=\"th4rJ\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">前言</span></h1><p id=\"ua1c2d6c9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">vue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！</span></p><p id=\"uae0d1073\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">耽误您15分钟您可以收获：</span></p><ol class=\"ne-ol\"><li id=\"u614a523c\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用</span></li><li id=\"uc2cb978d\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">如何利用webpack动态注册vue路由，再也不手写路由配置啦！</span></li></ol><p id=\"udb6522f9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">文章中例子都放在了github源码上，也可以点击直接看例子</span></p><h1 id=\"Q2cOK\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">如何动态注册路由？</span></h1><p id=\"ua21b7e1e\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.</span></p><p id=\"u3ecae803\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">有什么办法可以帮我们自动完成路由注册呢？</span></p><h2 id=\"kP2Yc\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">1. 文件目录结构</span></h2><p id=\"u5449f10e\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">目录结构（已去除其他文件目录）大概如下</span></p><pre data-language=\"javascript\" id=\"kC7Aq\" class=\"ne-codeblock\">├── package.json\n└── src\n    ├── App.vue\n    ├── main.js\n    ├── router.js\n    └── views\n        ├── About.vue\n        ├── Home.vue\n        └── modifiers\n            ├── capture.vue\n            ├── once.vue\n            ├── order.vue\n            ├── passive.vue\n            ├── prevent.vue\n            ├── self.vue\n            └── stop.vue\n            └── ...</pre><h2 id=\"rxTi1\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">2. 期望的路由配置</span></h2><p id=\"uedb39fa1\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">最终给到</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">vue-router</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">的配置大概长下面这个样子，每个配置最重要的部分分别是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">path</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">name</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">和</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">component</span></p><pre data-language=\"javascript\" id=\"TjFd3\" class=\"ne-codeblock\">[\n  {\n    &quot;path&quot;: &quot;/home&quot;,\n    &quot;name&quot;: &quot;home&quot;,\n    &quot;component&quot;: {\n      &quot;name&quot;: &quot;Home&quot;,\n      &quot;methods&quot;: {},\n      &quot;staticRenderFns&quot;: [],\n      &quot;_compiled&quot;: true,\n      &quot;_scopeId&quot;: &quot;data-v-fae5bece&quot;,\n      &quot;beforeCreate&quot;: [\n        null\n      ],\n      &quot;beforeDestroy&quot;: [\n        null\n      ],\n      &quot;__file&quot;: &quot;src/views/Home.vue&quot;\n    }\n  },\n  {\n    &quot;path&quot;: &quot;/modifiers/capture&quot;,\n    &quot;name&quot;: &quot;modifiersCapture&quot;,\n    &quot;component&quot;: {\n      &quot;name&quot;: &quot;capture&quot;,\n      &quot;methods&quot;: {},\n      &quot;staticRenderFns&quot;: [],\n      &quot;_compiled&quot;: true,\n      &quot;_scopeId&quot;: &quot;data-v-63b4eeee&quot;,\n      &quot;beforeCreate&quot;: [\n        null\n      ],\n      &quot;beforeDestroy&quot;: [\n        null\n      ],\n      &quot;__file&quot;: &quot;src/views/modifiers/capture.vue&quot;\n    }\n  },\n  ... // 其他路由配置\n]</pre><p id=\"uf5b53993\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /><br /></span></p><h2 id=\"r0SDU\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">3. require.context实现动态注册路由</span></h2><p id=\"uec45424d\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下</span></p><pre data-language=\"javascript\" id=\"VTVVx\" class=\"ne-codeblock\">const registerRoutes = () =&gt; {\n  const contextInfo = require.context('./views', true, /.vue$/)\n  const routes = contextInfo.keys().map((filePath) =&gt; {\n    // filePath 形如 ./Home.vue、./modifiers/capture.vue\n    // path我们希望是/home、/modifiers/capture\n    // 所以需要把开头的./和.vue都替换为空\n    const path = filePath.toLowerCase().replace(/^\\.|\\.vue/g, '')\n    // name的话将/home、/modifiers/capture转成小驼峰即可\n    // 把开头的/先替换掉，再把第一个/后的单词变成大写就可以了\n    const name = path.replace(/^\\//, '').replace(/\\/(\\w)/, ($0, $1) =&gt; $1.toUpperCase())\n    // 通过require去读取.vue文件内容\n    const component = require(`./views${filePath.replace(/^\\./, '')}`).default\n\n    return {\n      path,\n      name,\n      component\n    }\n  })\n\n  return routes\n}\n</pre><p id=\"u6638b89b\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"></span></p><p id=\"u45fc22ff\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">效果</span></strong></p><p id=\"u55167b83\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果</span></p><p id=\"u52d96441\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(63, 63, 63); font-size: 16px\"><br /></span></p><h1 id=\"C7PDV\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">事件修饰符</span></h1><h2 id=\"NdTWe\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">1. 阻止冒泡的两种方式</span></h2><p id=\"u432abee9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><pre data-language=\"javascript\" id=\"Jej8E\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;parent&quot; @click=&quot;onClickParent&quot;&gt;\n    我是爸爸\n    &lt;div class=&quot;child&quot; @click=&quot;onClickChild&quot;&gt;\n      我是儿子\n    &lt;/div&gt;\n  &lt;/div&gt; \n&lt;/template&gt;\n\nexport default {\n  name: 'stop',\n  methods: {\n    onClickParent () {\n      console.log('我是爸爸')\n    },\n    onClickChild () {\n      console.log('我是儿子')\n    }\n  }\n}</pre><p id=\"ue288b8af\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(152, 195, 121); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><p id=\"u06d45470\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">点</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">击子节点</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">的时候因为事件冒泡的缘故不仅会打印出</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">我是儿子</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">还会打印</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">我是爸爸</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">。有什么办法可以阻止子节点的</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">事件冒泡</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">呢？</span></p><p id=\"u31500ace\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif\" width=\"1\" id=\"ufdb6c334\" class=\"ne-image\"></p><p id=\"u1a479574\" class=\"ne-p\"><br></p><h3 id=\"oWzps\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 17px\">1 .stop</span></h3><p id=\"u4de78f22\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。</span></p><p id=\"u14416e59\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">当添加上</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.stop</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符时，只会出现</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">我是儿子</span></p><pre data-language=\"javascript\" id=\"TVv7R\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;parent&quot; @click=&quot;onClickParent&quot;&gt;\n    我是爸爸\n    &lt;div class=&quot;child&quot; @click.stop=&quot;onClickChild&quot;&gt;\n      我是儿子\n    &lt;/div&gt;\n  &lt;/div&gt; \n&lt;/template&gt;</pre><h3 id=\"uNVNl\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 17px\">2. event.stopPropagation</span></h3><p id=\"u71246161\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">当然了，我们也可以通过调用</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">event.stopPropagation</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节</span></p><pre data-language=\"javascript\" id=\"JJeve\" class=\"ne-codeblock\">export default {\n  name: 'stop',\n  methods: {\n    onClickChild (event) {\n      console.log('我是儿子')\n      event.stopPropagation()\n    }\n  }\n}</pre><h2 id=\"IIPEs\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">2. 阻止默认事件的两种方式</span></h2><p id=\"ufcf19143\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">vue中阻止冒泡有两种方式，那阻止默认事件呢？</span></p><h3 id=\"fkfpq\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 17px\">1 .prevent</span></h3><pre data-language=\"javascript\" id=\"N0T9h\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;prevent&quot;&gt;\n    &lt;a href=&quot;https://juejin.cn/&quot; @click=&quot;onNoPrevent&quot;&gt;点击跳转掘金&lt;/a&gt;\n    &lt;br /&gt;\n    &lt;br /&gt;\n    &lt;a href=&quot;https://juejin.cn/&quot; @click.prevent=&quot;onPrevent&quot;&gt;阻止默认事件，无法跳转掘金&lt;/a&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'prevent',\n  methods: {\n    onNoPrevent () {\n      console.log('未阻止默认事件')\n    },\n    onPrevent () {\n      console.log('阻止默认事件')\n    }\n  }\n}</pre><p id=\"ubcb1c305\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">只要添加</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.prevent</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">轻松实现阻止默认事件</span></p><h3 id=\"B1pgj\"><span class=\"ne-text\">2.event.preventDefault()</span></h3><p id=\"uee407897\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">和阻止冒泡一样，我们也可以通过调用事件对象的</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">preventDefault</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">方法来阻止默认事件</span></p><pre data-language=\"javascript\" id=\"o9tKY\" class=\"ne-codeblock\">export default {\n  name: 'prevent',\n  methods: {\n    onPrevent (event) {\n      console.log('阻止默认事件')\n      event.preventDefault()\n    }\n  }\n}</pre><h2 id=\"LqMyK\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">3 .capture</span></h2><p id=\"u6f06ee36\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">默认情况下，事件流是以</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">冒泡</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">(由里向外)的形式传递的，如果想以</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">捕获（由外向里）</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">的形式应该怎么办呢？</span></p><pre data-language=\"javascript\" id=\"OnlN9\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;capture parent&quot; @click.capture=&quot;onClickParent&quot;&gt;\n    父节点\n    &lt;div class=&quot;child&quot; @click.capture=&quot;onClickChild&quot;&gt;自节点&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'capture',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}</pre><p id=\"u6b3fafbd\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(152, 195, 121); font-size: 12px; background-color: rgb(40, 44, 52)\"></span></p><p id=\"u2016e654\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">不加</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">catpture</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符，点击</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">子节点</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了</span></p><h2 id=\"HAwJz\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">4 .self</span></h2><p id=\"uf3b37375\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">只有当</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">event.target</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">是当前元素自身时才会触发事件回调函数</span></p><pre data-language=\"javascript\" id=\"YKen2\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;self&quot; @click.self=&quot;onClickSelf&quot;&gt;\n    &lt;div class=&quot;inner&quot; @click=&quot;onClickInner&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'self',\n  methods: {\n    onClickSelf () {\n      console.log('我是self节点')\n    },\n    onClickInner () {\n      console.log('我是inner节点')\n    }\n  }\n}</pre><p id=\"u5c09fae3\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(152, 195, 121); font-size: 12px; background-color: rgb(40, 44, 52)\"></span></p><p id=\"u73c55023\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">不加</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">self</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符的话，点击</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">inner</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">节点也会触发</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">self</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">的事件，加了之后只有触发事件的元素本身是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">self</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">，才会打印出</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">我是self节点</span></p><h2 id=\"RQFsF\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">暂停一下：修饰符的顺序如何理解？</span></h2><p id=\"u849019ff\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话</span></p><p id=\"u9c96fbfa\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif\" width=\"1\" id=\"ue6c22681\" class=\"ne-image\"></p><p id=\"u1a23ba6b\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(136, 136, 136); font-size: 12px\">image.png</span></p><p id=\"u13e865eb\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">怎么理解呢？我们来看两个栗子</span></strong></p><pre data-language=\"javascript\" id=\"ik1zw\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;order&quot;&gt;\n    &lt;div class=&quot;order-0&quot;&gt;\n      &lt;a href=&quot;https://juejin.cn/&quot; class=&quot;order-parent&quot; @click.self.prevent=&quot;onClickParent&quot;&gt;\n        我是父节点，会跳转掘金\n        &lt;br /&gt;\n        &lt;span class=&quot;order-child&quot; @click=&quot;onClickChild&quot;&gt;\n          我是子节点\n        &lt;/span&gt;\n      &lt;/a&gt;\n      &lt;hr /&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;order-2&quot;&gt;\n      &lt;a href=&quot;https://juejin.cn/&quot; class=&quot;order-parent&quot; @click.prevent.self=&quot;onClickParent&quot;&gt;\n        我是父节点，无法跳转掘金\n        &lt;br /&gt;\n        &lt;span class=&quot;order-child&quot; @click=&quot;onClickChild&quot;&gt;\n          我是子节点\n        &lt;/span&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt; \n&lt;/template&gt;\n\nexport default {\n  name: 'order',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n</pre><p id=\"u45abffaf\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？</span></p><ol class=\"ne-ol\"><li id=\"u026e0880\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件</span></li><li id=\"u699c1bdc\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">点击下面的父节点会打印出</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">我是父节点</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">，但是</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">不会跳转掘金</span></strong></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u3d45e281\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">点击上面的父节点</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">会</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">打印出</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">我是父节点</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">,</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">也不会跳转掘金</span></strong></li></ol><p id=\"u3f69b92c\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">会</span></strong></p><p id=\"uc38b3260\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">为什么？</span></strong></p><p id=\"u215be7d4\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">a@click.self.prevent=&quot;onClickParent&quot;</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">onClickParent</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">回调。</span></p><p id=\"ub1da1b63\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">不会阻止默认事件</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">(此时也就发生跳转了)，当然也不会触发</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">onClickParent</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">回调</span></p><p id=\"uabac06b5\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">同理来我们分析一下</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">a@click.prevent.self=&quot;onClickParent&quot;</span></p><p id=\"ud0b596b4\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">onClickParent</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">回调函数。</span></p><p id=\"ua240052f\" class=\"ne-p\" style=\"text-align: left\"><br></p><p id=\"ucb88ba29\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">回过头看，你理解事件的顺序含义了吗？</span></strong></p><h2 id=\"DH91z\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">5. once</span></h2><p id=\"u06a5cb91\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">顾名思义，事件只会触发一次</span></p><pre data-language=\"javascript\" id=\"ODOcx\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;once&quot; @click.once=&quot;onClickOnce&quot;&gt;\n    只触发一次\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'once',\n  methods: {\n    onClickOnce () {\n      console.log('once，我只会触发一次点击事件回调')\n    }\n  }\n}</pre><p id=\"ucfa4a5b4\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">触发一次点击之后，任我再怎么点，回调怎也不会触发了。</span></p><h2 id=\"rB1Mt\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">6 .native</span></h2><p id=\"u918ccba9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.native</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">修饰符可以帮我们办到这点</span></p><p id=\"uc9adf63a\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">native.vue</span></strong></p><pre data-language=\"javascript\" id=\"tr0Jb\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;native-custom&quot;&gt;\n    &lt;input type=&quot;text&quot; @keydown=&quot;onKeydown&quot;&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'nativeCustom',\n  methods: {\n    onKeydown () {\n      this.$emit('onKeydown')\n    }\n  }\n}</pre><p id=\"u9d802653\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">custom.vue</span></strong></p><pre data-language=\"javascript\" id=\"muZrE\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;native&quot;&gt;\n    &lt;!-- 加上.native之后原生事件才得以监听成功 --&gt;\n    &lt;NativeCustom @onKeydown=&quot;onKeydown&quot; @click.native=&quot;onClick&quot; /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nimport NativeCustom from '../../components/native.vue'\n\nexport default {\n  name: 'native',\n  components: {\n    NativeCustom\n  },\n  methods: {\n    onKeydown () {\n      console.log('onKeydown')\n    },\n    onClick () {\n      console.log('onClick')\n    }\n  }\n}\n</pre><h2 id=\"R2RfU\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">7 .passive</span></h2><p id=\"u3aaf4433\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">vue对应 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">addEventListener</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> 中的 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">passive</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> 选项提供了 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.passive</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> 修饰符</span></p><pre data-language=\"javascript\" id=\"VOkR9\" class=\"ne-codeblock\">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt; \n&lt;!-- 而不会等待 `onScroll` 完成 --&gt; \n&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt; \n\n&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</pre><p id=\"u02d48cc4\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p id=\"ua36224c6\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p id=\"ua638a5ee\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><h1 id=\"qD7c9\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">v-bind修饰符</span></h1><h2 id=\"Z7kub\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">8 .sync</span></h2><p id=\"u1e9120fe\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">当我们想要在</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">父组件</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">和</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">子组件</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.sync</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">修饰符即可办到</span></p><p id=\"u5f314776\" class=\"ne-p\" style=\"text-align: left\"><br></p><h2 id=\"KZCOv\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">9 .camel</span></h2><p id=\"ub609f4e9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.camel</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> 修饰符允许在使用 DOM 模板时将 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">v-bind</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> property 名称驼峰化，例如 SVG 的 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">viewBox</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> property：</span><span class=\"ne-text\" style=\"color: rgb(152, 195, 121); font-size: 12px; background-color: rgb(40, 44, 52)\"></span></p><h2 id=\"gux0B\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">10 .prop</span></h2><p id=\"ud239f232\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">关于.prop修饰符官网只有这句话</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.prop</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。</span></p><p id=\"u83eab9d2\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">有啥作用？</span></strong></p><ol class=\"ne-ol\"><li id=\"u0c2d02f3\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">通过自定义属性存储变量，避免暴露数据</span></li><li id=\"ufab4e34e\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">防止污染 HTML 结构</span></li></ol><p id=\"u8e8dcaef\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">比如有以下代码</span></p><pre data-language=\"javascript\" id=\"ziFk9\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;prop&quot;&gt;\n    &lt;div class=&quot;prop-item&quot; :my-name=&quot;prop&quot;&gt;&lt;/div&gt;\n    // 最终变成了 &lt;div my-name=&quot;hello prop&quot; class=&quot;prop-item&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;prop-item&quot; :my-name.prop=&quot;prop2&quot;&gt;&lt;/div&gt;\n    // 最终变成了&lt;div class=&quot;prop-item&quot;&gt;&lt;/div&gt;\n    &lt;button @click=&quot;onGetResult&quot;&gt;获取结果&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'prop',\n  data () {\n    return {\n      prop: 'hello prop',\n      prop2: 'hello prop2'\n    }\n  },\n  methods: {\n    onGetResult () {\n      const $refProp = this.$refs.prop\n      const $refProp2 = this.$refs.prop2\n\n      console.log($refProp.getAttribute('my-name')) // hello prop\n      console.log($refProp2.getAttribute('my-name')) // null\n    }\n  }\n}\n</pre><p id=\"u7bde18fa\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">从示例上可以看出未使用</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.prop</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符的</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">my-name</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">属性会绑定到dom节点的attribute，从而出现暴露的情况。</span></p><h1 id=\"NWe8M\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">鼠标修饰符</span></h1><p id=\"u77b76e1c\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">当咱们想监听用户点击了</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">左键</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">右键</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">或者</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">中键</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">时也有修饰符可以快捷使用，分别是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.left</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.right</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">middle</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">，来看个例子试试</span></p><p id=\"u034c0d8c\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">根据MDN MouseEvent.button，介绍。</span></p><p id=\"u85e7910c\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">在最外层</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">div.mouse</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">监听</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">mousedown</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">事件，看下用户点击的是鼠标哪个键，三个</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">button</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">分别用三个修饰符快捷方式监听</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">左键</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">中键</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">右键</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">并打印出</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">left</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">middle</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">right</span></p><pre data-language=\"javascript\" id=\"OJArw\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;mouse&quot; @mousedown=&quot;onMousedown&quot;&gt;\n    &lt;button @click.left=&quot;onClickBtn('left')&quot;&gt;left&lt;/button&gt;\n    &lt;button @click.middle=&quot;onClickBtn('middle')&quot;&gt;middle&lt;/button&gt;\n    &lt;button @click.right=&quot;onClickBtn('right')&quot;&gt;right&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'mouse',\n  mounted () {\n\n  },\n  methods: {\n    onClickBtn (msg) {\n      console.log(msg)\n    },\n    onMousedown (event) {\n      const mosueMsgMap = {\n        0: '鼠标左键',\n        1: '鼠标中键',\n        2: '鼠标右键'\n      }\n      console.log('点击了', mosueMsgMap[event.button])\n    }\n  }\n}</pre><p id=\"u0a41ddbe\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">没有带鼠标回来，中键点击暂时不能演示，后续会补上</span></strong></p><p id=\"u5bf141f5\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718538-11650970-9341-438b-b845-a67688ff5897.gif\" width=\"1\" id=\"u4ad4c271\" class=\"ne-image\"></p><p id=\"ua6fe34d8\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(136, 136, 136); font-size: 12px\">mouse.gif</span></p><h2 id=\"fFSe7\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">11 .left</span></h2><p id=\"u73cf0bd7\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">同上例子，监听鼠标左键点击</span></p><h2 id=\"it85P\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">12 .right</span></h2><p id=\"u89c91167\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">同上例子，监听鼠标右键点击</span></p><h2 id=\"LAxXy\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">13 .middle</span></h2><p id=\"u7cc0d569\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">同上例子，监听鼠标中键点击</span></p><h1 id=\"hzYRz\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">表单相关修饰符</span></h1><h2 id=\"Yph9D\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">14 .trim</span></h2><p id=\"u1cb0902d\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">对于输入的内容，希望可以</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">过滤首尾空格</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">应该怎么做呢？</span></p><pre data-language=\"javascript\" id=\"Bx82u\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;trim&quot;&gt;\n    &lt;div class=&quot;trim-item&quot;&gt;\n      &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;\n      &lt;p&gt;用户名：&lt;span&gt;{{ name }}&lt;/span&gt;&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;trim-item&quot;&gt;\n      &lt;input type=&quot;text&quot; v-model.trim=&quot;name2&quot;&gt;\n      &lt;p&gt;用户名2：&lt;span&gt;{{ name2 }}&lt;/span&gt;&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'trim',\n  data () {\n    return {\n      name: '',\n      name2: '',\n    }\n  },\n  watch: {\n    name (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n    name2 (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n  }\n}</pre><p id=\"u9f76bc9c\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">.trim修饰符可以很方便做到</span></strong></p><h2 id=\"S4q4U\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">15 .lazy</span></h2><p id=\"u30cf5619\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">v-model</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">大家都很熟悉，默认情况下，每次</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">input事件</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？</span></p><p id=\"u17cf87ef\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">思路1：</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">绑定change事件，在事件回调中手动获取target的值</span></p><p id=\"u08b1b8a0\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">思路2：</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">直接使用</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.lazy</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符即可达到效果</span></p><pre data-language=\"javascript\" id=\"HVqqo\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;lazy&quot;&gt;\n    &lt;div class=&quot;lazy-item&quot;&gt;\n      &lt;input type=&quot;text&quot; v-model=&quot;text&quot;&gt;\n      &lt;p&gt;无.lazy: {{ text }}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=&quot;lazy-item&quot;&gt;\n      &lt;input type=&quot;text&quot; v-model.lazy=&quot;text2&quot;&gt;\n      &lt;p&gt;.lazy: {{ text2 }}&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      text: '',\n      text2: ''\n    }\n  }\n}</pre><p id=\"udee19840\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">text2</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">的数据才更新了</span></p><h2 id=\"LkaRe\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">16 .number</span></h2><p id=\"u7b7164ba\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">我们知道</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">input</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">输入框的</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">type</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">哪怕是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">number</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">得到的值的类型也是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">string</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">，如果我们想直接拿到</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">number</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">类型的数据，有不想麻烦的手动转换应该怎么办呢？</span></p><pre data-language=\"javascript\" id=\"I5e3R\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;number&quot;&gt;\n    &lt;div class=&quot;number-item&quot;&gt;\n      &lt;p&gt;无.number &lt;/p&gt;\n      &lt;input type=&quot;number&quot; v-model=&quot;number&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;number-item&quot;&gt;\n      &lt;p&gt;type:text .number &lt;/p&gt;\n      &lt;input type=&quot;text&quot; v-model.number=&quot;number1&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;number-item&quot;&gt;\n      &lt;p&gt;type:number .number &lt;/p&gt;\n      &lt;input type=&quot;number&quot; v-model.number=&quot;number2&quot;&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      number: 0,\n      number1: '',\n      number2: '',\n    }\n  },\n  watch: {\n    number (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number1 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number2 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n  }\n}</pre><p id=\"u821a9205\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><ol class=\"ne-ol\"><li id=\"ue47ec899\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">第一个输入框的类型是number，但是得到的值是string</span></li><li id=\"u4bc68a12\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">parseFloat()</span><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\"> 解析，则会返回原始的值。）</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u76d45212\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">第三个输入框的类型是number，最后得到的值也是number</span></li></ol><p id=\"uab3ceedb\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif\" width=\"1\" id=\"u91c65a41\" class=\"ne-image\"></p><p id=\"u8d6fc7b8\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(136, 136, 136); font-size: 12px\">number.gif</span></p><h1 id=\"tKRUK\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">系统修饰符</span></h1><p id=\"ufaa7e651\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">当点击事件或者键盘事件需要系统键同时按下才触发时</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.ctrl</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.alt</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.shift</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.meta</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">可以帮大忙噢！</span></p><p id=\"u5fcc32c7\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">如下代码</span></strong></p><ol class=\"ne-ol\"><li id=\"uf606973f\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">全局监听keydown事件，尝试看</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.ctrl</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.alt</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.shift</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.meta</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">是否被按下</span></li><li id=\"u2bc1ab75\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">分别给四个按钮加上</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.ctrl</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.alt</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.shift</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.meta</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效</span></li></ol><p id=\"u91bd6c9d\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发</span></strong></p><pre data-language=\"javascript\" id=\"sEv8K\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;system&quot;&gt;\n    &lt;p&gt;{{ msg }}&lt;/p&gt;\n    &lt;div class=&quot;buttons&quot;&gt;\n      &lt;button @click.ctrl=&quot;onClickButon('ctrl')&quot;&gt;ctrl&lt;/button&gt;\n      &lt;button @click.alt=&quot;onClickButon('alt')&quot;&gt;alt&lt;/button&gt;\n      &lt;button @click.shift=&quot;onClickButon('shift')&quot;&gt;shift&lt;/button&gt;\n      &lt;button @click.meta=&quot;onClickButon('meta')&quot;&gt;meta&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;  \n&lt;/template&gt;\n\nexport default {\n  name: 'system',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) =&gt; {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}</pre><h2 id=\"vrHrH\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">17 .ctrl</span></h2><p id=\"u64329c6b\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"EDUwo\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">18 .alt</span></h2><p id=\"u38c5ac20\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"JBKLM\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">19 .shift</span></h2><p id=\"uf3481f3f\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"UnowS\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">20 .meta</span></h2><p id=\"u1f33c1d8\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"Xw5H6\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">21 .exact</span></h2><p id=\"ua62785aa\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">严格来说这</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.exact</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.alt</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">也可以触发</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.shift</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">。</span></p><p id=\"u97cf7b30\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发</span></p><p id=\"u041103f6\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif\" width=\"1\" id=\"uaac7048a\" class=\"ne-image\"></p><p id=\"uf5f71344\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(136, 136, 136); font-size: 12px\">system2.gif</span></p><ol class=\"ne-ol\"><li id=\"ue2720757\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">只想某个系统修饰键按下时才触发点击</span></strong></li><li id=\"ua773930b\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">没有任何系统修饰符被按下的时候才触发点击</span></strong></li></ol><p id=\"u72b0ed7d\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">要实现上面的需求</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.exact</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">就派上用场了，用上面的例子稍作改造</span></p><pre data-language=\"javascript\" id=\"RfSIX\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;extra&quot;&gt;\n    &lt;p&gt;{{ msg }}&lt;/p&gt;\n    &lt;div class=&quot;buttons&quot;&gt;\n      &lt;button @click.ctrl.exact=&quot;onClickButon('ctrl')&quot;&gt;ctrl&lt;/button&gt;\n      &lt;button @click.alt.exact=&quot;onClickButon('alt')&quot;&gt;alt&lt;/button&gt;\n      &lt;button @click.shift.exact=&quot;onClickButon('shift')&quot;&gt;shift&lt;/button&gt;\n      &lt;button @click.meta.exact=&quot;onClickButon('meta')&quot;&gt;meta&lt;/button&gt;\n      &lt;button @click.exact=&quot;onClickButon('非系统键')&quot;&gt;非系统键&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;  \n&lt;/template&gt;\n\nexport default {\n  name: 'extra',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) =&gt; {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}</pre><h1 id=\"QRDoL\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">按键修饰符</span></h1><p id=\"u4d7607d4\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。</span></p><p id=\"u90021919\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">如下代码，我们分别给</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">enter</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">tab</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">delete</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">等按键指定了</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">keydown</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">事件，当在指定的输入框中按下指定的键盘，会打印出</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">enter</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">tab</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">delete</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">等，其他按键在输入框中无法触发该console</span></p><pre data-language=\"javascript\" id=\"B9SEe\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;key-modifiers&quot;&gt;\n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      enter:\n      &lt;input type=&quot;text&quot; @keydown.enter=&quot;onKeydown('enter')&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      tab:\n      &lt;input type=&quot;text&quot; @keydown.tab=&quot;onKeydown('tab')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      delete:\n      &lt;input type=&quot;text&quot; @keydown.delete=&quot;onKeydown('delete')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      esc:\n      &lt;input type=&quot;text&quot; @keydown.esc=&quot;onKeydown('esc')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      space:\n      &lt;input type=&quot;text&quot; @keydown.space=&quot;onKeydown('space')&quot;&gt;\n    &lt;/div&gt; \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      up:\n      &lt;input type=&quot;text&quot; @keydown.up=&quot;onKeydown('up')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      down:\n      &lt;input type=&quot;text&quot; @keydown.down=&quot;onKeydown('down')&quot;&gt;\n    &lt;/div&gt; \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      left:\n      &lt;input type=&quot;text&quot; @keydown.left=&quot;onKeydown('left')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      right:\n      &lt;input type=&quot;text&quot; @keydown.right=&quot;onKeydown('right')&quot;&gt;\n    &lt;/div&gt;  \n    \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      page-down:\n      &lt;input type=&quot;text&quot; @keydown.page-down=&quot;onKeydown('page-down')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      page-up:\n      &lt;input type=&quot;text&quot; @keydown.page-up=&quot;onKeydown('page-up')&quot;&gt;\n    &lt;/div&gt;  \n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'keyModifiers',\n  methods: {\n    onKeydown (keyName) {\n      console.log(keyName)\n    }\n  }\n}\n</pre><h2 id=\"C8jGV\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">22 .enter</span></h2><p id=\"ud5f87782\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"Jw4r0\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">23 .tab</span></h2><p id=\"u9c9e02bc\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"U7gUW\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">24 .delete</span></h2><p id=\"uc1a938d3\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"q769F\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">25 .esc</span></h2><p id=\"ub6706d3d\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"lSVHX\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">26 .space</span></h2><p id=\"u71878930\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"CJR2h\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">27 .up</span></h2><p id=\"ub10f88fd\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"jtFso\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">28 .down</span></h2><p id=\"u9dfc216b\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"KcsBn\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">29 .left</span></h2><p id=\"u700fb838\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"Mrnjd\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">30 .right</span></h2><p id=\"ub38af451\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"P5Hyd\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">31 .page-down</span></h2><p id=\"ufd717625\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"vV3ei\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">32 .page-up</span></h2><p id=\"u8e8f7298\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h1 id=\"iSrWh\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">如何自定义按键修饰符</span></h1><p id=\"ue30e99ce\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">vue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？</span></p><p id=\"uac1c7481\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。</span></p><p id=\"ub35a9201\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><pre data-language=\"javascript\" id=\"yT5kG\" class=\"ne-codeblock\">Vue.config.keyCodes = {\n  q: 81\n}\n\n&lt;div class=&quot;custom&quot;&gt;\n  &lt;input type=&quot;text&quot; @keydown.q=&quot;f1Keydown&quot;&gt;\n&lt;/div&gt;\n\nexport default {\n  name: 'custom',\n  methods: {\n    f1Keydown () {\n      console.log('按下了q')\n    }\n  }\n}</pre><p id=\"u375923cb\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><p id=\"u99728a98\" class=\"ne-p\" style=\"text-align: left\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"pxcyU\" id=\"pxcyU\"><br></h1><h1 data-lake-id=\"th4rJ\" id=\"th4rJ\" style=\"text-align: center\"><span data-lake-id=\"ud7ebaac4\" id=\"ud7ebaac4\" style=\"color: rgb(72, 179, 120)\">前言</span></h1><p data-lake-id=\"ua1c2d6c9\" id=\"ua1c2d6c9\" style=\"text-align: left\"><span data-lake-id=\"u949c65d8\" id=\"u949c65d8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！</span></p><p data-lake-id=\"uae0d1073\" id=\"uae0d1073\" style=\"text-align: left\"><span data-lake-id=\"u549699a9\" id=\"u549699a9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">耽误您15分钟您可以收获：</span></p><ol list=\"u8ac9aa71\"><li fid=\"ub7e94663\" data-lake-id=\"u614a523c\" id=\"u614a523c\" style=\"text-align: left\"><span data-lake-id=\"u368dcddb\" id=\"u368dcddb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用</span></li><li fid=\"ub7e94663\" data-lake-id=\"uc2cb978d\" id=\"uc2cb978d\" style=\"text-align: left\"><span data-lake-id=\"ufb257f98\" id=\"ufb257f98\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如何利用webpack动态注册vue路由，再也不手写路由配置啦！</span></li></ol><p data-lake-id=\"udb6522f9\" id=\"udb6522f9\" style=\"text-align: left\"><span data-lake-id=\"udfa5e871\" id=\"udfa5e871\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">文章中例子都放在了github源码上，也可以点击直接看例子</span></p><h1 data-lake-id=\"Q2cOK\" id=\"Q2cOK\" style=\"text-align: center\"><span data-lake-id=\"uaf42a95d\" id=\"uaf42a95d\" style=\"color: rgb(72, 179, 120)\">如何动态注册路由？</span></h1><p data-lake-id=\"ua21b7e1e\" id=\"ua21b7e1e\" style=\"text-align: left\"><span data-lake-id=\"u482de697\" id=\"u482de697\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.</span></p><p data-lake-id=\"u3ecae803\" id=\"u3ecae803\" style=\"text-align: left\"><span data-lake-id=\"u0bb0022a\" id=\"u0bb0022a\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">有什么办法可以帮我们自动完成路由注册呢？</span></p><h2 data-lake-id=\"kP2Yc\" id=\"kP2Yc\" style=\"text-align: center\"><span data-lake-id=\"uf42b2062\" id=\"uf42b2062\" style=\"color: rgb(72, 179, 120)\">1. 文件目录结构</span></h2><p data-lake-id=\"u5449f10e\" id=\"u5449f10e\" style=\"text-align: left\"><span data-lake-id=\"u106b9481\" id=\"u106b9481\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">目录结构（已去除其他文件目录）大概如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E2%94%9C%E2%94%80%E2%94%80%20package.json%5Cn%E2%94%94%E2%94%80%E2%94%80%20src%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20App.vue%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20main.js%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20router.js%5Cn%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20views%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20About.vue%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20Home.vue%5Cn%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20modifiers%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20capture.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20once.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20order.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20passive.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20prevent.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20self.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20stop.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20...%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22kC7Aq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"rxTi1\" id=\"rxTi1\" style=\"text-align: center\"><span data-lake-id=\"uc0af5740\" id=\"uc0af5740\" style=\"color: rgb(72, 179, 120)\">2. 期望的路由配置</span></h2><p data-lake-id=\"uedb39fa1\" id=\"uedb39fa1\" style=\"text-align: left\"><span data-lake-id=\"u40feb4b5\" id=\"u40feb4b5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">最终给到</span><span data-lake-id=\"ud9674ed2\" id=\"ud9674ed2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">vue-router</span><span data-lake-id=\"u247f9cbc\" id=\"u247f9cbc\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">的配置大概长下面这个样子，每个配置最重要的部分分别是</span><span data-lake-id=\"u50928c85\" id=\"u50928c85\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">path</span><span data-lake-id=\"ufb1f6842\" id=\"ufb1f6842\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u2c11bb8a\" id=\"u2c11bb8a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">name</span><span data-lake-id=\"ue358c909\" id=\"ue358c909\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和</span><span data-lake-id=\"ufc96942a\" id=\"ufc96942a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">component</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22%2Fhome%5C%22%2C%5Cn%20%20%20%20%5C%22name%5C%22%3A%20%5C%22home%5C%22%2C%5Cn%20%20%20%20%5C%22component%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Home%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22methods%5C%22%3A%20%7B%7D%2C%5Cn%20%20%20%20%20%20%5C%22staticRenderFns%5C%22%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%5C%22_compiled%5C%22%3A%20true%2C%5Cn%20%20%20%20%20%20%5C%22_scopeId%5C%22%3A%20%5C%22data-v-fae5bece%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22beforeCreate%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22beforeDestroy%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22__file%5C%22%3A%20%5C%22src%2Fviews%2FHome.vue%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22%2Fmodifiers%2Fcapture%5C%22%2C%5Cn%20%20%20%20%5C%22name%5C%22%3A%20%5C%22modifiersCapture%5C%22%2C%5Cn%20%20%20%20%5C%22component%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22capture%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22methods%5C%22%3A%20%7B%7D%2C%5Cn%20%20%20%20%20%20%5C%22staticRenderFns%5C%22%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%5C%22_compiled%5C%22%3A%20true%2C%5Cn%20%20%20%20%20%20%5C%22_scopeId%5C%22%3A%20%5C%22data-v-63b4eeee%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22beforeCreate%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22beforeDestroy%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22__file%5C%22%3A%20%5C%22src%2Fviews%2Fmodifiers%2Fcapture.vue%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20...%20%2F%2F%20%E5%85%B6%E4%BB%96%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TjFd3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf5b53993\" id=\"uf5b53993\" style=\"text-align: left\"><span data-lake-id=\"uf9af3215\" id=\"uf9af3215\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /><br /></span></p><h2 data-lake-id=\"r0SDU\" id=\"r0SDU\" style=\"text-align: center\"><span data-lake-id=\"ue3d6d947\" id=\"ue3d6d947\" style=\"color: rgb(72, 179, 120)\">3. require.context实现动态注册路由</span></h2><p data-lake-id=\"uec45424d\" id=\"uec45424d\" style=\"text-align: left\"><span data-lake-id=\"ub16ee7c6\" id=\"ub16ee7c6\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20registerRoutes%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20contextInfo%20%3D%20require.context('.%2Fviews'%2C%20true%2C%20%2F.vue%24%2F)%5Cn%20%20const%20routes%20%3D%20contextInfo.keys().map((filePath)%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20filePath%20%E5%BD%A2%E5%A6%82%20.%2FHome.vue%E3%80%81.%2Fmodifiers%2Fcapture.vue%5Cn%20%20%20%20%2F%2F%20path%E6%88%91%E4%BB%AC%E5%B8%8C%E6%9C%9B%E6%98%AF%2Fhome%E3%80%81%2Fmodifiers%2Fcapture%5Cn%20%20%20%20%2F%2F%20%E6%89%80%E4%BB%A5%E9%9C%80%E8%A6%81%E6%8A%8A%E5%BC%80%E5%A4%B4%E7%9A%84.%2F%E5%92%8C.vue%E9%83%BD%E6%9B%BF%E6%8D%A2%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20const%20path%20%3D%20filePath.toLowerCase().replace(%2F%5E%5C%5C.%7C%5C%5C.vue%2Fg%2C%20'')%5Cn%20%20%20%20%2F%2F%20name%E7%9A%84%E8%AF%9D%E5%B0%86%2Fhome%E3%80%81%2Fmodifiers%2Fcapture%E8%BD%AC%E6%88%90%E5%B0%8F%E9%A9%BC%E5%B3%B0%E5%8D%B3%E5%8F%AF%5Cn%20%20%20%20%2F%2F%20%E6%8A%8A%E5%BC%80%E5%A4%B4%E7%9A%84%2F%E5%85%88%E6%9B%BF%E6%8D%A2%E6%8E%89%EF%BC%8C%E5%86%8D%E6%8A%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%2F%E5%90%8E%E7%9A%84%E5%8D%95%E8%AF%8D%E5%8F%98%E6%88%90%E5%A4%A7%E5%86%99%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%5Cn%20%20%20%20const%20name%20%3D%20path.replace(%2F%5E%5C%5C%2F%2F%2C%20'').replace(%2F%5C%5C%2F(%5C%5Cw)%2F%2C%20(%240%2C%20%241)%20%3D%3E%20%241.toUpperCase())%5Cn%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87require%E5%8E%BB%E8%AF%BB%E5%8F%96.vue%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%5Cn%20%20%20%20const%20component%20%3D%20require(%60.%2Fviews%24%7BfilePath.replace(%2F%5E%5C%5C.%2F%2C%20'')%7D%60).default%5Cn%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20path%2C%5Cn%20%20%20%20%20%20name%2C%5Cn%20%20%20%20%20%20component%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%5Cn%5Cn%20%20return%20routes%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VTVVx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6638b89b\" id=\"u6638b89b\" style=\"text-align: left\"><span data-lake-id=\"ud6ac435a\" id=\"ud6ac435a\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u45fc22ff\" id=\"u45fc22ff\" style=\"text-align: left\"><strong><span data-lake-id=\"uab21980c\" id=\"uab21980c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">效果</span></strong></p><p data-lake-id=\"u55167b83\" id=\"u55167b83\" style=\"text-align: left\"><span data-lake-id=\"u06357184\" id=\"u06357184\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果</span></p><p data-lake-id=\"u52d96441\" id=\"u52d96441\" style=\"text-align: left\"><span data-lake-id=\"ueae0fc77\" id=\"ueae0fc77\" class=\"lake-fontsize-12\" style=\"color: rgb(63, 63, 63)\"><br /><br /></span></p><h1 data-lake-id=\"C7PDV\" id=\"C7PDV\" style=\"text-align: center\"><span data-lake-id=\"u39254a9a\" id=\"u39254a9a\" style=\"color: rgb(72, 179, 120)\">事件修饰符</span></h1><h2 data-lake-id=\"NdTWe\" id=\"NdTWe\" style=\"text-align: center\"><span data-lake-id=\"ud6ea17ec\" id=\"ud6ea17ec\" style=\"color: rgb(72, 179, 120)\">1. 阻止冒泡的两种方式</span></h2><p data-lake-id=\"u432abee9\" id=\"u432abee9\" style=\"text-align: left\"><span data-lake-id=\"u46fc4ef0\" id=\"u46fc4ef0\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22parent%5C%22%20%40click%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'stop'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Jej8E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue288b8af\" id=\"ue288b8af\" style=\"text-align: left\"><span data-lake-id=\"u9396e492\" id=\"u9396e492\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><p data-lake-id=\"u06d45470\" id=\"u06d45470\" style=\"text-align: left\"><span data-lake-id=\"ud2e052dd\" id=\"ud2e052dd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点</span><strong><span data-lake-id=\"uf5a851d8\" id=\"uf5a851d8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">击子节点</span></strong><span data-lake-id=\"u43a611fd\" id=\"u43a611fd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的时候因为事件冒泡的缘故不仅会打印出</span><span data-lake-id=\"u13feaf96\" id=\"u13feaf96\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是儿子</span><span data-lake-id=\"u705eafb4\" id=\"u705eafb4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">还会打印</span><span data-lake-id=\"u954d7539\" id=\"u954d7539\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是爸爸</span><span data-lake-id=\"u970bba11\" id=\"u970bba11\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">。有什么办法可以阻止子节点的</span><strong><span data-lake-id=\"uebce80bc\" id=\"uebce80bc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件冒泡</span></strong><span data-lake-id=\"ubc89fdf8\" id=\"ubc89fdf8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">呢？</span></p><p data-lake-id=\"u31500ace\" id=\"u31500ace\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif%22%2C%22taskId%22%3A%22u3a2a87aa-6cbd-4bcb-a622-0c7fdbb416c%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ufdb6c334%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1a479574\" id=\"u1a479574\"><br></p><h3 data-lake-id=\"oWzps\" id=\"oWzps\" style=\"text-align: left\"><span data-lake-id=\"u79535780\" id=\"u79535780\" style=\"color: rgb(72, 179, 120)\">1 .stop</span></h3><p data-lake-id=\"u4de78f22\" id=\"u4de78f22\" style=\"text-align: left\"><span data-lake-id=\"u23b8551e\" id=\"u23b8551e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。</span></p><p data-lake-id=\"u14416e59\" id=\"u14416e59\" style=\"text-align: left\"><span data-lake-id=\"uf9999d68\" id=\"uf9999d68\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">当添加上</span><span data-lake-id=\"u58f2808f\" id=\"u58f2808f\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.stop</span><span data-lake-id=\"u1a0fccf0\" id=\"u1a0fccf0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符时，只会出现</span><span data-lake-id=\"u41b97183\" id=\"u41b97183\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是儿子</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22parent%5C%22%20%40click%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click.stop%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TVv7R%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"uNVNl\" id=\"uNVNl\" style=\"text-align: left\"><span data-lake-id=\"u8c05b7e8\" id=\"u8c05b7e8\" style=\"color: rgb(72, 179, 120)\">2. event.stopPropagation</span></h3><p data-lake-id=\"u71246161\" id=\"u71246161\" style=\"text-align: left\"><span data-lake-id=\"ud417da85\" id=\"ud417da85\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当然了，我们也可以通过调用</span><span data-lake-id=\"uf35db083\" id=\"uf35db083\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">event.stopPropagation</span><span data-lake-id=\"u6419d384\" id=\"u6419d384\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20name%3A%20'stop'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickChild%20(event)%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90')%5Cn%20%20%20%20%20%20event.stopPropagation()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22JJeve%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"IIPEs\" id=\"IIPEs\" style=\"text-align: center\"><span data-lake-id=\"udce42c34\" id=\"udce42c34\" style=\"color: rgb(72, 179, 120)\">2. 阻止默认事件的两种方式</span></h2><p data-lake-id=\"ufcf19143\" id=\"ufcf19143\" style=\"text-align: left\"><span data-lake-id=\"u2d5624cd\" id=\"u2d5624cd\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue中阻止冒泡有两种方式，那阻止默认事件呢？</span></p><h3 data-lake-id=\"fkfpq\" id=\"fkfpq\" style=\"text-align: left\"><span data-lake-id=\"uf2f67f1a\" id=\"uf2f67f1a\" style=\"color: rgb(72, 179, 120)\">1 .prevent</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22prevent%5C%22%3E%5Cn%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20%40click%3D%5C%22onNoPrevent%5C%22%3E%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%3C%2Fa%3E%5Cn%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20%40click.prevent%3D%5C%22onPrevent%5C%22%3E%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%3C%2Fa%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'prevent'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onNoPrevent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%9C%AA%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onPrevent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22N0T9h%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ubcb1c305\" id=\"ubcb1c305\" style=\"text-align: left\"><span data-lake-id=\"u2d35d84e\" id=\"u2d35d84e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">只要添加</span><span data-lake-id=\"ue6140935\" id=\"ue6140935\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.prevent</span><span data-lake-id=\"uc56c87db\" id=\"uc56c87db\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">轻松实现阻止默认事件</span></p><h3 data-lake-id=\"B1pgj\" id=\"B1pgj\"><span data-lake-id=\"u5999797f\" id=\"u5999797f\">2.event.preventDefault()</span></h3><p data-lake-id=\"uee407897\" id=\"uee407897\" style=\"text-align: left\"><span data-lake-id=\"u5b1b8474\" id=\"u5b1b8474\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和阻止冒泡一样，我们也可以通过调用事件对象的</span><span data-lake-id=\"u65937e9b\" id=\"u65937e9b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">preventDefault</span><span data-lake-id=\"uf2b06ca1\" id=\"uf2b06ca1\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">方法来阻止默认事件</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20name%3A%20'prevent'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onPrevent%20(event)%20%7B%5Cn%20%20%20%20%20%20console.log('%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%20%20event.preventDefault()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22o9tKY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"LqMyK\" id=\"LqMyK\" style=\"text-align: center\"><span data-lake-id=\"u3fc24f1c\" id=\"u3fc24f1c\" style=\"color: rgb(72, 179, 120)\">3 .capture</span></h2><p data-lake-id=\"u6f06ee36\" id=\"u6f06ee36\" style=\"text-align: left\"><span data-lake-id=\"u234c9fe4\" id=\"u234c9fe4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">默认情况下，事件流是以</span><span data-lake-id=\"ud8b75d53\" id=\"ud8b75d53\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">冒泡</span><span data-lake-id=\"u2a76bcce\" id=\"u2a76bcce\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">(由里向外)的形式传递的，如果想以</span><span data-lake-id=\"uce4ea38d\" id=\"uce4ea38d\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">捕获（由外向里）</span><span data-lake-id=\"u83b8d4b5\" id=\"u83b8d4b5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">的形式应该怎么办呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22capture%20parent%5C%22%20%40click.capture%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E7%88%B6%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click.capture%3D%5C%22onClickChild%5C%22%3E%E8%87%AA%E8%8A%82%E7%82%B9%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'capture'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OnlN9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6b3fafbd\" id=\"u6b3fafbd\" style=\"text-align: left\"><span data-lake-id=\"ue99a76c8\" id=\"ue99a76c8\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u2016e654\" id=\"u2016e654\" style=\"text-align: left\"><span data-lake-id=\"u54bf58a7\" id=\"u54bf58a7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不加</span><span data-lake-id=\"u3798729e\" id=\"u3798729e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">catpture</span><span data-lake-id=\"u86add686\" id=\"u86add686\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符，点击</span><strong><span data-lake-id=\"u2dba5fb8\" id=\"u2dba5fb8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">子节点</span></strong><span data-lake-id=\"ue02add94\" id=\"ue02add94\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了</span></p><h2 data-lake-id=\"HAwJz\" id=\"HAwJz\" style=\"text-align: center\"><span data-lake-id=\"uf43933ad\" id=\"uf43933ad\" style=\"color: rgb(72, 179, 120)\">4 .self</span></h2><p data-lake-id=\"uf3b37375\" id=\"uf3b37375\" style=\"text-align: left\"><span data-lake-id=\"ubd8fdafe\" id=\"ubd8fdafe\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">只有当</span><span data-lake-id=\"u63f012a3\" id=\"u63f012a3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">event.target</span><span data-lake-id=\"u75d3ea2a\" id=\"u75d3ea2a\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">是当前元素自身时才会触发事件回调函数</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22self%5C%22%20%40click.self%3D%5C%22onClickSelf%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22inner%5C%22%20%40click%3D%5C%22onClickInner%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'self'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickSelf%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AFself%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickInner%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AFinner%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YKen2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5c09fae3\" id=\"u5c09fae3\" style=\"text-align: left\"><span data-lake-id=\"u88075ea1\" id=\"u88075ea1\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u73c55023\" id=\"u73c55023\" style=\"text-align: left\"><span data-lake-id=\"ub867409b\" id=\"ub867409b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不加</span><span data-lake-id=\"ua2869049\" id=\"ua2869049\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u48148729\" id=\"u48148729\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符的话，点击</span><span data-lake-id=\"u098ca11f\" id=\"u098ca11f\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">inner</span><span data-lake-id=\"u49cdf060\" id=\"u49cdf060\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">节点也会触发</span><span data-lake-id=\"u6328bae0\" id=\"u6328bae0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u8faf3ca1\" id=\"u8faf3ca1\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的事件，加了之后只有触发事件的元素本身是</span><span data-lake-id=\"ua33fa551\" id=\"ua33fa551\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u18127f2b\" id=\"u18127f2b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">，才会打印出</span><span data-lake-id=\"uf1887439\" id=\"uf1887439\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是self节点</span></p><h2 data-lake-id=\"RQFsF\" id=\"RQFsF\" style=\"text-align: center\"><span data-lake-id=\"u925db73d\" id=\"u925db73d\" style=\"color: rgb(72, 179, 120)\">暂停一下：修饰符的顺序如何理解？</span></h2><p data-lake-id=\"u849019ff\" id=\"u849019ff\" style=\"text-align: left\"><span data-lake-id=\"u8c705066\" id=\"u8c705066\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话</span></p><p data-lake-id=\"u9c96fbfa\" id=\"u9c96fbfa\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif%22%2C%22taskId%22%3A%22u4fe3b80c-310b-44fe-8997-3fbdc0a61e3%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ue6c22681%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1a23ba6b\" id=\"u1a23ba6b\" style=\"text-align: center\"><span data-lake-id=\"u3c25f557\" id=\"u3c25f557\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">image.png</span></p><p data-lake-id=\"u13e865eb\" id=\"u13e865eb\" style=\"text-align: left\"><strong><span data-lake-id=\"u9a2df4b0\" id=\"u9a2df4b0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">怎么理解呢？我们来看两个栗子</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22order%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22order-0%5C%22%3E%5Cn%20%20%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20class%3D%5C%22order-parent%5C%22%20%40click.self.prevent%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E4%BC%9A%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%5Cn%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%20class%3D%5C%22order-child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fa%3E%5Cn%20%20%20%20%20%20%3Chr%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22order-2%5C%22%3E%5Cn%20%20%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20class%3D%5C%22order-parent%5C%22%20%40click.prevent.self%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%5Cn%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%20class%3D%5C%22order-child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fa%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'order'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ik1zw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u45abffaf\" id=\"u45abffaf\" style=\"text-align: left\"><span data-lake-id=\"ufd2f59c6\" id=\"ufd2f59c6\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？</span></p><ol list=\"u64d31c97\"><li fid=\"ud87c03ab\" data-lake-id=\"u026e0880\" id=\"u026e0880\" style=\"text-align: left\"><span data-lake-id=\"ufa6517e8\" id=\"ufa6517e8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件</span></li><li fid=\"ud87c03ab\" data-lake-id=\"u699c1bdc\" id=\"u699c1bdc\" style=\"text-align: left\"><span data-lake-id=\"uc61fc751\" id=\"uc61fc751\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点击下面的父节点会打印出</span><strong><span data-lake-id=\"u4f800534\" id=\"u4f800534\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">我是父节点</span></strong><span data-lake-id=\"u2a7916b7\" id=\"u2a7916b7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">，但是</span><strong><span data-lake-id=\"uc2122e29\" id=\"uc2122e29\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不会跳转掘金</span></strong></li><li fid=\"ud87c03ab\" data-lake-id=\"u3d45e281\" id=\"u3d45e281\" style=\"text-align: left\"><span data-lake-id=\"u499435e9\" id=\"u499435e9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点击上面的父节点</span><strong><span data-lake-id=\"u3a7c27b9\" id=\"u3a7c27b9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会</span></strong><span data-lake-id=\"u729cae55\" id=\"u729cae55\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">打印出</span><strong><span data-lake-id=\"uea986708\" id=\"uea986708\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">我是父节点</span></strong><span data-lake-id=\"u7f4cbbcc\" id=\"u7f4cbbcc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">,</span><strong><span data-lake-id=\"ub5a58ef7\" id=\"ub5a58ef7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">也不会跳转掘金</span></strong></li></ol><p data-lake-id=\"u3f69b92c\" id=\"u3f69b92c\" style=\"text-align: left\"><span data-lake-id=\"uf3788ad8\" id=\"uf3788ad8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是</span><strong><span data-lake-id=\"u04a696d9\" id=\"u04a696d9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会</span></strong></p><p data-lake-id=\"uc38b3260\" id=\"uc38b3260\" style=\"text-align: left\"><strong><span data-lake-id=\"u02e07e82\" id=\"u02e07e82\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">为什么？</span></strong></p><p data-lake-id=\"u215be7d4\" id=\"u215be7d4\" style=\"text-align: left\"><span data-lake-id=\"u1d13e6ec\" id=\"u1d13e6ec\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">a@click.self.prevent=&quot;onClickParent&quot;</span><span data-lake-id=\"u9727462f\" id=\"u9727462f\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行</span><span data-lake-id=\"ue5642cac\" id=\"ue5642cac\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"uab01d356\" id=\"uab01d356\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调。</span></p><p data-lake-id=\"ub1da1b63\" id=\"ub1da1b63\" style=\"text-align: left\"><span data-lake-id=\"uef142f1e\" id=\"uef142f1e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就</span><span data-lake-id=\"u0ad19cbd\" id=\"u0ad19cbd\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">不会阻止默认事件</span><span data-lake-id=\"u245939eb\" id=\"u245939eb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">(此时也就发生跳转了)，当然也不会触发</span><span data-lake-id=\"u89f45faf\" id=\"u89f45faf\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"uf180d33b\" id=\"uf180d33b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调</span></p><p data-lake-id=\"uabac06b5\" id=\"uabac06b5\" style=\"text-align: left\"><span data-lake-id=\"u3d58dd5a\" id=\"u3d58dd5a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">同理来我们分析一下</span><span data-lake-id=\"ub392cdcb\" id=\"ub392cdcb\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">a@click.prevent.self=&quot;onClickParent&quot;</span></p><p data-lake-id=\"ud0b596b4\" id=\"ud0b596b4\" style=\"text-align: left\"><span data-lake-id=\"u8e45d2f4\" id=\"u8e45d2f4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行</span><span data-lake-id=\"u602f271b\" id=\"u602f271b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"u97fc194e\" id=\"u97fc194e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调函数。</span></p><p data-lake-id=\"ua240052f\" id=\"ua240052f\" style=\"text-align: left\"><br></p><p data-lake-id=\"ucb88ba29\" id=\"ucb88ba29\" style=\"text-align: left\"><strong><span data-lake-id=\"u3b1d9624\" id=\"u3b1d9624\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回过头看，你理解事件的顺序含义了吗？</span></strong></p><h2 data-lake-id=\"DH91z\" id=\"DH91z\" style=\"text-align: center\"><span data-lake-id=\"u6a50e933\" id=\"u6a50e933\" style=\"color: rgb(72, 179, 120)\">5. once</span></h2><p data-lake-id=\"u06a5cb91\" id=\"u06a5cb91\" style=\"text-align: left\"><span data-lake-id=\"uc2c3022e\" id=\"uc2c3022e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">顾名思义，事件只会触发一次</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22once%5C%22%20%40click.once%3D%5C%22onClickOnce%5C%22%3E%5Cn%20%20%20%20%E5%8F%AA%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'once'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickOnce%20()%20%7B%5Cn%20%20%20%20%20%20console.log('once%EF%BC%8C%E6%88%91%E5%8F%AA%E4%BC%9A%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ODOcx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ucfa4a5b4\" id=\"ucfa4a5b4\" style=\"text-align: left\"><span data-lake-id=\"u3ad3eb1c\" id=\"u3ad3eb1c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">触发一次点击之后，任我再怎么点，回调怎也不会触发了。</span></p><h2 data-lake-id=\"rB1Mt\" id=\"rB1Mt\" style=\"text-align: center\"><span data-lake-id=\"ueb7100c6\" id=\"ueb7100c6\" style=\"color: rgb(72, 179, 120)\">6 .native</span></h2><p data-lake-id=\"u918ccba9\" id=\"u918ccba9\" style=\"text-align: left\"><span data-lake-id=\"u25b855d6\" id=\"u25b855d6\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用</span><span data-lake-id=\"u3185ed9a\" id=\"u3185ed9a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.native</span><span data-lake-id=\"u48bab5c4\" id=\"u48bab5c4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">修饰符可以帮我们办到这点</span></p><p data-lake-id=\"uc9adf63a\" id=\"uc9adf63a\" style=\"text-align: left\"><strong><span data-lake-id=\"u04e5b17b\" id=\"u04e5b17b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">native.vue</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22native-custom%5C%22%3E%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown%3D%5C%22onKeydown%5C%22%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'nativeCustom'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20()%20%7B%5Cn%20%20%20%20%20%20this.%24emit('onKeydown')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tr0Jb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9d802653\" id=\"u9d802653\" style=\"text-align: left\"><strong><span data-lake-id=\"u52f2daa8\" id=\"u52f2daa8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">custom.vue</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22native%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E5%8A%A0%E4%B8%8A.native%E4%B9%8B%E5%90%8E%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E6%89%8D%E5%BE%97%E4%BB%A5%E7%9B%91%E5%90%AC%E6%88%90%E5%8A%9F%20--%3E%5Cn%20%20%20%20%3CNativeCustom%20%40onKeydown%3D%5C%22onKeydown%5C%22%20%40click.native%3D%5C%22onClick%5C%22%20%2F%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnimport%20NativeCustom%20from%20'..%2F..%2Fcomponents%2Fnative.vue'%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'native'%2C%5Cn%20%20components%3A%20%7B%5Cn%20%20%20%20NativeCustom%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20()%20%7B%5Cn%20%20%20%20%20%20console.log('onKeydown')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClick%20()%20%7B%5Cn%20%20%20%20%20%20console.log('onClick')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22muZrE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"R2RfU\" id=\"R2RfU\" style=\"text-align: center\"><span data-lake-id=\"ud6d71723\" id=\"ud6d71723\" style=\"color: rgb(72, 179, 120)\">7 .passive</span></h2><p data-lake-id=\"u3aaf4433\" id=\"u3aaf4433\" style=\"text-align: left\"><span data-lake-id=\"u61a7c823\" id=\"u61a7c823\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue对应 </span><span data-lake-id=\"uf6ccf160\" id=\"uf6ccf160\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">addEventListener</span><span data-lake-id=\"u294c6740\" id=\"u294c6740\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 中的 </span><span data-lake-id=\"uff59dcbc\" id=\"uff59dcbc\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">passive</span><span data-lake-id=\"u2f11a117\" id=\"u2f11a117\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 选项提供了 </span><span data-lake-id=\"u01beea48\" id=\"u01beea48\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.passive</span><span data-lake-id=\"u6eda2642\" id=\"u6eda2642\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 修饰符</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3C!--%20%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%20(%E5%8D%B3%E6%BB%9A%E5%8A%A8%E8%A1%8C%E4%B8%BA)%20%E5%B0%86%E4%BC%9A%E7%AB%8B%E5%8D%B3%E8%A7%A6%E5%8F%91%20--%3E%20%5Cn%3C!--%20%E8%80%8C%E4%B8%8D%E4%BC%9A%E7%AD%89%E5%BE%85%20%60onScroll%60%20%E5%AE%8C%E6%88%90%20--%3E%20%5Cn%3C!--%20%E8%BF%99%E5%85%B6%E4%B8%AD%E5%8C%85%E5%90%AB%20%60event.preventDefault()%60%20%E7%9A%84%E6%83%85%E5%86%B5%20--%3E%20%5Cn%5Cn%3Cdiv%20v-on%3Ascroll.passive%3D%5C%22onScroll%5C%22%3E...%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VOkR9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u02d48cc4\" id=\"u02d48cc4\" style=\"text-align: left\"><strong><span data-lake-id=\"u328905dc\" id=\"u328905dc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p data-lake-id=\"ua36224c6\" id=\"ua36224c6\" style=\"text-align: left\"><strong><span data-lake-id=\"u01dd724a\" id=\"u01dd724a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p data-lake-id=\"ua638a5ee\" id=\"ua638a5ee\" style=\"text-align: left\"><strong><span data-lake-id=\"u336d4982\" id=\"u336d4982\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><h1 data-lake-id=\"qD7c9\" id=\"qD7c9\" style=\"text-align: center\"><span data-lake-id=\"uc648cef1\" id=\"uc648cef1\" style=\"color: rgb(72, 179, 120)\">v-bind修饰符</span></h1><h2 data-lake-id=\"Z7kub\" id=\"Z7kub\" style=\"text-align: center\"><span data-lake-id=\"ubc4f71b1\" id=\"ubc4f71b1\" style=\"color: rgb(72, 179, 120)\">8 .sync</span></h2><p data-lake-id=\"u1e9120fe\" id=\"u1e9120fe\" style=\"text-align: left\"><span data-lake-id=\"u48435c66\" id=\"u48435c66\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当我们想要在</span><span data-lake-id=\"uef6a9e7e\" id=\"uef6a9e7e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">父组件</span><span data-lake-id=\"u4c841f64\" id=\"u4c841f64\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和</span><span data-lake-id=\"u8e925e02\" id=\"u8e925e02\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">子组件</span><span data-lake-id=\"ud8be41d8\" id=\"ud8be41d8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要</span><span data-lake-id=\"u69239036\" id=\"u69239036\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.sync</span><span data-lake-id=\"u3a7436a9\" id=\"u3a7436a9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">修饰符即可办到</span></p><p data-lake-id=\"u5f314776\" id=\"u5f314776\" style=\"text-align: left\"><br></p><h2 data-lake-id=\"KZCOv\" id=\"KZCOv\" style=\"text-align: center\"><span data-lake-id=\"ua139b88e\" id=\"ua139b88e\" style=\"color: rgb(72, 179, 120)\">9 .camel</span></h2><p data-lake-id=\"ub609f4e9\" id=\"ub609f4e9\" style=\"text-align: left\"><span data-lake-id=\"u2dc5d27b\" id=\"u2dc5d27b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.camel</span><span data-lake-id=\"ufee66121\" id=\"ufee66121\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 修饰符允许在使用 DOM 模板时将 </span><span data-lake-id=\"u07193159\" id=\"u07193159\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">v-bind</span><span data-lake-id=\"u436715b7\" id=\"u436715b7\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> property 名称驼峰化，例如 SVG 的 </span><span data-lake-id=\"uc28a4c91\" id=\"uc28a4c91\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">viewBox</span><span data-lake-id=\"ubf73fd3e\" id=\"ubf73fd3e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> property：</span><span data-lake-id=\"u5f39a61c\" id=\"u5f39a61c\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span></p><h2 data-lake-id=\"gux0B\" id=\"gux0B\" style=\"text-align: center\"><span data-lake-id=\"uacc6265c\" id=\"uacc6265c\" style=\"color: rgb(72, 179, 120)\">10 .prop</span></h2><p data-lake-id=\"ud239f232\" id=\"ud239f232\" style=\"text-align: left\"><span data-lake-id=\"u467e8f95\" id=\"u467e8f95\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">关于.prop修饰符官网只有这句话</span><span data-lake-id=\"ub1d2b259\" id=\"ub1d2b259\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> </span><span data-lake-id=\"u96392325\" id=\"u96392325\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.prop</span><span data-lake-id=\"u6de76d07\" id=\"u6de76d07\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。</span></p><p data-lake-id=\"u83eab9d2\" id=\"u83eab9d2\" style=\"text-align: left\"><strong><span data-lake-id=\"ud9a6307e\" id=\"ud9a6307e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">有啥作用？</span></strong></p><ol list=\"u98a92168\"><li fid=\"u377ad7c3\" data-lake-id=\"u0c2d02f3\" id=\"u0c2d02f3\" style=\"text-align: left\"><span data-lake-id=\"ub7475f2b\" id=\"ub7475f2b\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">通过自定义属性存储变量，避免暴露数据</span></li><li fid=\"u377ad7c3\" data-lake-id=\"ufab4e34e\" id=\"ufab4e34e\" style=\"text-align: left\"><span data-lake-id=\"u5ee521dc\" id=\"u5ee521dc\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">防止污染 HTML 结构</span></li></ol><p data-lake-id=\"u8e8dcaef\" id=\"u8e8dcaef\" style=\"text-align: left\"><span data-lake-id=\"ue93e2c10\" id=\"ue93e2c10\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">比如有以下代码</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22prop%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22prop-item%5C%22%20%3Amy-name%3D%5C%22prop%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%2F%2F%20%E6%9C%80%E7%BB%88%E5%8F%98%E6%88%90%E4%BA%86%20%3Cdiv%20my-name%3D%5C%22hello%20prop%5C%22%20class%3D%5C%22prop-item%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22prop-item%5C%22%20%3Amy-name.prop%3D%5C%22prop2%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%2F%2F%20%E6%9C%80%E7%BB%88%E5%8F%98%E6%88%90%E4%BA%86%3Cdiv%20class%3D%5C%22prop-item%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cbutton%20%40click%3D%5C%22onGetResult%5C%22%3E%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'prop'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20prop%3A%20'hello%20prop'%2C%5Cn%20%20%20%20%20%20prop2%3A%20'hello%20prop2'%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onGetResult%20()%20%7B%5Cn%20%20%20%20%20%20const%20%24refProp%20%3D%20this.%24refs.prop%5Cn%20%20%20%20%20%20const%20%24refProp2%20%3D%20this.%24refs.prop2%5Cn%5Cn%20%20%20%20%20%20console.log(%24refProp.getAttribute('my-name'))%20%2F%2F%20hello%20prop%5Cn%20%20%20%20%20%20console.log(%24refProp2.getAttribute('my-name'))%20%2F%2F%20null%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ziFk9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7bde18fa\" id=\"u7bde18fa\" style=\"text-align: left\"><span data-lake-id=\"u6a77b84b\" id=\"u6a77b84b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">从示例上可以看出未使用</span><span data-lake-id=\"ub003bb02\" id=\"ub003bb02\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.prop</span><span data-lake-id=\"u2be0e448\" id=\"u2be0e448\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符的</span><span data-lake-id=\"uf0642733\" id=\"uf0642733\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">my-name</span><span data-lake-id=\"u332b8f2e\" id=\"u332b8f2e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">属性会绑定到dom节点的attribute，从而出现暴露的情况。</span></p><h1 data-lake-id=\"NWe8M\" id=\"NWe8M\" style=\"text-align: center\"><span data-lake-id=\"u21aec479\" id=\"u21aec479\" style=\"color: rgb(72, 179, 120)\">鼠标修饰符</span></h1><p data-lake-id=\"u77b76e1c\" id=\"u77b76e1c\" style=\"text-align: left\"><span data-lake-id=\"u70061c48\" id=\"u70061c48\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当咱们想监听用户点击了</span><span data-lake-id=\"u2ee164c2\" id=\"u2ee164c2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">左键</span><span data-lake-id=\"u113dd482\" id=\"u113dd482\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u7435f193\" id=\"u7435f193\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">右键</span><span data-lake-id=\"uca6ca90c\" id=\"uca6ca90c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">或者</span><span data-lake-id=\"u99838646\" id=\"u99838646\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">中键</span><span data-lake-id=\"u7a4449f4\" id=\"u7a4449f4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">时也有修饰符可以快捷使用，分别是</span><span data-lake-id=\"u85668ad4\" id=\"u85668ad4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.left</span><span data-lake-id=\"u87199a6e\" id=\"u87199a6e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u38927fbe\" id=\"u38927fbe\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.right</span><span data-lake-id=\"u71a62b6e\" id=\"u71a62b6e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u734103d2\" id=\"u734103d2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">middle</span><span data-lake-id=\"u23a7b74f\" id=\"u23a7b74f\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">，来看个例子试试</span></p><p data-lake-id=\"u034c0d8c\" id=\"u034c0d8c\" style=\"text-align: left\"><span data-lake-id=\"u8f05b9b9\" id=\"u8f05b9b9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">根据MDN MouseEvent.button，介绍。</span></p><p data-lake-id=\"u85e7910c\" id=\"u85e7910c\" style=\"text-align: left\"><span data-lake-id=\"udc0795e4\" id=\"udc0795e4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">在最外层</span><span data-lake-id=\"u06acc726\" id=\"u06acc726\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">div.mouse</span><span data-lake-id=\"ue3b95e2b\" id=\"ue3b95e2b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">监听</span><span data-lake-id=\"ua2f69f32\" id=\"ua2f69f32\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">mousedown</span><span data-lake-id=\"u8d440a91\" id=\"u8d440a91\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件，看下用户点击的是鼠标哪个键，三个</span><span data-lake-id=\"u1ed81f0b\" id=\"u1ed81f0b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">button</span><span data-lake-id=\"u9a1dc4ac\" id=\"u9a1dc4ac\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">分别用三个修饰符快捷方式监听</span><span data-lake-id=\"u5e97c380\" id=\"u5e97c380\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">左键</span><span data-lake-id=\"ubffd9cb2\" id=\"ubffd9cb2\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u58b20840\" id=\"u58b20840\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">中键</span><span data-lake-id=\"uf3857139\" id=\"uf3857139\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u3b0b12c3\" id=\"u3b0b12c3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">右键</span><span data-lake-id=\"ua64d802a\" id=\"ua64d802a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">并打印出</span><span data-lake-id=\"uf84034bd\" id=\"uf84034bd\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">left</span><span data-lake-id=\"u6ed16036\" id=\"u6ed16036\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"ucfdb8c29\" id=\"ucfdb8c29\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">middle</span><span data-lake-id=\"uf4f1301c\" id=\"uf4f1301c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u30d44fe0\" id=\"u30d44fe0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">right</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22mouse%5C%22%20%40mousedown%3D%5C%22onMousedown%5C%22%3E%5Cn%20%20%20%20%3Cbutton%20%40click.left%3D%5C%22onClickBtn('left')%5C%22%3Eleft%3C%2Fbutton%3E%5Cn%20%20%20%20%3Cbutton%20%40click.middle%3D%5C%22onClickBtn('middle')%5C%22%3Emiddle%3C%2Fbutton%3E%5Cn%20%20%20%20%3Cbutton%20%40click.right%3D%5C%22onClickBtn('right')%5C%22%3Eright%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'mouse'%2C%5Cn%20%20mounted%20()%20%7B%5Cn%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickBtn%20(msg)%20%7B%5Cn%20%20%20%20%20%20console.log(msg)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onMousedown%20(event)%20%7B%5Cn%20%20%20%20%20%20const%20mosueMsgMap%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%200%3A%20'%E9%BC%A0%E6%A0%87%E5%B7%A6%E9%94%AE'%2C%5Cn%20%20%20%20%20%20%20%201%3A%20'%E9%BC%A0%E6%A0%87%E4%B8%AD%E9%94%AE'%2C%5Cn%20%20%20%20%20%20%20%202%3A%20'%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE'%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20console.log('%E7%82%B9%E5%87%BB%E4%BA%86'%2C%20mosueMsgMap%5Bevent.button%5D)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OJArw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0a41ddbe\" id=\"u0a41ddbe\" style=\"text-align: left\"><strong><span data-lake-id=\"uf17edfed\" id=\"uf17edfed\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">没有带鼠标回来，中键点击暂时不能演示，后续会补上</span></strong></p><p data-lake-id=\"u5bf141f5\" id=\"u5bf141f5\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718538-11650970-9341-438b-b845-a67688ff5897.gif%22%2C%22taskId%22%3A%22u74db735d-39da-43ad-b642-b24eee0ddf1%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22u4ad4c271%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua6fe34d8\" id=\"ua6fe34d8\" style=\"text-align: center\"><span data-lake-id=\"u230b710d\" id=\"u230b710d\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">mouse.gif</span></p><h2 data-lake-id=\"fFSe7\" id=\"fFSe7\" style=\"text-align: center\"><span data-lake-id=\"u7d2a0b47\" id=\"u7d2a0b47\" style=\"color: rgb(72, 179, 120)\">11 .left</span></h2><p data-lake-id=\"u73cf0bd7\" id=\"u73cf0bd7\" style=\"text-align: left\"><span data-lake-id=\"ubab06251\" id=\"ubab06251\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标左键点击</span></p><h2 data-lake-id=\"it85P\" id=\"it85P\" style=\"text-align: center\"><span data-lake-id=\"u43472952\" id=\"u43472952\" style=\"color: rgb(72, 179, 120)\">12 .right</span></h2><p data-lake-id=\"u89c91167\" id=\"u89c91167\" style=\"text-align: left\"><span data-lake-id=\"uff82bd4b\" id=\"uff82bd4b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标右键点击</span></p><h2 data-lake-id=\"LAxXy\" id=\"LAxXy\" style=\"text-align: center\"><span data-lake-id=\"ufec9e26a\" id=\"ufec9e26a\" style=\"color: rgb(72, 179, 120)\">13 .middle</span></h2><p data-lake-id=\"u7cc0d569\" id=\"u7cc0d569\" style=\"text-align: left\"><span data-lake-id=\"uec382e41\" id=\"uec382e41\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标中键点击</span></p><h1 data-lake-id=\"hzYRz\" id=\"hzYRz\" style=\"text-align: center\"><span data-lake-id=\"u6edec5ad\" id=\"u6edec5ad\" style=\"color: rgb(72, 179, 120)\">表单相关修饰符</span></h1><h2 data-lake-id=\"Yph9D\" id=\"Yph9D\" style=\"text-align: center\"><span data-lake-id=\"uf2a6fd37\" id=\"uf2a6fd37\" style=\"color: rgb(72, 179, 120)\">14 .trim</span></h2><p data-lake-id=\"u1cb0902d\" id=\"u1cb0902d\" style=\"text-align: left\"><span data-lake-id=\"u53ccf2f3\" id=\"u53ccf2f3\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">对于输入的内容，希望可以</span><span data-lake-id=\"ubd41da66\" id=\"ubd41da66\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">过滤首尾空格</span><span data-lake-id=\"uf84cb461\" id=\"uf84cb461\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">应该怎么做呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22trim%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22trim-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model%3D%5C%22name%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%9A%3Cspan%3E%7B%7B%20name%20%7D%7D%3C%2Fspan%3E%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22trim-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.trim%3D%5C%22name2%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E7%94%A8%E6%88%B7%E5%90%8D2%EF%BC%9A%3Cspan%3E%7B%7B%20name2%20%7D%7D%3C%2Fspan%3E%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'trim'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20name%3A%20''%2C%5Cn%20%20%20%20%20%20name2%3A%20''%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20watch%3A%20%7B%5Cn%20%20%20%20name%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(%60'----%24%7BnewVal%7D----'%60)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20name2%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(%60'----%24%7BnewVal%7D----'%60)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Bx82u%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9f76bc9c\" id=\"u9f76bc9c\" style=\"text-align: left\"><strong><span data-lake-id=\"uaaf76aeb\" id=\"uaaf76aeb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">.trim修饰符可以很方便做到</span></strong></p><h2 data-lake-id=\"S4q4U\" id=\"S4q4U\" style=\"text-align: center\"><span data-lake-id=\"u523e1764\" id=\"u523e1764\" style=\"color: rgb(72, 179, 120)\">15 .lazy</span></h2><p data-lake-id=\"u30cf5619\" id=\"u30cf5619\" style=\"text-align: left\"><span data-lake-id=\"u5f1b9449\" id=\"u5f1b9449\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">v-model</span><span data-lake-id=\"uefc3dd80\" id=\"uefc3dd80\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">大家都很熟悉，默认情况下，每次</span><span data-lake-id=\"ud4464356\" id=\"ud4464356\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">input事件</span><span data-lake-id=\"ud865ddb5\" id=\"ud865ddb5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？</span></p><p data-lake-id=\"u17cf87ef\" id=\"u17cf87ef\" style=\"text-align: left\"><strong><span data-lake-id=\"u13ec8cd8\" id=\"u13ec8cd8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">思路1：</span></strong><span data-lake-id=\"u76089b8a\" id=\"u76089b8a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"u29d49872\" id=\"u29d49872\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">绑定change事件，在事件回调中手动获取target的值</span></p><p data-lake-id=\"u08b1b8a0\" id=\"u08b1b8a0\" style=\"text-align: left\"><strong><span data-lake-id=\"u6bb19acf\" id=\"u6bb19acf\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">思路2：</span></strong><span data-lake-id=\"u82ebf9ba\" id=\"u82ebf9ba\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"ub365d7d2\" id=\"ub365d7d2\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">直接使用</span><span data-lake-id=\"ubbdd602e\" id=\"ubbdd602e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.lazy</span><span data-lake-id=\"uc251a322\" id=\"uc251a322\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符即可达到效果</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22lazy%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22lazy-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model%3D%5C%22text%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E6%97%A0.lazy%3A%20%7B%7B%20text%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22lazy-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.lazy%3D%5C%22text2%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E.lazy%3A%20%7B%7B%20text2%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'lazy'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20text%3A%20''%2C%5Cn%20%20%20%20%20%20text2%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HVqqo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"udee19840\" id=\"udee19840\" style=\"text-align: left\"><span data-lake-id=\"u45de1934\" id=\"u45de1934\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，</span><span data-lake-id=\"u0818e561\" id=\"u0818e561\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">text2</span><span data-lake-id=\"u0359bbef\" id=\"u0359bbef\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的数据才更新了</span></p><h2 data-lake-id=\"LkaRe\" id=\"LkaRe\" style=\"text-align: center\"><span data-lake-id=\"u9bd0696f\" id=\"u9bd0696f\" style=\"color: rgb(72, 179, 120)\">16 .number</span></h2><p data-lake-id=\"u7b7164ba\" id=\"u7b7164ba\" style=\"text-align: left\"><span data-lake-id=\"u0d1b805c\" id=\"u0d1b805c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">我们知道</span><span data-lake-id=\"u3ec2baec\" id=\"u3ec2baec\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">input</span><span data-lake-id=\"u03d1e915\" id=\"u03d1e915\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">输入框的</span><span data-lake-id=\"u9589acc3\" id=\"u9589acc3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">type</span><span data-lake-id=\"u5ede771d\" id=\"u5ede771d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">哪怕是</span><span data-lake-id=\"u43eaf4ee\" id=\"u43eaf4ee\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">number</span><span data-lake-id=\"u7dc1d024\" id=\"u7dc1d024\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">得到的值的类型也是</span><span data-lake-id=\"u1fef5508\" id=\"u1fef5508\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">string</span><span data-lake-id=\"uc3a9a8ab\" id=\"uc3a9a8ab\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">，如果我们想直接拿到</span><span data-lake-id=\"u76a7da75\" id=\"u76a7da75\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">number</span><span data-lake-id=\"u1cb93f60\" id=\"u1cb93f60\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">类型的数据，有不想麻烦的手动转换应该怎么办呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22number%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E6%97%A0.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model%3D%5C%22number%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3Etype%3Atext%20.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.number%3D%5C%22number1%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3Etype%3Anumber%20.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model.number%3D%5C%22number2%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'lazy'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20number%3A%200%2C%5Cn%20%20%20%20%20%20number1%3A%20''%2C%5Cn%20%20%20%20%20%20number2%3A%20''%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20watch%3A%20%7B%5Cn%20%20%20%20number%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20number1%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20number2%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22I5e3R%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u821a9205\" id=\"u821a9205\" style=\"text-align: left\"><span data-lake-id=\"ue0f09da4\" id=\"ue0f09da4\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><ol list=\"u811b0df5\"><li fid=\"ubfde6257\" data-lake-id=\"ue47ec899\" id=\"ue47ec899\" style=\"text-align: left\"><span data-lake-id=\"u3fec194d\" id=\"u3fec194d\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第一个输入框的类型是number，但是得到的值是string</span></li><li fid=\"ubfde6257\" data-lake-id=\"u4bc68a12\" id=\"u4bc68a12\" style=\"text-align: left\"><span data-lake-id=\"uaea0bc65\" id=\"uaea0bc65\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 </span><span data-lake-id=\"uc0037fa8\" id=\"uc0037fa8\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">parseFloat()</span><span data-lake-id=\"u45278a79\" id=\"u45278a79\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\"> 解析，则会返回原始的值。）</span></li><li fid=\"ubfde6257\" data-lake-id=\"u76d45212\" id=\"u76d45212\" style=\"text-align: left\"><span data-lake-id=\"ua9a2254f\" id=\"ua9a2254f\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第三个输入框的类型是number，最后得到的值也是number</span></li></ol><p data-lake-id=\"uab3ceedb\" id=\"uab3ceedb\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif%22%2C%22taskId%22%3A%22u41d07f12-da60-4a2b-8499-f0209ae7331%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22u91c65a41%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u8d6fc7b8\" id=\"u8d6fc7b8\" style=\"text-align: center\"><span data-lake-id=\"u07bcd0ab\" id=\"u07bcd0ab\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">number.gif</span></p><h1 data-lake-id=\"tKRUK\" id=\"tKRUK\" style=\"text-align: center\"><span data-lake-id=\"u4d8f43d8\" id=\"u4d8f43d8\" style=\"color: rgb(72, 179, 120)\">系统修饰符</span></h1><p data-lake-id=\"ufaa7e651\" id=\"ufaa7e651\" style=\"text-align: left\"><span data-lake-id=\"ude2334a0\" id=\"ude2334a0\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当点击事件或者键盘事件需要系统键同时按下才触发时</span><span data-lake-id=\"u2901b4a9\" id=\"u2901b4a9\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.ctrl</span><span data-lake-id=\"u3f125b55\" id=\"u3f125b55\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u622ce860\" id=\"u622ce860\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.alt</span><span data-lake-id=\"ud6869c6d\" id=\"ud6869c6d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"ub458bf9a\" id=\"ub458bf9a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.shift</span><span data-lake-id=\"u1edc2518\" id=\"u1edc2518\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u46fba77b\" id=\"u46fba77b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.meta</span><span data-lake-id=\"u9a18352b\" id=\"u9a18352b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">可以帮大忙噢！</span></p><p data-lake-id=\"u5fcc32c7\" id=\"u5fcc32c7\" style=\"text-align: left\"><strong><span data-lake-id=\"u28ddb0fc\" id=\"u28ddb0fc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如下代码</span></strong></p><ol list=\"u9147195a\"><li fid=\"ud57cb901\" data-lake-id=\"uf606973f\" id=\"uf606973f\" style=\"text-align: left\"><span data-lake-id=\"ud6fc24ee\" id=\"ud6fc24ee\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">全局监听keydown事件，尝试看</span><span data-lake-id=\"u480ba258\" id=\"u480ba258\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.ctrl</span><span data-lake-id=\"u631f914d\" id=\"u631f914d\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u034682f4\" id=\"u034682f4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.alt</span><span data-lake-id=\"ua84d8ba6\" id=\"ua84d8ba6\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u30b9e19d\" id=\"u30b9e19d\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.shift</span><span data-lake-id=\"u1c346d70\" id=\"u1c346d70\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u76c35f7a\" id=\"u76c35f7a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.meta</span><span data-lake-id=\"u89c38233\" id=\"u89c38233\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">是否被按下</span></li><li fid=\"ud57cb901\" data-lake-id=\"u2bc1ab75\" id=\"u2bc1ab75\" style=\"text-align: left\"><span data-lake-id=\"u6260c966\" id=\"u6260c966\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">分别给四个按钮加上</span><span data-lake-id=\"ua8f93abf\" id=\"ua8f93abf\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"uc6fd784b\" id=\"uc6fd784b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.ctrl</span><span data-lake-id=\"u2a6d31fd\" id=\"u2a6d31fd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u59aa2655\" id=\"u59aa2655\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.alt</span><span data-lake-id=\"u31bd89a8\" id=\"u31bd89a8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"ud66e4550\" id=\"ud66e4550\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.shift</span><span data-lake-id=\"ua0700796\" id=\"ua0700796\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u72474bfe\" id=\"u72474bfe\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.meta</span><span data-lake-id=\"ue902c1ee\" id=\"ue902c1ee\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效</span></li></ol><p data-lake-id=\"u91bd6c9d\" id=\"u91bd6c9d\" style=\"text-align: left\"><strong><span data-lake-id=\"u2324a8dc\" id=\"u2324a8dc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22system%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%7B%7B%20msg%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22buttons%5C%22%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.ctrl%3D%5C%22onClickButon('ctrl')%5C%22%3Ectrl%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.alt%3D%5C%22onClickButon('alt')%5C%22%3Ealt%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.shift%3D%5C%22onClickButon('shift')%5C%22%3Eshift%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.meta%3D%5C%22onClickButon('meta')%5C%22%3Emeta%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'system'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20msg%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.onListenSystemKeyDown()%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onListenSystemKeyDown%20()%20%7B%5Cn%20%20%20%20%20%20document.addEventListener('keydown'%2C%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20let%20msg%20%3D%20'%E6%8C%89%E4%B8%8B%E4%BA%86'%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(event.ctrlKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'ctrl%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.altKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'alt%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.shiftKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'shift%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.metaKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'meta%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'%E5%85%B6%E4%BB%96%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.msg%20%3D%20msg%5Cn%20%20%20%20%20%20%7D%2C%20false)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickButon%20(key)%20%7B%5Cn%20%20%20%20%20%20console.log(%60%E5%8F%AA%E6%9C%89%E5%90%8C%E6%97%B6%E6%8C%89%E4%B8%8B%24%7Bkey%7D%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%60)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22sEv8K%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"vrHrH\" id=\"vrHrH\" style=\"text-align: center\"><span data-lake-id=\"u3319dd7c\" id=\"u3319dd7c\" style=\"color: rgb(72, 179, 120)\">17 .ctrl</span></h2><p data-lake-id=\"u64329c6b\" id=\"u64329c6b\" style=\"text-align: left\"><span data-lake-id=\"u60d29d8e\" id=\"u60d29d8e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"EDUwo\" id=\"EDUwo\" style=\"text-align: center\"><span data-lake-id=\"ub7fe4845\" id=\"ub7fe4845\" style=\"color: rgb(72, 179, 120)\">18 .alt</span></h2><p data-lake-id=\"u38c5ac20\" id=\"u38c5ac20\" style=\"text-align: left\"><span data-lake-id=\"u772e7304\" id=\"u772e7304\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"JBKLM\" id=\"JBKLM\" style=\"text-align: center\"><span data-lake-id=\"u19ccadea\" id=\"u19ccadea\" style=\"color: rgb(72, 179, 120)\">19 .shift</span></h2><p data-lake-id=\"uf3481f3f\" id=\"uf3481f3f\" style=\"text-align: left\"><span data-lake-id=\"uf99c4263\" id=\"uf99c4263\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"UnowS\" id=\"UnowS\" style=\"text-align: center\"><span data-lake-id=\"uce751ccf\" id=\"uce751ccf\" style=\"color: rgb(72, 179, 120)\">20 .meta</span></h2><p data-lake-id=\"u1f33c1d8\" id=\"u1f33c1d8\" style=\"text-align: left\"><span data-lake-id=\"u7764a65b\" id=\"u7764a65b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Xw5H6\" id=\"Xw5H6\" style=\"text-align: center\"><span data-lake-id=\"u24c67305\" id=\"u24c67305\" style=\"color: rgb(72, 179, 120)\">21 .exact</span></h2><p data-lake-id=\"ua62785aa\" id=\"ua62785aa\" style=\"text-align: left\"><span data-lake-id=\"u46f32d6f\" id=\"u46f32d6f\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">严格来说这</span><span data-lake-id=\"u4dbac899\" id=\"u4dbac899\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.exact</span><span data-lake-id=\"u43b5013c\" id=\"u43b5013c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发</span><span data-lake-id=\"u89155beb\" id=\"u89155beb\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.alt</span><span data-lake-id=\"uea00f4cc\" id=\"uea00f4cc\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">也可以触发</span><span data-lake-id=\"uf76142e0\" id=\"uf76142e0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.shift</span><span data-lake-id=\"ubecfe885\" id=\"ubecfe885\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">。</span></p><p data-lake-id=\"u97cf7b30\" id=\"u97cf7b30\" style=\"text-align: left\"><span data-lake-id=\"uc2817803\" id=\"uc2817803\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发</span></p><p data-lake-id=\"u041103f6\" id=\"u041103f6\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif%22%2C%22taskId%22%3A%22u98a03c13-3c8f-42ff-aaf6-d3be97c1223%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22uaac7048a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf5f71344\" id=\"uf5f71344\" style=\"text-align: center\"><span data-lake-id=\"u79e233e3\" id=\"u79e233e3\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">system2.gif</span></p><ol list=\"u0c8cb98f\"><li fid=\"u082a9c9d\" data-lake-id=\"ue2720757\" id=\"ue2720757\" style=\"text-align: left\"><strong><span data-lake-id=\"u202b2ffd\" id=\"u202b2ffd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">只想某个系统修饰键按下时才触发点击</span></strong></li><li fid=\"u082a9c9d\" data-lake-id=\"ua773930b\" id=\"ua773930b\" style=\"text-align: left\"><strong><span data-lake-id=\"uea07182f\" id=\"uea07182f\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">没有任何系统修饰符被按下的时候才触发点击</span></strong></li></ol><p data-lake-id=\"u72b0ed7d\" id=\"u72b0ed7d\" style=\"text-align: left\"><span data-lake-id=\"u333076e0\" id=\"u333076e0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">要实现上面的需求</span><span data-lake-id=\"u836b73f7\" id=\"u836b73f7\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.exact</span><span data-lake-id=\"u8efeff6e\" id=\"u8efeff6e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">就派上用场了，用上面的例子稍作改造</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22extra%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%7B%7B%20msg%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22buttons%5C%22%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.ctrl.exact%3D%5C%22onClickButon('ctrl')%5C%22%3Ectrl%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.alt.exact%3D%5C%22onClickButon('alt')%5C%22%3Ealt%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.shift.exact%3D%5C%22onClickButon('shift')%5C%22%3Eshift%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.meta.exact%3D%5C%22onClickButon('meta')%5C%22%3Emeta%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.exact%3D%5C%22onClickButon('%E9%9D%9E%E7%B3%BB%E7%BB%9F%E9%94%AE')%5C%22%3E%E9%9D%9E%E7%B3%BB%E7%BB%9F%E9%94%AE%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'extra'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20msg%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.onListenSystemKeyDown()%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onListenSystemKeyDown%20()%20%7B%5Cn%20%20%20%20%20%20document.addEventListener('keydown'%2C%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20let%20msg%20%3D%20'%E6%8C%89%E4%B8%8B%E4%BA%86'%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(event.ctrlKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'ctrl%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.altKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'alt%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.shiftKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'shift%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.metaKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'meta%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'%E5%85%B6%E4%BB%96%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.msg%20%3D%20msg%5Cn%20%20%20%20%20%20%7D%2C%20false)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickButon%20(key)%20%7B%5Cn%20%20%20%20%20%20console.log(%60%E5%8F%AA%E6%9C%89%E5%90%8C%E6%97%B6%E6%8C%89%E4%B8%8B%24%7Bkey%7D%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%60)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22RfSIX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h1 data-lake-id=\"QRDoL\" id=\"QRDoL\" style=\"text-align: center\"><span data-lake-id=\"u9e072fe4\" id=\"u9e072fe4\" style=\"color: rgb(72, 179, 120)\">按键修饰符</span></h1><p data-lake-id=\"u4d7607d4\" id=\"u4d7607d4\" style=\"text-align: left\"><span data-lake-id=\"ud435401d\" id=\"ud435401d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。</span></p><p data-lake-id=\"u90021919\" id=\"u90021919\" style=\"text-align: left\"><span data-lake-id=\"u90ca1994\" id=\"u90ca1994\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如下代码，我们分别给</span><span data-lake-id=\"u1b9ae731\" id=\"u1b9ae731\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">enter</span><span data-lake-id=\"u77e90de4\" id=\"u77e90de4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u843ed54b\" id=\"u843ed54b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">tab</span><span data-lake-id=\"uc436000b\" id=\"uc436000b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"uf15decc4\" id=\"uf15decc4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">delete</span><span data-lake-id=\"u9eea15d1\" id=\"u9eea15d1\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">等按键指定了</span><span data-lake-id=\"u84258e58\" id=\"u84258e58\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">keydown</span><span data-lake-id=\"u6b965914\" id=\"u6b965914\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件，当在指定的输入框中按下指定的键盘，会打印出</span><span data-lake-id=\"uf4a443c5\" id=\"uf4a443c5\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">enter</span><span data-lake-id=\"u22d7fe84\" id=\"u22d7fe84\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u24545ebc\" id=\"u24545ebc\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">tab</span><span data-lake-id=\"ua5469367\" id=\"ua5469367\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u94786a77\" id=\"u94786a77\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">delete</span><span data-lake-id=\"ud11bd656\" id=\"ud11bd656\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">等，其他按键在输入框中无法触发该console</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22key-modifiers%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20enter%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.enter%3D%5C%22onKeydown('enter')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20tab%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.tab%3D%5C%22onKeydown('tab')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20delete%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.delete%3D%5C%22onKeydown('delete')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20esc%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.esc%3D%5C%22onKeydown('esc')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20space%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.space%3D%5C%22onKeydown('space')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20up%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.up%3D%5C%22onKeydown('up')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20down%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.down%3D%5C%22onKeydown('down')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20left%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.left%3D%5C%22onKeydown('left')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20right%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.right%3D%5C%22onKeydown('right')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20page-down%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.page-down%3D%5C%22onKeydown('page-down')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20page-up%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.page-up%3D%5C%22onKeydown('page-up')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'keyModifiers'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20(keyName)%20%7B%5Cn%20%20%20%20%20%20console.log(keyName)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22B9SEe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"C8jGV\" id=\"C8jGV\" style=\"text-align: center\"><span data-lake-id=\"u3727bbec\" id=\"u3727bbec\" style=\"color: rgb(72, 179, 120)\">22 .enter</span></h2><p data-lake-id=\"ud5f87782\" id=\"ud5f87782\" style=\"text-align: left\"><span data-lake-id=\"uad1dcaf4\" id=\"uad1dcaf4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Jw4r0\" id=\"Jw4r0\" style=\"text-align: center\"><span data-lake-id=\"u9ecaef2a\" id=\"u9ecaef2a\" style=\"color: rgb(72, 179, 120)\">23 .tab</span></h2><p data-lake-id=\"u9c9e02bc\" id=\"u9c9e02bc\" style=\"text-align: left\"><span data-lake-id=\"udc6c96c9\" id=\"udc6c96c9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"U7gUW\" id=\"U7gUW\" style=\"text-align: center\"><span data-lake-id=\"u8a6d0533\" id=\"u8a6d0533\" style=\"color: rgb(72, 179, 120)\">24 .delete</span></h2><p data-lake-id=\"uc1a938d3\" id=\"uc1a938d3\" style=\"text-align: left\"><span data-lake-id=\"uc59dbfb9\" id=\"uc59dbfb9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"q769F\" id=\"q769F\" style=\"text-align: center\"><span data-lake-id=\"u9b7785bc\" id=\"u9b7785bc\" style=\"color: rgb(72, 179, 120)\">25 .esc</span></h2><p data-lake-id=\"ub6706d3d\" id=\"ub6706d3d\" style=\"text-align: left\"><span data-lake-id=\"ue546c163\" id=\"ue546c163\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"lSVHX\" id=\"lSVHX\" style=\"text-align: center\"><span data-lake-id=\"u108dbc34\" id=\"u108dbc34\" style=\"color: rgb(72, 179, 120)\">26 .space</span></h2><p data-lake-id=\"u71878930\" id=\"u71878930\" style=\"text-align: left\"><span data-lake-id=\"u3d475235\" id=\"u3d475235\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"CJR2h\" id=\"CJR2h\" style=\"text-align: center\"><span data-lake-id=\"ua84f430a\" id=\"ua84f430a\" style=\"color: rgb(72, 179, 120)\">27 .up</span></h2><p data-lake-id=\"ub10f88fd\" id=\"ub10f88fd\" style=\"text-align: left\"><span data-lake-id=\"uecd98c1b\" id=\"uecd98c1b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"jtFso\" id=\"jtFso\" style=\"text-align: center\"><span data-lake-id=\"u61610469\" id=\"u61610469\" style=\"color: rgb(72, 179, 120)\">28 .down</span></h2><p data-lake-id=\"u9dfc216b\" id=\"u9dfc216b\" style=\"text-align: left\"><span data-lake-id=\"uc830c3b3\" id=\"uc830c3b3\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"KcsBn\" id=\"KcsBn\" style=\"text-align: center\"><span data-lake-id=\"u54800d8b\" id=\"u54800d8b\" style=\"color: rgb(72, 179, 120)\">29 .left</span></h2><p data-lake-id=\"u700fb838\" id=\"u700fb838\" style=\"text-align: left\"><span data-lake-id=\"uc63696ba\" id=\"uc63696ba\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Mrnjd\" id=\"Mrnjd\" style=\"text-align: center\"><span data-lake-id=\"u7fd7a6bb\" id=\"u7fd7a6bb\" style=\"color: rgb(72, 179, 120)\">30 .right</span></h2><p data-lake-id=\"ub38af451\" id=\"ub38af451\" style=\"text-align: left\"><span data-lake-id=\"ua611fea8\" id=\"ua611fea8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"P5Hyd\" id=\"P5Hyd\" style=\"text-align: center\"><span data-lake-id=\"u47e836c0\" id=\"u47e836c0\" style=\"color: rgb(72, 179, 120)\">31 .page-down</span></h2><p data-lake-id=\"ufd717625\" id=\"ufd717625\" style=\"text-align: left\"><span data-lake-id=\"udf6c0267\" id=\"udf6c0267\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"vV3ei\" id=\"vV3ei\" style=\"text-align: center\"><span data-lake-id=\"u1425a2c6\" id=\"u1425a2c6\" style=\"color: rgb(72, 179, 120)\">32 .page-up</span></h2><p data-lake-id=\"u8e8f7298\" id=\"u8e8f7298\" style=\"text-align: left\"><span data-lake-id=\"u8159c057\" id=\"u8159c057\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h1 data-lake-id=\"iSrWh\" id=\"iSrWh\" style=\"text-align: center\"><span data-lake-id=\"u77cef408\" id=\"u77cef408\" style=\"color: rgb(72, 179, 120)\">如何自定义按键修饰符</span></h1><p data-lake-id=\"ue30e99ce\" id=\"ue30e99ce\" style=\"text-align: left\"><span data-lake-id=\"u972e1832\" id=\"u972e1832\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？</span></p><p data-lake-id=\"uac1c7481\" id=\"uac1c7481\" style=\"text-align: left\"><span data-lake-id=\"u652ee143\" id=\"u652ee143\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。</span></p><p data-lake-id=\"ub35a9201\" id=\"ub35a9201\" style=\"text-align: left\"><span data-lake-id=\"u980a877d\" id=\"u980a877d\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Vue.config.keyCodes%20%3D%20%7B%5Cn%20%20q%3A%2081%5Cn%7D%5Cn%5Cn%3Cdiv%20class%3D%5C%22custom%5C%22%3E%5Cn%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.q%3D%5C%22f1Keydown%5C%22%3E%5Cn%3C%2Fdiv%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'custom'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20f1Keydown%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%8C%89%E4%B8%8B%E4%BA%86q')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22yT5kG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u375923cb\" id=\"u375923cb\" style=\"text-align: left\"><span data-lake-id=\"u8c6843cd\" id=\"u8c6843cd\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><p data-lake-id=\"u99728a98\" id=\"u99728a98\" style=\"text-align: left\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"pxcyU\" id=\"pxcyU\"><br></h1><h1 data-lake-id=\"th4rJ\" id=\"th4rJ\" style=\"text-align: center\"><span data-lake-id=\"ud7ebaac4\" id=\"ud7ebaac4\" style=\"color: rgb(72, 179, 120)\">前言</span></h1><p data-lake-id=\"ua1c2d6c9\" id=\"ua1c2d6c9\" style=\"text-align: left\"><span data-lake-id=\"u949c65d8\" id=\"u949c65d8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！</span></p><p data-lake-id=\"uae0d1073\" id=\"uae0d1073\" style=\"text-align: left\"><span data-lake-id=\"u549699a9\" id=\"u549699a9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">耽误您15分钟您可以收获：</span></p><ol list=\"u8ac9aa71\"><li fid=\"ub7e94663\" data-lake-id=\"u614a523c\" id=\"u614a523c\" style=\"text-align: left\"><span data-lake-id=\"u368dcddb\" id=\"u368dcddb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用</span></li><li fid=\"ub7e94663\" data-lake-id=\"uc2cb978d\" id=\"uc2cb978d\" style=\"text-align: left\"><span data-lake-id=\"ufb257f98\" id=\"ufb257f98\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如何利用webpack动态注册vue路由，再也不手写路由配置啦！</span></li></ol><p data-lake-id=\"udb6522f9\" id=\"udb6522f9\" style=\"text-align: left\"><span data-lake-id=\"udfa5e871\" id=\"udfa5e871\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">文章中例子都放在了github源码上，也可以点击直接看例子</span></p><h1 data-lake-id=\"Q2cOK\" id=\"Q2cOK\" style=\"text-align: center\"><span data-lake-id=\"uaf42a95d\" id=\"uaf42a95d\" style=\"color: rgb(72, 179, 120)\">如何动态注册路由？</span></h1><p data-lake-id=\"ua21b7e1e\" id=\"ua21b7e1e\" style=\"text-align: left\"><span data-lake-id=\"u482de697\" id=\"u482de697\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.</span></p><p data-lake-id=\"u3ecae803\" id=\"u3ecae803\" style=\"text-align: left\"><span data-lake-id=\"u0bb0022a\" id=\"u0bb0022a\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">有什么办法可以帮我们自动完成路由注册呢？</span></p><h2 data-lake-id=\"kP2Yc\" id=\"kP2Yc\" style=\"text-align: center\"><span data-lake-id=\"uf42b2062\" id=\"uf42b2062\" style=\"color: rgb(72, 179, 120)\">1. 文件目录结构</span></h2><p data-lake-id=\"u5449f10e\" id=\"u5449f10e\" style=\"text-align: left\"><span data-lake-id=\"u106b9481\" id=\"u106b9481\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">目录结构（已去除其他文件目录）大概如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E2%94%9C%E2%94%80%E2%94%80%20package.json%5Cn%E2%94%94%E2%94%80%E2%94%80%20src%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20App.vue%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20main.js%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20router.js%5Cn%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20views%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20About.vue%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20Home.vue%5Cn%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20modifiers%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20capture.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20once.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20order.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20passive.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20prevent.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20self.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20stop.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20...%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22kC7Aq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"rxTi1\" id=\"rxTi1\" style=\"text-align: center\"><span data-lake-id=\"uc0af5740\" id=\"uc0af5740\" style=\"color: rgb(72, 179, 120)\">2. 期望的路由配置</span></h2><p data-lake-id=\"uedb39fa1\" id=\"uedb39fa1\" style=\"text-align: left\"><span data-lake-id=\"u40feb4b5\" id=\"u40feb4b5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">最终给到</span><span data-lake-id=\"ud9674ed2\" id=\"ud9674ed2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">vue-router</span><span data-lake-id=\"u247f9cbc\" id=\"u247f9cbc\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">的配置大概长下面这个样子，每个配置最重要的部分分别是</span><span data-lake-id=\"u50928c85\" id=\"u50928c85\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">path</span><span data-lake-id=\"ufb1f6842\" id=\"ufb1f6842\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u2c11bb8a\" id=\"u2c11bb8a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">name</span><span data-lake-id=\"ue358c909\" id=\"ue358c909\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和</span><span data-lake-id=\"ufc96942a\" id=\"ufc96942a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">component</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22%2Fhome%5C%22%2C%5Cn%20%20%20%20%5C%22name%5C%22%3A%20%5C%22home%5C%22%2C%5Cn%20%20%20%20%5C%22component%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Home%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22methods%5C%22%3A%20%7B%7D%2C%5Cn%20%20%20%20%20%20%5C%22staticRenderFns%5C%22%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%5C%22_compiled%5C%22%3A%20true%2C%5Cn%20%20%20%20%20%20%5C%22_scopeId%5C%22%3A%20%5C%22data-v-fae5bece%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22beforeCreate%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22beforeDestroy%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22__file%5C%22%3A%20%5C%22src%2Fviews%2FHome.vue%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22%2Fmodifiers%2Fcapture%5C%22%2C%5Cn%20%20%20%20%5C%22name%5C%22%3A%20%5C%22modifiersCapture%5C%22%2C%5Cn%20%20%20%20%5C%22component%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22capture%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22methods%5C%22%3A%20%7B%7D%2C%5Cn%20%20%20%20%20%20%5C%22staticRenderFns%5C%22%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%5C%22_compiled%5C%22%3A%20true%2C%5Cn%20%20%20%20%20%20%5C%22_scopeId%5C%22%3A%20%5C%22data-v-63b4eeee%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22beforeCreate%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22beforeDestroy%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22__file%5C%22%3A%20%5C%22src%2Fviews%2Fmodifiers%2Fcapture.vue%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20...%20%2F%2F%20%E5%85%B6%E4%BB%96%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TjFd3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf5b53993\" id=\"uf5b53993\" style=\"text-align: left\"><span data-lake-id=\"uf9af3215\" id=\"uf9af3215\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /><br /></span></p><h2 data-lake-id=\"r0SDU\" id=\"r0SDU\" style=\"text-align: center\"><span data-lake-id=\"ue3d6d947\" id=\"ue3d6d947\" style=\"color: rgb(72, 179, 120)\">3. require.context实现动态注册路由</span></h2><p data-lake-id=\"uec45424d\" id=\"uec45424d\" style=\"text-align: left\"><span data-lake-id=\"ub16ee7c6\" id=\"ub16ee7c6\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20registerRoutes%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20contextInfo%20%3D%20require.context('.%2Fviews'%2C%20true%2C%20%2F.vue%24%2F)%5Cn%20%20const%20routes%20%3D%20contextInfo.keys().map((filePath)%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20filePath%20%E5%BD%A2%E5%A6%82%20.%2FHome.vue%E3%80%81.%2Fmodifiers%2Fcapture.vue%5Cn%20%20%20%20%2F%2F%20path%E6%88%91%E4%BB%AC%E5%B8%8C%E6%9C%9B%E6%98%AF%2Fhome%E3%80%81%2Fmodifiers%2Fcapture%5Cn%20%20%20%20%2F%2F%20%E6%89%80%E4%BB%A5%E9%9C%80%E8%A6%81%E6%8A%8A%E5%BC%80%E5%A4%B4%E7%9A%84.%2F%E5%92%8C.vue%E9%83%BD%E6%9B%BF%E6%8D%A2%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20const%20path%20%3D%20filePath.toLowerCase().replace(%2F%5E%5C%5C.%7C%5C%5C.vue%2Fg%2C%20'')%5Cn%20%20%20%20%2F%2F%20name%E7%9A%84%E8%AF%9D%E5%B0%86%2Fhome%E3%80%81%2Fmodifiers%2Fcapture%E8%BD%AC%E6%88%90%E5%B0%8F%E9%A9%BC%E5%B3%B0%E5%8D%B3%E5%8F%AF%5Cn%20%20%20%20%2F%2F%20%E6%8A%8A%E5%BC%80%E5%A4%B4%E7%9A%84%2F%E5%85%88%E6%9B%BF%E6%8D%A2%E6%8E%89%EF%BC%8C%E5%86%8D%E6%8A%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%2F%E5%90%8E%E7%9A%84%E5%8D%95%E8%AF%8D%E5%8F%98%E6%88%90%E5%A4%A7%E5%86%99%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%5Cn%20%20%20%20const%20name%20%3D%20path.replace(%2F%5E%5C%5C%2F%2F%2C%20'').replace(%2F%5C%5C%2F(%5C%5Cw)%2F%2C%20(%240%2C%20%241)%20%3D%3E%20%241.toUpperCase())%5Cn%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87require%E5%8E%BB%E8%AF%BB%E5%8F%96.vue%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%5Cn%20%20%20%20const%20component%20%3D%20require(%60.%2Fviews%24%7BfilePath.replace(%2F%5E%5C%5C.%2F%2C%20'')%7D%60).default%5Cn%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20path%2C%5Cn%20%20%20%20%20%20name%2C%5Cn%20%20%20%20%20%20component%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%5Cn%5Cn%20%20return%20routes%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VTVVx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6638b89b\" id=\"u6638b89b\" style=\"text-align: left\"><span data-lake-id=\"ud6ac435a\" id=\"ud6ac435a\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u45fc22ff\" id=\"u45fc22ff\" style=\"text-align: left\"><strong><span data-lake-id=\"uab21980c\" id=\"uab21980c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">效果</span></strong></p><p data-lake-id=\"u55167b83\" id=\"u55167b83\" style=\"text-align: left\"><span data-lake-id=\"u06357184\" id=\"u06357184\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果</span></p><p data-lake-id=\"u52d96441\" id=\"u52d96441\" style=\"text-align: left\"><span data-lake-id=\"ueae0fc77\" id=\"ueae0fc77\" class=\"lake-fontsize-12\" style=\"color: rgb(63, 63, 63)\"><br /><br /></span></p><h1 data-lake-id=\"C7PDV\" id=\"C7PDV\" style=\"text-align: center\"><span data-lake-id=\"u39254a9a\" id=\"u39254a9a\" style=\"color: rgb(72, 179, 120)\">事件修饰符</span></h1><h2 data-lake-id=\"NdTWe\" id=\"NdTWe\" style=\"text-align: center\"><span data-lake-id=\"ud6ea17ec\" id=\"ud6ea17ec\" style=\"color: rgb(72, 179, 120)\">1. 阻止冒泡的两种方式</span></h2><p data-lake-id=\"u432abee9\" id=\"u432abee9\" style=\"text-align: left\"><span data-lake-id=\"u46fc4ef0\" id=\"u46fc4ef0\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22parent%5C%22%20%40click%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'stop'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Jej8E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue288b8af\" id=\"ue288b8af\" style=\"text-align: left\"><span data-lake-id=\"u9396e492\" id=\"u9396e492\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><p data-lake-id=\"u06d45470\" id=\"u06d45470\" style=\"text-align: left\"><span data-lake-id=\"ud2e052dd\" id=\"ud2e052dd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点</span><strong><span data-lake-id=\"uf5a851d8\" id=\"uf5a851d8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">击子节点</span></strong><span data-lake-id=\"u43a611fd\" id=\"u43a611fd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的时候因为事件冒泡的缘故不仅会打印出</span><span data-lake-id=\"u13feaf96\" id=\"u13feaf96\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是儿子</span><span data-lake-id=\"u705eafb4\" id=\"u705eafb4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">还会打印</span><span data-lake-id=\"u954d7539\" id=\"u954d7539\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是爸爸</span><span data-lake-id=\"u970bba11\" id=\"u970bba11\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">。有什么办法可以阻止子节点的</span><strong><span data-lake-id=\"uebce80bc\" id=\"uebce80bc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件冒泡</span></strong><span data-lake-id=\"ubc89fdf8\" id=\"ubc89fdf8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">呢？</span></p><p data-lake-id=\"u31500ace\" id=\"u31500ace\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif%22%2C%22taskId%22%3A%22u3a2a87aa-6cbd-4bcb-a622-0c7fdbb416c%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ufdb6c334%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1a479574\" id=\"u1a479574\"><br></p><h3 data-lake-id=\"oWzps\" id=\"oWzps\" style=\"text-align: left\"><span data-lake-id=\"u79535780\" id=\"u79535780\" style=\"color: rgb(72, 179, 120)\">1 .stop</span></h3><p data-lake-id=\"u4de78f22\" id=\"u4de78f22\" style=\"text-align: left\"><span data-lake-id=\"u23b8551e\" id=\"u23b8551e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。</span></p><p data-lake-id=\"u14416e59\" id=\"u14416e59\" style=\"text-align: left\"><span data-lake-id=\"uf9999d68\" id=\"uf9999d68\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">当添加上</span><span data-lake-id=\"u58f2808f\" id=\"u58f2808f\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.stop</span><span data-lake-id=\"u1a0fccf0\" id=\"u1a0fccf0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符时，只会出现</span><span data-lake-id=\"u41b97183\" id=\"u41b97183\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是儿子</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22parent%5C%22%20%40click%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click.stop%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TVv7R%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"uNVNl\" id=\"uNVNl\" style=\"text-align: left\"><span data-lake-id=\"u8c05b7e8\" id=\"u8c05b7e8\" style=\"color: rgb(72, 179, 120)\">2. event.stopPropagation</span></h3><p data-lake-id=\"u71246161\" id=\"u71246161\" style=\"text-align: left\"><span data-lake-id=\"ud417da85\" id=\"ud417da85\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当然了，我们也可以通过调用</span><span data-lake-id=\"uf35db083\" id=\"uf35db083\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">event.stopPropagation</span><span data-lake-id=\"u6419d384\" id=\"u6419d384\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20name%3A%20'stop'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickChild%20(event)%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90')%5Cn%20%20%20%20%20%20event.stopPropagation()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22JJeve%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"IIPEs\" id=\"IIPEs\" style=\"text-align: center\"><span data-lake-id=\"udce42c34\" id=\"udce42c34\" style=\"color: rgb(72, 179, 120)\">2. 阻止默认事件的两种方式</span></h2><p data-lake-id=\"ufcf19143\" id=\"ufcf19143\" style=\"text-align: left\"><span data-lake-id=\"u2d5624cd\" id=\"u2d5624cd\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue中阻止冒泡有两种方式，那阻止默认事件呢？</span></p><h3 data-lake-id=\"fkfpq\" id=\"fkfpq\" style=\"text-align: left\"><span data-lake-id=\"uf2f67f1a\" id=\"uf2f67f1a\" style=\"color: rgb(72, 179, 120)\">1 .prevent</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22prevent%5C%22%3E%5Cn%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20%40click%3D%5C%22onNoPrevent%5C%22%3E%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%3C%2Fa%3E%5Cn%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20%40click.prevent%3D%5C%22onPrevent%5C%22%3E%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%3C%2Fa%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'prevent'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onNoPrevent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%9C%AA%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onPrevent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22N0T9h%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ubcb1c305\" id=\"ubcb1c305\" style=\"text-align: left\"><span data-lake-id=\"u2d35d84e\" id=\"u2d35d84e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">只要添加</span><span data-lake-id=\"ue6140935\" id=\"ue6140935\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.prevent</span><span data-lake-id=\"uc56c87db\" id=\"uc56c87db\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">轻松实现阻止默认事件</span></p><h3 data-lake-id=\"B1pgj\" id=\"B1pgj\"><span data-lake-id=\"u5999797f\" id=\"u5999797f\">2.event.preventDefault()</span></h3><p data-lake-id=\"uee407897\" id=\"uee407897\" style=\"text-align: left\"><span data-lake-id=\"u5b1b8474\" id=\"u5b1b8474\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和阻止冒泡一样，我们也可以通过调用事件对象的</span><span data-lake-id=\"u65937e9b\" id=\"u65937e9b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">preventDefault</span><span data-lake-id=\"uf2b06ca1\" id=\"uf2b06ca1\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">方法来阻止默认事件</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20name%3A%20'prevent'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onPrevent%20(event)%20%7B%5Cn%20%20%20%20%20%20console.log('%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%20%20event.preventDefault()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22o9tKY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"LqMyK\" id=\"LqMyK\" style=\"text-align: center\"><span data-lake-id=\"u3fc24f1c\" id=\"u3fc24f1c\" style=\"color: rgb(72, 179, 120)\">3 .capture</span></h2><p data-lake-id=\"u6f06ee36\" id=\"u6f06ee36\" style=\"text-align: left\"><span data-lake-id=\"u234c9fe4\" id=\"u234c9fe4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">默认情况下，事件流是以</span><span data-lake-id=\"ud8b75d53\" id=\"ud8b75d53\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">冒泡</span><span data-lake-id=\"u2a76bcce\" id=\"u2a76bcce\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">(由里向外)的形式传递的，如果想以</span><span data-lake-id=\"uce4ea38d\" id=\"uce4ea38d\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">捕获（由外向里）</span><span data-lake-id=\"u83b8d4b5\" id=\"u83b8d4b5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">的形式应该怎么办呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22capture%20parent%5C%22%20%40click.capture%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E7%88%B6%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click.capture%3D%5C%22onClickChild%5C%22%3E%E8%87%AA%E8%8A%82%E7%82%B9%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'capture'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OnlN9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6b3fafbd\" id=\"u6b3fafbd\" style=\"text-align: left\"><span data-lake-id=\"ue99a76c8\" id=\"ue99a76c8\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u2016e654\" id=\"u2016e654\" style=\"text-align: left\"><span data-lake-id=\"u54bf58a7\" id=\"u54bf58a7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不加</span><span data-lake-id=\"u3798729e\" id=\"u3798729e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">catpture</span><span data-lake-id=\"u86add686\" id=\"u86add686\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符，点击</span><strong><span data-lake-id=\"u2dba5fb8\" id=\"u2dba5fb8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">子节点</span></strong><span data-lake-id=\"ue02add94\" id=\"ue02add94\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了</span></p><h2 data-lake-id=\"HAwJz\" id=\"HAwJz\" style=\"text-align: center\"><span data-lake-id=\"uf43933ad\" id=\"uf43933ad\" style=\"color: rgb(72, 179, 120)\">4 .self</span></h2><p data-lake-id=\"uf3b37375\" id=\"uf3b37375\" style=\"text-align: left\"><span data-lake-id=\"ubd8fdafe\" id=\"ubd8fdafe\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">只有当</span><span data-lake-id=\"u63f012a3\" id=\"u63f012a3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">event.target</span><span data-lake-id=\"u75d3ea2a\" id=\"u75d3ea2a\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">是当前元素自身时才会触发事件回调函数</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22self%5C%22%20%40click.self%3D%5C%22onClickSelf%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22inner%5C%22%20%40click%3D%5C%22onClickInner%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'self'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickSelf%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AFself%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickInner%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AFinner%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YKen2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5c09fae3\" id=\"u5c09fae3\" style=\"text-align: left\"><span data-lake-id=\"u88075ea1\" id=\"u88075ea1\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u73c55023\" id=\"u73c55023\" style=\"text-align: left\"><span data-lake-id=\"ub867409b\" id=\"ub867409b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不加</span><span data-lake-id=\"ua2869049\" id=\"ua2869049\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u48148729\" id=\"u48148729\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符的话，点击</span><span data-lake-id=\"u098ca11f\" id=\"u098ca11f\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">inner</span><span data-lake-id=\"u49cdf060\" id=\"u49cdf060\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">节点也会触发</span><span data-lake-id=\"u6328bae0\" id=\"u6328bae0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u8faf3ca1\" id=\"u8faf3ca1\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的事件，加了之后只有触发事件的元素本身是</span><span data-lake-id=\"ua33fa551\" id=\"ua33fa551\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u18127f2b\" id=\"u18127f2b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">，才会打印出</span><span data-lake-id=\"uf1887439\" id=\"uf1887439\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是self节点</span></p><h2 data-lake-id=\"RQFsF\" id=\"RQFsF\" style=\"text-align: center\"><span data-lake-id=\"u925db73d\" id=\"u925db73d\" style=\"color: rgb(72, 179, 120)\">暂停一下：修饰符的顺序如何理解？</span></h2><p data-lake-id=\"u849019ff\" id=\"u849019ff\" style=\"text-align: left\"><span data-lake-id=\"u8c705066\" id=\"u8c705066\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话</span></p><p data-lake-id=\"u9c96fbfa\" id=\"u9c96fbfa\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif%22%2C%22taskId%22%3A%22u4fe3b80c-310b-44fe-8997-3fbdc0a61e3%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ue6c22681%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1a23ba6b\" id=\"u1a23ba6b\" style=\"text-align: center\"><span data-lake-id=\"u3c25f557\" id=\"u3c25f557\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">image.png</span></p><p data-lake-id=\"u13e865eb\" id=\"u13e865eb\" style=\"text-align: left\"><strong><span data-lake-id=\"u9a2df4b0\" id=\"u9a2df4b0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">怎么理解呢？我们来看两个栗子</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22order%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22order-0%5C%22%3E%5Cn%20%20%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20class%3D%5C%22order-parent%5C%22%20%40click.self.prevent%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E4%BC%9A%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%5Cn%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%20class%3D%5C%22order-child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fa%3E%5Cn%20%20%20%20%20%20%3Chr%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22order-2%5C%22%3E%5Cn%20%20%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20class%3D%5C%22order-parent%5C%22%20%40click.prevent.self%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%5Cn%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%20class%3D%5C%22order-child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fa%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'order'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ik1zw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u45abffaf\" id=\"u45abffaf\" style=\"text-align: left\"><span data-lake-id=\"ufd2f59c6\" id=\"ufd2f59c6\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？</span></p><ol list=\"u64d31c97\"><li fid=\"ud87c03ab\" data-lake-id=\"u026e0880\" id=\"u026e0880\" style=\"text-align: left\"><span data-lake-id=\"ufa6517e8\" id=\"ufa6517e8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件</span></li><li fid=\"ud87c03ab\" data-lake-id=\"u699c1bdc\" id=\"u699c1bdc\" style=\"text-align: left\"><span data-lake-id=\"uc61fc751\" id=\"uc61fc751\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点击下面的父节点会打印出</span><strong><span data-lake-id=\"u4f800534\" id=\"u4f800534\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">我是父节点</span></strong><span data-lake-id=\"u2a7916b7\" id=\"u2a7916b7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">，但是</span><strong><span data-lake-id=\"uc2122e29\" id=\"uc2122e29\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不会跳转掘金</span></strong></li><li fid=\"ud87c03ab\" data-lake-id=\"u3d45e281\" id=\"u3d45e281\" style=\"text-align: left\"><span data-lake-id=\"u499435e9\" id=\"u499435e9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点击上面的父节点</span><strong><span data-lake-id=\"u3a7c27b9\" id=\"u3a7c27b9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会</span></strong><span data-lake-id=\"u729cae55\" id=\"u729cae55\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">打印出</span><strong><span data-lake-id=\"uea986708\" id=\"uea986708\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">我是父节点</span></strong><span data-lake-id=\"u7f4cbbcc\" id=\"u7f4cbbcc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">,</span><strong><span data-lake-id=\"ub5a58ef7\" id=\"ub5a58ef7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">也不会跳转掘金</span></strong></li></ol><p data-lake-id=\"u3f69b92c\" id=\"u3f69b92c\" style=\"text-align: left\"><span data-lake-id=\"uf3788ad8\" id=\"uf3788ad8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是</span><strong><span data-lake-id=\"u04a696d9\" id=\"u04a696d9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会</span></strong></p><p data-lake-id=\"uc38b3260\" id=\"uc38b3260\" style=\"text-align: left\"><strong><span data-lake-id=\"u02e07e82\" id=\"u02e07e82\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">为什么？</span></strong></p><p data-lake-id=\"u215be7d4\" id=\"u215be7d4\" style=\"text-align: left\"><span data-lake-id=\"u1d13e6ec\" id=\"u1d13e6ec\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">a@click.self.prevent=&quot;onClickParent&quot;</span><span data-lake-id=\"u9727462f\" id=\"u9727462f\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行</span><span data-lake-id=\"ue5642cac\" id=\"ue5642cac\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"uab01d356\" id=\"uab01d356\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调。</span></p><p data-lake-id=\"ub1da1b63\" id=\"ub1da1b63\" style=\"text-align: left\"><span data-lake-id=\"uef142f1e\" id=\"uef142f1e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就</span><span data-lake-id=\"u0ad19cbd\" id=\"u0ad19cbd\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">不会阻止默认事件</span><span data-lake-id=\"u245939eb\" id=\"u245939eb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">(此时也就发生跳转了)，当然也不会触发</span><span data-lake-id=\"u89f45faf\" id=\"u89f45faf\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"uf180d33b\" id=\"uf180d33b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调</span></p><p data-lake-id=\"uabac06b5\" id=\"uabac06b5\" style=\"text-align: left\"><span data-lake-id=\"u3d58dd5a\" id=\"u3d58dd5a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">同理来我们分析一下</span><span data-lake-id=\"ub392cdcb\" id=\"ub392cdcb\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">a@click.prevent.self=&quot;onClickParent&quot;</span></p><p data-lake-id=\"ud0b596b4\" id=\"ud0b596b4\" style=\"text-align: left\"><span data-lake-id=\"u8e45d2f4\" id=\"u8e45d2f4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行</span><span data-lake-id=\"u602f271b\" id=\"u602f271b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"u97fc194e\" id=\"u97fc194e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调函数。</span></p><p data-lake-id=\"ua240052f\" id=\"ua240052f\" style=\"text-align: left\"><br></p><p data-lake-id=\"ucb88ba29\" id=\"ucb88ba29\" style=\"text-align: left\"><strong><span data-lake-id=\"u3b1d9624\" id=\"u3b1d9624\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回过头看，你理解事件的顺序含义了吗？</span></strong></p><h2 data-lake-id=\"DH91z\" id=\"DH91z\" style=\"text-align: center\"><span data-lake-id=\"u6a50e933\" id=\"u6a50e933\" style=\"color: rgb(72, 179, 120)\">5. once</span></h2><p data-lake-id=\"u06a5cb91\" id=\"u06a5cb91\" style=\"text-align: left\"><span data-lake-id=\"uc2c3022e\" id=\"uc2c3022e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">顾名思义，事件只会触发一次</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22once%5C%22%20%40click.once%3D%5C%22onClickOnce%5C%22%3E%5Cn%20%20%20%20%E5%8F%AA%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'once'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickOnce%20()%20%7B%5Cn%20%20%20%20%20%20console.log('once%EF%BC%8C%E6%88%91%E5%8F%AA%E4%BC%9A%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ODOcx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ucfa4a5b4\" id=\"ucfa4a5b4\" style=\"text-align: left\"><span data-lake-id=\"u3ad3eb1c\" id=\"u3ad3eb1c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">触发一次点击之后，任我再怎么点，回调怎也不会触发了。</span></p><h2 data-lake-id=\"rB1Mt\" id=\"rB1Mt\" style=\"text-align: center\"><span data-lake-id=\"ueb7100c6\" id=\"ueb7100c6\" style=\"color: rgb(72, 179, 120)\">6 .native</span></h2><p data-lake-id=\"u918ccba9\" id=\"u918ccba9\" style=\"text-align: left\"><span data-lake-id=\"u25b855d6\" id=\"u25b855d6\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用</span><span data-lake-id=\"u3185ed9a\" id=\"u3185ed9a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.native</span><span data-lake-id=\"u48bab5c4\" id=\"u48bab5c4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">修饰符可以帮我们办到这点</span></p><p data-lake-id=\"uc9adf63a\" id=\"uc9adf63a\" style=\"text-align: left\"><strong><span data-lake-id=\"u04e5b17b\" id=\"u04e5b17b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">native.vue</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22native-custom%5C%22%3E%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown%3D%5C%22onKeydown%5C%22%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'nativeCustom'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20()%20%7B%5Cn%20%20%20%20%20%20this.%24emit('onKeydown')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tr0Jb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9d802653\" id=\"u9d802653\" style=\"text-align: left\"><strong><span data-lake-id=\"u52f2daa8\" id=\"u52f2daa8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">custom.vue</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22native%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E5%8A%A0%E4%B8%8A.native%E4%B9%8B%E5%90%8E%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E6%89%8D%E5%BE%97%E4%BB%A5%E7%9B%91%E5%90%AC%E6%88%90%E5%8A%9F%20--%3E%5Cn%20%20%20%20%3CNativeCustom%20%40onKeydown%3D%5C%22onKeydown%5C%22%20%40click.native%3D%5C%22onClick%5C%22%20%2F%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnimport%20NativeCustom%20from%20'..%2F..%2Fcomponents%2Fnative.vue'%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'native'%2C%5Cn%20%20components%3A%20%7B%5Cn%20%20%20%20NativeCustom%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20()%20%7B%5Cn%20%20%20%20%20%20console.log('onKeydown')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClick%20()%20%7B%5Cn%20%20%20%20%20%20console.log('onClick')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22muZrE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"R2RfU\" id=\"R2RfU\" style=\"text-align: center\"><span data-lake-id=\"ud6d71723\" id=\"ud6d71723\" style=\"color: rgb(72, 179, 120)\">7 .passive</span></h2><p data-lake-id=\"u3aaf4433\" id=\"u3aaf4433\" style=\"text-align: left\"><span data-lake-id=\"u61a7c823\" id=\"u61a7c823\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue对应 </span><span data-lake-id=\"uf6ccf160\" id=\"uf6ccf160\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">addEventListener</span><span data-lake-id=\"u294c6740\" id=\"u294c6740\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 中的 </span><span data-lake-id=\"uff59dcbc\" id=\"uff59dcbc\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">passive</span><span data-lake-id=\"u2f11a117\" id=\"u2f11a117\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 选项提供了 </span><span data-lake-id=\"u01beea48\" id=\"u01beea48\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.passive</span><span data-lake-id=\"u6eda2642\" id=\"u6eda2642\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 修饰符</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3C!--%20%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%20(%E5%8D%B3%E6%BB%9A%E5%8A%A8%E8%A1%8C%E4%B8%BA)%20%E5%B0%86%E4%BC%9A%E7%AB%8B%E5%8D%B3%E8%A7%A6%E5%8F%91%20--%3E%20%5Cn%3C!--%20%E8%80%8C%E4%B8%8D%E4%BC%9A%E7%AD%89%E5%BE%85%20%60onScroll%60%20%E5%AE%8C%E6%88%90%20--%3E%20%5Cn%3C!--%20%E8%BF%99%E5%85%B6%E4%B8%AD%E5%8C%85%E5%90%AB%20%60event.preventDefault()%60%20%E7%9A%84%E6%83%85%E5%86%B5%20--%3E%20%5Cn%5Cn%3Cdiv%20v-on%3Ascroll.passive%3D%5C%22onScroll%5C%22%3E...%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VOkR9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u02d48cc4\" id=\"u02d48cc4\" style=\"text-align: left\"><strong><span data-lake-id=\"u328905dc\" id=\"u328905dc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p data-lake-id=\"ua36224c6\" id=\"ua36224c6\" style=\"text-align: left\"><strong><span data-lake-id=\"u01dd724a\" id=\"u01dd724a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p data-lake-id=\"ua638a5ee\" id=\"ua638a5ee\" style=\"text-align: left\"><strong><span data-lake-id=\"u336d4982\" id=\"u336d4982\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><h1 data-lake-id=\"qD7c9\" id=\"qD7c9\" style=\"text-align: center\"><span data-lake-id=\"uc648cef1\" id=\"uc648cef1\" style=\"color: rgb(72, 179, 120)\">v-bind修饰符</span></h1><h2 data-lake-id=\"Z7kub\" id=\"Z7kub\" style=\"text-align: center\"><span data-lake-id=\"ubc4f71b1\" id=\"ubc4f71b1\" style=\"color: rgb(72, 179, 120)\">8 .sync</span></h2><p data-lake-id=\"u1e9120fe\" id=\"u1e9120fe\" style=\"text-align: left\"><span data-lake-id=\"u48435c66\" id=\"u48435c66\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当我们想要在</span><span data-lake-id=\"uef6a9e7e\" id=\"uef6a9e7e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">父组件</span><span data-lake-id=\"u4c841f64\" id=\"u4c841f64\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和</span><span data-lake-id=\"u8e925e02\" id=\"u8e925e02\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">子组件</span><span data-lake-id=\"ud8be41d8\" id=\"ud8be41d8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要</span><span data-lake-id=\"u69239036\" id=\"u69239036\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.sync</span><span data-lake-id=\"u3a7436a9\" id=\"u3a7436a9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">修饰符即可办到</span></p><p data-lake-id=\"u5f314776\" id=\"u5f314776\" style=\"text-align: left\"><br></p><h2 data-lake-id=\"KZCOv\" id=\"KZCOv\" style=\"text-align: center\"><span data-lake-id=\"ua139b88e\" id=\"ua139b88e\" style=\"color: rgb(72, 179, 120)\">9 .camel</span></h2><p data-lake-id=\"ub609f4e9\" id=\"ub609f4e9\" style=\"text-align: left\"><span data-lake-id=\"u2dc5d27b\" id=\"u2dc5d27b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.camel</span><span data-lake-id=\"ufee66121\" id=\"ufee66121\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 修饰符允许在使用 DOM 模板时将 </span><span data-lake-id=\"u07193159\" id=\"u07193159\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">v-bind</span><span data-lake-id=\"u436715b7\" id=\"u436715b7\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> property 名称驼峰化，例如 SVG 的 </span><span data-lake-id=\"uc28a4c91\" id=\"uc28a4c91\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">viewBox</span><span data-lake-id=\"ubf73fd3e\" id=\"ubf73fd3e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> property：</span><span data-lake-id=\"u5f39a61c\" id=\"u5f39a61c\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span></p><h2 data-lake-id=\"gux0B\" id=\"gux0B\" style=\"text-align: center\"><span data-lake-id=\"uacc6265c\" id=\"uacc6265c\" style=\"color: rgb(72, 179, 120)\">10 .prop</span></h2><p data-lake-id=\"ud239f232\" id=\"ud239f232\" style=\"text-align: left\"><span data-lake-id=\"u467e8f95\" id=\"u467e8f95\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">关于.prop修饰符官网只有这句话</span><span data-lake-id=\"ub1d2b259\" id=\"ub1d2b259\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> </span><span data-lake-id=\"u96392325\" id=\"u96392325\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.prop</span><span data-lake-id=\"u6de76d07\" id=\"u6de76d07\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。</span></p><p data-lake-id=\"u83eab9d2\" id=\"u83eab9d2\" style=\"text-align: left\"><strong><span data-lake-id=\"ud9a6307e\" id=\"ud9a6307e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">有啥作用？</span></strong></p><ol list=\"u98a92168\"><li fid=\"u377ad7c3\" data-lake-id=\"u0c2d02f3\" id=\"u0c2d02f3\" style=\"text-align: left\"><span data-lake-id=\"ub7475f2b\" id=\"ub7475f2b\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">通过自定义属性存储变量，避免暴露数据</span></li><li fid=\"u377ad7c3\" data-lake-id=\"ufab4e34e\" id=\"ufab4e34e\" style=\"text-align: left\"><span data-lake-id=\"u5ee521dc\" id=\"u5ee521dc\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">防止污染 HTML 结构</span></li></ol><p data-lake-id=\"u8e8dcaef\" id=\"u8e8dcaef\" style=\"text-align: left\"><span data-lake-id=\"ue93e2c10\" id=\"ue93e2c10\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">比如有以下代码</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22prop%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22prop-item%5C%22%20%3Amy-name%3D%5C%22prop%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%2F%2F%20%E6%9C%80%E7%BB%88%E5%8F%98%E6%88%90%E4%BA%86%20%3Cdiv%20my-name%3D%5C%22hello%20prop%5C%22%20class%3D%5C%22prop-item%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22prop-item%5C%22%20%3Amy-name.prop%3D%5C%22prop2%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%2F%2F%20%E6%9C%80%E7%BB%88%E5%8F%98%E6%88%90%E4%BA%86%3Cdiv%20class%3D%5C%22prop-item%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cbutton%20%40click%3D%5C%22onGetResult%5C%22%3E%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'prop'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20prop%3A%20'hello%20prop'%2C%5Cn%20%20%20%20%20%20prop2%3A%20'hello%20prop2'%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onGetResult%20()%20%7B%5Cn%20%20%20%20%20%20const%20%24refProp%20%3D%20this.%24refs.prop%5Cn%20%20%20%20%20%20const%20%24refProp2%20%3D%20this.%24refs.prop2%5Cn%5Cn%20%20%20%20%20%20console.log(%24refProp.getAttribute('my-name'))%20%2F%2F%20hello%20prop%5Cn%20%20%20%20%20%20console.log(%24refProp2.getAttribute('my-name'))%20%2F%2F%20null%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ziFk9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7bde18fa\" id=\"u7bde18fa\" style=\"text-align: left\"><span data-lake-id=\"u6a77b84b\" id=\"u6a77b84b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">从示例上可以看出未使用</span><span data-lake-id=\"ub003bb02\" id=\"ub003bb02\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.prop</span><span data-lake-id=\"u2be0e448\" id=\"u2be0e448\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符的</span><span data-lake-id=\"uf0642733\" id=\"uf0642733\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">my-name</span><span data-lake-id=\"u332b8f2e\" id=\"u332b8f2e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">属性会绑定到dom节点的attribute，从而出现暴露的情况。</span></p><h1 data-lake-id=\"NWe8M\" id=\"NWe8M\" style=\"text-align: center\"><span data-lake-id=\"u21aec479\" id=\"u21aec479\" style=\"color: rgb(72, 179, 120)\">鼠标修饰符</span></h1><p data-lake-id=\"u77b76e1c\" id=\"u77b76e1c\" style=\"text-align: left\"><span data-lake-id=\"u70061c48\" id=\"u70061c48\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当咱们想监听用户点击了</span><span data-lake-id=\"u2ee164c2\" id=\"u2ee164c2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">左键</span><span data-lake-id=\"u113dd482\" id=\"u113dd482\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u7435f193\" id=\"u7435f193\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">右键</span><span data-lake-id=\"uca6ca90c\" id=\"uca6ca90c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">或者</span><span data-lake-id=\"u99838646\" id=\"u99838646\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">中键</span><span data-lake-id=\"u7a4449f4\" id=\"u7a4449f4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">时也有修饰符可以快捷使用，分别是</span><span data-lake-id=\"u85668ad4\" id=\"u85668ad4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.left</span><span data-lake-id=\"u87199a6e\" id=\"u87199a6e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u38927fbe\" id=\"u38927fbe\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.right</span><span data-lake-id=\"u71a62b6e\" id=\"u71a62b6e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u734103d2\" id=\"u734103d2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">middle</span><span data-lake-id=\"u23a7b74f\" id=\"u23a7b74f\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">，来看个例子试试</span></p><p data-lake-id=\"u034c0d8c\" id=\"u034c0d8c\" style=\"text-align: left\"><span data-lake-id=\"u8f05b9b9\" id=\"u8f05b9b9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">根据MDN MouseEvent.button，介绍。</span></p><p data-lake-id=\"u85e7910c\" id=\"u85e7910c\" style=\"text-align: left\"><span data-lake-id=\"udc0795e4\" id=\"udc0795e4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">在最外层</span><span data-lake-id=\"u06acc726\" id=\"u06acc726\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">div.mouse</span><span data-lake-id=\"ue3b95e2b\" id=\"ue3b95e2b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">监听</span><span data-lake-id=\"ua2f69f32\" id=\"ua2f69f32\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">mousedown</span><span data-lake-id=\"u8d440a91\" id=\"u8d440a91\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件，看下用户点击的是鼠标哪个键，三个</span><span data-lake-id=\"u1ed81f0b\" id=\"u1ed81f0b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">button</span><span data-lake-id=\"u9a1dc4ac\" id=\"u9a1dc4ac\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">分别用三个修饰符快捷方式监听</span><span data-lake-id=\"u5e97c380\" id=\"u5e97c380\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">左键</span><span data-lake-id=\"ubffd9cb2\" id=\"ubffd9cb2\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u58b20840\" id=\"u58b20840\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">中键</span><span data-lake-id=\"uf3857139\" id=\"uf3857139\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u3b0b12c3\" id=\"u3b0b12c3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">右键</span><span data-lake-id=\"ua64d802a\" id=\"ua64d802a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">并打印出</span><span data-lake-id=\"uf84034bd\" id=\"uf84034bd\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">left</span><span data-lake-id=\"u6ed16036\" id=\"u6ed16036\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"ucfdb8c29\" id=\"ucfdb8c29\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">middle</span><span data-lake-id=\"uf4f1301c\" id=\"uf4f1301c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u30d44fe0\" id=\"u30d44fe0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">right</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22mouse%5C%22%20%40mousedown%3D%5C%22onMousedown%5C%22%3E%5Cn%20%20%20%20%3Cbutton%20%40click.left%3D%5C%22onClickBtn('left')%5C%22%3Eleft%3C%2Fbutton%3E%5Cn%20%20%20%20%3Cbutton%20%40click.middle%3D%5C%22onClickBtn('middle')%5C%22%3Emiddle%3C%2Fbutton%3E%5Cn%20%20%20%20%3Cbutton%20%40click.right%3D%5C%22onClickBtn('right')%5C%22%3Eright%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'mouse'%2C%5Cn%20%20mounted%20()%20%7B%5Cn%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickBtn%20(msg)%20%7B%5Cn%20%20%20%20%20%20console.log(msg)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onMousedown%20(event)%20%7B%5Cn%20%20%20%20%20%20const%20mosueMsgMap%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%200%3A%20'%E9%BC%A0%E6%A0%87%E5%B7%A6%E9%94%AE'%2C%5Cn%20%20%20%20%20%20%20%201%3A%20'%E9%BC%A0%E6%A0%87%E4%B8%AD%E9%94%AE'%2C%5Cn%20%20%20%20%20%20%20%202%3A%20'%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE'%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20console.log('%E7%82%B9%E5%87%BB%E4%BA%86'%2C%20mosueMsgMap%5Bevent.button%5D)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OJArw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0a41ddbe\" id=\"u0a41ddbe\" style=\"text-align: left\"><strong><span data-lake-id=\"uf17edfed\" id=\"uf17edfed\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">没有带鼠标回来，中键点击暂时不能演示，后续会补上</span></strong></p><p data-lake-id=\"u5bf141f5\" id=\"u5bf141f5\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718538-11650970-9341-438b-b845-a67688ff5897.gif%22%2C%22taskId%22%3A%22u74db735d-39da-43ad-b642-b24eee0ddf1%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22u4ad4c271%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua6fe34d8\" id=\"ua6fe34d8\" style=\"text-align: center\"><span data-lake-id=\"u230b710d\" id=\"u230b710d\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">mouse.gif</span></p><h2 data-lake-id=\"fFSe7\" id=\"fFSe7\" style=\"text-align: center\"><span data-lake-id=\"u7d2a0b47\" id=\"u7d2a0b47\" style=\"color: rgb(72, 179, 120)\">11 .left</span></h2><p data-lake-id=\"u73cf0bd7\" id=\"u73cf0bd7\" style=\"text-align: left\"><span data-lake-id=\"ubab06251\" id=\"ubab06251\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标左键点击</span></p><h2 data-lake-id=\"it85P\" id=\"it85P\" style=\"text-align: center\"><span data-lake-id=\"u43472952\" id=\"u43472952\" style=\"color: rgb(72, 179, 120)\">12 .right</span></h2><p data-lake-id=\"u89c91167\" id=\"u89c91167\" style=\"text-align: left\"><span data-lake-id=\"uff82bd4b\" id=\"uff82bd4b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标右键点击</span></p><h2 data-lake-id=\"LAxXy\" id=\"LAxXy\" style=\"text-align: center\"><span data-lake-id=\"ufec9e26a\" id=\"ufec9e26a\" style=\"color: rgb(72, 179, 120)\">13 .middle</span></h2><p data-lake-id=\"u7cc0d569\" id=\"u7cc0d569\" style=\"text-align: left\"><span data-lake-id=\"uec382e41\" id=\"uec382e41\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标中键点击</span></p><h1 data-lake-id=\"hzYRz\" id=\"hzYRz\" style=\"text-align: center\"><span data-lake-id=\"u6edec5ad\" id=\"u6edec5ad\" style=\"color: rgb(72, 179, 120)\">表单相关修饰符</span></h1><h2 data-lake-id=\"Yph9D\" id=\"Yph9D\" style=\"text-align: center\"><span data-lake-id=\"uf2a6fd37\" id=\"uf2a6fd37\" style=\"color: rgb(72, 179, 120)\">14 .trim</span></h2><p data-lake-id=\"u1cb0902d\" id=\"u1cb0902d\" style=\"text-align: left\"><span data-lake-id=\"u53ccf2f3\" id=\"u53ccf2f3\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">对于输入的内容，希望可以</span><span data-lake-id=\"ubd41da66\" id=\"ubd41da66\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">过滤首尾空格</span><span data-lake-id=\"uf84cb461\" id=\"uf84cb461\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">应该怎么做呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22trim%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22trim-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model%3D%5C%22name%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%9A%3Cspan%3E%7B%7B%20name%20%7D%7D%3C%2Fspan%3E%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22trim-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.trim%3D%5C%22name2%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E7%94%A8%E6%88%B7%E5%90%8D2%EF%BC%9A%3Cspan%3E%7B%7B%20name2%20%7D%7D%3C%2Fspan%3E%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'trim'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20name%3A%20''%2C%5Cn%20%20%20%20%20%20name2%3A%20''%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20watch%3A%20%7B%5Cn%20%20%20%20name%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(%60'----%24%7BnewVal%7D----'%60)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20name2%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(%60'----%24%7BnewVal%7D----'%60)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Bx82u%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9f76bc9c\" id=\"u9f76bc9c\" style=\"text-align: left\"><strong><span data-lake-id=\"uaaf76aeb\" id=\"uaaf76aeb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">.trim修饰符可以很方便做到</span></strong></p><h2 data-lake-id=\"S4q4U\" id=\"S4q4U\" style=\"text-align: center\"><span data-lake-id=\"u523e1764\" id=\"u523e1764\" style=\"color: rgb(72, 179, 120)\">15 .lazy</span></h2><p data-lake-id=\"u30cf5619\" id=\"u30cf5619\" style=\"text-align: left\"><span data-lake-id=\"u5f1b9449\" id=\"u5f1b9449\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">v-model</span><span data-lake-id=\"uefc3dd80\" id=\"uefc3dd80\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">大家都很熟悉，默认情况下，每次</span><span data-lake-id=\"ud4464356\" id=\"ud4464356\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">input事件</span><span data-lake-id=\"ud865ddb5\" id=\"ud865ddb5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？</span></p><p data-lake-id=\"u17cf87ef\" id=\"u17cf87ef\" style=\"text-align: left\"><strong><span data-lake-id=\"u13ec8cd8\" id=\"u13ec8cd8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">思路1：</span></strong><span data-lake-id=\"u76089b8a\" id=\"u76089b8a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"u29d49872\" id=\"u29d49872\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">绑定change事件，在事件回调中手动获取target的值</span></p><p data-lake-id=\"u08b1b8a0\" id=\"u08b1b8a0\" style=\"text-align: left\"><strong><span data-lake-id=\"u6bb19acf\" id=\"u6bb19acf\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">思路2：</span></strong><span data-lake-id=\"u82ebf9ba\" id=\"u82ebf9ba\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"ub365d7d2\" id=\"ub365d7d2\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">直接使用</span><span data-lake-id=\"ubbdd602e\" id=\"ubbdd602e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.lazy</span><span data-lake-id=\"uc251a322\" id=\"uc251a322\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符即可达到效果</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22lazy%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22lazy-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model%3D%5C%22text%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E6%97%A0.lazy%3A%20%7B%7B%20text%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22lazy-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.lazy%3D%5C%22text2%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E.lazy%3A%20%7B%7B%20text2%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'lazy'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20text%3A%20''%2C%5Cn%20%20%20%20%20%20text2%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HVqqo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"udee19840\" id=\"udee19840\" style=\"text-align: left\"><span data-lake-id=\"u45de1934\" id=\"u45de1934\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，</span><span data-lake-id=\"u0818e561\" id=\"u0818e561\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">text2</span><span data-lake-id=\"u0359bbef\" id=\"u0359bbef\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的数据才更新了</span></p><h2 data-lake-id=\"LkaRe\" id=\"LkaRe\" style=\"text-align: center\"><span data-lake-id=\"u9bd0696f\" id=\"u9bd0696f\" style=\"color: rgb(72, 179, 120)\">16 .number</span></h2><p data-lake-id=\"u7b7164ba\" id=\"u7b7164ba\" style=\"text-align: left\"><span data-lake-id=\"u0d1b805c\" id=\"u0d1b805c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">我们知道</span><span data-lake-id=\"u3ec2baec\" id=\"u3ec2baec\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">input</span><span data-lake-id=\"u03d1e915\" id=\"u03d1e915\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">输入框的</span><span data-lake-id=\"u9589acc3\" id=\"u9589acc3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">type</span><span data-lake-id=\"u5ede771d\" id=\"u5ede771d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">哪怕是</span><span data-lake-id=\"u43eaf4ee\" id=\"u43eaf4ee\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">number</span><span data-lake-id=\"u7dc1d024\" id=\"u7dc1d024\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">得到的值的类型也是</span><span data-lake-id=\"u1fef5508\" id=\"u1fef5508\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">string</span><span data-lake-id=\"uc3a9a8ab\" id=\"uc3a9a8ab\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">，如果我们想直接拿到</span><span data-lake-id=\"u76a7da75\" id=\"u76a7da75\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">number</span><span data-lake-id=\"u1cb93f60\" id=\"u1cb93f60\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">类型的数据，有不想麻烦的手动转换应该怎么办呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22number%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E6%97%A0.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model%3D%5C%22number%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3Etype%3Atext%20.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.number%3D%5C%22number1%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3Etype%3Anumber%20.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model.number%3D%5C%22number2%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'lazy'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20number%3A%200%2C%5Cn%20%20%20%20%20%20number1%3A%20''%2C%5Cn%20%20%20%20%20%20number2%3A%20''%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20watch%3A%20%7B%5Cn%20%20%20%20number%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20number1%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20number2%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22I5e3R%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u821a9205\" id=\"u821a9205\" style=\"text-align: left\"><span data-lake-id=\"ue0f09da4\" id=\"ue0f09da4\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><ol list=\"u811b0df5\"><li fid=\"ubfde6257\" data-lake-id=\"ue47ec899\" id=\"ue47ec899\" style=\"text-align: left\"><span data-lake-id=\"u3fec194d\" id=\"u3fec194d\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第一个输入框的类型是number，但是得到的值是string</span></li><li fid=\"ubfde6257\" data-lake-id=\"u4bc68a12\" id=\"u4bc68a12\" style=\"text-align: left\"><span data-lake-id=\"uaea0bc65\" id=\"uaea0bc65\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 </span><span data-lake-id=\"uc0037fa8\" id=\"uc0037fa8\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">parseFloat()</span><span data-lake-id=\"u45278a79\" id=\"u45278a79\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\"> 解析，则会返回原始的值。）</span></li><li fid=\"ubfde6257\" data-lake-id=\"u76d45212\" id=\"u76d45212\" style=\"text-align: left\"><span data-lake-id=\"ua9a2254f\" id=\"ua9a2254f\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第三个输入框的类型是number，最后得到的值也是number</span></li></ol><p data-lake-id=\"uab3ceedb\" id=\"uab3ceedb\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif%22%2C%22taskId%22%3A%22u41d07f12-da60-4a2b-8499-f0209ae7331%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22u91c65a41%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u8d6fc7b8\" id=\"u8d6fc7b8\" style=\"text-align: center\"><span data-lake-id=\"u07bcd0ab\" id=\"u07bcd0ab\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">number.gif</span></p><h1 data-lake-id=\"tKRUK\" id=\"tKRUK\" style=\"text-align: center\"><span data-lake-id=\"u4d8f43d8\" id=\"u4d8f43d8\" style=\"color: rgb(72, 179, 120)\">系统修饰符</span></h1><p data-lake-id=\"ufaa7e651\" id=\"ufaa7e651\" style=\"text-align: left\"><span data-lake-id=\"ude2334a0\" id=\"ude2334a0\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当点击事件或者键盘事件需要系统键同时按下才触发时</span><span data-lake-id=\"u2901b4a9\" id=\"u2901b4a9\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.ctrl</span><span data-lake-id=\"u3f125b55\" id=\"u3f125b55\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u622ce860\" id=\"u622ce860\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.alt</span><span data-lake-id=\"ud6869c6d\" id=\"ud6869c6d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"ub458bf9a\" id=\"ub458bf9a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.shift</span><span data-lake-id=\"u1edc2518\" id=\"u1edc2518\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u46fba77b\" id=\"u46fba77b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.meta</span><span data-lake-id=\"u9a18352b\" id=\"u9a18352b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">可以帮大忙噢！</span></p><p data-lake-id=\"u5fcc32c7\" id=\"u5fcc32c7\" style=\"text-align: left\"><strong><span data-lake-id=\"u28ddb0fc\" id=\"u28ddb0fc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如下代码</span></strong></p><ol list=\"u9147195a\"><li fid=\"ud57cb901\" data-lake-id=\"uf606973f\" id=\"uf606973f\" style=\"text-align: left\"><span data-lake-id=\"ud6fc24ee\" id=\"ud6fc24ee\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">全局监听keydown事件，尝试看</span><span data-lake-id=\"u480ba258\" id=\"u480ba258\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.ctrl</span><span data-lake-id=\"u631f914d\" id=\"u631f914d\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u034682f4\" id=\"u034682f4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.alt</span><span data-lake-id=\"ua84d8ba6\" id=\"ua84d8ba6\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u30b9e19d\" id=\"u30b9e19d\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.shift</span><span data-lake-id=\"u1c346d70\" id=\"u1c346d70\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u76c35f7a\" id=\"u76c35f7a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.meta</span><span data-lake-id=\"u89c38233\" id=\"u89c38233\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">是否被按下</span></li><li fid=\"ud57cb901\" data-lake-id=\"u2bc1ab75\" id=\"u2bc1ab75\" style=\"text-align: left\"><span data-lake-id=\"u6260c966\" id=\"u6260c966\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">分别给四个按钮加上</span><span data-lake-id=\"ua8f93abf\" id=\"ua8f93abf\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"uc6fd784b\" id=\"uc6fd784b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.ctrl</span><span data-lake-id=\"u2a6d31fd\" id=\"u2a6d31fd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u59aa2655\" id=\"u59aa2655\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.alt</span><span data-lake-id=\"u31bd89a8\" id=\"u31bd89a8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"ud66e4550\" id=\"ud66e4550\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.shift</span><span data-lake-id=\"ua0700796\" id=\"ua0700796\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u72474bfe\" id=\"u72474bfe\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.meta</span><span data-lake-id=\"ue902c1ee\" id=\"ue902c1ee\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效</span></li></ol><p data-lake-id=\"u91bd6c9d\" id=\"u91bd6c9d\" style=\"text-align: left\"><strong><span data-lake-id=\"u2324a8dc\" id=\"u2324a8dc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22system%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%7B%7B%20msg%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22buttons%5C%22%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.ctrl%3D%5C%22onClickButon('ctrl')%5C%22%3Ectrl%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.alt%3D%5C%22onClickButon('alt')%5C%22%3Ealt%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.shift%3D%5C%22onClickButon('shift')%5C%22%3Eshift%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.meta%3D%5C%22onClickButon('meta')%5C%22%3Emeta%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'system'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20msg%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.onListenSystemKeyDown()%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onListenSystemKeyDown%20()%20%7B%5Cn%20%20%20%20%20%20document.addEventListener('keydown'%2C%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20let%20msg%20%3D%20'%E6%8C%89%E4%B8%8B%E4%BA%86'%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(event.ctrlKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'ctrl%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.altKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'alt%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.shiftKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'shift%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.metaKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'meta%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'%E5%85%B6%E4%BB%96%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.msg%20%3D%20msg%5Cn%20%20%20%20%20%20%7D%2C%20false)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickButon%20(key)%20%7B%5Cn%20%20%20%20%20%20console.log(%60%E5%8F%AA%E6%9C%89%E5%90%8C%E6%97%B6%E6%8C%89%E4%B8%8B%24%7Bkey%7D%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%60)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22sEv8K%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"vrHrH\" id=\"vrHrH\" style=\"text-align: center\"><span data-lake-id=\"u3319dd7c\" id=\"u3319dd7c\" style=\"color: rgb(72, 179, 120)\">17 .ctrl</span></h2><p data-lake-id=\"u64329c6b\" id=\"u64329c6b\" style=\"text-align: left\"><span data-lake-id=\"u60d29d8e\" id=\"u60d29d8e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"EDUwo\" id=\"EDUwo\" style=\"text-align: center\"><span data-lake-id=\"ub7fe4845\" id=\"ub7fe4845\" style=\"color: rgb(72, 179, 120)\">18 .alt</span></h2><p data-lake-id=\"u38c5ac20\" id=\"u38c5ac20\" style=\"text-align: left\"><span data-lake-id=\"u772e7304\" id=\"u772e7304\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"JBKLM\" id=\"JBKLM\" style=\"text-align: center\"><span data-lake-id=\"u19ccadea\" id=\"u19ccadea\" style=\"color: rgb(72, 179, 120)\">19 .shift</span></h2><p data-lake-id=\"uf3481f3f\" id=\"uf3481f3f\" style=\"text-align: left\"><span data-lake-id=\"uf99c4263\" id=\"uf99c4263\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"UnowS\" id=\"UnowS\" style=\"text-align: center\"><span data-lake-id=\"uce751ccf\" id=\"uce751ccf\" style=\"color: rgb(72, 179, 120)\">20 .meta</span></h2><p data-lake-id=\"u1f33c1d8\" id=\"u1f33c1d8\" style=\"text-align: left\"><span data-lake-id=\"u7764a65b\" id=\"u7764a65b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Xw5H6\" id=\"Xw5H6\" style=\"text-align: center\"><span data-lake-id=\"u24c67305\" id=\"u24c67305\" style=\"color: rgb(72, 179, 120)\">21 .exact</span></h2><p data-lake-id=\"ua62785aa\" id=\"ua62785aa\" style=\"text-align: left\"><span data-lake-id=\"u46f32d6f\" id=\"u46f32d6f\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">严格来说这</span><span data-lake-id=\"u4dbac899\" id=\"u4dbac899\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.exact</span><span data-lake-id=\"u43b5013c\" id=\"u43b5013c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发</span><span data-lake-id=\"u89155beb\" id=\"u89155beb\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.alt</span><span data-lake-id=\"uea00f4cc\" id=\"uea00f4cc\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">也可以触发</span><span data-lake-id=\"uf76142e0\" id=\"uf76142e0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.shift</span><span data-lake-id=\"ubecfe885\" id=\"ubecfe885\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">。</span></p><p data-lake-id=\"u97cf7b30\" id=\"u97cf7b30\" style=\"text-align: left\"><span data-lake-id=\"uc2817803\" id=\"uc2817803\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发</span></p><p data-lake-id=\"u041103f6\" id=\"u041103f6\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif%22%2C%22taskId%22%3A%22u98a03c13-3c8f-42ff-aaf6-d3be97c1223%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22uaac7048a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf5f71344\" id=\"uf5f71344\" style=\"text-align: center\"><span data-lake-id=\"u79e233e3\" id=\"u79e233e3\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">system2.gif</span></p><ol list=\"u0c8cb98f\"><li fid=\"u082a9c9d\" data-lake-id=\"ue2720757\" id=\"ue2720757\" style=\"text-align: left\"><strong><span data-lake-id=\"u202b2ffd\" id=\"u202b2ffd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">只想某个系统修饰键按下时才触发点击</span></strong></li><li fid=\"u082a9c9d\" data-lake-id=\"ua773930b\" id=\"ua773930b\" style=\"text-align: left\"><strong><span data-lake-id=\"uea07182f\" id=\"uea07182f\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">没有任何系统修饰符被按下的时候才触发点击</span></strong></li></ol><p data-lake-id=\"u72b0ed7d\" id=\"u72b0ed7d\" style=\"text-align: left\"><span data-lake-id=\"u333076e0\" id=\"u333076e0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">要实现上面的需求</span><span data-lake-id=\"u836b73f7\" id=\"u836b73f7\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.exact</span><span data-lake-id=\"u8efeff6e\" id=\"u8efeff6e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">就派上用场了，用上面的例子稍作改造</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22extra%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%7B%7B%20msg%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22buttons%5C%22%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.ctrl.exact%3D%5C%22onClickButon('ctrl')%5C%22%3Ectrl%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.alt.exact%3D%5C%22onClickButon('alt')%5C%22%3Ealt%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.shift.exact%3D%5C%22onClickButon('shift')%5C%22%3Eshift%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.meta.exact%3D%5C%22onClickButon('meta')%5C%22%3Emeta%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.exact%3D%5C%22onClickButon('%E9%9D%9E%E7%B3%BB%E7%BB%9F%E9%94%AE')%5C%22%3E%E9%9D%9E%E7%B3%BB%E7%BB%9F%E9%94%AE%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'extra'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20msg%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.onListenSystemKeyDown()%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onListenSystemKeyDown%20()%20%7B%5Cn%20%20%20%20%20%20document.addEventListener('keydown'%2C%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20let%20msg%20%3D%20'%E6%8C%89%E4%B8%8B%E4%BA%86'%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(event.ctrlKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'ctrl%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.altKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'alt%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.shiftKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'shift%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.metaKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'meta%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'%E5%85%B6%E4%BB%96%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.msg%20%3D%20msg%5Cn%20%20%20%20%20%20%7D%2C%20false)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickButon%20(key)%20%7B%5Cn%20%20%20%20%20%20console.log(%60%E5%8F%AA%E6%9C%89%E5%90%8C%E6%97%B6%E6%8C%89%E4%B8%8B%24%7Bkey%7D%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%60)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22RfSIX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h1 data-lake-id=\"QRDoL\" id=\"QRDoL\" style=\"text-align: center\"><span data-lake-id=\"u9e072fe4\" id=\"u9e072fe4\" style=\"color: rgb(72, 179, 120)\">按键修饰符</span></h1><p data-lake-id=\"u4d7607d4\" id=\"u4d7607d4\" style=\"text-align: left\"><span data-lake-id=\"ud435401d\" id=\"ud435401d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。</span></p><p data-lake-id=\"u90021919\" id=\"u90021919\" style=\"text-align: left\"><span data-lake-id=\"u90ca1994\" id=\"u90ca1994\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如下代码，我们分别给</span><span data-lake-id=\"u1b9ae731\" id=\"u1b9ae731\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">enter</span><span data-lake-id=\"u77e90de4\" id=\"u77e90de4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u843ed54b\" id=\"u843ed54b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">tab</span><span data-lake-id=\"uc436000b\" id=\"uc436000b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"uf15decc4\" id=\"uf15decc4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">delete</span><span data-lake-id=\"u9eea15d1\" id=\"u9eea15d1\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">等按键指定了</span><span data-lake-id=\"u84258e58\" id=\"u84258e58\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">keydown</span><span data-lake-id=\"u6b965914\" id=\"u6b965914\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件，当在指定的输入框中按下指定的键盘，会打印出</span><span data-lake-id=\"uf4a443c5\" id=\"uf4a443c5\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">enter</span><span data-lake-id=\"u22d7fe84\" id=\"u22d7fe84\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u24545ebc\" id=\"u24545ebc\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">tab</span><span data-lake-id=\"ua5469367\" id=\"ua5469367\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u94786a77\" id=\"u94786a77\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">delete</span><span data-lake-id=\"ud11bd656\" id=\"ud11bd656\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">等，其他按键在输入框中无法触发该console</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22key-modifiers%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20enter%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.enter%3D%5C%22onKeydown('enter')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20tab%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.tab%3D%5C%22onKeydown('tab')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20delete%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.delete%3D%5C%22onKeydown('delete')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20esc%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.esc%3D%5C%22onKeydown('esc')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20space%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.space%3D%5C%22onKeydown('space')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20up%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.up%3D%5C%22onKeydown('up')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20down%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.down%3D%5C%22onKeydown('down')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20left%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.left%3D%5C%22onKeydown('left')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20right%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.right%3D%5C%22onKeydown('right')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20page-down%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.page-down%3D%5C%22onKeydown('page-down')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20page-up%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.page-up%3D%5C%22onKeydown('page-up')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'keyModifiers'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20(keyName)%20%7B%5Cn%20%20%20%20%20%20console.log(keyName)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22B9SEe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"C8jGV\" id=\"C8jGV\" style=\"text-align: center\"><span data-lake-id=\"u3727bbec\" id=\"u3727bbec\" style=\"color: rgb(72, 179, 120)\">22 .enter</span></h2><p data-lake-id=\"ud5f87782\" id=\"ud5f87782\" style=\"text-align: left\"><span data-lake-id=\"uad1dcaf4\" id=\"uad1dcaf4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Jw4r0\" id=\"Jw4r0\" style=\"text-align: center\"><span data-lake-id=\"u9ecaef2a\" id=\"u9ecaef2a\" style=\"color: rgb(72, 179, 120)\">23 .tab</span></h2><p data-lake-id=\"u9c9e02bc\" id=\"u9c9e02bc\" style=\"text-align: left\"><span data-lake-id=\"udc6c96c9\" id=\"udc6c96c9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"U7gUW\" id=\"U7gUW\" style=\"text-align: center\"><span data-lake-id=\"u8a6d0533\" id=\"u8a6d0533\" style=\"color: rgb(72, 179, 120)\">24 .delete</span></h2><p data-lake-id=\"uc1a938d3\" id=\"uc1a938d3\" style=\"text-align: left\"><span data-lake-id=\"uc59dbfb9\" id=\"uc59dbfb9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"q769F\" id=\"q769F\" style=\"text-align: center\"><span data-lake-id=\"u9b7785bc\" id=\"u9b7785bc\" style=\"color: rgb(72, 179, 120)\">25 .esc</span></h2><p data-lake-id=\"ub6706d3d\" id=\"ub6706d3d\" style=\"text-align: left\"><span data-lake-id=\"ue546c163\" id=\"ue546c163\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"lSVHX\" id=\"lSVHX\" style=\"text-align: center\"><span data-lake-id=\"u108dbc34\" id=\"u108dbc34\" style=\"color: rgb(72, 179, 120)\">26 .space</span></h2><p data-lake-id=\"u71878930\" id=\"u71878930\" style=\"text-align: left\"><span data-lake-id=\"u3d475235\" id=\"u3d475235\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"CJR2h\" id=\"CJR2h\" style=\"text-align: center\"><span data-lake-id=\"ua84f430a\" id=\"ua84f430a\" style=\"color: rgb(72, 179, 120)\">27 .up</span></h2><p data-lake-id=\"ub10f88fd\" id=\"ub10f88fd\" style=\"text-align: left\"><span data-lake-id=\"uecd98c1b\" id=\"uecd98c1b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"jtFso\" id=\"jtFso\" style=\"text-align: center\"><span data-lake-id=\"u61610469\" id=\"u61610469\" style=\"color: rgb(72, 179, 120)\">28 .down</span></h2><p data-lake-id=\"u9dfc216b\" id=\"u9dfc216b\" style=\"text-align: left\"><span data-lake-id=\"uc830c3b3\" id=\"uc830c3b3\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"KcsBn\" id=\"KcsBn\" style=\"text-align: center\"><span data-lake-id=\"u54800d8b\" id=\"u54800d8b\" style=\"color: rgb(72, 179, 120)\">29 .left</span></h2><p data-lake-id=\"u700fb838\" id=\"u700fb838\" style=\"text-align: left\"><span data-lake-id=\"uc63696ba\" id=\"uc63696ba\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Mrnjd\" id=\"Mrnjd\" style=\"text-align: center\"><span data-lake-id=\"u7fd7a6bb\" id=\"u7fd7a6bb\" style=\"color: rgb(72, 179, 120)\">30 .right</span></h2><p data-lake-id=\"ub38af451\" id=\"ub38af451\" style=\"text-align: left\"><span data-lake-id=\"ua611fea8\" id=\"ua611fea8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"P5Hyd\" id=\"P5Hyd\" style=\"text-align: center\"><span data-lake-id=\"u47e836c0\" id=\"u47e836c0\" style=\"color: rgb(72, 179, 120)\">31 .page-down</span></h2><p data-lake-id=\"ufd717625\" id=\"ufd717625\" style=\"text-align: left\"><span data-lake-id=\"udf6c0267\" id=\"udf6c0267\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"vV3ei\" id=\"vV3ei\" style=\"text-align: center\"><span data-lake-id=\"u1425a2c6\" id=\"u1425a2c6\" style=\"color: rgb(72, 179, 120)\">32 .page-up</span></h2><p data-lake-id=\"u8e8f7298\" id=\"u8e8f7298\" style=\"text-align: left\"><span data-lake-id=\"u8159c057\" id=\"u8159c057\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h1 data-lake-id=\"iSrWh\" id=\"iSrWh\" style=\"text-align: center\"><span data-lake-id=\"u77cef408\" id=\"u77cef408\" style=\"color: rgb(72, 179, 120)\">如何自定义按键修饰符</span></h1><p data-lake-id=\"ue30e99ce\" id=\"ue30e99ce\" style=\"text-align: left\"><span data-lake-id=\"u972e1832\" id=\"u972e1832\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？</span></p><p data-lake-id=\"uac1c7481\" id=\"uac1c7481\" style=\"text-align: left\"><span data-lake-id=\"u652ee143\" id=\"u652ee143\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。</span></p><p data-lake-id=\"ub35a9201\" id=\"ub35a9201\" style=\"text-align: left\"><span data-lake-id=\"u980a877d\" id=\"u980a877d\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Vue.config.keyCodes%20%3D%20%7B%5Cn%20%20q%3A%2081%5Cn%7D%5Cn%5Cn%3Cdiv%20class%3D%5C%22custom%5C%22%3E%5Cn%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.q%3D%5C%22f1Keydown%5C%22%3E%5Cn%3C%2Fdiv%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'custom'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20f1Keydown%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%8C%89%E4%B8%8B%E4%BA%86q')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22yT5kG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u375923cb\" id=\"u375923cb\" style=\"text-align: left\"><span data-lake-id=\"u8c6843cd\" id=\"u8c6843cd\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><p data-lake-id=\"u99728a98\" id=\"u99728a98\" style=\"text-align: left\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-09T02:36:37.000Z",
    "deleted_at": null,
    "created_at": "2021-11-24T09:05:01.000Z",
    "updated_at": "2021-12-09T02:40:34.000Z",
    "published_at": "2021-12-09T02:36:37.000Z",
    "first_published_at": "2021-12-09T02:36:37.000Z",
    "word_count": 4778,
    "cover": "https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif",
    "description": "前言vue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！耽误您15分钟您可以收获：32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用如何利用...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 62339583,
    "slug": "xgatwt",
    "title": "使用类型断言达到预期",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 5,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-10T06:09:29.957Z",
      "updated_at": "2021-12-10T06:09:29.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-10T05:50:00.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-10T05:50:00.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"iQDKT\"></a>\n## tags: [vue修饰符]\ncategories: [vue修饰符]\n<a name=\"bT6Bo\"></a>\n## 类型断言\n\n<br />在学习TyScript的时候，虽然TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：\n```javascript\nconst getLength = target => {\n  if (target.length) {\n    return target.length;\n  } else {\n    return target.toString().length;\n  }\n};\n```\n这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：\n```typescript\nconst getLength = (target: string | number): number => {\n  if (target.length) { //  类型\"string | number\"上不存在属性\"length\"\n    return target.length; // 类型\"number\"上不存在属性\"length\"\n  } else {\n    return target.toString().length;\n  }\n};\n```\n当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。<br />                                     ![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png#clientId=u71ea46b0-f53e-4&from=paste&id=u58fe898e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=310&originWidth=667&originalType=binary&ratio=1&size=24199&status=done&style=none&taskId=uca4e8114-2b20-44b6-ac65-45cfd789757)<br />很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是<type>value，一种是value as type , 例子:\n```typescript\nconst getStrLength = (target: string | number): number => {\n  \n  if ((<string>target).length) { // 这种形式在JSX代码中不可以使用，而且也是TSLint不建议的写法\n    \n    return (target as string).length; // 这种形式是没有任何问题的写法，所以建议大家始终使用这种形式\n  } else {\n    return target.toString().length;\n  }\n};\n```\n​\n\n例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。<br />这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用**自定义类型保护**来简化这里。<br />注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。<br />​\n\n​\n\n![5cf4bfc100015d6b16000232.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg#clientId=u71ea46b0-f53e-4&from=ui&id=u7de5a917&margin=%5Bobject%20Object%5D&name=5cf4bfc100015d6b16000232.jpg&originHeight=232&originWidth=1600&originalType=binary&ratio=1&size=51607&status=done&style=none&taskId=u77d837b2-ece7-46af-a349-de5a00db9d2)<br />​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​<br />\n",
    "body_draft": "<a name=\"iQDKT\"></a>\n## tags: [vue修饰符]\ncategories: [vue修饰符]\n<a name=\"bT6Bo\"></a>\n## 类型断言\n\n<br />在学习TyScript的时候，虽然TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：\n```javascript\nconst getLength = target => {\n  if (target.length) {\n    return target.length;\n  } else {\n    return target.toString().length;\n  }\n};\n```\n这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：\n```typescript\nconst getLength = (target: string | number): number => {\n  if (target.length) { //  类型\"string | number\"上不存在属性\"length\"\n    return target.length; // 类型\"number\"上不存在属性\"length\"\n  } else {\n    return target.toString().length;\n  }\n};\n```\n当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。<br />                                     ![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png#clientId=u71ea46b0-f53e-4&from=paste&id=u58fe898e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=310&originWidth=667&originalType=binary&ratio=1&size=24199&status=done&style=none&taskId=uca4e8114-2b20-44b6-ac65-45cfd789757)<br />很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是<type>value，一种是value as type , 例子:\n```typescript\nconst getStrLength = (target: string | number): number => {\n  \n  if ((<string>target).length) { // 这种形式在JSX代码中不可以使用，而且也是TSLint不建议的写法\n    \n    return (target as string).length; // 这种形式是没有任何问题的写法，所以建议大家始终使用这种形式\n  } else {\n    return target.toString().length;\n  }\n};\n```\n​\n\n例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。<br />这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用**自定义类型保护**来简化这里。<br />注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。<br />​\n\n​\n\n![5cf4bfc100015d6b16000232.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg#clientId=u71ea46b0-f53e-4&from=ui&id=u7de5a917&margin=%5Bobject%20Object%5D&name=5cf4bfc100015d6b16000232.jpg&originHeight=232&originWidth=1600&originalType=binary&ratio=1&size=51607&status=done&style=none&taskId=u77d837b2-ece7-46af-a349-de5a00db9d2)<br />​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​<br />\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"iQDKT\"><span class=\"ne-text\" style=\"color: #e06c75; font-size: 14px\">tags</span><span class=\"ne-text\" style=\"color: #abb2bf; font-size: 14px\">:</span><span class=\"ne-text\" style=\"color: #bbbbbb; font-size: 14px\"> [</span><span class=\"ne-text\" style=\"color: #e5c07b; font-size: 14px\">vue修饰符</span><span class=\"ne-text\" style=\"color: #bbbbbb; font-size: 14px\">]</span></h2><p id=\"u2bf98518\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #e06c75; font-size: 14px\">categories</span><span class=\"ne-text\" style=\"color: #abb2bf; font-size: 14px\">:</span><span class=\"ne-text\" style=\"color: #bbbbbb; font-size: 14px\"> [</span><span class=\"ne-text\" style=\"color: #e5c07b; font-size: 14px\">vue修饰符</span><span class=\"ne-text\" style=\"color: #bbbbbb; font-size: 14px\">]</span></p><h2 id=\"bT6Bo\"><span class=\"ne-text\">类型断言</span></h2><p id=\"u21313d29\" class=\"ne-p\"><br></p><p id=\"ubf507e37\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 22px\">在学习TyScript的时候，虽然</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px\">TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：</span></p><pre data-language=\"javascript\" id=\"gdooN\" class=\"ne-codeblock language-javascript\">const getLength = target =&gt; {\n  if (target.length) {\n    return target.length;\n  } else {\n    return target.toString().length;\n  }\n};</pre><p id=\"u239f86b1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px\">这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：</span></p><pre data-language=\"typescript\" id=\"CE4Oc\" class=\"ne-codeblock language-typescript\">const getLength = (target: string | number): number =&gt; {\n  if (target.length) { //  类型&quot;string | number&quot;上不存在属性&quot;length&quot;\n    return target.length; // 类型&quot;number&quot;上不存在属性&quot;length&quot;\n  } else {\n    return target.toString().length;\n  }\n};</pre><p id=\"u69f4574a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。</span></p><p id=\"ue740337d\" class=\"ne-p\"><span class=\"ne-text\">                                     </span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png\" width=\"667\" id=\"u58fe898e\" class=\"ne-image\"></p><p id=\"u0872c59d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是&lt;type&gt;value，一种是value as type , 例子:</span></p><pre data-language=\"typescript\" id=\"MJkLK\" class=\"ne-codeblock language-typescript\">const getStrLength = (target: string | number): number =&gt; {\n  \n  if ((&lt;string&gt;target).length) { // 这种形式在JSX代码中不可以使用，而且也是TSLint不建议的写法\n    \n    return (target as string).length; // 这种形式是没有任何问题的写法，所以建议大家始终使用这种形式\n  } else {\n    return target.toString().length;\n  }\n};</pre><p id=\"uba8da948\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"udd91489d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。</span></p><p id=\"u7bbba7c2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用</span><strong><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">自定义类型保护</span></strong><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">来简化这里。</span></p><p id=\"uee9f8db0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。</span></p><p id=\"u5d2ea52e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u38c9e2b1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u9d73cd36\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg\" width=\"1600\" id=\"u7de5a917\" class=\"ne-image\"></p><p id=\"u14351333\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ue71dfdda\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u2f6540c5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u516ee536\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ud965c3ad\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u05d5a341\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ube0fb324\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u37a253fb\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u7e8ed675\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u33f361bd\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ud0013144\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ufa54ad67\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u672e206f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u6d4edc80\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"uf5e371d4\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u1ce67147\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u0040830d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"iQDKT\" id=\"iQDKT\"><span data-lake-id=\"u3dbc43a5\" id=\"u3dbc43a5\" class=\"lake-fontsize-11\" style=\"color: #e06c75\">tags</span><span data-lake-id=\"u0ce93002\" id=\"u0ce93002\" class=\"lake-fontsize-11\" style=\"color: #abb2bf\">:</span><span data-lake-id=\"ue0327172\" id=\"ue0327172\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\"> [</span><span data-lake-id=\"u822efe32\" id=\"u822efe32\" class=\"lake-fontsize-11\" style=\"color: #e5c07b\">vue修饰符</span><span data-lake-id=\"u7e349071\" id=\"u7e349071\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\">]</span></h2><p data-lake-id=\"u2bf98518\" id=\"u2bf98518\"><span data-lake-id=\"u5efaffc8\" id=\"u5efaffc8\" class=\"lake-fontsize-11\" style=\"color: #e06c75\">categories</span><span data-lake-id=\"u4790ca91\" id=\"u4790ca91\" class=\"lake-fontsize-11\" style=\"color: #abb2bf\">:</span><span data-lake-id=\"u0f80582b\" id=\"u0f80582b\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\"> [</span><span data-lake-id=\"uae509e68\" id=\"uae509e68\" class=\"lake-fontsize-11\" style=\"color: #e5c07b\">vue修饰符</span><span data-lake-id=\"uf8377e9a\" id=\"uf8377e9a\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\">]</span></p><h2 data-lake-id=\"bT6Bo\" id=\"bT6Bo\"><span data-lake-id=\"ue5eda6f0\" id=\"ue5eda6f0\">类型断言</span></h2><p data-lake-id=\"u21313d29\" id=\"u21313d29\"><br></p><p data-lake-id=\"ubf507e37\" id=\"ubf507e37\"><span data-lake-id=\"ub22b44a5\" id=\"ub22b44a5\" class=\"lake-fontsize-16\">在学习TyScript的时候，虽然</span><span data-lake-id=\"u408c2514\" id=\"u408c2514\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33)\">TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20getLength%20%3D%20target%20%3D%3E%20%7B%5Cn%20%20if%20(target.length)%20%7B%5Cn%20%20%20%20return%20target.length%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22gdooN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u239f86b1\" id=\"u239f86b1\"><span data-lake-id=\"ue9e0a2e1\" id=\"ue9e0a2e1\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33)\">这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getLength%20%3D%20(target%3A%20string%20%7C%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20if%20(target.length)%20%7B%20%2F%2F%20%20%E7%B1%BB%E5%9E%8B%5C%22string%20%7C%20number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%5Cn%20%20%20%20return%20target.length%3B%20%2F%2F%20%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22CE4Oc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u69f4574a\" id=\"u69f4574a\"><span data-lake-id=\"u19a6b717\" id=\"u19a6b717\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。</span></p><p data-lake-id=\"ue740337d\" id=\"ue740337d\"><span data-lake-id=\"u7c9af4d1\" id=\"u7c9af4d1\">                                     </span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png%22%2C%22taskId%22%3A%22uca4e8114-2b20-44b6-ac65-45cfd789757%22%2C%22clientId%22%3A%22u71ea46b0-f53e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A24199%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A667%2C%22originHeight%22%3A310%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%20number*%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7length%5C%22'.%20%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7ength'ts(2339)%20any%20constgetLength%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%20%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20number%5C%22%E4%B8%8A%E4%B8%8D%E4%BB%94%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%20if(target.length)f%2F%E7%B1%BB%E5%9E%8B%5C%22'string%20r%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%221ength%5C%22%20ntarget.length%3B%2F%2F%E7%B1%BB%E5%9E%8B%20returnta%20number%5C%22%E4%B8%8A%20elsef%20returntarget.tostring).1ength%3B%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A157.87666%2C%22y%22%3A46.53325%2C%22width%22%3A105.32259000000002%2C%22height%22%3A25.157779999999995%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%22%7D%2C%7B%22x%22%3A283.64227%2C%22y%22%3A48.42235%2C%22width%22%3A256.61798000000005%2C%22height%22%3A19.546315999999997%2C%22text%22%3A%22number*%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7length%5C%22'.%22%7D%2C%7B%22x%22%3A176.13332%2C%22y%22%3A69.09079%2C%22width%22%3A391.28324%2C%22height%22%3A22.260000000000005%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7ength'ts(2339)%22%7D%2C%7B%22x%22%3A157.96732%2C%22y%22%3A108.469826%2C%22width%22%3A27.1027%2C%22height%22%3A12.099364000000008%2C%22text%22%3A%22any%22%7D%2C%7B%22x%22%3A7.2820873%2C%22y%22%3A135.2783%2C%22width%22%3A291.8120627%2C%22height%22%3A17.278870000000012%2C%22text%22%3A%22constgetLength%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%22%7D%2C%7B%22x%22%3A298.90787%2C%22y%22%3A136.9494%2C%22width%22%3A133.93319000000002%2C%22height%22%3A13.811160000000001%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A405.235%2C%22y%22%3A154.425%2C%22width%22%3A244.14679999999998%2C%22height%22%3A17.611069999999984%2C%22text%22%3A%22number%5C%22%E4%B8%8A%E4%B8%8D%E4%BB%94%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%22%7D%2C%7B%22x%22%3A45.043514%2C%22y%22%3A154.9553%2C%22width%22%3A333.448946%2C%22height%22%3A21.820809999999994%2C%22text%22%3A%22if(target.length)f%2F%E7%B1%BB%E5%9E%8B%5C%22'string%22%7D%2C%7B%22x%22%3A392.65646%2C%22y%22%3A178.39015%2C%22width%22%3A188.14298000000002%2C%22height%22%3A17.711309999999997%2C%22text%22%3A%22r%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%221ength%5C%22%22%7D%2C%7B%22x%22%3A113.206764%2C%22y%22%3A177.73004%2C%22width%22%3A218.59380599999997%2C%22height%22%3A19.355760000000004%2C%22text%22%3A%22ntarget.length%3B%2F%2F%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A63.28467%2C%22y%22%3A179.98299%2C%22width%22%3A77.49309%2C%22height%22%3A16.132409999999993%2C%22text%22%3A%22returnta%22%7D%2C%7B%22x%22%3A339.0349%2C%22y%22%3A180.60414%2C%22width%22%3A74.95035999999999%2C%22height%22%3A14.720220000000012%2C%22text%22%3A%22number%5C%22%E4%B8%8A%22%7D%2C%7B%22x%22%3A49.52126%2C%22y%22%3A201.50458%2C%22width%22%3A70.11055%2C%22height%22%3A20.072630000000004%2C%22text%22%3A%22elsef%22%7D%2C%7B%22x%22%3A63.835316%2C%22y%22%3A224.68762%2C%22width%22%3A296.90641400000004%2C%22height%22%3A23.850269999999995%2C%22text%22%3A%22returntarget.tostring).1ength%3B%22%7D%5D%2C%22id%22%3A%22u58fe898e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u0872c59d\" id=\"u0872c59d\"><span data-lake-id=\"u917e3102\" id=\"u917e3102\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是&lt;type&gt;value，一种是value as type , 例子:</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getStrLength%20%3D%20(target%3A%20string%20%7C%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20%5Cn%20%20if%20((%3Cstring%3Etarget).length)%20%7B%20%2F%2F%20%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E5%9C%A8JSX%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%80%8C%E4%B8%94%E4%B9%9F%E6%98%AFTSLint%E4%B8%8D%E5%BB%BA%E8%AE%AE%E7%9A%84%E5%86%99%E6%B3%95%5Cn%20%20%20%20%5Cn%20%20%20%20return%20(target%20as%20string).length%3B%20%2F%2F%20%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E6%98%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E9%97%AE%E9%A2%98%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BB%BA%E8%AE%AE%E5%A4%A7%E5%AE%B6%E5%A7%8B%E7%BB%88%E4%BD%BF%E7%94%A8%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22MJkLK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uba8da948\" id=\"uba8da948\"><span data-lake-id=\"uc7f69782\" id=\"uc7f69782\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"udd91489d\" id=\"udd91489d\"><span data-lake-id=\"ua459e61f\" id=\"ua459e61f\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。</span></p><p data-lake-id=\"u7bbba7c2\" id=\"u7bbba7c2\"><span data-lake-id=\"u7a07bd58\" id=\"u7a07bd58\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用</span><strong><span data-lake-id=\"ud1d685f5\" id=\"ud1d685f5\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">自定义类型保护</span></strong><span data-lake-id=\"u9ff29b70\" id=\"u9ff29b70\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">来简化这里。</span></p><p data-lake-id=\"uee9f8db0\" id=\"uee9f8db0\"><span data-lake-id=\"u65a25d67\" id=\"u65a25d67\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。</span></p><p data-lake-id=\"u5d2ea52e\" id=\"u5d2ea52e\"><span data-lake-id=\"uc2ecdb53\" id=\"uc2ecdb53\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u38c9e2b1\" id=\"u38c9e2b1\"><span data-lake-id=\"u592724a9\" id=\"u592724a9\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u9d73cd36\" id=\"u9d73cd36\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg%22%2C%22taskId%22%3A%22u77d837b2-ece7-46af-a349-de5a00db9d2%22%2C%22clientId%22%3A%22u71ea46b0-f53e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfc100015d6b16000232.jpg%22%2C%22size%22%3A51607%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A232%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%A0%B9%E5%BF%B5%20%E5%9E%8B%E6%96%AD%E8%A8%80%E6%9C%89%E7%82%B9%E5%81%B6%E6%98%AF%E4%B8%80%E7%A7%8D%E5%9E%8B%E8%BD%AC%E6%8D%A2%2C%E4%BB%96%E6%8A%8A%E7%AE%97%E4%B8%AA%E5%80%BC%E5%BC%BA%E8%A1%8C%E6%8C%87%E5%AE%9A%E4%B8%BA%E7%89%B9%E5%AE%9A%E7%BE%8E%E5%9E%8B%20%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E8%BE%BE%E5%88%B0%E9%A2%84%E6%9C%9F%20%E7%84%B6%5D5%E5%BE%88%E5%BC%BA%E5%A4%A7%2C%E4%BD%86%E4%B8%BA%E6%97%B6%E5%AE%9D%E6%97%BA%E6%98%AF%E4%B8%8D%E5%A6%82%E6%88%91%E4%BB%AC%5D%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E7%9A%84%E4%BA%A4%E5%9E%8B%2C%E8%BF%99%E5%AF%B9%E4%BE%AF%E6%88%91%E4%BB%AC%E6%9B%B4%E5%B8%8C%E6%9C%9B%E4%B8%8D%E8%A6%81%20%E5%B8%AE%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E9%BA%A6%E5%9E%8B%E6%A3%80%E6%9F%A5%2C%E8%80%8C%E6%98%AF%E4%BA%A4%E7%BB%99%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9D%A5%2C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%94%A8%E5%88%B0%E4%BA%86%E9%BA%A6%E5%9E%8B%E6%96%AD%E5%AF%8C%20%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%2C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89%E7%BC%96%E8%AF%91%E5%AE%B6%E6%9F%90%E4%B8%AA%E5%80%BC%E7%A1%AE%E5%AE%9E%E6%98%AF%E6%88%91%E4%BB%AC%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E5%80%BC%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A563.8293%2C%22y%22%3A33.804096%2C%22width%22%3A144.91520000000003%2C%22height%22%3A19.966754%2C%22text%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%A0%B9%E5%BF%B5%22%7D%2C%7B%22x%22%3A788.755%2C%22y%22%3A33.79473%2C%22width%22%3A515.8702%2C%22height%22%3A19.417629999999996%2C%22text%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E6%9C%89%E7%82%B9%E5%81%B6%E6%98%AF%E4%B8%80%E7%A7%8D%E5%9E%8B%E8%BD%AC%E6%8D%A2%2C%E4%BB%96%E6%8A%8A%E7%AE%97%E4%B8%AA%E5%80%BC%E5%BC%BA%E8%A1%8C%E6%8C%87%E5%AE%9A%E4%B8%BA%E7%89%B9%E5%AE%9A%E7%BE%8E%E5%9E%8B%22%7D%2C%7B%22x%22%3A149.63089%2C%22y%22%3A103.366585%2C%22width%22%3A262.00261%2C%22height%22%3A25.86690499999999%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E8%BE%BE%E5%88%B0%E9%A2%84%E6%9C%9F%22%7D%2C%7B%22x%22%3A789.7317%2C%22y%22%3A121.12553%2C%22width%22%3A669.3433%2C%22height%22%3A19.44243%2C%22text%22%3A%22%E7%84%B6%5D5%E5%BE%88%E5%BC%BA%E5%A4%A7%2C%E4%BD%86%E4%B8%BA%E6%97%B6%E5%AE%9D%E6%97%BA%E6%98%AF%E4%B8%8D%E5%A6%82%E6%88%91%E4%BB%AC%5D%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E7%9A%84%E4%BA%A4%E5%9E%8B%2C%E8%BF%99%E5%AF%B9%E4%BE%AF%E6%88%91%E4%BB%AC%E6%9B%B4%E5%B8%8C%E6%9C%9B%E4%B8%8D%E8%A6%81%22%7D%2C%7B%22x%22%3A788.9221%2C%22y%22%3A147.46765%2C%22width%22%3A526.1944000000001%2C%22height%22%3A18.290160000000014%2C%22text%22%3A%22%E5%B8%AE%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E9%BA%A6%E5%9E%8B%E6%A3%80%E6%9F%A5%2C%E8%80%8C%E6%98%AF%E4%BA%A4%E7%BB%99%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9D%A5%2C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%94%A8%E5%88%B0%E4%BA%86%E9%BA%A6%E5%9E%8B%E6%96%AD%E5%AF%8C%22%7D%2C%7B%22x%22%3A556.7541%2C%22y%22%3A152.43811%2C%22width%22%3A151.95720000000006%2C%22height%22%3A22.52788000000001%2C%22text%22%3A%22%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%22%7D%2C%7B%22x%22%3A787.69055%2C%22y%22%3A189.42978%2C%22width%22%3A517.28855%2C%22height%22%3A19.349440000000016%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%2C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89%E7%BC%96%E8%AF%91%E5%AE%B6%E6%9F%90%E4%B8%AA%E5%80%BC%E7%A1%AE%E5%AE%9E%E6%98%AF%E6%88%91%E4%BB%AC%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E5%80%BC%22%7D%5D%2C%22id%22%3A%22u7de5a917%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u14351333\" id=\"u14351333\"><span data-lake-id=\"u0826ee32\" id=\"u0826ee32\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ue71dfdda\" id=\"ue71dfdda\"><span data-lake-id=\"u01011a96\" id=\"u01011a96\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u2f6540c5\" id=\"u2f6540c5\"><span data-lake-id=\"uc17d7fa4\" id=\"uc17d7fa4\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u516ee536\" id=\"u516ee536\"><span data-lake-id=\"ua757f033\" id=\"ua757f033\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ud965c3ad\" id=\"ud965c3ad\"><span data-lake-id=\"u740488fe\" id=\"u740488fe\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u05d5a341\" id=\"u05d5a341\"><span data-lake-id=\"u3e435fec\" id=\"u3e435fec\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ube0fb324\" id=\"ube0fb324\"><span data-lake-id=\"u833dd66f\" id=\"u833dd66f\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u37a253fb\" id=\"u37a253fb\"><span data-lake-id=\"uf56bfe51\" id=\"uf56bfe51\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u7e8ed675\" id=\"u7e8ed675\"><span data-lake-id=\"u8bd03524\" id=\"u8bd03524\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u33f361bd\" id=\"u33f361bd\"><span data-lake-id=\"u2f2e1d92\" id=\"u2f2e1d92\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ud0013144\" id=\"ud0013144\"><span data-lake-id=\"ud0b374bd\" id=\"ud0b374bd\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ufa54ad67\" id=\"ufa54ad67\"><span data-lake-id=\"u1e3f74ee\" id=\"u1e3f74ee\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u672e206f\" id=\"u672e206f\"><span data-lake-id=\"uc7fc6350\" id=\"uc7fc6350\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u6d4edc80\" id=\"u6d4edc80\"><span data-lake-id=\"ua7c4bc04\" id=\"ua7c4bc04\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"uf5e371d4\" id=\"uf5e371d4\"><span data-lake-id=\"u66a1a248\" id=\"u66a1a248\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u1ce67147\" id=\"u1ce67147\"><span data-lake-id=\"ud5592ad1\" id=\"ud5592ad1\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u0040830d\" id=\"u0040830d\"><span data-lake-id=\"u729a4e7f\" id=\"u729a4e7f\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"iQDKT\" id=\"iQDKT\"><span data-lake-id=\"u3dbc43a5\" id=\"u3dbc43a5\" class=\"lake-fontsize-11\" style=\"color: #e06c75\">tags</span><span data-lake-id=\"u0ce93002\" id=\"u0ce93002\" class=\"lake-fontsize-11\" style=\"color: #abb2bf\">:</span><span data-lake-id=\"ue0327172\" id=\"ue0327172\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\"> [</span><span data-lake-id=\"u822efe32\" id=\"u822efe32\" class=\"lake-fontsize-11\" style=\"color: #e5c07b\">vue修饰符</span><span data-lake-id=\"u7e349071\" id=\"u7e349071\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\">]</span></h2><p data-lake-id=\"u2bf98518\" id=\"u2bf98518\"><span data-lake-id=\"u5efaffc8\" id=\"u5efaffc8\" class=\"lake-fontsize-11\" style=\"color: #e06c75\">categories</span><span data-lake-id=\"u4790ca91\" id=\"u4790ca91\" class=\"lake-fontsize-11\" style=\"color: #abb2bf\">:</span><span data-lake-id=\"u0f80582b\" id=\"u0f80582b\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\"> [</span><span data-lake-id=\"uae509e68\" id=\"uae509e68\" class=\"lake-fontsize-11\" style=\"color: #e5c07b\">vue修饰符</span><span data-lake-id=\"uf8377e9a\" id=\"uf8377e9a\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\">]</span></p><h2 data-lake-id=\"bT6Bo\" id=\"bT6Bo\"><span data-lake-id=\"ue5eda6f0\" id=\"ue5eda6f0\">类型断言</span></h2><p data-lake-id=\"u21313d29\" id=\"u21313d29\"><br></p><p data-lake-id=\"ubf507e37\" id=\"ubf507e37\"><span data-lake-id=\"ub22b44a5\" id=\"ub22b44a5\" class=\"lake-fontsize-16\">在学习TyScript的时候，虽然</span><span data-lake-id=\"u408c2514\" id=\"u408c2514\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33)\">TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20getLength%20%3D%20target%20%3D%3E%20%7B%5Cn%20%20if%20(target.length)%20%7B%5Cn%20%20%20%20return%20target.length%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22gdooN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u239f86b1\" id=\"u239f86b1\"><span data-lake-id=\"ue9e0a2e1\" id=\"ue9e0a2e1\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33)\">这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getLength%20%3D%20(target%3A%20string%20%7C%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20if%20(target.length)%20%7B%20%2F%2F%20%20%E7%B1%BB%E5%9E%8B%5C%22string%20%7C%20number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%5Cn%20%20%20%20return%20target.length%3B%20%2F%2F%20%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22CE4Oc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u69f4574a\" id=\"u69f4574a\"><span data-lake-id=\"u19a6b717\" id=\"u19a6b717\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。</span></p><p data-lake-id=\"ue740337d\" id=\"ue740337d\"><span data-lake-id=\"u7c9af4d1\" id=\"u7c9af4d1\">                                     </span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png%22%2C%22taskId%22%3A%22uca4e8114-2b20-44b6-ac65-45cfd789757%22%2C%22clientId%22%3A%22u71ea46b0-f53e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A24199%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A667%2C%22originHeight%22%3A310%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%20number*%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7length%5C%22'.%20%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7ength'ts(2339)%20any%20constgetLength%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%20%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20number%5C%22%E4%B8%8A%E4%B8%8D%E4%BB%94%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%20if(target.length)f%2F%E7%B1%BB%E5%9E%8B%5C%22'string%20r%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%221ength%5C%22%20ntarget.length%3B%2F%2F%E7%B1%BB%E5%9E%8B%20returnta%20number%5C%22%E4%B8%8A%20elsef%20returntarget.tostring).1ength%3B%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A157.87666%2C%22y%22%3A46.53325%2C%22width%22%3A105.32259000000002%2C%22height%22%3A25.157779999999995%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%22%7D%2C%7B%22x%22%3A283.64227%2C%22y%22%3A48.42235%2C%22width%22%3A256.61798000000005%2C%22height%22%3A19.546315999999997%2C%22text%22%3A%22number*%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7length%5C%22'.%22%7D%2C%7B%22x%22%3A176.13332%2C%22y%22%3A69.09079%2C%22width%22%3A391.28324%2C%22height%22%3A22.260000000000005%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7ength'ts(2339)%22%7D%2C%7B%22x%22%3A157.96732%2C%22y%22%3A108.469826%2C%22width%22%3A27.1027%2C%22height%22%3A12.099364000000008%2C%22text%22%3A%22any%22%7D%2C%7B%22x%22%3A7.2820873%2C%22y%22%3A135.2783%2C%22width%22%3A291.8120627%2C%22height%22%3A17.278870000000012%2C%22text%22%3A%22constgetLength%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%22%7D%2C%7B%22x%22%3A298.90787%2C%22y%22%3A136.9494%2C%22width%22%3A133.93319000000002%2C%22height%22%3A13.811160000000001%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A405.235%2C%22y%22%3A154.425%2C%22width%22%3A244.14679999999998%2C%22height%22%3A17.611069999999984%2C%22text%22%3A%22number%5C%22%E4%B8%8A%E4%B8%8D%E4%BB%94%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%22%7D%2C%7B%22x%22%3A45.043514%2C%22y%22%3A154.9553%2C%22width%22%3A333.448946%2C%22height%22%3A21.820809999999994%2C%22text%22%3A%22if(target.length)f%2F%E7%B1%BB%E5%9E%8B%5C%22'string%22%7D%2C%7B%22x%22%3A392.65646%2C%22y%22%3A178.39015%2C%22width%22%3A188.14298000000002%2C%22height%22%3A17.711309999999997%2C%22text%22%3A%22r%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%221ength%5C%22%22%7D%2C%7B%22x%22%3A113.206764%2C%22y%22%3A177.73004%2C%22width%22%3A218.59380599999997%2C%22height%22%3A19.355760000000004%2C%22text%22%3A%22ntarget.length%3B%2F%2F%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A63.28467%2C%22y%22%3A179.98299%2C%22width%22%3A77.49309%2C%22height%22%3A16.132409999999993%2C%22text%22%3A%22returnta%22%7D%2C%7B%22x%22%3A339.0349%2C%22y%22%3A180.60414%2C%22width%22%3A74.95035999999999%2C%22height%22%3A14.720220000000012%2C%22text%22%3A%22number%5C%22%E4%B8%8A%22%7D%2C%7B%22x%22%3A49.52126%2C%22y%22%3A201.50458%2C%22width%22%3A70.11055%2C%22height%22%3A20.072630000000004%2C%22text%22%3A%22elsef%22%7D%2C%7B%22x%22%3A63.835316%2C%22y%22%3A224.68762%2C%22width%22%3A296.90641400000004%2C%22height%22%3A23.850269999999995%2C%22text%22%3A%22returntarget.tostring).1ength%3B%22%7D%5D%2C%22id%22%3A%22u58fe898e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u0872c59d\" id=\"u0872c59d\"><span data-lake-id=\"u917e3102\" id=\"u917e3102\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是&lt;type&gt;value，一种是value as type , 例子:</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getStrLength%20%3D%20(target%3A%20string%20%7C%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20%5Cn%20%20if%20((%3Cstring%3Etarget).length)%20%7B%20%2F%2F%20%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E5%9C%A8JSX%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%80%8C%E4%B8%94%E4%B9%9F%E6%98%AFTSLint%E4%B8%8D%E5%BB%BA%E8%AE%AE%E7%9A%84%E5%86%99%E6%B3%95%5Cn%20%20%20%20%5Cn%20%20%20%20return%20(target%20as%20string).length%3B%20%2F%2F%20%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E6%98%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E9%97%AE%E9%A2%98%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BB%BA%E8%AE%AE%E5%A4%A7%E5%AE%B6%E5%A7%8B%E7%BB%88%E4%BD%BF%E7%94%A8%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22MJkLK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uba8da948\" id=\"uba8da948\"><span data-lake-id=\"uc7f69782\" id=\"uc7f69782\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"udd91489d\" id=\"udd91489d\"><span data-lake-id=\"ua459e61f\" id=\"ua459e61f\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。</span></p><p data-lake-id=\"u7bbba7c2\" id=\"u7bbba7c2\"><span data-lake-id=\"u7a07bd58\" id=\"u7a07bd58\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用</span><strong><span data-lake-id=\"ud1d685f5\" id=\"ud1d685f5\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">自定义类型保护</span></strong><span data-lake-id=\"u9ff29b70\" id=\"u9ff29b70\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">来简化这里。</span></p><p data-lake-id=\"uee9f8db0\" id=\"uee9f8db0\"><span data-lake-id=\"u65a25d67\" id=\"u65a25d67\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。</span></p><p data-lake-id=\"u5d2ea52e\" id=\"u5d2ea52e\"><span data-lake-id=\"uc2ecdb53\" id=\"uc2ecdb53\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u38c9e2b1\" id=\"u38c9e2b1\"><span data-lake-id=\"u592724a9\" id=\"u592724a9\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u9d73cd36\" id=\"u9d73cd36\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg%22%2C%22taskId%22%3A%22u77d837b2-ece7-46af-a349-de5a00db9d2%22%2C%22clientId%22%3A%22u71ea46b0-f53e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfc100015d6b16000232.jpg%22%2C%22size%22%3A51607%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A232%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%A0%B9%E5%BF%B5%20%E5%9E%8B%E6%96%AD%E8%A8%80%E6%9C%89%E7%82%B9%E5%81%B6%E6%98%AF%E4%B8%80%E7%A7%8D%E5%9E%8B%E8%BD%AC%E6%8D%A2%2C%E4%BB%96%E6%8A%8A%E7%AE%97%E4%B8%AA%E5%80%BC%E5%BC%BA%E8%A1%8C%E6%8C%87%E5%AE%9A%E4%B8%BA%E7%89%B9%E5%AE%9A%E7%BE%8E%E5%9E%8B%20%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E8%BE%BE%E5%88%B0%E9%A2%84%E6%9C%9F%20%E7%84%B6%5D5%E5%BE%88%E5%BC%BA%E5%A4%A7%2C%E4%BD%86%E4%B8%BA%E6%97%B6%E5%AE%9D%E6%97%BA%E6%98%AF%E4%B8%8D%E5%A6%82%E6%88%91%E4%BB%AC%5D%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E7%9A%84%E4%BA%A4%E5%9E%8B%2C%E8%BF%99%E5%AF%B9%E4%BE%AF%E6%88%91%E4%BB%AC%E6%9B%B4%E5%B8%8C%E6%9C%9B%E4%B8%8D%E8%A6%81%20%E5%B8%AE%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E9%BA%A6%E5%9E%8B%E6%A3%80%E6%9F%A5%2C%E8%80%8C%E6%98%AF%E4%BA%A4%E7%BB%99%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9D%A5%2C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%94%A8%E5%88%B0%E4%BA%86%E9%BA%A6%E5%9E%8B%E6%96%AD%E5%AF%8C%20%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%2C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89%E7%BC%96%E8%AF%91%E5%AE%B6%E6%9F%90%E4%B8%AA%E5%80%BC%E7%A1%AE%E5%AE%9E%E6%98%AF%E6%88%91%E4%BB%AC%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E5%80%BC%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A563.8293%2C%22y%22%3A33.804096%2C%22width%22%3A144.91520000000003%2C%22height%22%3A19.966754%2C%22text%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%A0%B9%E5%BF%B5%22%7D%2C%7B%22x%22%3A788.755%2C%22y%22%3A33.79473%2C%22width%22%3A515.8702%2C%22height%22%3A19.417629999999996%2C%22text%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E6%9C%89%E7%82%B9%E5%81%B6%E6%98%AF%E4%B8%80%E7%A7%8D%E5%9E%8B%E8%BD%AC%E6%8D%A2%2C%E4%BB%96%E6%8A%8A%E7%AE%97%E4%B8%AA%E5%80%BC%E5%BC%BA%E8%A1%8C%E6%8C%87%E5%AE%9A%E4%B8%BA%E7%89%B9%E5%AE%9A%E7%BE%8E%E5%9E%8B%22%7D%2C%7B%22x%22%3A149.63089%2C%22y%22%3A103.366585%2C%22width%22%3A262.00261%2C%22height%22%3A25.86690499999999%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E8%BE%BE%E5%88%B0%E9%A2%84%E6%9C%9F%22%7D%2C%7B%22x%22%3A789.7317%2C%22y%22%3A121.12553%2C%22width%22%3A669.3433%2C%22height%22%3A19.44243%2C%22text%22%3A%22%E7%84%B6%5D5%E5%BE%88%E5%BC%BA%E5%A4%A7%2C%E4%BD%86%E4%B8%BA%E6%97%B6%E5%AE%9D%E6%97%BA%E6%98%AF%E4%B8%8D%E5%A6%82%E6%88%91%E4%BB%AC%5D%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E7%9A%84%E4%BA%A4%E5%9E%8B%2C%E8%BF%99%E5%AF%B9%E4%BE%AF%E6%88%91%E4%BB%AC%E6%9B%B4%E5%B8%8C%E6%9C%9B%E4%B8%8D%E8%A6%81%22%7D%2C%7B%22x%22%3A788.9221%2C%22y%22%3A147.46765%2C%22width%22%3A526.1944000000001%2C%22height%22%3A18.290160000000014%2C%22text%22%3A%22%E5%B8%AE%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E9%BA%A6%E5%9E%8B%E6%A3%80%E6%9F%A5%2C%E8%80%8C%E6%98%AF%E4%BA%A4%E7%BB%99%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9D%A5%2C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%94%A8%E5%88%B0%E4%BA%86%E9%BA%A6%E5%9E%8B%E6%96%AD%E5%AF%8C%22%7D%2C%7B%22x%22%3A556.7541%2C%22y%22%3A152.43811%2C%22width%22%3A151.95720000000006%2C%22height%22%3A22.52788000000001%2C%22text%22%3A%22%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%22%7D%2C%7B%22x%22%3A787.69055%2C%22y%22%3A189.42978%2C%22width%22%3A517.28855%2C%22height%22%3A19.349440000000016%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%2C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89%E7%BC%96%E8%AF%91%E5%AE%B6%E6%9F%90%E4%B8%AA%E5%80%BC%E7%A1%AE%E5%AE%9E%E6%98%AF%E6%88%91%E4%BB%AC%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E5%80%BC%22%7D%5D%2C%22id%22%3A%22u7de5a917%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u14351333\" id=\"u14351333\"><span data-lake-id=\"u0826ee32\" id=\"u0826ee32\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ue71dfdda\" id=\"ue71dfdda\"><span data-lake-id=\"u01011a96\" id=\"u01011a96\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u2f6540c5\" id=\"u2f6540c5\"><span data-lake-id=\"uc17d7fa4\" id=\"uc17d7fa4\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u516ee536\" id=\"u516ee536\"><span data-lake-id=\"ua757f033\" id=\"ua757f033\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ud965c3ad\" id=\"ud965c3ad\"><span data-lake-id=\"u740488fe\" id=\"u740488fe\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u05d5a341\" id=\"u05d5a341\"><span data-lake-id=\"u3e435fec\" id=\"u3e435fec\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ube0fb324\" id=\"ube0fb324\"><span data-lake-id=\"u833dd66f\" id=\"u833dd66f\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u37a253fb\" id=\"u37a253fb\"><span data-lake-id=\"uf56bfe51\" id=\"uf56bfe51\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u7e8ed675\" id=\"u7e8ed675\"><span data-lake-id=\"u8bd03524\" id=\"u8bd03524\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u33f361bd\" id=\"u33f361bd\"><span data-lake-id=\"u2f2e1d92\" id=\"u2f2e1d92\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ud0013144\" id=\"ud0013144\"><span data-lake-id=\"ud0b374bd\" id=\"ud0b374bd\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ufa54ad67\" id=\"ufa54ad67\"><span data-lake-id=\"u1e3f74ee\" id=\"u1e3f74ee\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u672e206f\" id=\"u672e206f\"><span data-lake-id=\"uc7fc6350\" id=\"uc7fc6350\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u6d4edc80\" id=\"u6d4edc80\"><span data-lake-id=\"ua7c4bc04\" id=\"ua7c4bc04\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"uf5e371d4\" id=\"uf5e371d4\"><span data-lake-id=\"u66a1a248\" id=\"u66a1a248\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u1ce67147\" id=\"u1ce67147\"><span data-lake-id=\"ud5592ad1\" id=\"ud5592ad1\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u0040830d\" id=\"u0040830d\"><span data-lake-id=\"u729a4e7f\" id=\"u729a4e7f\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-10T06:09:29.000Z",
    "deleted_at": null,
    "created_at": "2021-12-10T05:50:00.000Z",
    "updated_at": "2021-12-10T06:09:30.000Z",
    "published_at": "2021-12-10T06:09:29.000Z",
    "first_published_at": "2021-12-10T05:52:13.000Z",
    "word_count": 758,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/12838787/1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png",
    "description": "tags: [vue修饰符]categories: [vue修饰符]类型断言在学习TyScript的时候，虽然TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 62342570,
    "slug": "ogqnlv",
    "title": "使用接口定义几乎任意结构",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 6,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-10T08:08:17.743Z",
      "updated_at": "2021-12-10T08:08:17.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-10T06:17:03.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-10T06:17:03.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"ga2EL\"></a>\n## 基本用法\n我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：firstName和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：\n```javascript\n// 注：这段代码为纯JavaScript代码，请在JavaScript开发环境编写下面代码，在TypeScript环境会报一些类型错误\nconst getFullName = ({ firstName, lastName }) => {\n  return `${firstName} ${lastName}`;\n};\n\n使用时传入参数：\ngetFullName({\n  firstName: \"Lison\",\n  lastName: \"Li\"\n}); // => 'Lison Li'\n```\n没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：\n```javascript\ngetFullName(); // Uncaught TypeError: Cannot destructure property `a` of 'undefined' or 'null'\ngetFullName({ age: 18, phone: \"13312345678\" }); // 'undefined undefined'\ngetFullName({ firstName: \"Lison\" }); // 'Lison undefined'\n```\n  这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：\n```typescript\nconst getFullName = ({\n  firstName,\n  lastName,\n}: { // 指定这个参数的类型，因为他是一个对象，所以这里来指定对象中每个字段的类型\n  firstName: string; // 指定属性名为firstName和lastName的字段的属性值必须为string类型\n  lastName: string;\n}) => {\n  return `${firstName} ${lastName}`;\n}\n\n\n```\n我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png#clientId=ue1d2c419-1221-4&from=paste&height=234&id=ua1b0f756&margin=%5Bobject%20Object%5D&name=image.png&originHeight=234&originWidth=675&originalType=binary&ratio=1&size=25936&status=done&style=none&taskId=u33945ad6-a930-45ff-97a4-b26d83fb21f&width=675)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png#clientId=ue1d2c419-1221-4&from=paste&height=79&id=u992b1d80&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=1540&originalType=binary&ratio=1&size=33443&status=done&style=none&taskId=u9fb570d1-61b4-4d58-a47c-7931a7f9d9b&width=770)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png#clientId=ue1d2c419-1221-4&from=paste&height=176&id=ub3bff8f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=176&originWidth=1358&originalType=binary&ratio=1&size=32398&status=done&style=none&taskId=u99960eb5-aae8-4d2b-b893-b896dcdeab1&width=1358)<br />这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：\n```typescript\ninterface Info {\n  firstName: string;\n  lastName: string;\n}\nconst getFullName = ({ firstName, lastName }: Info) =>\n  `${firstName} ${lastName}`;\n```\n注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。\n<a name=\"Osi0T\"></a>\n## 可选属性\n当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，_typescript_为我们提供了可选属性。<br />我们先定义一个描述传入蔬菜信息的句子的函数：\n```typescript\nconst getVegetables = ({ color, type }) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\n```\n我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：\n```typescript\ninterface Vegetables {\n  color?: string;\n  type: string;\n}\n```\n这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加\"interface-name\": [true, “never-prefix”]来关闭。\n```typescript\ninterface Vegetables {\n    color?: string;\n    type: string;\n  }\n\nconst getVegetables = ({ color, type }:Vegetables) => {\n    return `A ${color ? color + \" \" : \"\"}${type}`;\n  };\n```\n<a name=\"C3pXm\"></a>\n## 多余属性检查\n```typescript\ngetVegetables({\n  type: \"tomato\",\n  size: \"big\" // 'size'不在类型'Vegetables'中\n});\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png#clientId=ue1d2c419-1221-4&from=paste&height=167&id=u73a7cee0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=167&originWidth=891&originalType=binary&ratio=1&size=17620&status=done&style=none&taskId=u7d7b2296-d6c0-4b56-b4a5-5e78d030178&width=891)<br />我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。<br />这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加\"object-literal-sort-keys\": [false]来关闭。\n<a name=\"izjCz\"></a>\n## 绕开多余属性检查\n有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：\n<a name=\"UbRno\"></a>\n### 使用类型断言\n我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：\n```typescript\ninterface Vegetables {\n  color?: string;\n  type: string;\n}\nconst getVegetables = ({ color, type }: Vegetables) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\ngetVegetables({\n  type: \"tomato\",\n  size: 12,\n  price: 1.2\n} as Vegetables);\n```\n<a name=\"T7Ilu\"></a>\n### 添加索引签名\n更好的方式是添加字符串索引签名\n```typescript\ninterface Vegetables {\n  color: string;\n  type: string;\n  [prop: string]: any;\n}\nconst getVegetables = ({ color, type }: Vegetables) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\ngetVegetables({\n  color: \"red\",\n  type: \"tomato\",\n  size: 12,\n  price: 1.2\n});\n```\n<a name=\"WqgZw\"></a>\n### 利用类型兼容性\n```typescript\ninterface Vegetables {\n  type: string;\n}\nconst getVegetables = ({ type }: Vegetables) => {\n  return `A ${type}`;\n};\n\nconst option = { type: \"tomato\", size: 12 };\ngetVegetables(option);\n```\n上面这种方法完美通过检查，我们将对象字面量赋给一个变量option，然后getVegetables传入 option，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。<br />在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错\n<a name=\"DYDQK\"></a>\n### 只读属性\n接口也可以设置只读属性，如下：\n```typescript\ninterface Role {\n  readonly 0: string;\n  readonly 1: string;\n} \n这里我们定义了一个角色字典，有 0 和 1 两种角色 id。下面我们定义一个实际的角色  数据，然后来试图修改一下它的值：\n\nconst role: Role = {\n  0: \"super_admin\",\n  1: \"admin\"\n};\nrole[1] = \"super_admin\"; // Cannot assign to '0' because it is a read-only property\n```\n我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：\n```typescript\nconst NAME: string = \"Lison\";\nNAME = \"Haha\"; // Uncaught TypeError: Assignment to constant variable\n\nconst obj = {\n  name: \"lison\"\n};\nobj.name = \"Haha\";\n\ninterface Info {\n  readonly name: string;\n}\nconst info: Info = {\n  name: \"Lison\"\n};\ninfo[\"name\"] = \"Haha\"; // Cannot assign to 'name' because it is a read-only property\n```\n我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。\n<a name=\"tkCr2\"></a>\n### 函数类型\n接口可以描述普通对象，还可以描述函数类型，我们先看写法：\n```typescript\ninterface AddFunc {\n  (num1: number, num2: number): number;\n}\n```\n这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为_调用签名_，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：\n```typescript\nconst add: AddFunc = (n1, n2) => n1 + n2;\nconst join: AddFunc = (n1, n2) => `${n1} ${n2}`; // 不能将类型'string'分配给类型'number'\nadd(\"a\", 2); // 类型'string'的参数不能赋给类型'number'的参数\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png#clientId=uebca35a6-d065-4&from=paste&height=107&id=u41545c4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=143&originWidth=953&originalType=binary&ratio=1&size=21366&status=done&style=none&taskId=ueb62392c-919f-4c0c-9cc7-717889ec8d6&width=715)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png#clientId=uebca35a6-d065-4&from=paste&id=u91b90715&margin=%5Bobject%20Object%5D&name=image.png&originHeight=109&originWidth=724&originalType=binary&ratio=1&size=12456&status=done&style=none&taskId=u4dd12a49-ea62-4869-9f7c-1eb5ab88d18)<br />上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。<br />你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。<br />![5cf4bfd200012bae16000820.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg#clientId=uebca35a6-d065-4&from=ui&id=u240e1d03&margin=%5Bobject%20Object%5D&name=5cf4bfd200012bae16000820.jpg&originHeight=820&originWidth=1600&originalType=binary&ratio=1&size=134441&status=done&style=none&taskId=u81f8ae0c-7d78-4d36-8bad-24066b4ff1d)<br />​<br />\n",
    "body_draft": "<a name=\"ga2EL\"></a>\n## 基本用法\n我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：firstName和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：\n```javascript\n// 注：这段代码为纯JavaScript代码，请在JavaScript开发环境编写下面代码，在TypeScript环境会报一些类型错误\nconst getFullName = ({ firstName, lastName }) => {\n  return `${firstName} ${lastName}`;\n};\n\n使用时传入参数：\ngetFullName({\n  firstName: \"Lison\",\n  lastName: \"Li\"\n}); // => 'Lison Li'\n```\n没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：\n```javascript\ngetFullName(); // Uncaught TypeError: Cannot destructure property `a` of 'undefined' or 'null'\ngetFullName({ age: 18, phone: \"13312345678\" }); // 'undefined undefined'\ngetFullName({ firstName: \"Lison\" }); // 'Lison undefined'\n```\n  这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：\n```typescript\nconst getFullName = ({\n  firstName,\n  lastName,\n}: { // 指定这个参数的类型，因为他是一个对象，所以这里来指定对象中每个字段的类型\n  firstName: string; // 指定属性名为firstName和lastName的字段的属性值必须为string类型\n  lastName: string;\n}) => {\n  return `${firstName} ${lastName}`;\n}\n\n\n```\n我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png#clientId=ue1d2c419-1221-4&from=paste&height=234&id=ua1b0f756&margin=%5Bobject%20Object%5D&name=image.png&originHeight=234&originWidth=675&originalType=binary&ratio=1&size=25936&status=done&style=none&taskId=u33945ad6-a930-45ff-97a4-b26d83fb21f&width=675)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png#clientId=ue1d2c419-1221-4&from=paste&height=79&id=u992b1d80&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=1540&originalType=binary&ratio=1&size=33443&status=done&style=none&taskId=u9fb570d1-61b4-4d58-a47c-7931a7f9d9b&width=770)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png#clientId=ue1d2c419-1221-4&from=paste&height=176&id=ub3bff8f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=176&originWidth=1358&originalType=binary&ratio=1&size=32398&status=done&style=none&taskId=u99960eb5-aae8-4d2b-b893-b896dcdeab1&width=1358)<br />这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：\n```typescript\ninterface Info {\n  firstName: string;\n  lastName: string;\n}\nconst getFullName = ({ firstName, lastName }: Info) =>\n  `${firstName} ${lastName}`;\n```\n注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。\n<a name=\"Osi0T\"></a>\n## 可选属性\n当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，_typescript_为我们提供了可选属性。<br />我们先定义一个描述传入蔬菜信息的句子的函数：\n```typescript\nconst getVegetables = ({ color, type }) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\n```\n我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：\n```typescript\ninterface Vegetables {\n  color?: string;\n  type: string;\n}\n```\n这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加\"interface-name\": [true, “never-prefix”]来关闭。\n```typescript\ninterface Vegetables {\n    color?: string;\n    type: string;\n  }\n\nconst getVegetables = ({ color, type }:Vegetables) => {\n    return `A ${color ? color + \" \" : \"\"}${type}`;\n  };\n```\n<a name=\"C3pXm\"></a>\n## 多余属性检查\n```typescript\ngetVegetables({\n  type: \"tomato\",\n  size: \"big\" // 'size'不在类型'Vegetables'中\n});\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png#clientId=ue1d2c419-1221-4&from=paste&height=167&id=u73a7cee0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=167&originWidth=891&originalType=binary&ratio=1&size=17620&status=done&style=none&taskId=u7d7b2296-d6c0-4b56-b4a5-5e78d030178&width=891)<br />我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。<br />这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加\"object-literal-sort-keys\": [false]来关闭。\n<a name=\"izjCz\"></a>\n## 绕开多余属性检查\n有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：\n<a name=\"UbRno\"></a>\n### 使用类型断言\n我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：\n```typescript\ninterface Vegetables {\n  color?: string;\n  type: string;\n}\nconst getVegetables = ({ color, type }: Vegetables) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\ngetVegetables({\n  type: \"tomato\",\n  size: 12,\n  price: 1.2\n} as Vegetables);\n```\n<a name=\"T7Ilu\"></a>\n### 添加索引签名\n更好的方式是添加字符串索引签名\n```typescript\ninterface Vegetables {\n  color: string;\n  type: string;\n  [prop: string]: any;\n}\nconst getVegetables = ({ color, type }: Vegetables) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\ngetVegetables({\n  color: \"red\",\n  type: \"tomato\",\n  size: 12,\n  price: 1.2\n});\n```\n<a name=\"WqgZw\"></a>\n### 利用类型兼容性\n```typescript\ninterface Vegetables {\n  type: string;\n}\nconst getVegetables = ({ type }: Vegetables) => {\n  return `A ${type}`;\n};\n\nconst option = { type: \"tomato\", size: 12 };\ngetVegetables(option);\n```\n上面这种方法完美通过检查，我们将对象字面量赋给一个变量option，然后getVegetables传入 option，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。<br />在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错\n<a name=\"DYDQK\"></a>\n### 只读属性\n接口也可以设置只读属性，如下：\n```typescript\ninterface Role {\n  readonly 0: string;\n  readonly 1: string;\n} \n这里我们定义了一个角色字典，有 0 和 1 两种角色 id。下面我们定义一个实际的角色  数据，然后来试图修改一下它的值：\n\nconst role: Role = {\n  0: \"super_admin\",\n  1: \"admin\"\n};\nrole[1] = \"super_admin\"; // Cannot assign to '0' because it is a read-only property\n```\n我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：\n```typescript\nconst NAME: string = \"Lison\";\nNAME = \"Haha\"; // Uncaught TypeError: Assignment to constant variable\n\nconst obj = {\n  name: \"lison\"\n};\nobj.name = \"Haha\";\n\ninterface Info {\n  readonly name: string;\n}\nconst info: Info = {\n  name: \"Lison\"\n};\ninfo[\"name\"] = \"Haha\"; // Cannot assign to 'name' because it is a read-only property\n```\n我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。\n<a name=\"tkCr2\"></a>\n### 函数类型\n接口可以描述普通对象，还可以描述函数类型，我们先看写法：\n```typescript\ninterface AddFunc {\n  (num1: number, num2: number): number;\n}\n```\n这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为_调用签名_，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：\n```typescript\nconst add: AddFunc = (n1, n2) => n1 + n2;\nconst join: AddFunc = (n1, n2) => `${n1} ${n2}`; // 不能将类型'string'分配给类型'number'\nadd(\"a\", 2); // 类型'string'的参数不能赋给类型'number'的参数\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png#clientId=uebca35a6-d065-4&from=paste&height=107&id=u41545c4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=143&originWidth=953&originalType=binary&ratio=1&size=21366&status=done&style=none&taskId=ueb62392c-919f-4c0c-9cc7-717889ec8d6&width=715)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png#clientId=uebca35a6-d065-4&from=paste&id=u91b90715&margin=%5Bobject%20Object%5D&name=image.png&originHeight=109&originWidth=724&originalType=binary&ratio=1&size=12456&status=done&style=none&taskId=u4dd12a49-ea62-4869-9f7c-1eb5ab88d18)<br />上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。<br />你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。<br />![5cf4bfd200012bae16000820.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg#clientId=uebca35a6-d065-4&from=ui&id=u240e1d03&margin=%5Bobject%20Object%5D&name=5cf4bfd200012bae16000820.jpg&originHeight=820&originWidth=1600&originalType=binary&ratio=1&size=134441&status=done&style=none&taskId=u81f8ae0c-7d78-4d36-8bad-24066b4ff1d)<br />​<br />\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"ga2EL\"><span class=\"ne-text\">基本用法</span></h2><p id=\"u4c6734a0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：</span><span class=\"ne-text\" style=\"font-size: 29px\">firstName</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：</span></p><pre data-language=\"javascript\" id=\"qqc7N\" class=\"ne-codeblock language-javascript\">// 注：这段代码为纯JavaScript代码，请在JavaScript开发环境编写下面代码，在TypeScript环境会报一些类型错误\nconst getFullName = ({ firstName, lastName }) =&gt; {\n  return `${firstName} ${lastName}`;\n};\n\n使用时传入参数：\ngetFullName({\n  firstName: &quot;Lison&quot;,\n  lastName: &quot;Li&quot;\n}); // =&gt; 'Lison Li'</pre><p id=\"u981badb3\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 29px\">没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：</span></p><pre data-language=\"javascript\" id=\"PehQm\" class=\"ne-codeblock language-javascript\">getFullName(); // Uncaught TypeError: Cannot destructure property `a` of 'undefined' or 'null'\ngetFullName({ age: 18, phone: &quot;13312345678&quot; }); // 'undefined undefined'\ngetFullName({ firstName: &quot;Lison&quot; }); // 'Lison undefined'</pre><p id=\"u1d1136e7\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 29px\"> </span><span class=\"ne-text\" style=\"font-size: 29px\"> 这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：</span></p><pre data-language=\"typescript\" id=\"jcuFq\" class=\"ne-codeblock language-typescript\">const getFullName = ({\n  firstName,\n  lastName,\n}: { // 指定这个参数的类型，因为他是一个对象，所以这里来指定对象中每个字段的类型\n  firstName: string; // 指定属性名为firstName和lastName的字段的属性值必须为string类型\n  lastName: string;\n}) =&gt; {\n  return `${firstName} ${lastName}`;\n}\n\n</pre><p id=\"u55acf1f2\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 29px\">我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：</span></p><p id=\"u64baef33\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png\" width=\"675\" id=\"ua1b0f756\" class=\"ne-image\"></p><p id=\"uf19ffe58\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png\" width=\"770\" id=\"u992b1d80\" class=\"ne-image\"></p><p id=\"u2fe3580b\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png\" width=\"1358\" id=\"ub3bff8f8\" class=\"ne-image\"></p><p id=\"ua8031729\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：</span></p><pre data-language=\"typescript\" id=\"RTUnh\" class=\"ne-codeblock language-typescript\">interface Info {\n  firstName: string;\n  lastName: string;\n}\nconst getFullName = ({ firstName, lastName }: Info) =&gt;\n  `${firstName} ${lastName}`;</pre><p id=\"u9a6f2a03\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。</span></p><h2 id=\"Osi0T\"><span class=\"ne-text\">可选属性</span></h2><p id=\"ud81f38f2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，</span><em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">typescript</span></em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">为我们提供了可选属性。</span></p><p id=\"u211124af\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们先定义一个描述传入蔬菜信息的句子的函数：</span></p><pre data-language=\"typescript\" id=\"JpneV\" class=\"ne-codeblock language-typescript\">const getVegetables = ({ color, type }) =&gt; {\n  return `A ${color ? color + &quot; &quot; : &quot;&quot;}${type}`;\n};</pre><p id=\"u4a4bd115\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：</span></p><pre data-language=\"typescript\" id=\"MVeDl\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  color?: string;\n  type: string;\n}</pre><p id=\"u1e00958e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;interface-name&quot;: [true, “never-prefix”]来关闭。</span></p><pre data-language=\"typescript\" id=\"GExE2\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n    color?: string;\n    type: string;\n  }\n\nconst getVegetables = ({ color, type }:Vegetables) =&gt; {\n    return `A ${color ? color + &quot; &quot; : &quot;&quot;}${type}`;\n  };</pre><h2 id=\"C3pXm\"><span class=\"ne-text\">多余属性检查</span></h2><pre data-language=\"typescript\" id=\"EcyRb\" class=\"ne-codeblock language-typescript\">getVegetables({\n  type: &quot;tomato&quot;,\n  size: &quot;big&quot; // 'size'不在类型'Vegetables'中\n});</pre><p id=\"ua27818ba\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png\" width=\"891\" id=\"u73a7cee0\" class=\"ne-image\"></p><p id=\"u701dba2a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。</span></p><p id=\"u04a99e81\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;object-literal-sort-keys&quot;: [false]来关闭。</span></p><h2 id=\"izjCz\"><span class=\"ne-text\">绕开多余属性检查</span></h2><p id=\"ua1763e3d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：</span></p><h3 id=\"UbRno\"><span class=\"ne-text\">使用类型断言</span></h3><p id=\"uce1645b6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：</span></p><pre data-language=\"typescript\" id=\"KJaSQ\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  color?: string;\n  type: string;\n}\nconst getVegetables = ({ color, type }: Vegetables) =&gt; {\n  return `A ${color ? color + &quot; &quot; : &quot;&quot;}${type}`;\n};\ngetVegetables({\n  type: &quot;tomato&quot;,\n  size: 12,\n  price: 1.2\n} as Vegetables);</pre><h3 id=\"T7Ilu\"><span class=\"ne-text\">添加索引签名</span></h3><p id=\"u71358f5f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">更好的方式是添加字符串索引签名</span></p><pre data-language=\"typescript\" id=\"OLak3\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  color: string;\n  type: string;\n  [prop: string]: any;\n}\nconst getVegetables = ({ color, type }: Vegetables) =&gt; {\n  return `A ${color ? color + &quot; &quot; : &quot;&quot;}${type}`;\n};\ngetVegetables({\n  color: &quot;red&quot;,\n  type: &quot;tomato&quot;,\n  size: 12,\n  price: 1.2\n});</pre><h3 id=\"WqgZw\"><span class=\"ne-text\">利用类型兼容性</span></h3><pre data-language=\"typescript\" id=\"E9HPU\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  type: string;\n}\nconst getVegetables = ({ type }: Vegetables) =&gt; {\n  return `A ${type}`;\n};\n\nconst option = { type: &quot;tomato&quot;, size: 12 };\ngetVegetables(option);</pre><p id=\"uf3d82ca8\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">上面这种方法完美通过检查，我们将对象字面量赋给一个变量</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">option</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">，然后</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">getVegetables</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">传入</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\"> </span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">option</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。</span></p><p id=\"uf4ce67c2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错</span></p><h3 id=\"DYDQK\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33)\">只读属性</span></h3><p id=\"u99cef886\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">接口也可以设置只读属性，如下：</span></p><pre data-language=\"typescript\" id=\"tvwz7\" class=\"ne-codeblock language-typescript\">interface Role {\n  readonly 0: string;\n  readonly 1: string;\n} \n这里我们定义了一个角色字典，有 0 和 1 两种角色 id。下面我们定义一个实际的角色 \b 数据，然后来试图修改一下它的值：\n\nconst role: Role = {\n  0: &quot;super_admin&quot;,\n  1: &quot;admin&quot;\n};\nrole[1] = &quot;super_admin&quot;; // Cannot assign to '0' because it is a read-only property</pre><p id=\"u9e49879d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：</span></p><pre data-language=\"typescript\" id=\"fvjM5\" class=\"ne-codeblock language-typescript\">const NAME: string = &quot;Lison&quot;;\nNAME = &quot;Haha&quot;; // Uncaught TypeError: Assignment to constant variable\n\nconst obj = {\n  name: &quot;lison&quot;\n};\nobj.name = &quot;Haha&quot;;\n\ninterface Info {\n  readonly name: string;\n}\nconst info: Info = {\n  name: &quot;Lison&quot;\n};\ninfo[&quot;name&quot;] = &quot;Haha&quot;; // Cannot assign to 'name' because it is a read-only property</pre><p id=\"u298476e7\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。</span></p><h3 id=\"tkCr2\"><span class=\"ne-text\">函数类型</span></h3><p id=\"ubf5c9623\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">接口可以描述普通对象，还可以描述函数类型，我们先看写法：</span></p><pre data-language=\"typescript\" id=\"V5Aiu\" class=\"ne-codeblock language-typescript\">interface AddFunc {\n  (num1: number, num2: number): number;\n}</pre><p id=\"uc3813531\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为</span><em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">调用签名</span></em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：</span></p><pre data-language=\"typescript\" id=\"wiFm0\" class=\"ne-codeblock language-typescript\">const add: AddFunc = (n1, n2) =&gt; n1 + n2;\nconst join: AddFunc = (n1, n2) =&gt; `${n1} ${n2}`; // 不能将类型'string'分配给类型'number'\nadd(&quot;a&quot;, 2); // 类型'string'的参数不能赋给类型'number'的参数</pre><p id=\"u9a4c6d21\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png\" width=\"715\" id=\"u41545c4f\" class=\"ne-image\"></p><p id=\"u3c925611\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png\" width=\"724\" id=\"u91b90715\" class=\"ne-image\"></p><p id=\"u6eaf2ecd\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。</span></p><p id=\"u160cc3d5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。</span></p><p id=\"uc34d1cd4\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg\" width=\"1600\" id=\"u240e1d03\" class=\"ne-image\"></p><p id=\"u6b68740b\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 29px\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"ga2EL\" id=\"ga2EL\"><span data-lake-id=\"u9d3b4def\" id=\"u9d3b4def\">基本用法</span></h2><p data-lake-id=\"u4c6734a0\" id=\"u4c6734a0\"><span data-lake-id=\"u4f9a9017\" id=\"u4f9a9017\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：</span><span data-lake-id=\"ua9fa4c49\" id=\"ua9fa4c49\" class=\"lake-fontsize-22\">firstName</span><span data-lake-id=\"uc7835a87\" id=\"uc7835a87\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%B3%A8%EF%BC%9A%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E4%B8%BA%E7%BA%AFJavaScript%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AF%B7%E5%9C%A8JavaScript%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%BC%96%E5%86%99%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%9C%A8TypeScript%E7%8E%AF%E5%A2%83%E4%BC%9A%E6%8A%A5%E4%B8%80%E4%BA%9B%E7%B1%BB%E5%9E%8B%E9%94%99%E8%AF%AF%5Cnconst%20getFullName%20%3D%20(%7B%20firstName%2C%20lastName%20%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%5Cn%7D%3B%5Cn%5Cn%E4%BD%BF%E7%94%A8%E6%97%B6%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%EF%BC%9A%5CngetFullName(%7B%5Cn%20%20firstName%3A%20%5C%22Lison%5C%22%2C%5Cn%20%20lastName%3A%20%5C%22Li%5C%22%5Cn%7D)%3B%20%2F%2F%20%3D%3E%20'Lison%20Li'%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22qqc7N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u981badb3\" id=\"u981badb3\"><span data-lake-id=\"u6be843d1\" id=\"u6be843d1\" class=\"lake-fontsize-22\">没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22getFullName()%3B%20%2F%2F%20Uncaught%20TypeError%3A%20Cannot%20destructure%20property%20%60a%60%20of%20'undefined'%20or%20'null'%5CngetFullName(%7B%20age%3A%2018%2C%20phone%3A%20%5C%2213312345678%5C%22%20%7D)%3B%20%2F%2F%20'undefined%20undefined'%5CngetFullName(%7B%20firstName%3A%20%5C%22Lison%5C%22%20%7D)%3B%20%2F%2F%20'Lison%20undefined'%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22PehQm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1d1136e7\" id=\"u1d1136e7\"><span data-lake-id=\"u60d3aa18\" id=\"u60d3aa18\" class=\"lake-fontsize-22\"> </span><span data-lake-id=\"u8a36f91f\" id=\"u8a36f91f\" class=\"lake-fontsize-22\"> 这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getFullName%20%3D%20(%7B%5Cn%20%20firstName%2C%5Cn%20%20lastName%2C%5Cn%7D%3A%20%7B%20%2F%2F%20%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20firstName%3A%20string%3B%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B8%BAfirstName%E5%92%8ClastName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E5%BF%85%E9%A1%BB%E4%B8%BAstring%E7%B1%BB%E5%9E%8B%5Cn%20%20lastName%3A%20string%3B%5Cn%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%5Cn%7D%5Cn%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22jcuFq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u55acf1f2\" id=\"u55acf1f2\"><span data-lake-id=\"u7a126b53\" id=\"u7a126b53\" class=\"lake-fontsize-22\">我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：</span></p><p data-lake-id=\"u64baef33\" id=\"u64baef33\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png%22%2C%22taskId%22%3A%22u33945ad6-a930-45ff-97a4-b26d83fb21f%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A675%2C%22height%22%3A234%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A25936%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A675%2C%22originHeight%22%3A234%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%3A%2F%2F%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%90%8D%2028%20%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA.%20ts(2554)%20tName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%2029%2030%20index.ts(25%2C22)%3A%E6%9C%AA%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%AD%A4%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84%E8%87%AA%E5%8F%98%E9%87%8F.%2031%20constgetFuiiName(firstNamelastame%2032%20firstName%3Astring%3B%2033%20lastName%3Astring%3B%2034%20H)-%3Estring%2035%2036%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20getFuiinameV)%3B%2F%2F%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA%2037%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A70.056694%2C%22y%22%3A0.96522015%2C%22width%22%3A596.478766%2C%22height%22%3A21.59890685%2C%22text%22%3A%22%3A%2F%2F%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%90%8D%22%7D%2C%7B%22x%22%3A5.0437083%2C%22y%22%3A6.245795%2C%22width%22%3A19.799583700000003%2C%22height%22%3A14.83794%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A65.60348%2C%22y%22%3A25.08641%2C%22width%22%3A249.14724999999999%2C%22height%22%3A18.444077%2C%22text%22%3A%22%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA.%22%7D%2C%7B%22x%22%3A323.7029%2C%22y%22%3A28.03306%2C%22width%22%3A75.65748000000002%2C%22height%22%3A15.834519999999998%2C%22text%22%3A%22ts(2554)%22%7D%2C%7B%22x%22%3A531.24426%2C%22y%22%3A27.71959%2C%22width%22%3A136.3881899999999%2C%22height%22%3A16.90845%2C%22text%22%3A%22tName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%22%7D%2C%7B%22x%22%3A5.735676%2C%22y%22%3A29.95294%2C%22width%22%3A18.747625%2C%22height%22%3A12.598111999999997%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A5.457086%2C%22y%22%3A53.39238%2C%22width%22%3A19.089966%2C%22height%22%3A12.549199999999999%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A65.03882%2C%22y%22%3A57.28209%2C%22width%22%3A444.88171%2C%22height%22%3A18.36057000000001%2C%22text%22%3A%22index.ts(25%2C22)%3A%E6%9C%AA%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%AD%A4%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84%E8%87%AA%E5%8F%98%E9%87%8F.%22%7D%2C%7B%22x%22%3A5.6048245%2C%22y%22%3A76.96992%2C%22width%22%3A18.0566875%2C%22height%22%3A12.168660000000003%2C%22text%22%3A%2231%22%7D%2C%7B%22x%22%3A65.52161%2C%22y%22%3A93.11087%2C%22width%22%3A437.20219%2C%22height%22%3A17.99866%2C%22text%22%3A%22constgetFuiiName(firstNamelastame%22%7D%2C%7B%22x%22%3A5.746605%2C%22y%22%3A99.58777%2C%22width%22%3A18.04672%2C%22height%22%3A12.949193999999991%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A100.47341%2C%22y%22%3A112.93966%2C%22width%22%3A167.69535000000002%2C%22height%22%3A19.976290000000006%2C%22text%22%3A%22firstName%3Astring%3B%22%7D%2C%7B%22x%22%3A5.519258%2C%22y%22%3A121.7748%2C%22width%22%3A17.620244%2C%22height%22%3A12.538000000000011%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A100.86469%2C%22y%22%3A136.19089%2C%22width%22%3A159.22755999999998%2C%22height%22%3A19.160690000000017%2C%22text%22%3A%22lastName%3Astring%3B%22%7D%2C%7B%22x%22%3A4.8655324%2C%22y%22%3A144.20634%2C%22width%22%3A18.9732036%2C%22height%22%3A12.11529999999999%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A64.182816%2C%22y%22%3A158.51576%2C%22width%22%3A112.92837399999999%2C%22height%22%3A17.703309999999988%2C%22text%22%3A%22H)-%3Estring%22%7D%2C%7B%22x%22%3A4.467048%2C%22y%22%3A166.96953%2C%22width%22%3A19.276704000000002%2C%22height%22%3A12.623970000000014%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A4.63562%2C%22y%22%3A190.24937%2C%22width%22%3A19.443548%2C%22height%22%3A12.062659999999994%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A63.764385%2C%22y%22%3A190.37323%2C%22width%22%3A276.764115%2C%22height%22%3A15.586960000000005%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A53.709553%2C%22y%22%3A209.68217%2C%22width%22%3A365.58170700000005%2C%22height%22%3A20.822829999999982%2C%22text%22%3A%22getFuiinameV)%3B%2F%2F%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA%22%7D%2C%7B%22x%22%3A5.249744%2C%22y%22%3A212.72105%2C%22width%22%3A17.806106%2C%22height%22%3A12.032990000000012%2C%22text%22%3A%2237%22%7D%5D%2C%22id%22%3A%22ua1b0f756%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf19ffe58\" id=\"uf19ffe58\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png%22%2C%22taskId%22%3A%22u9fb570d1-61b4-4d58-a47c-7931a7f9d9b%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A770%2C%22height%22%3A79%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A33443%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1540%2C%22originHeight%22%3A158%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SittirstMameSt%20%E5%9E%8Bae%3Amuber%3Aphomemute%3BY%E5%8F%82%E8%87%B4%E4%B8%8D%E8%83%BD%E8%9E%BA%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22fnsthrlestrlme%3BLostlmstl.%20%E5%AF%B9%E5%AE%B6%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7.%E5%B9%B6%E4%B8%94%5C%22e%5C%22%E4%B8%8D%E5%9C%A8%E5%85%B1%E5%9E%8B%5C%22firstovestrintsm%20(property)age%3Anumber%20me%E6%9F%A5%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20%E7%B1%BB%E5%9E%8B%5C%22(aee%3Anumber%3Aphone%3Anumber%3BP%E7%9A%84%E5%8F%82%E6%95%99%E4%B8%8D%E8%83%BD%E6%84%9F%E7%BB%99%E5%9E%8Bfirsthame%3Bs%20lastName%3Astring%3B.2%5C%22%E7%9A%84%E5%8F%82%E6%95%B0.%20stringjla%20getFuliname(age%3A18%2Cphone123456789%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.19127%2C%22y%22%3A-0.96889234%2C%22width%22%3A141.30107%2C%22height%22%3A14.38983534%2C%22text%22%3A%22SittirstMameSt%22%7D%2C%7B%22x%22%3A158.49146%2C%22y%22%3A19.361862%2C%22width%22%3A943.5999400000001%2C%22height%22%3A22.317166000000004%2C%22text%22%3A%22%E5%9E%8Bae%3Amuber%3Aphomemute%3BY%E5%8F%82%E8%87%B4%E4%B8%8D%E8%83%BD%E8%9E%BA%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22fnsthrlestrlme%3BLostlmstl.%22%7D%2C%7B%22x%22%3A173.39833%2C%22y%22%3A41.914288%2C%22width%22%3A912.71867%2C%22height%22%3A25.102292000000006%2C%22text%22%3A%22%E5%AF%B9%E5%AE%B6%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7.%E5%B9%B6%E4%B8%94%5C%22e%5C%22%E4%B8%8D%E5%9C%A8%E5%85%B1%E5%9E%8B%5C%22firstovestrintsm%22%7D%2C%7B%22x%22%3A158.09389%2C%22y%22%3A75.88823%2C%22width%22%3A203.30771%2C%22height%22%3A20.376365000000007%2C%22text%22%3A%22(property)age%3Anumber%22%7D%2C%7B%22x%22%3A136.04724%2C%22y%22%3A109.524315%2C%22width%22%3A300.35043%2C%22height%22%3A15.923175%2C%22text%22%3A%22me%E6%9F%A5%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A442.7086%2C%22y%22%3A129.50824%2C%22width%22%3A644.3739%2C%22height%22%3A20.530110000000008%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22(aee%3Anumber%3Aphone%3Anumber%3BP%E7%9A%84%E5%8F%82%E6%95%99%E4%B8%8D%E8%83%BD%E6%84%9F%E7%BB%99%E5%9E%8Bfirsthame%3Bs%22%7D%2C%7B%22x%22%3A1151.2697%2C%22y%22%3A129.19928%2C%22width%22%3A253.68979999999988%2C%22height%22%3A19.493360000000024%2C%22text%22%3A%22lastName%3Astring%3B.2%5C%22%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A1078.0663%2C%22y%22%3A131.69977%2C%22width%22%3A97.45759999999996%2C%22height%22%3A18.598160000000007%2C%22text%22%3A%22stringjla%22%7D%2C%7B%22x%22%3A14.136898%2C%22y%22%3A131.9145%2C%22width%22%3A401.97873200000004%2C%22height%22%3A19.273020000000002%2C%22text%22%3A%22getFuliname(age%3A18%2Cphone123456789%22%7D%5D%2C%22id%22%3A%22u992b1d80%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u2fe3580b\" id=\"u2fe3580b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png%22%2C%22taskId%22%3A%22u99960eb5-aae8-4d2b-b893-b896dcdeab1%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1358%2C%22height%22%3A176%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A32398%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1358%2C%22originHeight%22%3A176%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8BfirstName%3Astring%3B%20%3B%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bfirstname%3Astring%3BlastName%3Astring%3B%E7%9A%84%E5%8F%82%E6%95%B0.%20%E4%B8%9A%E4%BA%86%E6%9D%91%E4%B8%AD%E5%B0%91%E5%AE%B6%E4%BD%8F%E5%A5%96m%E4%B8%AD%2034%2035%20index.ts(30%2C5)%3A%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%A3%B0%E6%98%8E%E4%BA%86%5C%22lastName%2036%20(propertyfirstame%3Astring%2037%20getFuiina%2038%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D...(C.trl%2B)%20getFulina%20getFulinamefirstName%5C%22Lison%3B%E7%A7%AF%E5%B0%91%E5%BF%85%E8%A6%81%E5%B1%9E%E6%80%A7astName%2039%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A172.4774%2C%22y%22%3A10.630165%2C%22width%22%3A245.23560000000003%2C%22height%22%3A18.862198%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8BfirstName%3Astring%3B%22%7D%2C%7B%22x%22%3A392.5245%2C%22y%22%3A9.898132%2C%22width%22%3A646.0127%2C%22height%22%3A19.38568%2C%22text%22%3A%22%3B%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bfirstname%3Astring%3BlastName%3Astring%3B%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A186.99178%2C%22y%22%3A31.103899%2C%22width%22%3A1156.91602%2C%22height%22%3A23.747583%2C%22text%22%3A%22%E4%B8%9A%E4%BA%86%E6%9D%91%E4%B8%AD%E5%B0%91%E5%AE%B6%E4%BD%8F%E5%A5%96m%E4%B8%AD%22%7D%2C%7B%22x%22%3A1.4795045%2C%22y%22%3A38.20511%2C%22width%22%3A19.7915375%2C%22height%22%3A14.615973000000004%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A0.20263453%2C%22y%22%3A61.615917%2C%22width%22%3A20.76056847%2C%22height%22%3A16.095638%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A169.64444%2C%22y%22%3A65.85934%2C%22width%22%3A367.43405999999993%2C%22height%22%3A21.666200000000003%2C%22text%22%3A%22index.ts(30%2C5)%3A%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%A3%B0%E6%98%8E%E4%BA%86%5C%22lastName%22%7D%2C%7B%22x%22%3A0.15577894%2C%22y%22%3A83.290474%2C%22width%22%3A21.76526806%2C%22height%22%3A16.584996000000004%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A169.97092%2C%22y%22%3A100.989525%2C%22width%22%3A263.52698%2C%22height%22%3A18.525175000000004%2C%22text%22%3A%22(propertyfirstame%3Astring%22%7D%2C%7B%22x%22%3A0.87860405%2C%22y%22%3A104.689095%2C%22width%22%3A22.20265895%2C%22height%22%3A18.445739000000003%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A75.97925%2C%22y%22%3A105.367256%2C%22width%22%3A85.42351000000001%2C%22height%22%3A20.387833999999998%2C%22text%22%3A%22getFuiina%22%7D%2C%7B%22x%22%3A0.6956785%2C%22y%22%3A129.5022%2C%22width%22%3A22.3032155%2C%22height%22%3A16.804070000000024%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A169.17944%2C%22y%22%3A131.52187%2C%22width%22%3A268.85656%2C%22height%22%3A16.261300000000006%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D...(C.trl%2B)%22%7D%2C%7B%22x%22%3A69.88076%2C%22y%22%3A130.09065%2C%22width%22%3A91.84313000000002%2C%22height%22%3A17.37720999999999%2C%22text%22%3A%22getFulina%22%7D%2C%7B%22x%22%3A46.90255%2C%22y%22%3A150.04514%2C%22width%22%3A558.11015%2C%22height%22%3A19.361580000000004%2C%22text%22%3A%22getFulinamefirstName%5C%22Lison%3B%E7%A7%AF%E5%B0%91%E5%BF%85%E8%A6%81%E5%B1%9E%E6%80%A7astName%22%7D%2C%7B%22x%22%3A0.22041021%2C%22y%22%3A151.85524%2C%22width%22%3A22.68226379%2C%22height%22%3A16.181759999999997%2C%22text%22%3A%2239%22%7D%5D%2C%22id%22%3A%22ub3bff8f8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua8031729\" id=\"ua8031729\"><span data-lake-id=\"ue7315539\" id=\"ue7315539\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Info%20%7B%5Cn%20%20firstName%3A%20string%3B%5Cn%20%20lastName%3A%20string%3B%5Cn%7D%5Cnconst%20getFullName%20%3D%20(%7B%20firstName%2C%20lastName%20%7D%3A%20Info)%20%3D%3E%5Cn%20%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22RTUnh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9a6f2a03\" id=\"u9a6f2a03\"><span data-lake-id=\"ubf519eb9\" id=\"ubf519eb9\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。</span></p><h2 data-lake-id=\"Osi0T\" id=\"Osi0T\"><span data-lake-id=\"ue9ab45a1\" id=\"ue9ab45a1\">可选属性</span></h2><p data-lake-id=\"ud81f38f2\" id=\"ud81f38f2\"><span data-lake-id=\"u5dda12f6\" id=\"u5dda12f6\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，</span><em><span data-lake-id=\"ufa2e09a8\" id=\"ufa2e09a8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">typescript</span></em><span data-lake-id=\"u68502803\" id=\"u68502803\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">为我们提供了可选属性。</span></p><p data-lake-id=\"u211124af\" id=\"u211124af\"><span data-lake-id=\"u733373b3\" id=\"u733373b3\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们先定义一个描述传入蔬菜信息的句子的函数：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22JpneV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4a4bd115\" id=\"u4a4bd115\"><span data-lake-id=\"u9ecea93d\" id=\"u9ecea93d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3F%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22MVeDl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1e00958e\" id=\"u1e00958e\"><span data-lake-id=\"uc4c7a9c8\" id=\"uc4c7a9c8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;interface-name&quot;: [true, “never-prefix”]来关闭。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20%20%20color%3F%3A%20string%3B%5Cn%20%20%20%20type%3A%20string%3B%5Cn%20%20%7D%5Cn%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3AVegetables)%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%20%20%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22GExE2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"C3pXm\" id=\"C3pXm\"><span data-lake-id=\"u7e1a24dd\" id=\"u7e1a24dd\">多余属性检查</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22getVegetables(%7B%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%20%5C%22big%5C%22%20%2F%2F%20'size'%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22EcyRb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ua27818ba\" id=\"ua27818ba\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png%22%2C%22taskId%22%3A%22u7d7b2296-d6c0-4b56-b4a5-5e78d030178%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A891%2C%22height%22%3A167%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A17620%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A891%2C%22originHeight%22%3A167%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8Btype%3Astring%3Bsize%3Astring%3BY%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bvegetables%E7%9A%84%E5%8F%82%E6%95%B0.%20%E5%AF%B9%E8%B1%A1%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%2C%E5%B9%B6%E4%B8%94%5C%22size%5C%22%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8Bvegetables%E4%B8%AD.ts(2345)%20ge%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20e%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%20sizei%5C%22big%5C%22%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A67.5127%2C%22y%22%3A25.286406%2C%22width%22%3A675.2846%2C%22height%22%3A21.289991%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8Btype%3Astring%3Bsize%3Astring%3BY%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bvegetables%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A85.4596%2C%22y%22%3A49.351418%2C%22width%22%3A643.7776%2C%22height%22%3A20.491831999999995%2C%22text%22%3A%22%E5%AF%B9%E8%B1%A1%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%2C%E5%B9%B6%E4%B8%94%5C%22size%5C%22%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8Bvegetables%E4%B8%AD.ts(2345)%22%7D%2C%7B%22x%22%3A35.680283%2C%22y%22%3A61.57533%2C%22width%22%3A20.579184999999995%2C%22height%22%3A15.130749999999999%2C%22text%22%3A%22ge%22%7D%2C%7B%22x%22%3A64.41642%2C%22y%22%3A83.77975%2C%22width%22%3A278.47344%2C%22height%22%3A15.072483999999989%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A237.45085%2C%22y%22%3A102.820984%2C%22width%22%3A212.82965000000002%2C%22height%22%3A18.565336000000002%2C%22text%22%3A%22e%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%22%7D%2C%7B%22x%22%3A55.005783%2C%22y%22%3A106.04333%2C%22width%22%3A104.96859699999999%2C%22height%22%3A16.713790000000003%2C%22text%22%3A%22sizei%5C%22big%5C%22%22%7D%5D%2C%22id%22%3A%22u73a7cee0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u701dba2a\" id=\"u701dba2a\"><span data-lake-id=\"u0eebc0b4\" id=\"u0eebc0b4\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。</span></p><p data-lake-id=\"u04a99e81\" id=\"u04a99e81\"><span data-lake-id=\"ue9c7e70b\" id=\"ue9c7e70b\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;object-literal-sort-keys&quot;: [false]来关闭。</span></p><h2 data-lake-id=\"izjCz\" id=\"izjCz\"><span data-lake-id=\"u7faf4ea8\" id=\"u7faf4ea8\">绕开多余属性检查</span></h2><p data-lake-id=\"ua1763e3d\" id=\"ua1763e3d\"><span data-lake-id=\"u56fb9801\" id=\"u56fb9801\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：</span></p><h3 data-lake-id=\"UbRno\" id=\"UbRno\"><span data-lake-id=\"u74755d88\" id=\"u74755d88\">使用类型断言</span></h3><p data-lake-id=\"uce1645b6\" id=\"uce1645b6\"><span data-lake-id=\"u7922a974\" id=\"u7922a974\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3F%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%5CngetVegetables(%7B%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%2012%2C%5Cn%20%20price%3A%201.2%5Cn%7D%20as%20Vegetables)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22KJaSQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"T7Ilu\" id=\"T7Ilu\"><span data-lake-id=\"ufb39e02b\" id=\"ufb39e02b\">添加索引签名</span></h3><p data-lake-id=\"u71358f5f\" id=\"u71358f5f\"><span data-lake-id=\"u065059e0\" id=\"u065059e0\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">更好的方式是添加字符串索引签名</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%20%20%5Bprop%3A%20string%5D%3A%20any%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%5CngetVegetables(%7B%5Cn%20%20color%3A%20%5C%22red%5C%22%2C%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%2012%2C%5Cn%20%20price%3A%201.2%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OLak3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"WqgZw\" id=\"WqgZw\"><span data-lake-id=\"ucf451079\" id=\"ucf451079\">利用类型兼容性</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Btype%7D%60%3B%5Cn%7D%3B%5Cn%5Cnconst%20option%20%3D%20%7B%20type%3A%20%5C%22tomato%5C%22%2C%20size%3A%2012%20%7D%3B%5CngetVegetables(option)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22E9HPU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf3d82ca8\" id=\"uf3d82ca8\"><span data-lake-id=\"u28be7669\" id=\"u28be7669\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">上面这种方法完美通过检查，我们将对象字面量赋给一个变量</span><span data-lake-id=\"ufb9a3832\" id=\"ufb9a3832\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">option</span><span data-lake-id=\"ucb75d1be\" id=\"ucb75d1be\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，然后</span><span data-lake-id=\"u44ea4dd8\" id=\"u44ea4dd8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">getVegetables</span><span data-lake-id=\"u96fc8a3a\" id=\"u96fc8a3a\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">传入</span><span data-lake-id=\"u9b4e19dd\" id=\"u9b4e19dd\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u9833b37d\" id=\"u9833b37d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">option</span><span data-lake-id=\"u5791a42e\" id=\"u5791a42e\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。</span></p><p data-lake-id=\"uf4ce67c2\" id=\"uf4ce67c2\"><span data-lake-id=\"u752c01e7\" id=\"u752c01e7\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错</span></p><h3 data-lake-id=\"DYDQK\" id=\"DYDQK\"><span data-lake-id=\"u5fd15db9\" id=\"u5fd15db9\" style=\"color: rgb(28, 31, 33)\">只读属性</span></h3><p data-lake-id=\"u99cef886\" id=\"u99cef886\"><span data-lake-id=\"u2dafa39a\" id=\"u2dafa39a\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">接口也可以设置只读属性，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Role%20%7B%5Cn%20%20readonly%200%3A%20string%3B%5Cn%20%20readonly%201%3A%20string%3B%5Cn%7D%20%5Cn%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%80%E4%B8%AA%E8%A7%92%E8%89%B2%E5%AD%97%E5%85%B8%EF%BC%8C%E6%9C%89%200%20%E5%92%8C%201%20%E4%B8%A4%E7%A7%8D%E8%A7%92%E8%89%B2%20id%E3%80%82%E4%B8%8B%E9%9D%A2%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%99%85%E7%9A%84%E8%A7%92%E8%89%B2%20%5Cb%20%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9D%A5%E8%AF%95%E5%9B%BE%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%8B%E5%AE%83%E7%9A%84%E5%80%BC%EF%BC%9A%5Cn%5Cnconst%20role%3A%20Role%20%3D%20%7B%5Cn%20%200%3A%20%5C%22super_admin%5C%22%2C%5Cn%20%201%3A%20%5C%22admin%5C%22%5Cn%7D%3B%5Cnrole%5B1%5D%20%3D%20%5C%22super_admin%5C%22%3B%20%2F%2F%20Cannot%20assign%20to%20'0'%20because%20it%20is%20a%20read-only%20property%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tvwz7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9e49879d\" id=\"u9e49879d\"><span data-lake-id=\"u54ba90cf\" id=\"u54ba90cf\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20NAME%3A%20string%20%3D%20%5C%22Lison%5C%22%3B%5CnNAME%20%3D%20%5C%22Haha%5C%22%3B%20%2F%2F%20Uncaught%20TypeError%3A%20Assignment%20to%20constant%20variable%5Cn%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22lison%5C%22%5Cn%7D%3B%5Cnobj.name%20%3D%20%5C%22Haha%5C%22%3B%5Cn%5Cninterface%20Info%20%7B%5Cn%20%20readonly%20name%3A%20string%3B%5Cn%7D%5Cnconst%20info%3A%20Info%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22Lison%5C%22%5Cn%7D%3B%5Cninfo%5B%5C%22name%5C%22%5D%20%3D%20%5C%22Haha%5C%22%3B%20%2F%2F%20Cannot%20assign%20to%20'name'%20because%20it%20is%20a%20read-only%20property%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fvjM5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u298476e7\" id=\"u298476e7\"><span data-lake-id=\"ufdba14a0\" id=\"ufdba14a0\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。</span></p><h3 data-lake-id=\"tkCr2\" id=\"tkCr2\"><span data-lake-id=\"u54efff58\" id=\"u54efff58\">函数类型</span></h3><p data-lake-id=\"ubf5c9623\" id=\"ubf5c9623\"><span data-lake-id=\"u92915e0e\" id=\"u92915e0e\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">接口可以描述普通对象，还可以描述函数类型，我们先看写法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20AddFunc%20%7B%5Cn%20%20(num1%3A%20number%2C%20num2%3A%20number)%3A%20number%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22V5Aiu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc3813531\" id=\"uc3813531\"><span data-lake-id=\"u62b8d59d\" id=\"u62b8d59d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为</span><em><span data-lake-id=\"u67a66298\" id=\"u67a66298\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">调用签名</span></em><span data-lake-id=\"u14467059\" id=\"u14467059\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20add%3A%20AddFunc%20%3D%20(n1%2C%20n2)%20%3D%3E%20n1%20%2B%20n2%3B%5Cnconst%20join%3A%20AddFunc%20%3D%20(n1%2C%20n2)%20%3D%3E%20%60%24%7Bn1%7D%20%24%7Bn2%7D%60%3B%20%2F%2F%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B'string'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B'number'%5Cnadd(%5C%22a%5C%22%2C%202)%3B%20%2F%2F%20%E7%B1%BB%E5%9E%8B'string'%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B'number'%E7%9A%84%E5%8F%82%E6%95%B0%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22wiFm0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9a4c6d21\" id=\"u9a4c6d21\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png%22%2C%22taskId%22%3A%22ueb62392c-919f-4c0c-9cc7-717889ec8d6%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A715%2C%22height%22%3A107%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A21366%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A953%2C%22originHeight%22%3A143%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8Bstring'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%20%E7%B1%BB%E5%9E%8B%5C%22number'.ts(2322)%20interfaceAddFunc%20index.ts(64%2C13)%3A%E6%89%80%E9%9C%80%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%87%AA%E6%AD%A4%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.%20(numl%3Anumber%2Cnum2%3Anumber)%3Anu%20(parameter)n1%3Anumber%20constadd%3AAddFunc-(n1%2Cn2)-%3E%20%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%20%24n1in2%3B%20constjoin%3AAddFunc-(%2Cn%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A360.26846%2C%22y%22%3A3.2358212%2C%22width%22%3A255.67164000000002%2C%22height%22%3A19.2425588%2C%22text%22%3A%22%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8Bstring'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A577.9371%2C%22y%22%3A6.278446%2C%22width%22%3A210.12300000000005%2C%22height%22%3A17.558342%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22number'.ts(2322)%22%7D%2C%7B%22x%22%3A36.108833%2C%22y%22%3A29.425035%2C%22width%22%3A179.703837%2C%22height%22%3A21.692023%2C%22text%22%3A%22interfaceAddFunc%22%7D%2C%7B%22x%22%3A360.20572%2C%22y%22%3A35.35116%2C%22width%22%3A426.82938000000007%2C%22height%22%3A18.20225%2C%22text%22%3A%22index.ts(64%2C13)%3A%E6%89%80%E9%9C%80%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%87%AA%E6%AD%A4%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.%22%7D%2C%7B%22x%22%3A55.44603%2C%22y%22%3A56.10835%2C%22width%22%3A296.44626999999997%2C%22height%22%3A17.257019999999997%2C%22text%22%3A%22(numl%3Anumber%2Cnum2%3Anumber)%3Anu%22%7D%2C%7B%22x%22%3A366.1037%2C%22y%22%3A71.00154%2C%22width%22%3A201.43880000000001%2C%22height%22%3A18.70581999999999%2C%22text%22%3A%22(parameter)n1%3Anumber%22%7D%2C%7B%22x%22%3A36.70705%2C%22y%22%3A100.40108%2C%22width%22%3A286.61573000000004%2C%22height%22%3A17.54453000000001%2C%22text%22%3A%22constadd%3AAddFunc-(n1%2Cn2)-%3E%22%7D%2C%7B%22x%22%3A504.33707%2C%22y%22%3A101.76711%2C%22width%22%3A132.79519%2C%22height%22%3A15.820899999999995%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A354.69107%2C%22y%22%3A102.00822%2C%22width%22%3A133.09747%2C%22height%22%3A15.27645600000001%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%22%7D%2C%7B%22x%22%3A359.33408%2C%22y%22%3A123.40791%2C%22width%22%3A124.97152000000006%2C%22height%22%3A18.29798000000001%2C%22text%22%3A%22%24n1in2%3B%22%7D%2C%7B%22x%22%3A36.91246%2C%22y%22%3A123.505806%2C%22width%22%3A277.92618999999996%2C%22height%22%3A16.565573999999998%2C%22text%22%3A%22constjoin%3AAddFunc-(%2Cn%22%7D%5D%2C%22id%22%3A%22u41545c4f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u3c925611\" id=\"u3c925611\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png%22%2C%22taskId%22%3A%22u4dd12a49-ea62-4869-9f7c-1eb5ab88d18%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12456%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A724%2C%22originHeight%22%3A109%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%E7%9A%84%E5%8F%82%E6%95%B0.%20ts(2345)%20conS%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20conS%20adda%5C%22%2C2%3B%2F%2F%E7%B1%BB%E5%9E%8B'string%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%20%E7%9A%84%E5%8F%82%E6%95%B0%20number%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A84.21963%2C%22y%22%3A18.177246%2C%22width%22%3A403.29749%2C%22height%22%3A21.882458000000003%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A508.1918%2C%22y%22%3A22.715536%2C%22width%22%3A73.76394999999997%2C%22height%22%3A15.990609999999997%2C%22text%22%3A%22ts(2345)%22%7D%2C%7B%22x%22%3A35.819202%2C%22y%22%3A32.51003%2C%22width%22%3A37.022498000000006%2C%22height%22%3A12.230905999999997%2C%22text%22%3A%22conS%22%7D%2C%7B%22x%22%3A82.22469%2C%22y%22%3A54.35365%2C%22width%22%3A278.05183%2C%22height%22%3A16.687269999999998%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A35.931484%2C%22y%22%3A55.578228%2C%22width%22%3A37.602226%2C%22height%22%3A12.761912000000002%2C%22text%22%3A%22conS%22%7D%2C%7B%22x%22%3A34.65141%2C%22y%22%3A72.876945%2C%22width%22%3A422.89073%2C%22height%22%3A19.73806499999999%2C%22text%22%3A%22adda%5C%22%2C2%3B%2F%2F%E7%B1%BB%E5%9E%8B'string%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A528.8692%2C%22y%22%3A74.59742%2C%22width%22%3A55.02200000000005%2C%22height%22%3A17.137200000000007%2C%22text%22%3A%22%E7%9A%84%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A463.91177%2C%22y%22%3A79.057495%2C%22width%22%3A55.22913%2C%22height%22%3A11.216065%2C%22text%22%3A%22number%22%7D%5D%2C%22id%22%3A%22u91b90715%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6eaf2ecd\" id=\"u6eaf2ecd\"><span data-lake-id=\"u1420f6b8\" id=\"u1420f6b8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。</span></p><p data-lake-id=\"u160cc3d5\" id=\"u160cc3d5\"><span data-lake-id=\"u6862f42b\" id=\"u6862f42b\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。</span></p><p data-lake-id=\"uc34d1cd4\" id=\"uc34d1cd4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg%22%2C%22taskId%22%3A%22u81f8ae0c-7d78-4d36-8bad-24066b4ff1d%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfd200012bae16000820.jpg%22%2C%22size%22%3A134441%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A820%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BD%BF%E7%94%A8%20interface%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%20%E6%B3%A8%E6%84%8F%E5%9C%A8%E5%AE%9A%E4%B9%89%E6%8C%82%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%2C%E4%BD%A0%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%BB%96%E7%90%86%E8%A7%A3%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E8%80%8C%E8%A6%81%E7%90%86%E8%A7%A3%E4%B8%BA%E4%BB%AC%E5%8F%B7%E5%8C%85%E7%9A%84%20%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%9D%97%2C%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E6%9D%A1%E6%9D%A1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8B%BA%2C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E8%80%8C%E6%98%AF%E5%9E%8B%20%E5%8F%AF%E9%80%89%E5%B1%85%E6%80%A7%20%E6%9C%89%E6%97%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%AE%9A%E5%8F%88%E5%9C%A8mtifke%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9B%BF%E6%98%AF%E4%BA%9B%E9%A1%B9%E7%9A%84%2Ctpecirt%E4%B8%AD%E4%BE%BF%E4%B8%BA%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%AF%E9%80%89%E5%B1%82%E6%80%A7%20%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%20%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8D%E6%AF%94%E6%8E%A5%E5%8F%A3%E5%B0%91%E9%81%93%E4%B8%80%E4%BA%9B%E8%80%B3%E8%80%85%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E8%AE%B8%E7%9A%84%20%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B9%8E%E4%BB%BB%E6%84%8F%E7%BB%93%E6%9E%84%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%20%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%20%E7%BB%95%E5%BC%80%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%20%E5%88%A9%E7%94%A8%E7%BE%8E%E5%9E%8B%E7%B4%A0%E5%AE%A2%E6%80%A7%20%E4%BD%BF%E7%94%A8const%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%BE%88%E9%95%AF%E7%9A%84%20%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%20%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%9D%E8%AF%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9%2C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8readonly%20%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E5%96%84%E9%80%9A%E5%AF%B9%E8%B1%A1%2C%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E8%8F%8C%E6%95%99%E8%A1%A8%E5%9E%8B%20%E9%9D%A2%E6%95%B0%E7%B1%BB%E5%9E%8B%20%E5%AE%9E%E9%99%85%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E7%9A%84%E6%97%B6%E5%80%99%2C%E5%90%8D%E5%AD%97%E6%98%AF%E6%97%A0%E9%9C%80%E5%92%8C%E6%8C%82%E5%8F%A3%E4%B8%AD%E5%8F%82%E6%95%B0%E5%90%8D%E7%9B%B8%E9%97%B4%E7%9A%84%2C%E5%8F%AA%E9%9C%80%E8%A6%81%E4%BD%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E5%8D%B3%E5%8F%AF%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A778.23425%2C%22y%22%3A24.854164%2C%22width%22%3A38.69965000000002%2C%22height%22%3A21.344956%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%22%7D%2C%7B%22x%22%3A827.28033%2C%22y%22%3A26.263094%2C%22width%22%3A172.57566999999995%2C%22height%22%3A19.792932000000004%2C%22text%22%3A%22interface%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A593.55023%2C%22y%22%3A61.879852%2C%22width%22%3A97.52976999999998%2C%22height%22%3A24.731967999999995%2C%22text%22%3A%22%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%22%7D%2C%7B%22x%22%3A776.6905%2C%22y%22%3A72.23591%2C%22width%22%3A776.2237999999999%2C%22height%22%3A21.919209999999993%2C%22text%22%3A%22%E6%B3%A8%E6%84%8F%E5%9C%A8%E5%AE%9A%E4%B9%89%E6%8C%82%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%2C%E4%BD%A0%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%BB%96%E7%90%86%E8%A7%A3%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E8%80%8C%E8%A6%81%E7%90%86%E8%A7%A3%E4%B8%BA%E4%BB%AC%E5%8F%B7%E5%8C%85%E7%9A%84%22%7D%2C%7B%22x%22%3A778.42065%2C%22y%22%3A100.49816%2C%22width%22%3A678.8297499999999%2C%22height%22%3A21.701814%2C%22text%22%3A%22%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%9D%97%2C%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E6%9D%A1%E6%9D%A1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8B%BA%2C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E8%80%8C%E6%98%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A596.7596%2C%22y%22%3A197.34923%2C%22width%22%3A93.83339999999998%2C%22height%22%3A25.477069999999998%2C%22text%22%3A%22%E5%8F%AF%E9%80%89%E5%B1%85%E6%80%A7%22%7D%2C%7B%22x%22%3A782.0851%2C%22y%22%3A200.52173%2C%22width%22%3A762.3989999999999%2C%22height%22%3A23.950500000000005%2C%22text%22%3A%22%E6%9C%89%E6%97%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%AE%9A%E5%8F%88%E5%9C%A8mtifke%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9B%BF%E6%98%AF%E4%BA%9B%E9%A1%B9%E7%9A%84%2Ctpecirt%E4%B8%AD%E4%BE%BF%E4%B8%BA%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%AF%E9%80%89%E5%B1%82%E6%80%A7%22%7D%2C%7B%22x%22%3A597.22046%2C%22y%22%3A308.25293%2C%22width%22%3A138.92363999999998%2C%22height%22%3A25.314120000000003%2C%22text%22%3A%22%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%22%7D%2C%7B%22x%22%3A828.28455%2C%22y%22%3A311.3899%2C%22width%22%3A510.08525%2C%22height%22%3A19.363459999999975%2C%22text%22%3A%22%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8D%E6%AF%94%E6%8E%A5%E5%8F%A3%E5%B0%91%E9%81%93%E4%B8%80%E4%BA%9B%E8%80%B3%E8%80%85%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E8%AE%B8%E7%9A%84%22%7D%2C%7B%22x%22%3A71.84581%2C%22y%22%3A394.8105%2C%22width%22%3A358.67754%2C%22height%22%3A31.83913000000001%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B9%8E%E4%BB%BB%E6%84%8F%E7%BB%93%E6%9E%84%22%7D%2C%7B%22x%22%3A877.55035%2C%22y%22%3A408.61316%2C%22width%22%3A120.98005%2C%22height%22%3A21.127009999999984%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%22%7D%2C%7B%22x%22%3A877.3996%2C%22y%22%3A454.9849%2C%22width%22%3A122.30450000000008%2C%22height%22%3A22.209069999999997%2C%22text%22%3A%22%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A591.8626%2C%22y%22%3A456.42032%2C%22width%22%3A196.19385999999997%2C%22height%22%3A23.305360000000007%2C%22text%22%3A%22%E7%BB%95%E5%BC%80%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%22%7D%2C%7B%22x%22%3A879.0666%2C%22y%22%3A504.0202%2C%22width%22%3A141.96929999999998%2C%22height%22%3A21.512200000000064%2C%22text%22%3A%22%E5%88%A9%E7%94%A8%E7%BE%8E%E5%9E%8B%E7%B4%A0%E5%AE%A2%E6%80%A7%22%7D%2C%7B%22x%22%3A777.16095%2C%22y%22%3A592.86554%2C%22width%22%3A596.4436499999999%2C%22height%22%3A21.175960000000032%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8const%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%BE%88%E9%95%AF%E7%9A%84%22%7D%2C%7B%22x%22%3A594.65857%2C%22y%22%3A612.65704%2C%22width%22%3A96.08762999999999%2C%22height%22%3A26.271429999999896%2C%22text%22%3A%22%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%22%7D%2C%7B%22x%22%3A777.686%2C%22y%22%3A639.3086%2C%22width%22%3A508.34209999999996%2C%22height%22%3A21.071160000000077%2C%22text%22%3A%22%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%9D%E8%AF%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9%2C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8readonly%22%7D%2C%7B%22x%22%3A778.1251%2C%22y%22%3A723.17633%2C%22width%22%3A403.60169999999994%2C%22height%22%3A24.788509999999974%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E5%96%84%E9%80%9A%E5%AF%B9%E8%B1%A1%2C%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E8%8F%8C%E6%95%99%E8%A1%A8%E5%9E%8B%22%7D%2C%7B%22x%22%3A593.13214%2C%22y%22%3A747.2824%2C%22width%22%3A96.51265999999998%2C%22height%22%3A26.85089999999991%2C%22text%22%3A%22%E9%9D%A2%E6%95%B0%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A777.8692%2C%22y%22%3A772.46375%2C%22width%22%3A700.2081999999999%2C%22height%22%3A20.61755000000005%2C%22text%22%3A%22%E5%AE%9E%E9%99%85%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E7%9A%84%E6%97%B6%E5%80%99%2C%E5%90%8D%E5%AD%97%E6%98%AF%E6%97%A0%E9%9C%80%E5%92%8C%E6%8C%82%E5%8F%A3%E4%B8%AD%E5%8F%82%E6%95%B0%E5%90%8D%E7%9B%B8%E9%97%B4%E7%9A%84%2C%E5%8F%AA%E9%9C%80%E8%A6%81%E4%BD%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E5%8D%B3%E5%8F%AF%22%7D%5D%2C%22id%22%3A%22u240e1d03%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6b68740b\" id=\"u6b68740b\"><span data-lake-id=\"u0a8f08f7\" id=\"u0a8f08f7\" class=\"lake-fontsize-22\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"ga2EL\" id=\"ga2EL\"><span data-lake-id=\"u9d3b4def\" id=\"u9d3b4def\">基本用法</span></h2><p data-lake-id=\"u4c6734a0\" id=\"u4c6734a0\"><span data-lake-id=\"u4f9a9017\" id=\"u4f9a9017\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：</span><span data-lake-id=\"ua9fa4c49\" id=\"ua9fa4c49\" class=\"lake-fontsize-22\">firstName</span><span data-lake-id=\"uc7835a87\" id=\"uc7835a87\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%B3%A8%EF%BC%9A%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E4%B8%BA%E7%BA%AFJavaScript%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AF%B7%E5%9C%A8JavaScript%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%BC%96%E5%86%99%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%9C%A8TypeScript%E7%8E%AF%E5%A2%83%E4%BC%9A%E6%8A%A5%E4%B8%80%E4%BA%9B%E7%B1%BB%E5%9E%8B%E9%94%99%E8%AF%AF%5Cnconst%20getFullName%20%3D%20(%7B%20firstName%2C%20lastName%20%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%5Cn%7D%3B%5Cn%5Cn%E4%BD%BF%E7%94%A8%E6%97%B6%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%EF%BC%9A%5CngetFullName(%7B%5Cn%20%20firstName%3A%20%5C%22Lison%5C%22%2C%5Cn%20%20lastName%3A%20%5C%22Li%5C%22%5Cn%7D)%3B%20%2F%2F%20%3D%3E%20'Lison%20Li'%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22qqc7N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u981badb3\" id=\"u981badb3\"><span data-lake-id=\"u6be843d1\" id=\"u6be843d1\" class=\"lake-fontsize-22\">没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22getFullName()%3B%20%2F%2F%20Uncaught%20TypeError%3A%20Cannot%20destructure%20property%20%60a%60%20of%20'undefined'%20or%20'null'%5CngetFullName(%7B%20age%3A%2018%2C%20phone%3A%20%5C%2213312345678%5C%22%20%7D)%3B%20%2F%2F%20'undefined%20undefined'%5CngetFullName(%7B%20firstName%3A%20%5C%22Lison%5C%22%20%7D)%3B%20%2F%2F%20'Lison%20undefined'%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22PehQm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1d1136e7\" id=\"u1d1136e7\"><span data-lake-id=\"u60d3aa18\" id=\"u60d3aa18\" class=\"lake-fontsize-22\"> </span><span data-lake-id=\"u8a36f91f\" id=\"u8a36f91f\" class=\"lake-fontsize-22\"> 这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getFullName%20%3D%20(%7B%5Cn%20%20firstName%2C%5Cn%20%20lastName%2C%5Cn%7D%3A%20%7B%20%2F%2F%20%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20firstName%3A%20string%3B%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B8%BAfirstName%E5%92%8ClastName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E5%BF%85%E9%A1%BB%E4%B8%BAstring%E7%B1%BB%E5%9E%8B%5Cn%20%20lastName%3A%20string%3B%5Cn%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%5Cn%7D%5Cn%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22jcuFq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u55acf1f2\" id=\"u55acf1f2\"><span data-lake-id=\"u7a126b53\" id=\"u7a126b53\" class=\"lake-fontsize-22\">我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：</span></p><p data-lake-id=\"u64baef33\" id=\"u64baef33\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png%22%2C%22taskId%22%3A%22u33945ad6-a930-45ff-97a4-b26d83fb21f%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A675%2C%22height%22%3A234%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A25936%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A675%2C%22originHeight%22%3A234%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%3A%2F%2F%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%90%8D%2028%20%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA.%20ts(2554)%20tName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%2029%2030%20index.ts(25%2C22)%3A%E6%9C%AA%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%AD%A4%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84%E8%87%AA%E5%8F%98%E9%87%8F.%2031%20constgetFuiiName(firstNamelastame%2032%20firstName%3Astring%3B%2033%20lastName%3Astring%3B%2034%20H)-%3Estring%2035%2036%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20getFuiinameV)%3B%2F%2F%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA%2037%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A70.056694%2C%22y%22%3A0.96522015%2C%22width%22%3A596.478766%2C%22height%22%3A21.59890685%2C%22text%22%3A%22%3A%2F%2F%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%90%8D%22%7D%2C%7B%22x%22%3A5.0437083%2C%22y%22%3A6.245795%2C%22width%22%3A19.799583700000003%2C%22height%22%3A14.83794%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A65.60348%2C%22y%22%3A25.08641%2C%22width%22%3A249.14724999999999%2C%22height%22%3A18.444077%2C%22text%22%3A%22%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA.%22%7D%2C%7B%22x%22%3A323.7029%2C%22y%22%3A28.03306%2C%22width%22%3A75.65748000000002%2C%22height%22%3A15.834519999999998%2C%22text%22%3A%22ts(2554)%22%7D%2C%7B%22x%22%3A531.24426%2C%22y%22%3A27.71959%2C%22width%22%3A136.3881899999999%2C%22height%22%3A16.90845%2C%22text%22%3A%22tName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%22%7D%2C%7B%22x%22%3A5.735676%2C%22y%22%3A29.95294%2C%22width%22%3A18.747625%2C%22height%22%3A12.598111999999997%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A5.457086%2C%22y%22%3A53.39238%2C%22width%22%3A19.089966%2C%22height%22%3A12.549199999999999%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A65.03882%2C%22y%22%3A57.28209%2C%22width%22%3A444.88171%2C%22height%22%3A18.36057000000001%2C%22text%22%3A%22index.ts(25%2C22)%3A%E6%9C%AA%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%AD%A4%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84%E8%87%AA%E5%8F%98%E9%87%8F.%22%7D%2C%7B%22x%22%3A5.6048245%2C%22y%22%3A76.96992%2C%22width%22%3A18.0566875%2C%22height%22%3A12.168660000000003%2C%22text%22%3A%2231%22%7D%2C%7B%22x%22%3A65.52161%2C%22y%22%3A93.11087%2C%22width%22%3A437.20219%2C%22height%22%3A17.99866%2C%22text%22%3A%22constgetFuiiName(firstNamelastame%22%7D%2C%7B%22x%22%3A5.746605%2C%22y%22%3A99.58777%2C%22width%22%3A18.04672%2C%22height%22%3A12.949193999999991%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A100.47341%2C%22y%22%3A112.93966%2C%22width%22%3A167.69535000000002%2C%22height%22%3A19.976290000000006%2C%22text%22%3A%22firstName%3Astring%3B%22%7D%2C%7B%22x%22%3A5.519258%2C%22y%22%3A121.7748%2C%22width%22%3A17.620244%2C%22height%22%3A12.538000000000011%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A100.86469%2C%22y%22%3A136.19089%2C%22width%22%3A159.22755999999998%2C%22height%22%3A19.160690000000017%2C%22text%22%3A%22lastName%3Astring%3B%22%7D%2C%7B%22x%22%3A4.8655324%2C%22y%22%3A144.20634%2C%22width%22%3A18.9732036%2C%22height%22%3A12.11529999999999%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A64.182816%2C%22y%22%3A158.51576%2C%22width%22%3A112.92837399999999%2C%22height%22%3A17.703309999999988%2C%22text%22%3A%22H)-%3Estring%22%7D%2C%7B%22x%22%3A4.467048%2C%22y%22%3A166.96953%2C%22width%22%3A19.276704000000002%2C%22height%22%3A12.623970000000014%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A4.63562%2C%22y%22%3A190.24937%2C%22width%22%3A19.443548%2C%22height%22%3A12.062659999999994%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A63.764385%2C%22y%22%3A190.37323%2C%22width%22%3A276.764115%2C%22height%22%3A15.586960000000005%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A53.709553%2C%22y%22%3A209.68217%2C%22width%22%3A365.58170700000005%2C%22height%22%3A20.822829999999982%2C%22text%22%3A%22getFuiinameV)%3B%2F%2F%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA%22%7D%2C%7B%22x%22%3A5.249744%2C%22y%22%3A212.72105%2C%22width%22%3A17.806106%2C%22height%22%3A12.032990000000012%2C%22text%22%3A%2237%22%7D%5D%2C%22id%22%3A%22ua1b0f756%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf19ffe58\" id=\"uf19ffe58\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png%22%2C%22taskId%22%3A%22u9fb570d1-61b4-4d58-a47c-7931a7f9d9b%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A770%2C%22height%22%3A79%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A33443%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1540%2C%22originHeight%22%3A158%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SittirstMameSt%20%E5%9E%8Bae%3Amuber%3Aphomemute%3BY%E5%8F%82%E8%87%B4%E4%B8%8D%E8%83%BD%E8%9E%BA%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22fnsthrlestrlme%3BLostlmstl.%20%E5%AF%B9%E5%AE%B6%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7.%E5%B9%B6%E4%B8%94%5C%22e%5C%22%E4%B8%8D%E5%9C%A8%E5%85%B1%E5%9E%8B%5C%22firstovestrintsm%20(property)age%3Anumber%20me%E6%9F%A5%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20%E7%B1%BB%E5%9E%8B%5C%22(aee%3Anumber%3Aphone%3Anumber%3BP%E7%9A%84%E5%8F%82%E6%95%99%E4%B8%8D%E8%83%BD%E6%84%9F%E7%BB%99%E5%9E%8Bfirsthame%3Bs%20lastName%3Astring%3B.2%5C%22%E7%9A%84%E5%8F%82%E6%95%B0.%20stringjla%20getFuliname(age%3A18%2Cphone123456789%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.19127%2C%22y%22%3A-0.96889234%2C%22width%22%3A141.30107%2C%22height%22%3A14.38983534%2C%22text%22%3A%22SittirstMameSt%22%7D%2C%7B%22x%22%3A158.49146%2C%22y%22%3A19.361862%2C%22width%22%3A943.5999400000001%2C%22height%22%3A22.317166000000004%2C%22text%22%3A%22%E5%9E%8Bae%3Amuber%3Aphomemute%3BY%E5%8F%82%E8%87%B4%E4%B8%8D%E8%83%BD%E8%9E%BA%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22fnsthrlestrlme%3BLostlmstl.%22%7D%2C%7B%22x%22%3A173.39833%2C%22y%22%3A41.914288%2C%22width%22%3A912.71867%2C%22height%22%3A25.102292000000006%2C%22text%22%3A%22%E5%AF%B9%E5%AE%B6%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7.%E5%B9%B6%E4%B8%94%5C%22e%5C%22%E4%B8%8D%E5%9C%A8%E5%85%B1%E5%9E%8B%5C%22firstovestrintsm%22%7D%2C%7B%22x%22%3A158.09389%2C%22y%22%3A75.88823%2C%22width%22%3A203.30771%2C%22height%22%3A20.376365000000007%2C%22text%22%3A%22(property)age%3Anumber%22%7D%2C%7B%22x%22%3A136.04724%2C%22y%22%3A109.524315%2C%22width%22%3A300.35043%2C%22height%22%3A15.923175%2C%22text%22%3A%22me%E6%9F%A5%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A442.7086%2C%22y%22%3A129.50824%2C%22width%22%3A644.3739%2C%22height%22%3A20.530110000000008%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22(aee%3Anumber%3Aphone%3Anumber%3BP%E7%9A%84%E5%8F%82%E6%95%99%E4%B8%8D%E8%83%BD%E6%84%9F%E7%BB%99%E5%9E%8Bfirsthame%3Bs%22%7D%2C%7B%22x%22%3A1151.2697%2C%22y%22%3A129.19928%2C%22width%22%3A253.68979999999988%2C%22height%22%3A19.493360000000024%2C%22text%22%3A%22lastName%3Astring%3B.2%5C%22%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A1078.0663%2C%22y%22%3A131.69977%2C%22width%22%3A97.45759999999996%2C%22height%22%3A18.598160000000007%2C%22text%22%3A%22stringjla%22%7D%2C%7B%22x%22%3A14.136898%2C%22y%22%3A131.9145%2C%22width%22%3A401.97873200000004%2C%22height%22%3A19.273020000000002%2C%22text%22%3A%22getFuliname(age%3A18%2Cphone123456789%22%7D%5D%2C%22id%22%3A%22u992b1d80%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u2fe3580b\" id=\"u2fe3580b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png%22%2C%22taskId%22%3A%22u99960eb5-aae8-4d2b-b893-b896dcdeab1%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1358%2C%22height%22%3A176%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A32398%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1358%2C%22originHeight%22%3A176%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8BfirstName%3Astring%3B%20%3B%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bfirstname%3Astring%3BlastName%3Astring%3B%E7%9A%84%E5%8F%82%E6%95%B0.%20%E4%B8%9A%E4%BA%86%E6%9D%91%E4%B8%AD%E5%B0%91%E5%AE%B6%E4%BD%8F%E5%A5%96m%E4%B8%AD%2034%2035%20index.ts(30%2C5)%3A%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%A3%B0%E6%98%8E%E4%BA%86%5C%22lastName%2036%20(propertyfirstame%3Astring%2037%20getFuiina%2038%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D...(C.trl%2B)%20getFulina%20getFulinamefirstName%5C%22Lison%3B%E7%A7%AF%E5%B0%91%E5%BF%85%E8%A6%81%E5%B1%9E%E6%80%A7astName%2039%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A172.4774%2C%22y%22%3A10.630165%2C%22width%22%3A245.23560000000003%2C%22height%22%3A18.862198%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8BfirstName%3Astring%3B%22%7D%2C%7B%22x%22%3A392.5245%2C%22y%22%3A9.898132%2C%22width%22%3A646.0127%2C%22height%22%3A19.38568%2C%22text%22%3A%22%3B%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bfirstname%3Astring%3BlastName%3Astring%3B%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A186.99178%2C%22y%22%3A31.103899%2C%22width%22%3A1156.91602%2C%22height%22%3A23.747583%2C%22text%22%3A%22%E4%B8%9A%E4%BA%86%E6%9D%91%E4%B8%AD%E5%B0%91%E5%AE%B6%E4%BD%8F%E5%A5%96m%E4%B8%AD%22%7D%2C%7B%22x%22%3A1.4795045%2C%22y%22%3A38.20511%2C%22width%22%3A19.7915375%2C%22height%22%3A14.615973000000004%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A0.20263453%2C%22y%22%3A61.615917%2C%22width%22%3A20.76056847%2C%22height%22%3A16.095638%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A169.64444%2C%22y%22%3A65.85934%2C%22width%22%3A367.43405999999993%2C%22height%22%3A21.666200000000003%2C%22text%22%3A%22index.ts(30%2C5)%3A%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%A3%B0%E6%98%8E%E4%BA%86%5C%22lastName%22%7D%2C%7B%22x%22%3A0.15577894%2C%22y%22%3A83.290474%2C%22width%22%3A21.76526806%2C%22height%22%3A16.584996000000004%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A169.97092%2C%22y%22%3A100.989525%2C%22width%22%3A263.52698%2C%22height%22%3A18.525175000000004%2C%22text%22%3A%22(propertyfirstame%3Astring%22%7D%2C%7B%22x%22%3A0.87860405%2C%22y%22%3A104.689095%2C%22width%22%3A22.20265895%2C%22height%22%3A18.445739000000003%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A75.97925%2C%22y%22%3A105.367256%2C%22width%22%3A85.42351000000001%2C%22height%22%3A20.387833999999998%2C%22text%22%3A%22getFuiina%22%7D%2C%7B%22x%22%3A0.6956785%2C%22y%22%3A129.5022%2C%22width%22%3A22.3032155%2C%22height%22%3A16.804070000000024%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A169.17944%2C%22y%22%3A131.52187%2C%22width%22%3A268.85656%2C%22height%22%3A16.261300000000006%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D...(C.trl%2B)%22%7D%2C%7B%22x%22%3A69.88076%2C%22y%22%3A130.09065%2C%22width%22%3A91.84313000000002%2C%22height%22%3A17.37720999999999%2C%22text%22%3A%22getFulina%22%7D%2C%7B%22x%22%3A46.90255%2C%22y%22%3A150.04514%2C%22width%22%3A558.11015%2C%22height%22%3A19.361580000000004%2C%22text%22%3A%22getFulinamefirstName%5C%22Lison%3B%E7%A7%AF%E5%B0%91%E5%BF%85%E8%A6%81%E5%B1%9E%E6%80%A7astName%22%7D%2C%7B%22x%22%3A0.22041021%2C%22y%22%3A151.85524%2C%22width%22%3A22.68226379%2C%22height%22%3A16.181759999999997%2C%22text%22%3A%2239%22%7D%5D%2C%22id%22%3A%22ub3bff8f8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua8031729\" id=\"ua8031729\"><span data-lake-id=\"ue7315539\" id=\"ue7315539\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Info%20%7B%5Cn%20%20firstName%3A%20string%3B%5Cn%20%20lastName%3A%20string%3B%5Cn%7D%5Cnconst%20getFullName%20%3D%20(%7B%20firstName%2C%20lastName%20%7D%3A%20Info)%20%3D%3E%5Cn%20%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22RTUnh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9a6f2a03\" id=\"u9a6f2a03\"><span data-lake-id=\"ubf519eb9\" id=\"ubf519eb9\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。</span></p><h2 data-lake-id=\"Osi0T\" id=\"Osi0T\"><span data-lake-id=\"ue9ab45a1\" id=\"ue9ab45a1\">可选属性</span></h2><p data-lake-id=\"ud81f38f2\" id=\"ud81f38f2\"><span data-lake-id=\"u5dda12f6\" id=\"u5dda12f6\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，</span><em><span data-lake-id=\"ufa2e09a8\" id=\"ufa2e09a8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">typescript</span></em><span data-lake-id=\"u68502803\" id=\"u68502803\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">为我们提供了可选属性。</span></p><p data-lake-id=\"u211124af\" id=\"u211124af\"><span data-lake-id=\"u733373b3\" id=\"u733373b3\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们先定义一个描述传入蔬菜信息的句子的函数：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22JpneV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4a4bd115\" id=\"u4a4bd115\"><span data-lake-id=\"u9ecea93d\" id=\"u9ecea93d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3F%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22MVeDl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1e00958e\" id=\"u1e00958e\"><span data-lake-id=\"uc4c7a9c8\" id=\"uc4c7a9c8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;interface-name&quot;: [true, “never-prefix”]来关闭。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20%20%20color%3F%3A%20string%3B%5Cn%20%20%20%20type%3A%20string%3B%5Cn%20%20%7D%5Cn%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3AVegetables)%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%20%20%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22GExE2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"C3pXm\" id=\"C3pXm\"><span data-lake-id=\"u7e1a24dd\" id=\"u7e1a24dd\">多余属性检查</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22getVegetables(%7B%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%20%5C%22big%5C%22%20%2F%2F%20'size'%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22EcyRb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ua27818ba\" id=\"ua27818ba\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png%22%2C%22taskId%22%3A%22u7d7b2296-d6c0-4b56-b4a5-5e78d030178%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A891%2C%22height%22%3A167%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A17620%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A891%2C%22originHeight%22%3A167%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8Btype%3Astring%3Bsize%3Astring%3BY%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bvegetables%E7%9A%84%E5%8F%82%E6%95%B0.%20%E5%AF%B9%E8%B1%A1%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%2C%E5%B9%B6%E4%B8%94%5C%22size%5C%22%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8Bvegetables%E4%B8%AD.ts(2345)%20ge%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20e%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%20sizei%5C%22big%5C%22%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A67.5127%2C%22y%22%3A25.286406%2C%22width%22%3A675.2846%2C%22height%22%3A21.289991%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8Btype%3Astring%3Bsize%3Astring%3BY%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bvegetables%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A85.4596%2C%22y%22%3A49.351418%2C%22width%22%3A643.7776%2C%22height%22%3A20.491831999999995%2C%22text%22%3A%22%E5%AF%B9%E8%B1%A1%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%2C%E5%B9%B6%E4%B8%94%5C%22size%5C%22%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8Bvegetables%E4%B8%AD.ts(2345)%22%7D%2C%7B%22x%22%3A35.680283%2C%22y%22%3A61.57533%2C%22width%22%3A20.579184999999995%2C%22height%22%3A15.130749999999999%2C%22text%22%3A%22ge%22%7D%2C%7B%22x%22%3A64.41642%2C%22y%22%3A83.77975%2C%22width%22%3A278.47344%2C%22height%22%3A15.072483999999989%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A237.45085%2C%22y%22%3A102.820984%2C%22width%22%3A212.82965000000002%2C%22height%22%3A18.565336000000002%2C%22text%22%3A%22e%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%22%7D%2C%7B%22x%22%3A55.005783%2C%22y%22%3A106.04333%2C%22width%22%3A104.96859699999999%2C%22height%22%3A16.713790000000003%2C%22text%22%3A%22sizei%5C%22big%5C%22%22%7D%5D%2C%22id%22%3A%22u73a7cee0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u701dba2a\" id=\"u701dba2a\"><span data-lake-id=\"u0eebc0b4\" id=\"u0eebc0b4\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。</span></p><p data-lake-id=\"u04a99e81\" id=\"u04a99e81\"><span data-lake-id=\"ue9c7e70b\" id=\"ue9c7e70b\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;object-literal-sort-keys&quot;: [false]来关闭。</span></p><h2 data-lake-id=\"izjCz\" id=\"izjCz\"><span data-lake-id=\"u7faf4ea8\" id=\"u7faf4ea8\">绕开多余属性检查</span></h2><p data-lake-id=\"ua1763e3d\" id=\"ua1763e3d\"><span data-lake-id=\"u56fb9801\" id=\"u56fb9801\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：</span></p><h3 data-lake-id=\"UbRno\" id=\"UbRno\"><span data-lake-id=\"u74755d88\" id=\"u74755d88\">使用类型断言</span></h3><p data-lake-id=\"uce1645b6\" id=\"uce1645b6\"><span data-lake-id=\"u7922a974\" id=\"u7922a974\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3F%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%5CngetVegetables(%7B%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%2012%2C%5Cn%20%20price%3A%201.2%5Cn%7D%20as%20Vegetables)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22KJaSQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"T7Ilu\" id=\"T7Ilu\"><span data-lake-id=\"ufb39e02b\" id=\"ufb39e02b\">添加索引签名</span></h3><p data-lake-id=\"u71358f5f\" id=\"u71358f5f\"><span data-lake-id=\"u065059e0\" id=\"u065059e0\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">更好的方式是添加字符串索引签名</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%20%20%5Bprop%3A%20string%5D%3A%20any%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%5CngetVegetables(%7B%5Cn%20%20color%3A%20%5C%22red%5C%22%2C%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%2012%2C%5Cn%20%20price%3A%201.2%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OLak3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"WqgZw\" id=\"WqgZw\"><span data-lake-id=\"ucf451079\" id=\"ucf451079\">利用类型兼容性</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Btype%7D%60%3B%5Cn%7D%3B%5Cn%5Cnconst%20option%20%3D%20%7B%20type%3A%20%5C%22tomato%5C%22%2C%20size%3A%2012%20%7D%3B%5CngetVegetables(option)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22E9HPU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf3d82ca8\" id=\"uf3d82ca8\"><span data-lake-id=\"u28be7669\" id=\"u28be7669\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">上面这种方法完美通过检查，我们将对象字面量赋给一个变量</span><span data-lake-id=\"ufb9a3832\" id=\"ufb9a3832\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">option</span><span data-lake-id=\"ucb75d1be\" id=\"ucb75d1be\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，然后</span><span data-lake-id=\"u44ea4dd8\" id=\"u44ea4dd8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">getVegetables</span><span data-lake-id=\"u96fc8a3a\" id=\"u96fc8a3a\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">传入</span><span data-lake-id=\"u9b4e19dd\" id=\"u9b4e19dd\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u9833b37d\" id=\"u9833b37d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">option</span><span data-lake-id=\"u5791a42e\" id=\"u5791a42e\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。</span></p><p data-lake-id=\"uf4ce67c2\" id=\"uf4ce67c2\"><span data-lake-id=\"u752c01e7\" id=\"u752c01e7\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错</span></p><h3 data-lake-id=\"DYDQK\" id=\"DYDQK\"><span data-lake-id=\"u5fd15db9\" id=\"u5fd15db9\" style=\"color: rgb(28, 31, 33)\">只读属性</span></h3><p data-lake-id=\"u99cef886\" id=\"u99cef886\"><span data-lake-id=\"u2dafa39a\" id=\"u2dafa39a\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">接口也可以设置只读属性，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Role%20%7B%5Cn%20%20readonly%200%3A%20string%3B%5Cn%20%20readonly%201%3A%20string%3B%5Cn%7D%20%5Cn%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%80%E4%B8%AA%E8%A7%92%E8%89%B2%E5%AD%97%E5%85%B8%EF%BC%8C%E6%9C%89%200%20%E5%92%8C%201%20%E4%B8%A4%E7%A7%8D%E8%A7%92%E8%89%B2%20id%E3%80%82%E4%B8%8B%E9%9D%A2%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%99%85%E7%9A%84%E8%A7%92%E8%89%B2%20%5Cb%20%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9D%A5%E8%AF%95%E5%9B%BE%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%8B%E5%AE%83%E7%9A%84%E5%80%BC%EF%BC%9A%5Cn%5Cnconst%20role%3A%20Role%20%3D%20%7B%5Cn%20%200%3A%20%5C%22super_admin%5C%22%2C%5Cn%20%201%3A%20%5C%22admin%5C%22%5Cn%7D%3B%5Cnrole%5B1%5D%20%3D%20%5C%22super_admin%5C%22%3B%20%2F%2F%20Cannot%20assign%20to%20'0'%20because%20it%20is%20a%20read-only%20property%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tvwz7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9e49879d\" id=\"u9e49879d\"><span data-lake-id=\"u54ba90cf\" id=\"u54ba90cf\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20NAME%3A%20string%20%3D%20%5C%22Lison%5C%22%3B%5CnNAME%20%3D%20%5C%22Haha%5C%22%3B%20%2F%2F%20Uncaught%20TypeError%3A%20Assignment%20to%20constant%20variable%5Cn%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22lison%5C%22%5Cn%7D%3B%5Cnobj.name%20%3D%20%5C%22Haha%5C%22%3B%5Cn%5Cninterface%20Info%20%7B%5Cn%20%20readonly%20name%3A%20string%3B%5Cn%7D%5Cnconst%20info%3A%20Info%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22Lison%5C%22%5Cn%7D%3B%5Cninfo%5B%5C%22name%5C%22%5D%20%3D%20%5C%22Haha%5C%22%3B%20%2F%2F%20Cannot%20assign%20to%20'name'%20because%20it%20is%20a%20read-only%20property%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fvjM5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u298476e7\" id=\"u298476e7\"><span data-lake-id=\"ufdba14a0\" id=\"ufdba14a0\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。</span></p><h3 data-lake-id=\"tkCr2\" id=\"tkCr2\"><span data-lake-id=\"u54efff58\" id=\"u54efff58\">函数类型</span></h3><p data-lake-id=\"ubf5c9623\" id=\"ubf5c9623\"><span data-lake-id=\"u92915e0e\" id=\"u92915e0e\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">接口可以描述普通对象，还可以描述函数类型，我们先看写法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20AddFunc%20%7B%5Cn%20%20(num1%3A%20number%2C%20num2%3A%20number)%3A%20number%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22V5Aiu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc3813531\" id=\"uc3813531\"><span data-lake-id=\"u62b8d59d\" id=\"u62b8d59d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为</span><em><span data-lake-id=\"u67a66298\" id=\"u67a66298\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">调用签名</span></em><span data-lake-id=\"u14467059\" id=\"u14467059\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20add%3A%20AddFunc%20%3D%20(n1%2C%20n2)%20%3D%3E%20n1%20%2B%20n2%3B%5Cnconst%20join%3A%20AddFunc%20%3D%20(n1%2C%20n2)%20%3D%3E%20%60%24%7Bn1%7D%20%24%7Bn2%7D%60%3B%20%2F%2F%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B'string'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B'number'%5Cnadd(%5C%22a%5C%22%2C%202)%3B%20%2F%2F%20%E7%B1%BB%E5%9E%8B'string'%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B'number'%E7%9A%84%E5%8F%82%E6%95%B0%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22wiFm0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9a4c6d21\" id=\"u9a4c6d21\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png%22%2C%22taskId%22%3A%22ueb62392c-919f-4c0c-9cc7-717889ec8d6%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A715%2C%22height%22%3A107%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A21366%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A953%2C%22originHeight%22%3A143%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8Bstring'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%20%E7%B1%BB%E5%9E%8B%5C%22number'.ts(2322)%20interfaceAddFunc%20index.ts(64%2C13)%3A%E6%89%80%E9%9C%80%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%87%AA%E6%AD%A4%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.%20(numl%3Anumber%2Cnum2%3Anumber)%3Anu%20(parameter)n1%3Anumber%20constadd%3AAddFunc-(n1%2Cn2)-%3E%20%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%20%24n1in2%3B%20constjoin%3AAddFunc-(%2Cn%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A360.26846%2C%22y%22%3A3.2358212%2C%22width%22%3A255.67164000000002%2C%22height%22%3A19.2425588%2C%22text%22%3A%22%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8Bstring'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A577.9371%2C%22y%22%3A6.278446%2C%22width%22%3A210.12300000000005%2C%22height%22%3A17.558342%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22number'.ts(2322)%22%7D%2C%7B%22x%22%3A36.108833%2C%22y%22%3A29.425035%2C%22width%22%3A179.703837%2C%22height%22%3A21.692023%2C%22text%22%3A%22interfaceAddFunc%22%7D%2C%7B%22x%22%3A360.20572%2C%22y%22%3A35.35116%2C%22width%22%3A426.82938000000007%2C%22height%22%3A18.20225%2C%22text%22%3A%22index.ts(64%2C13)%3A%E6%89%80%E9%9C%80%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%87%AA%E6%AD%A4%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.%22%7D%2C%7B%22x%22%3A55.44603%2C%22y%22%3A56.10835%2C%22width%22%3A296.44626999999997%2C%22height%22%3A17.257019999999997%2C%22text%22%3A%22(numl%3Anumber%2Cnum2%3Anumber)%3Anu%22%7D%2C%7B%22x%22%3A366.1037%2C%22y%22%3A71.00154%2C%22width%22%3A201.43880000000001%2C%22height%22%3A18.70581999999999%2C%22text%22%3A%22(parameter)n1%3Anumber%22%7D%2C%7B%22x%22%3A36.70705%2C%22y%22%3A100.40108%2C%22width%22%3A286.61573000000004%2C%22height%22%3A17.54453000000001%2C%22text%22%3A%22constadd%3AAddFunc-(n1%2Cn2)-%3E%22%7D%2C%7B%22x%22%3A504.33707%2C%22y%22%3A101.76711%2C%22width%22%3A132.79519%2C%22height%22%3A15.820899999999995%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A354.69107%2C%22y%22%3A102.00822%2C%22width%22%3A133.09747%2C%22height%22%3A15.27645600000001%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%22%7D%2C%7B%22x%22%3A359.33408%2C%22y%22%3A123.40791%2C%22width%22%3A124.97152000000006%2C%22height%22%3A18.29798000000001%2C%22text%22%3A%22%24n1in2%3B%22%7D%2C%7B%22x%22%3A36.91246%2C%22y%22%3A123.505806%2C%22width%22%3A277.92618999999996%2C%22height%22%3A16.565573999999998%2C%22text%22%3A%22constjoin%3AAddFunc-(%2Cn%22%7D%5D%2C%22id%22%3A%22u41545c4f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u3c925611\" id=\"u3c925611\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png%22%2C%22taskId%22%3A%22u4dd12a49-ea62-4869-9f7c-1eb5ab88d18%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12456%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A724%2C%22originHeight%22%3A109%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%E7%9A%84%E5%8F%82%E6%95%B0.%20ts(2345)%20conS%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20conS%20adda%5C%22%2C2%3B%2F%2F%E7%B1%BB%E5%9E%8B'string%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%20%E7%9A%84%E5%8F%82%E6%95%B0%20number%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A84.21963%2C%22y%22%3A18.177246%2C%22width%22%3A403.29749%2C%22height%22%3A21.882458000000003%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A508.1918%2C%22y%22%3A22.715536%2C%22width%22%3A73.76394999999997%2C%22height%22%3A15.990609999999997%2C%22text%22%3A%22ts(2345)%22%7D%2C%7B%22x%22%3A35.819202%2C%22y%22%3A32.51003%2C%22width%22%3A37.022498000000006%2C%22height%22%3A12.230905999999997%2C%22text%22%3A%22conS%22%7D%2C%7B%22x%22%3A82.22469%2C%22y%22%3A54.35365%2C%22width%22%3A278.05183%2C%22height%22%3A16.687269999999998%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A35.931484%2C%22y%22%3A55.578228%2C%22width%22%3A37.602226%2C%22height%22%3A12.761912000000002%2C%22text%22%3A%22conS%22%7D%2C%7B%22x%22%3A34.65141%2C%22y%22%3A72.876945%2C%22width%22%3A422.89073%2C%22height%22%3A19.73806499999999%2C%22text%22%3A%22adda%5C%22%2C2%3B%2F%2F%E7%B1%BB%E5%9E%8B'string%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A528.8692%2C%22y%22%3A74.59742%2C%22width%22%3A55.02200000000005%2C%22height%22%3A17.137200000000007%2C%22text%22%3A%22%E7%9A%84%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A463.91177%2C%22y%22%3A79.057495%2C%22width%22%3A55.22913%2C%22height%22%3A11.216065%2C%22text%22%3A%22number%22%7D%5D%2C%22id%22%3A%22u91b90715%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6eaf2ecd\" id=\"u6eaf2ecd\"><span data-lake-id=\"u1420f6b8\" id=\"u1420f6b8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。</span></p><p data-lake-id=\"u160cc3d5\" id=\"u160cc3d5\"><span data-lake-id=\"u6862f42b\" id=\"u6862f42b\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。</span></p><p data-lake-id=\"uc34d1cd4\" id=\"uc34d1cd4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg%22%2C%22taskId%22%3A%22u81f8ae0c-7d78-4d36-8bad-24066b4ff1d%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfd200012bae16000820.jpg%22%2C%22size%22%3A134441%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A820%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BD%BF%E7%94%A8%20interface%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%20%E6%B3%A8%E6%84%8F%E5%9C%A8%E5%AE%9A%E4%B9%89%E6%8C%82%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%2C%E4%BD%A0%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%BB%96%E7%90%86%E8%A7%A3%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E8%80%8C%E8%A6%81%E7%90%86%E8%A7%A3%E4%B8%BA%E4%BB%AC%E5%8F%B7%E5%8C%85%E7%9A%84%20%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%9D%97%2C%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E6%9D%A1%E6%9D%A1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8B%BA%2C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E8%80%8C%E6%98%AF%E5%9E%8B%20%E5%8F%AF%E9%80%89%E5%B1%85%E6%80%A7%20%E6%9C%89%E6%97%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%AE%9A%E5%8F%88%E5%9C%A8mtifke%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9B%BF%E6%98%AF%E4%BA%9B%E9%A1%B9%E7%9A%84%2Ctpecirt%E4%B8%AD%E4%BE%BF%E4%B8%BA%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%AF%E9%80%89%E5%B1%82%E6%80%A7%20%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%20%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8D%E6%AF%94%E6%8E%A5%E5%8F%A3%E5%B0%91%E9%81%93%E4%B8%80%E4%BA%9B%E8%80%B3%E8%80%85%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E8%AE%B8%E7%9A%84%20%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B9%8E%E4%BB%BB%E6%84%8F%E7%BB%93%E6%9E%84%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%20%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%20%E7%BB%95%E5%BC%80%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%20%E5%88%A9%E7%94%A8%E7%BE%8E%E5%9E%8B%E7%B4%A0%E5%AE%A2%E6%80%A7%20%E4%BD%BF%E7%94%A8const%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%BE%88%E9%95%AF%E7%9A%84%20%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%20%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%9D%E8%AF%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9%2C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8readonly%20%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E5%96%84%E9%80%9A%E5%AF%B9%E8%B1%A1%2C%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E8%8F%8C%E6%95%99%E8%A1%A8%E5%9E%8B%20%E9%9D%A2%E6%95%B0%E7%B1%BB%E5%9E%8B%20%E5%AE%9E%E9%99%85%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E7%9A%84%E6%97%B6%E5%80%99%2C%E5%90%8D%E5%AD%97%E6%98%AF%E6%97%A0%E9%9C%80%E5%92%8C%E6%8C%82%E5%8F%A3%E4%B8%AD%E5%8F%82%E6%95%B0%E5%90%8D%E7%9B%B8%E9%97%B4%E7%9A%84%2C%E5%8F%AA%E9%9C%80%E8%A6%81%E4%BD%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E5%8D%B3%E5%8F%AF%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A778.23425%2C%22y%22%3A24.854164%2C%22width%22%3A38.69965000000002%2C%22height%22%3A21.344956%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%22%7D%2C%7B%22x%22%3A827.28033%2C%22y%22%3A26.263094%2C%22width%22%3A172.57566999999995%2C%22height%22%3A19.792932000000004%2C%22text%22%3A%22interface%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A593.55023%2C%22y%22%3A61.879852%2C%22width%22%3A97.52976999999998%2C%22height%22%3A24.731967999999995%2C%22text%22%3A%22%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%22%7D%2C%7B%22x%22%3A776.6905%2C%22y%22%3A72.23591%2C%22width%22%3A776.2237999999999%2C%22height%22%3A21.919209999999993%2C%22text%22%3A%22%E6%B3%A8%E6%84%8F%E5%9C%A8%E5%AE%9A%E4%B9%89%E6%8C%82%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%2C%E4%BD%A0%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%BB%96%E7%90%86%E8%A7%A3%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E8%80%8C%E8%A6%81%E7%90%86%E8%A7%A3%E4%B8%BA%E4%BB%AC%E5%8F%B7%E5%8C%85%E7%9A%84%22%7D%2C%7B%22x%22%3A778.42065%2C%22y%22%3A100.49816%2C%22width%22%3A678.8297499999999%2C%22height%22%3A21.701814%2C%22text%22%3A%22%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%9D%97%2C%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E6%9D%A1%E6%9D%A1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8B%BA%2C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E8%80%8C%E6%98%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A596.7596%2C%22y%22%3A197.34923%2C%22width%22%3A93.83339999999998%2C%22height%22%3A25.477069999999998%2C%22text%22%3A%22%E5%8F%AF%E9%80%89%E5%B1%85%E6%80%A7%22%7D%2C%7B%22x%22%3A782.0851%2C%22y%22%3A200.52173%2C%22width%22%3A762.3989999999999%2C%22height%22%3A23.950500000000005%2C%22text%22%3A%22%E6%9C%89%E6%97%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%AE%9A%E5%8F%88%E5%9C%A8mtifke%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9B%BF%E6%98%AF%E4%BA%9B%E9%A1%B9%E7%9A%84%2Ctpecirt%E4%B8%AD%E4%BE%BF%E4%B8%BA%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%AF%E9%80%89%E5%B1%82%E6%80%A7%22%7D%2C%7B%22x%22%3A597.22046%2C%22y%22%3A308.25293%2C%22width%22%3A138.92363999999998%2C%22height%22%3A25.314120000000003%2C%22text%22%3A%22%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%22%7D%2C%7B%22x%22%3A828.28455%2C%22y%22%3A311.3899%2C%22width%22%3A510.08525%2C%22height%22%3A19.363459999999975%2C%22text%22%3A%22%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8D%E6%AF%94%E6%8E%A5%E5%8F%A3%E5%B0%91%E9%81%93%E4%B8%80%E4%BA%9B%E8%80%B3%E8%80%85%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E8%AE%B8%E7%9A%84%22%7D%2C%7B%22x%22%3A71.84581%2C%22y%22%3A394.8105%2C%22width%22%3A358.67754%2C%22height%22%3A31.83913000000001%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B9%8E%E4%BB%BB%E6%84%8F%E7%BB%93%E6%9E%84%22%7D%2C%7B%22x%22%3A877.55035%2C%22y%22%3A408.61316%2C%22width%22%3A120.98005%2C%22height%22%3A21.127009999999984%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%22%7D%2C%7B%22x%22%3A877.3996%2C%22y%22%3A454.9849%2C%22width%22%3A122.30450000000008%2C%22height%22%3A22.209069999999997%2C%22text%22%3A%22%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A591.8626%2C%22y%22%3A456.42032%2C%22width%22%3A196.19385999999997%2C%22height%22%3A23.305360000000007%2C%22text%22%3A%22%E7%BB%95%E5%BC%80%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%22%7D%2C%7B%22x%22%3A879.0666%2C%22y%22%3A504.0202%2C%22width%22%3A141.96929999999998%2C%22height%22%3A21.512200000000064%2C%22text%22%3A%22%E5%88%A9%E7%94%A8%E7%BE%8E%E5%9E%8B%E7%B4%A0%E5%AE%A2%E6%80%A7%22%7D%2C%7B%22x%22%3A777.16095%2C%22y%22%3A592.86554%2C%22width%22%3A596.4436499999999%2C%22height%22%3A21.175960000000032%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8const%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%BE%88%E9%95%AF%E7%9A%84%22%7D%2C%7B%22x%22%3A594.65857%2C%22y%22%3A612.65704%2C%22width%22%3A96.08762999999999%2C%22height%22%3A26.271429999999896%2C%22text%22%3A%22%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%22%7D%2C%7B%22x%22%3A777.686%2C%22y%22%3A639.3086%2C%22width%22%3A508.34209999999996%2C%22height%22%3A21.071160000000077%2C%22text%22%3A%22%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%9D%E8%AF%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9%2C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8readonly%22%7D%2C%7B%22x%22%3A778.1251%2C%22y%22%3A723.17633%2C%22width%22%3A403.60169999999994%2C%22height%22%3A24.788509999999974%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E5%96%84%E9%80%9A%E5%AF%B9%E8%B1%A1%2C%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E8%8F%8C%E6%95%99%E8%A1%A8%E5%9E%8B%22%7D%2C%7B%22x%22%3A593.13214%2C%22y%22%3A747.2824%2C%22width%22%3A96.51265999999998%2C%22height%22%3A26.85089999999991%2C%22text%22%3A%22%E9%9D%A2%E6%95%B0%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A777.8692%2C%22y%22%3A772.46375%2C%22width%22%3A700.2081999999999%2C%22height%22%3A20.61755000000005%2C%22text%22%3A%22%E5%AE%9E%E9%99%85%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E7%9A%84%E6%97%B6%E5%80%99%2C%E5%90%8D%E5%AD%97%E6%98%AF%E6%97%A0%E9%9C%80%E5%92%8C%E6%8C%82%E5%8F%A3%E4%B8%AD%E5%8F%82%E6%95%B0%E5%90%8D%E7%9B%B8%E9%97%B4%E7%9A%84%2C%E5%8F%AA%E9%9C%80%E8%A6%81%E4%BD%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E5%8D%B3%E5%8F%AF%22%7D%5D%2C%22id%22%3A%22u240e1d03%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6b68740b\" id=\"u6b68740b\"><span data-lake-id=\"u0a8f08f7\" id=\"u0a8f08f7\" class=\"lake-fontsize-22\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-10T08:08:17.000Z",
    "deleted_at": null,
    "created_at": "2021-12-10T06:17:02.000Z",
    "updated_at": "2021-12-10T08:08:17.000Z",
    "published_at": "2021-12-10T08:08:17.000Z",
    "first_published_at": "2021-12-10T06:19:25.000Z",
    "word_count": 2437,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png",
    "description": "基本用法我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：firstName和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：// 注：这段代码为纯JavaScript代码，请在JavaScript开发环境编写下面代码，在TypeScript环...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]