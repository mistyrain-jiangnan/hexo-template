[
  {
    "id": 61153090,
    "slug": "tgkgfr",
    "title": "32+ vue 修饰符",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 3,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-09T03:03:17.987Z",
      "updated_at": "2021-12-09T03:03:17.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-09T03:02:57.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-09T03:02:57.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"pxcyU\"></a>\n# \n<a name=\"th4rJ\"></a>\n# 前言\nvue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！<br />耽误您15分钟您可以收获：\n\n1. 32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用\n1. 如何利用webpack动态注册vue路由，再也不手写路由配置啦！\n\n文章中例子都放在了github源码上，也可以点击直接看例子\n<a name=\"Q2cOK\"></a>\n# 如何动态注册路由？\n文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.<br />有什么办法可以帮我们自动完成路由注册呢？\n<a name=\"kP2Yc\"></a>\n## 1. 文件目录结构\n目录结构（已去除其他文件目录）大概如下\n```javascript\n├── package.json\n└── src\n    ├── App.vue\n    ├── main.js\n    ├── router.js\n    └── views\n        ├── About.vue\n        ├── Home.vue\n        └── modifiers\n            ├── capture.vue\n            ├── once.vue\n            ├── order.vue\n            ├── passive.vue\n            ├── prevent.vue\n            ├── self.vue\n            └── stop.vue\n            └── ...\n```\n<a name=\"rxTi1\"></a>\n## 2. 期望的路由配置\n最终给到vue-router的配置大概长下面这个样子，每个配置最重要的部分分别是path、name和component\n```javascript\n[\n  {\n    \"path\": \"/home\",\n    \"name\": \"home\",\n    \"component\": {\n      \"name\": \"Home\",\n      \"methods\": {},\n      \"staticRenderFns\": [],\n      \"_compiled\": true,\n      \"_scopeId\": \"data-v-fae5bece\",\n      \"beforeCreate\": [\n        null\n      ],\n      \"beforeDestroy\": [\n        null\n      ],\n      \"__file\": \"src/views/Home.vue\"\n    }\n  },\n  {\n    \"path\": \"/modifiers/capture\",\n    \"name\": \"modifiersCapture\",\n    \"component\": {\n      \"name\": \"capture\",\n      \"methods\": {},\n      \"staticRenderFns\": [],\n      \"_compiled\": true,\n      \"_scopeId\": \"data-v-63b4eeee\",\n      \"beforeCreate\": [\n        null\n      ],\n      \"beforeDestroy\": [\n        null\n      ],\n      \"__file\": \"src/views/modifiers/capture.vue\"\n    }\n  },\n  ... // 其他路由配置\n]\n```\n\n\n<a name=\"r0SDU\"></a>\n## 3. require.context实现动态注册路由\n借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下\n```javascript\nconst registerRoutes = () => {\n  const contextInfo = require.context('./views', true, /.vue$/)\n  const routes = contextInfo.keys().map((filePath) => {\n    // filePath 形如 ./Home.vue、./modifiers/capture.vue\n    // path我们希望是/home、/modifiers/capture\n    // 所以需要把开头的./和.vue都替换为空\n    const path = filePath.toLowerCase().replace(/^\\.|\\.vue/g, '')\n    // name的话将/home、/modifiers/capture转成小驼峰即可\n    // 把开头的/先替换掉，再把第一个/后的单词变成大写就可以了\n    const name = path.replace(/^\\//, '').replace(/\\/(\\w)/, ($0, $1) => $1.toUpperCase())\n    // 通过require去读取.vue文件内容\n    const component = require(`./views${filePath.replace(/^\\./, '')}`).default\n\n    return {\n      path,\n      name,\n      component\n    }\n  })\n\n  return routes\n}\n\n```\n​\n\n**效果**<br />经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果\n\n<a name=\"C7PDV\"></a>\n# 事件修饰符\n<a name=\"NdTWe\"></a>\n## 1. 阻止冒泡的两种方式\n\n\n```javascript\n<template>\n  <div class=\"parent\" @click=\"onClickParent\">\n    我是爸爸\n    <div class=\"child\" @click=\"onClickChild\">\n      我是儿子\n    </div>\n  </div> \n</template>\n\nexport default {\n  name: 'stop',\n  methods: {\n    onClickParent () {\n      console.log('我是爸爸')\n    },\n    onClickChild () {\n      console.log('我是儿子')\n    }\n  }\n}\n```\n\n\n点**击子节点**的时候因为事件冒泡的缘故不仅会打印出我是儿子还会打印我是爸爸。有什么办法可以阻止子节点的**事件冒泡**呢？<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=ufdb6c334&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u3a2a87aa-6cbd-4bcb-a622-0c7fdbb416c)<br />\n\n<a name=\"oWzps\"></a>\n### 1 .stop\n只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。<br />当添加上.stop修饰符时，只会出现我是儿子\n```javascript\n<template>\n  <div class=\"parent\" @click=\"onClickParent\">\n    我是爸爸\n    <div class=\"child\" @click.stop=\"onClickChild\">\n      我是儿子\n    </div>\n  </div> \n</template>\n```\n<a name=\"uNVNl\"></a>\n### 2. event.stopPropagation\n当然了，我们也可以通过调用event.stopPropagation来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节\n```javascript\nexport default {\n  name: 'stop',\n  methods: {\n    onClickChild (event) {\n      console.log('我是儿子')\n      event.stopPropagation()\n    }\n  }\n}\n```\n<a name=\"IIPEs\"></a>\n## 2. 阻止默认事件的两种方式\nvue中阻止冒泡有两种方式，那阻止默认事件呢？\n<a name=\"fkfpq\"></a>\n### 1 .prevent\n```javascript\n<template>\n  <div class=\"prevent\">\n    <a href=\"https://juejin.cn/\" @click=\"onNoPrevent\">点击跳转掘金</a>\n    <br />\n    <br />\n    <a href=\"https://juejin.cn/\" @click.prevent=\"onPrevent\">阻止默认事件，无法跳转掘金</a>\n  </div>\n</template>\n\nexport default {\n  name: 'prevent',\n  methods: {\n    onNoPrevent () {\n      console.log('未阻止默认事件')\n    },\n    onPrevent () {\n      console.log('阻止默认事件')\n    }\n  }\n}\n```\n只要添加.prevent轻松实现阻止默认事件\n<a name=\"B1pgj\"></a>\n### 2.event.preventDefault()\n和阻止冒泡一样，我们也可以通过调用事件对象的preventDefault方法来阻止默认事件\n```javascript\nexport default {\n  name: 'prevent',\n  methods: {\n    onPrevent (event) {\n      console.log('阻止默认事件')\n      event.preventDefault()\n    }\n  }\n}\n```\n<a name=\"LqMyK\"></a>\n## 3 .capture\n默认情况下，事件流是以冒泡(由里向外)的形式传递的，如果想以捕获（由外向里）的形式应该怎么办呢？\n```javascript\n<template>\n  <div class=\"capture parent\" @click.capture=\"onClickParent\">\n    父节点\n    <div class=\"child\" @click.capture=\"onClickChild\">自节点</div>\n  </div>\n</template>\n\nexport default {\n  name: 'capture',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n```\n​\n\n不加catpture修饰符，点击**子节点**会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了\n<a name=\"HAwJz\"></a>\n## 4 .self\n只有当event.target是当前元素自身时才会触发事件回调函数\n```javascript\n<template>\n  <div class=\"self\" @click.self=\"onClickSelf\">\n    <div class=\"inner\" @click=\"onClickInner\"></div>\n  </div>\n</template>\n\nexport default {\n  name: 'self',\n  methods: {\n    onClickSelf () {\n      console.log('我是self节点')\n    },\n    onClickInner () {\n      console.log('我是inner节点')\n    }\n  }\n}\n```\n​\n\n不加self修饰符的话，点击inner节点也会触发self的事件，加了之后只有触发事件的元素本身是self，才会打印出我是self节点\n<a name=\"RQFsF\"></a>\n## 暂停一下：修饰符的顺序如何理解？\n已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=ue6c22681&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u4fe3b80c-310b-44fe-8997-3fbdc0a61e3)<br />image.png<br />**怎么理解呢？我们来看两个栗子**\n```javascript\n<template>\n  <div class=\"order\">\n    <div class=\"order-0\">\n      <a href=\"https://juejin.cn/\" class=\"order-parent\" @click.self.prevent=\"onClickParent\">\n        我是父节点，会跳转掘金\n        <br />\n        <span class=\"order-child\" @click=\"onClickChild\">\n          我是子节点\n        </span>\n      </a>\n      <hr />\n    </div>\n    <div class=\"order-2\">\n      <a href=\"https://juejin.cn/\" class=\"order-parent\" @click.prevent.self=\"onClickParent\">\n        我是父节点，无法跳转掘金\n        <br />\n        <span class=\"order-child\" @click=\"onClickChild\">\n          我是子节点\n        </span>\n      </a>\n    </div>\n  </div> \n</template>\n\nexport default {\n  name: 'order',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n\n```\n您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？\n\n1. 首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件\n1. 点击下面的父节点会打印出**我是父节点**，但是**不会跳转掘金**\n1. 点击上面的父节点**会**打印出**我是父节点**,**也不会跳转掘金**\n\n但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是**会**<br />**为什么？**<br />a@click.self.prevent=\"onClickParent\"的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行onClickParent回调。<br />而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就不会阻止默认事件(此时也就发生跳转了)，当然也不会触发onClickParent回调<br />同理来我们分析一下a@click.prevent.self=\"onClickParent\"<br />不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行onClickParent回调函数。<br />\n<br />**回过头看，你理解事件的顺序含义了吗？**\n<a name=\"DH91z\"></a>\n## 5. once\n顾名思义，事件只会触发一次\n```javascript\n<template>\n  <div class=\"once\" @click.once=\"onClickOnce\">\n    只触发一次\n  </div>\n</template>\n\nexport default {\n  name: 'once',\n  methods: {\n    onClickOnce () {\n      console.log('once，我只会触发一次点击事件回调')\n    }\n  }\n}\n```\n触发一次点击之后，任我再怎么点，回调怎也不会触发了。\n<a name=\"rB1Mt\"></a>\n## 6 .native\n我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用.native修饰符可以帮我们办到这点<br />**native.vue**\n```javascript\n<template>\n  <div class=\"native-custom\">\n    <input type=\"text\" @keydown=\"onKeydown\">\n  </div>\n</template>\n\nexport default {\n  name: 'nativeCustom',\n  methods: {\n    onKeydown () {\n      this.$emit('onKeydown')\n    }\n  }\n}\n```\n**custom.vue**\n```javascript\n<template>\n  <div class=\"native\">\n    <!-- 加上.native之后原生事件才得以监听成功 -->\n    <NativeCustom @onKeydown=\"onKeydown\" @click.native=\"onClick\" />\n  </div>\n</template>\n\nimport NativeCustom from '../../components/native.vue'\n\nexport default {\n  name: 'native',\n  components: {\n    NativeCustom\n  },\n  methods: {\n    onKeydown () {\n      console.log('onKeydown')\n    },\n    onClick () {\n      console.log('onClick')\n    }\n  }\n}\n\n```\n<a name=\"R2RfU\"></a>\n## 7 .passive\nvue对应 addEventListener 中的 passive 选项提供了 .passive 修饰符\n```javascript\n<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --> \n<!-- 而不会等待 `onScroll` 完成 --> \n<!-- 这其中包含 `event.preventDefault()` 的情况 --> \n\n<div v-on:scroll.passive=\"onScroll\">...</div>\n```\n**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**<br />**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**<br />**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**\n<a name=\"qD7c9\"></a>\n# v-bind修饰符\n<a name=\"Z7kub\"></a>\n## 8 .sync\n当我们想要在父组件和子组件之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要.sync修饰符即可办到<br />\n\n<a name=\"KZCOv\"></a>\n## 9 .camel\n.camel 修饰符允许在使用 DOM 模板时将 v-bind property 名称驼峰化，例如 SVG 的 viewBox property：​\n<a name=\"gux0B\"></a>\n## 10 .prop\n关于.prop修饰符官网只有这句话 .prop  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。<br />**有啥作用？**\n\n1. 通过自定义属性存储变量，避免暴露数据\n1. 防止污染 HTML 结构\n\n比如有以下代码\n```javascript\n<template>\n  <div class=\"prop\">\n    <div class=\"prop-item\" :my-name=\"prop\"></div>\n    // 最终变成了 <div my-name=\"hello prop\" class=\"prop-item\"></div>\n    <div class=\"prop-item\" :my-name.prop=\"prop2\"></div>\n    // 最终变成了<div class=\"prop-item\"></div>\n    <button @click=\"onGetResult\">获取结果</button>\n  </div>\n</template>\n\nexport default {\n  name: 'prop',\n  data () {\n    return {\n      prop: 'hello prop',\n      prop2: 'hello prop2'\n    }\n  },\n  methods: {\n    onGetResult () {\n      const $refProp = this.$refs.prop\n      const $refProp2 = this.$refs.prop2\n\n      console.log($refProp.getAttribute('my-name')) // hello prop\n      console.log($refProp2.getAttribute('my-name')) // null\n    }\n  }\n}\n\n```\n从示例上可以看出未使用.prop修饰符的my-name属性会绑定到dom节点的attribute，从而出现暴露的情况。\n<a name=\"NWe8M\"></a>\n# 鼠标修饰符\n当咱们想监听用户点击了左键、右键或者中键时也有修饰符可以快捷使用，分别是.left、.right、middle，来看个例子试试<br />根据MDN MouseEvent.button，介绍。<br />在最外层div.mouse监听mousedown事件，看下用户点击的是鼠标哪个键，三个button分别用三个修饰符快捷方式监听左键、中键、右键并打印出left、middle、right\n```javascript\n<template>\n  <div class=\"mouse\" @mousedown=\"onMousedown\">\n    <button @click.left=\"onClickBtn('left')\">left</button>\n    <button @click.middle=\"onClickBtn('middle')\">middle</button>\n    <button @click.right=\"onClickBtn('right')\">right</button>\n  </div>\n</template>\n\nexport default {\n  name: 'mouse',\n  mounted () {\n\n  },\n  methods: {\n    onClickBtn (msg) {\n      console.log(msg)\n    },\n    onMousedown (event) {\n      const mosueMsgMap = {\n        0: '鼠标左键',\n        1: '鼠标中键',\n        2: '鼠标右键'\n      }\n      console.log('点击了', mosueMsgMap[event.button])\n    }\n  }\n}\n```\n**没有带鼠标回来，中键点击暂时不能演示，后续会补上**<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718538-11650970-9341-438b-b845-a67688ff5897.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=u4ad4c271&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u74db735d-39da-43ad-b642-b24eee0ddf1)<br />mouse.gif\n<a name=\"fFSe7\"></a>\n## 11 .left\n同上例子，监听鼠标左键点击\n<a name=\"it85P\"></a>\n## 12 .right\n同上例子，监听鼠标右键点击\n<a name=\"LAxXy\"></a>\n## 13 .middle\n同上例子，监听鼠标中键点击\n<a name=\"hzYRz\"></a>\n# 表单相关修饰符\n<a name=\"Yph9D\"></a>\n## 14 .trim\n对于输入的内容，希望可以过滤首尾空格应该怎么做呢？\n```javascript\n<template>\n  <div class=\"trim\">\n    <div class=\"trim-item\">\n      <input type=\"text\" v-model=\"name\">\n      <p>用户名：<span>{{ name }}</span></p>\n    </div>\n    <div class=\"trim-item\">\n      <input type=\"text\" v-model.trim=\"name2\">\n      <p>用户名2：<span>{{ name2 }}</span></p>\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'trim',\n  data () {\n    return {\n      name: '',\n      name2: '',\n    }\n  },\n  watch: {\n    name (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n    name2 (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n  }\n}\n```\n**.trim修饰符可以很方便做到**\n<a name=\"S4q4U\"></a>\n## 15 .lazy\nv-model大家都很熟悉，默认情况下，每次input事件触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？<br />**思路1：** 绑定change事件，在事件回调中手动获取target的值<br />**思路2：** 直接使用.lazy修饰符即可达到效果\n```javascript\n<template>\n  <div class=\"lazy\">\n    <div class=\"lazy-item\">\n      <input type=\"text\" v-model=\"text\">\n      <p>无.lazy: {{ text }}</p>\n    </div>\n\n    <div class=\"lazy-item\">\n      <input type=\"text\" v-model.lazy=\"text2\">\n      <p>.lazy: {{ text2 }}</p>\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      text: '',\n      text2: ''\n    }\n  }\n}\n```\n可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，text2的数据才更新了\n<a name=\"LkaRe\"></a>\n## 16 .number\n我们知道input输入框的type哪怕是number得到的值的类型也是string，如果我们想直接拿到number类型的数据，有不想麻烦的手动转换应该怎么办呢？\n```javascript\n<template>\n  <div class=\"number\">\n    <div class=\"number-item\">\n      <p>无.number </p>\n      <input type=\"number\" v-model=\"number\">\n    </div>\n    <div class=\"number-item\">\n      <p>type:text .number </p>\n      <input type=\"text\" v-model.number=\"number1\">\n    </div>\n    <div class=\"number-item\">\n      <p>type:number .number </p>\n      <input type=\"number\" v-model.number=\"number2\">\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      number: 0,\n      number1: '',\n      number2: '',\n    }\n  },\n  watch: {\n    number (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number1 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number2 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n  }\n}\n```\n\n\n1. 第一个输入框的类型是number，但是得到的值是string\n1. 第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 parseFloat() 解析，则会返回原始的值。）\n1. 第三个输入框的类型是number，最后得到的值也是number\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=u91c65a41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u41d07f12-da60-4a2b-8499-f0209ae7331)<br />number.gif\n<a name=\"tKRUK\"></a>\n# 系统修饰符\n当点击事件或者键盘事件需要系统键同时按下才触发时.ctrl、.alt、.shift、.meta可以帮大忙噢！<br />**如下代码**\n\n1. 全局监听keydown事件，尝试看.ctrl、.alt、.shift、.meta是否被按下\n1. 分别给四个按钮加上 .ctrl、.alt、.shift、.meta修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效\n\n**注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发**\n```javascript\n<template>\n  <div class=\"system\">\n    <p>{{ msg }}</p>\n    <div class=\"buttons\">\n      <button @click.ctrl=\"onClickButon('ctrl')\">ctrl</button>\n      <button @click.alt=\"onClickButon('alt')\">alt</button>\n      <button @click.shift=\"onClickButon('shift')\">shift</button>\n      <button @click.meta=\"onClickButon('meta')\">meta</button>\n    </div>\n  </div>  \n</template>\n\nexport default {\n  name: 'system',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) => {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}\n```\n<a name=\"vrHrH\"></a>\n## 17 .ctrl\n仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"EDUwo\"></a>\n## 18 .alt\n仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"JBKLM\"></a>\n## 19 .shift\n仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"UnowS\"></a>\n## 20 .meta\n仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Xw5H6\"></a>\n## 21 .exact\n严格来说这.exact不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发.alt也可以触发.shift。<br />还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=uaac7048a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u98a03c13-3c8f-42ff-aaf6-d3be97c1223)<br />system2.gif\n\n1. **只想某个系统修饰键按下时才触发点击**\n1. **没有任何系统修饰符被按下的时候才触发点击**\n\n要实现上面的需求.exact就派上用场了，用上面的例子稍作改造\n```javascript\n<template>\n  <div class=\"extra\">\n    <p>{{ msg }}</p>\n    <div class=\"buttons\">\n      <button @click.ctrl.exact=\"onClickButon('ctrl')\">ctrl</button>\n      <button @click.alt.exact=\"onClickButon('alt')\">alt</button>\n      <button @click.shift.exact=\"onClickButon('shift')\">shift</button>\n      <button @click.meta.exact=\"onClickButon('meta')\">meta</button>\n      <button @click.exact=\"onClickButon('非系统键')\">非系统键</button>\n    </div>\n  </div>  \n</template>\n\nexport default {\n  name: 'extra',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) => {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}\n```\n<a name=\"QRDoL\"></a>\n# 按键修饰符\n在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。<br />如下代码，我们分别给enter、tab、delete等按键指定了keydown事件，当在指定的输入框中按下指定的键盘，会打印出enter、tab、delete等，其他按键在输入框中无法触发该console\n```javascript\n<template>\n  <div class=\"key-modifiers\">\n    <div class=\"key-modifiers-item\">\n      enter:\n      <input type=\"text\" @keydown.enter=\"onKeydown('enter')\">\n    </div>\n    <div class=\"key-modifiers-item\">\n      tab:\n      <input type=\"text\" @keydown.tab=\"onKeydown('tab')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      delete:\n      <input type=\"text\" @keydown.delete=\"onKeydown('delete')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      esc:\n      <input type=\"text\" @keydown.esc=\"onKeydown('esc')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      space:\n      <input type=\"text\" @keydown.space=\"onKeydown('space')\">\n    </div> \n    <div class=\"key-modifiers-item\">\n      up:\n      <input type=\"text\" @keydown.up=\"onKeydown('up')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      down:\n      <input type=\"text\" @keydown.down=\"onKeydown('down')\">\n    </div> \n    <div class=\"key-modifiers-item\">\n      left:\n      <input type=\"text\" @keydown.left=\"onKeydown('left')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      right:\n      <input type=\"text\" @keydown.right=\"onKeydown('right')\">\n    </div>  \n    \n    <div class=\"key-modifiers-item\">\n      page-down:\n      <input type=\"text\" @keydown.page-down=\"onKeydown('page-down')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      page-up:\n      <input type=\"text\" @keydown.page-up=\"onKeydown('page-up')\">\n    </div>  \n  </div>\n</template>\n\nexport default {\n  name: 'keyModifiers',\n  methods: {\n    onKeydown (keyName) {\n      console.log(keyName)\n    }\n  }\n}\n\n```\n<a name=\"C8jGV\"></a>\n## 22 .enter\n在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Jw4r0\"></a>\n## 23 .tab\n在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"U7gUW\"></a>\n## 24 .delete\n在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"q769F\"></a>\n## 25 .esc\n在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"lSVHX\"></a>\n## 26 .space\n在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"CJR2h\"></a>\n## 27 .up\n在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"jtFso\"></a>\n## 28 .down\n在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"KcsBn\"></a>\n## 29 .left\n在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Mrnjd\"></a>\n## 30 .right\n在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"P5Hyd\"></a>\n## 31 .page-down\n在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"vV3ei\"></a>\n## 32 .page-up\n在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"iSrWh\"></a>\n# 如何自定义按键修饰符\nvue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？<br />通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。\n\n```javascript\nVue.config.keyCodes = {\n  q: 81\n}\n\n<div class=\"custom\">\n  <input type=\"text\" @keydown.q=\"f1Keydown\">\n</div>\n\nexport default {\n  name: 'custom',\n  methods: {\n    f1Keydown () {\n      console.log('按下了q')\n    }\n  }\n}\n```\n\n\n",
    "body_draft": "<a name=\"pxcyU\"></a>\n# \n<a name=\"th4rJ\"></a>\n# 前言\nvue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！<br />耽误您15分钟您可以收获：\n\n1. 32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用\n1. 如何利用webpack动态注册vue路由，再也不手写路由配置啦！\n\n文章中例子都放在了github源码上，也可以点击直接看例子\n<a name=\"Q2cOK\"></a>\n# 如何动态注册路由？\n文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.<br />有什么办法可以帮我们自动完成路由注册呢？\n<a name=\"kP2Yc\"></a>\n## 1. 文件目录结构\n目录结构（已去除其他文件目录）大概如下\n```javascript\n├── package.json\n└── src\n    ├── App.vue\n    ├── main.js\n    ├── router.js\n    └── views\n        ├── About.vue\n        ├── Home.vue\n        └── modifiers\n            ├── capture.vue\n            ├── once.vue\n            ├── order.vue\n            ├── passive.vue\n            ├── prevent.vue\n            ├── self.vue\n            └── stop.vue\n            └── ...\n```\n<a name=\"rxTi1\"></a>\n## 2. 期望的路由配置\n最终给到vue-router的配置大概长下面这个样子，每个配置最重要的部分分别是path、name和component\n```javascript\n[\n  {\n    \"path\": \"/home\",\n    \"name\": \"home\",\n    \"component\": {\n      \"name\": \"Home\",\n      \"methods\": {},\n      \"staticRenderFns\": [],\n      \"_compiled\": true,\n      \"_scopeId\": \"data-v-fae5bece\",\n      \"beforeCreate\": [\n        null\n      ],\n      \"beforeDestroy\": [\n        null\n      ],\n      \"__file\": \"src/views/Home.vue\"\n    }\n  },\n  {\n    \"path\": \"/modifiers/capture\",\n    \"name\": \"modifiersCapture\",\n    \"component\": {\n      \"name\": \"capture\",\n      \"methods\": {},\n      \"staticRenderFns\": [],\n      \"_compiled\": true,\n      \"_scopeId\": \"data-v-63b4eeee\",\n      \"beforeCreate\": [\n        null\n      ],\n      \"beforeDestroy\": [\n        null\n      ],\n      \"__file\": \"src/views/modifiers/capture.vue\"\n    }\n  },\n  ... // 其他路由配置\n]\n```\n\n\n<a name=\"r0SDU\"></a>\n## 3. require.context实现动态注册路由\n借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下\n```javascript\nconst registerRoutes = () => {\n  const contextInfo = require.context('./views', true, /.vue$/)\n  const routes = contextInfo.keys().map((filePath) => {\n    // filePath 形如 ./Home.vue、./modifiers/capture.vue\n    // path我们希望是/home、/modifiers/capture\n    // 所以需要把开头的./和.vue都替换为空\n    const path = filePath.toLowerCase().replace(/^\\.|\\.vue/g, '')\n    // name的话将/home、/modifiers/capture转成小驼峰即可\n    // 把开头的/先替换掉，再把第一个/后的单词变成大写就可以了\n    const name = path.replace(/^\\//, '').replace(/\\/(\\w)/, ($0, $1) => $1.toUpperCase())\n    // 通过require去读取.vue文件内容\n    const component = require(`./views${filePath.replace(/^\\./, '')}`).default\n\n    return {\n      path,\n      name,\n      component\n    }\n  })\n\n  return routes\n}\n\n```\n​\n\n**效果**<br />经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果\n\n<a name=\"C7PDV\"></a>\n# 事件修饰符\n<a name=\"NdTWe\"></a>\n## 1. 阻止冒泡的两种方式\n\n\n```javascript\n<template>\n  <div class=\"parent\" @click=\"onClickParent\">\n    我是爸爸\n    <div class=\"child\" @click=\"onClickChild\">\n      我是儿子\n    </div>\n  </div> \n</template>\n\nexport default {\n  name: 'stop',\n  methods: {\n    onClickParent () {\n      console.log('我是爸爸')\n    },\n    onClickChild () {\n      console.log('我是儿子')\n    }\n  }\n}\n```\n\n\n点**击子节点**的时候因为事件冒泡的缘故不仅会打印出我是儿子还会打印我是爸爸。有什么办法可以阻止子节点的**事件冒泡**呢？<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=ufdb6c334&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u3a2a87aa-6cbd-4bcb-a622-0c7fdbb416c)<br />\n\n<a name=\"oWzps\"></a>\n### 1 .stop\n只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。<br />当添加上.stop修饰符时，只会出现我是儿子\n```javascript\n<template>\n  <div class=\"parent\" @click=\"onClickParent\">\n    我是爸爸\n    <div class=\"child\" @click.stop=\"onClickChild\">\n      我是儿子\n    </div>\n  </div> \n</template>\n```\n<a name=\"uNVNl\"></a>\n### 2. event.stopPropagation\n当然了，我们也可以通过调用event.stopPropagation来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节\n```javascript\nexport default {\n  name: 'stop',\n  methods: {\n    onClickChild (event) {\n      console.log('我是儿子')\n      event.stopPropagation()\n    }\n  }\n}\n```\n<a name=\"IIPEs\"></a>\n## 2. 阻止默认事件的两种方式\nvue中阻止冒泡有两种方式，那阻止默认事件呢？\n<a name=\"fkfpq\"></a>\n### 1 .prevent\n```javascript\n<template>\n  <div class=\"prevent\">\n    <a href=\"https://juejin.cn/\" @click=\"onNoPrevent\">点击跳转掘金</a>\n    <br />\n    <br />\n    <a href=\"https://juejin.cn/\" @click.prevent=\"onPrevent\">阻止默认事件，无法跳转掘金</a>\n  </div>\n</template>\n\nexport default {\n  name: 'prevent',\n  methods: {\n    onNoPrevent () {\n      console.log('未阻止默认事件')\n    },\n    onPrevent () {\n      console.log('阻止默认事件')\n    }\n  }\n}\n```\n只要添加.prevent轻松实现阻止默认事件\n<a name=\"B1pgj\"></a>\n### 2.event.preventDefault()\n和阻止冒泡一样，我们也可以通过调用事件对象的preventDefault方法来阻止默认事件\n```javascript\nexport default {\n  name: 'prevent',\n  methods: {\n    onPrevent (event) {\n      console.log('阻止默认事件')\n      event.preventDefault()\n    }\n  }\n}\n```\n<a name=\"LqMyK\"></a>\n## 3 .capture\n默认情况下，事件流是以冒泡(由里向外)的形式传递的，如果想以捕获（由外向里）的形式应该怎么办呢？\n```javascript\n<template>\n  <div class=\"capture parent\" @click.capture=\"onClickParent\">\n    父节点\n    <div class=\"child\" @click.capture=\"onClickChild\">自节点</div>\n  </div>\n</template>\n\nexport default {\n  name: 'capture',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n```\n​\n\n不加catpture修饰符，点击**子节点**会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了\n<a name=\"HAwJz\"></a>\n## 4 .self\n只有当event.target是当前元素自身时才会触发事件回调函数\n```javascript\n<template>\n  <div class=\"self\" @click.self=\"onClickSelf\">\n    <div class=\"inner\" @click=\"onClickInner\"></div>\n  </div>\n</template>\n\nexport default {\n  name: 'self',\n  methods: {\n    onClickSelf () {\n      console.log('我是self节点')\n    },\n    onClickInner () {\n      console.log('我是inner节点')\n    }\n  }\n}\n```\n​\n\n不加self修饰符的话，点击inner节点也会触发self的事件，加了之后只有触发事件的元素本身是self，才会打印出我是self节点\n<a name=\"RQFsF\"></a>\n## 暂停一下：修饰符的顺序如何理解？\n已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=ue6c22681&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u4fe3b80c-310b-44fe-8997-3fbdc0a61e3)<br />image.png<br />**怎么理解呢？我们来看两个栗子**\n```javascript\n<template>\n  <div class=\"order\">\n    <div class=\"order-0\">\n      <a href=\"https://juejin.cn/\" class=\"order-parent\" @click.self.prevent=\"onClickParent\">\n        我是父节点，会跳转掘金\n        <br />\n        <span class=\"order-child\" @click=\"onClickChild\">\n          我是子节点\n        </span>\n      </a>\n      <hr />\n    </div>\n    <div class=\"order-2\">\n      <a href=\"https://juejin.cn/\" class=\"order-parent\" @click.prevent.self=\"onClickParent\">\n        我是父节点，无法跳转掘金\n        <br />\n        <span class=\"order-child\" @click=\"onClickChild\">\n          我是子节点\n        </span>\n      </a>\n    </div>\n  </div> \n</template>\n\nexport default {\n  name: 'order',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n\n```\n您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？\n\n1. 首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件\n1. 点击下面的父节点会打印出**我是父节点**，但是**不会跳转掘金**\n1. 点击上面的父节点**会**打印出**我是父节点**,**也不会跳转掘金**\n\n但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是**会**<br />**为什么？**<br />a@click.self.prevent=\"onClickParent\"的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行onClickParent回调。<br />而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就不会阻止默认事件(此时也就发生跳转了)，当然也不会触发onClickParent回调<br />同理来我们分析一下a@click.prevent.self=\"onClickParent\"<br />不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行onClickParent回调函数。<br />\n<br />**回过头看，你理解事件的顺序含义了吗？**\n<a name=\"DH91z\"></a>\n## 5. once\n顾名思义，事件只会触发一次\n```javascript\n<template>\n  <div class=\"once\" @click.once=\"onClickOnce\">\n    只触发一次\n  </div>\n</template>\n\nexport default {\n  name: 'once',\n  methods: {\n    onClickOnce () {\n      console.log('once，我只会触发一次点击事件回调')\n    }\n  }\n}\n```\n触发一次点击之后，任我再怎么点，回调怎也不会触发了。\n<a name=\"rB1Mt\"></a>\n## 6 .native\n我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用.native修饰符可以帮我们办到这点<br />**native.vue**\n```javascript\n<template>\n  <div class=\"native-custom\">\n    <input type=\"text\" @keydown=\"onKeydown\">\n  </div>\n</template>\n\nexport default {\n  name: 'nativeCustom',\n  methods: {\n    onKeydown () {\n      this.$emit('onKeydown')\n    }\n  }\n}\n```\n**custom.vue**\n```javascript\n<template>\n  <div class=\"native\">\n    <!-- 加上.native之后原生事件才得以监听成功 -->\n    <NativeCustom @onKeydown=\"onKeydown\" @click.native=\"onClick\" />\n  </div>\n</template>\n\nimport NativeCustom from '../../components/native.vue'\n\nexport default {\n  name: 'native',\n  components: {\n    NativeCustom\n  },\n  methods: {\n    onKeydown () {\n      console.log('onKeydown')\n    },\n    onClick () {\n      console.log('onClick')\n    }\n  }\n}\n\n```\n<a name=\"R2RfU\"></a>\n## 7 .passive\nvue对应 addEventListener 中的 passive 选项提供了 .passive 修饰符\n```javascript\n<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --> \n<!-- 而不会等待 `onScroll` 完成 --> \n<!-- 这其中包含 `event.preventDefault()` 的情况 --> \n\n<div v-on:scroll.passive=\"onScroll\">...</div>\n```\n**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**<br />**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**<br />**这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊**\n<a name=\"qD7c9\"></a>\n# v-bind修饰符\n<a name=\"Z7kub\"></a>\n## 8 .sync\n当我们想要在父组件和子组件之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要.sync修饰符即可办到<br />\n\n<a name=\"KZCOv\"></a>\n## 9 .camel\n.camel 修饰符允许在使用 DOM 模板时将 v-bind property 名称驼峰化，例如 SVG 的 viewBox property：​\n<a name=\"gux0B\"></a>\n## 10 .prop\n关于.prop修饰符官网只有这句话 .prop  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。<br />**有啥作用？**\n\n1. 通过自定义属性存储变量，避免暴露数据\n1. 防止污染 HTML 结构\n\n比如有以下代码\n```javascript\n<template>\n  <div class=\"prop\">\n    <div class=\"prop-item\" :my-name=\"prop\"></div>\n    // 最终变成了 <div my-name=\"hello prop\" class=\"prop-item\"></div>\n    <div class=\"prop-item\" :my-name.prop=\"prop2\"></div>\n    // 最终变成了<div class=\"prop-item\"></div>\n    <button @click=\"onGetResult\">获取结果</button>\n  </div>\n</template>\n\nexport default {\n  name: 'prop',\n  data () {\n    return {\n      prop: 'hello prop',\n      prop2: 'hello prop2'\n    }\n  },\n  methods: {\n    onGetResult () {\n      const $refProp = this.$refs.prop\n      const $refProp2 = this.$refs.prop2\n\n      console.log($refProp.getAttribute('my-name')) // hello prop\n      console.log($refProp2.getAttribute('my-name')) // null\n    }\n  }\n}\n\n```\n从示例上可以看出未使用.prop修饰符的my-name属性会绑定到dom节点的attribute，从而出现暴露的情况。\n<a name=\"NWe8M\"></a>\n# 鼠标修饰符\n当咱们想监听用户点击了左键、右键或者中键时也有修饰符可以快捷使用，分别是.left、.right、middle，来看个例子试试<br />根据MDN MouseEvent.button，介绍。<br />在最外层div.mouse监听mousedown事件，看下用户点击的是鼠标哪个键，三个button分别用三个修饰符快捷方式监听左键、中键、右键并打印出left、middle、right\n```javascript\n<template>\n  <div class=\"mouse\" @mousedown=\"onMousedown\">\n    <button @click.left=\"onClickBtn('left')\">left</button>\n    <button @click.middle=\"onClickBtn('middle')\">middle</button>\n    <button @click.right=\"onClickBtn('right')\">right</button>\n  </div>\n</template>\n\nexport default {\n  name: 'mouse',\n  mounted () {\n\n  },\n  methods: {\n    onClickBtn (msg) {\n      console.log(msg)\n    },\n    onMousedown (event) {\n      const mosueMsgMap = {\n        0: '鼠标左键',\n        1: '鼠标中键',\n        2: '鼠标右键'\n      }\n      console.log('点击了', mosueMsgMap[event.button])\n    }\n  }\n}\n```\n**没有带鼠标回来，中键点击暂时不能演示，后续会补上**<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718538-11650970-9341-438b-b845-a67688ff5897.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=u4ad4c271&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u74db735d-39da-43ad-b642-b24eee0ddf1)<br />mouse.gif\n<a name=\"fFSe7\"></a>\n## 11 .left\n同上例子，监听鼠标左键点击\n<a name=\"it85P\"></a>\n## 12 .right\n同上例子，监听鼠标右键点击\n<a name=\"LAxXy\"></a>\n## 13 .middle\n同上例子，监听鼠标中键点击\n<a name=\"hzYRz\"></a>\n# 表单相关修饰符\n<a name=\"Yph9D\"></a>\n## 14 .trim\n对于输入的内容，希望可以过滤首尾空格应该怎么做呢？\n```javascript\n<template>\n  <div class=\"trim\">\n    <div class=\"trim-item\">\n      <input type=\"text\" v-model=\"name\">\n      <p>用户名：<span>{{ name }}</span></p>\n    </div>\n    <div class=\"trim-item\">\n      <input type=\"text\" v-model.trim=\"name2\">\n      <p>用户名2：<span>{{ name2 }}</span></p>\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'trim',\n  data () {\n    return {\n      name: '',\n      name2: '',\n    }\n  },\n  watch: {\n    name (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n    name2 (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n  }\n}\n```\n**.trim修饰符可以很方便做到**\n<a name=\"S4q4U\"></a>\n## 15 .lazy\nv-model大家都很熟悉，默认情况下，每次input事件触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？<br />**思路1：** 绑定change事件，在事件回调中手动获取target的值<br />**思路2：** 直接使用.lazy修饰符即可达到效果\n```javascript\n<template>\n  <div class=\"lazy\">\n    <div class=\"lazy-item\">\n      <input type=\"text\" v-model=\"text\">\n      <p>无.lazy: {{ text }}</p>\n    </div>\n\n    <div class=\"lazy-item\">\n      <input type=\"text\" v-model.lazy=\"text2\">\n      <p>.lazy: {{ text2 }}</p>\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      text: '',\n      text2: ''\n    }\n  }\n}\n```\n可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，text2的数据才更新了\n<a name=\"LkaRe\"></a>\n## 16 .number\n我们知道input输入框的type哪怕是number得到的值的类型也是string，如果我们想直接拿到number类型的数据，有不想麻烦的手动转换应该怎么办呢？\n```javascript\n<template>\n  <div class=\"number\">\n    <div class=\"number-item\">\n      <p>无.number </p>\n      <input type=\"number\" v-model=\"number\">\n    </div>\n    <div class=\"number-item\">\n      <p>type:text .number </p>\n      <input type=\"text\" v-model.number=\"number1\">\n    </div>\n    <div class=\"number-item\">\n      <p>type:number .number </p>\n      <input type=\"number\" v-model.number=\"number2\">\n    </div>\n  </div>\n</template>\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      number: 0,\n      number1: '',\n      number2: '',\n    }\n  },\n  watch: {\n    number (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number1 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number2 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n  }\n}\n```\n\n\n1. 第一个输入框的类型是number，但是得到的值是string\n1. 第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 parseFloat() 解析，则会返回原始的值。）\n1. 第三个输入框的类型是number，最后得到的值也是number\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=u91c65a41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u41d07f12-da60-4a2b-8499-f0209ae7331)<br />number.gif\n<a name=\"tKRUK\"></a>\n# 系统修饰符\n当点击事件或者键盘事件需要系统键同时按下才触发时.ctrl、.alt、.shift、.meta可以帮大忙噢！<br />**如下代码**\n\n1. 全局监听keydown事件，尝试看.ctrl、.alt、.shift、.meta是否被按下\n1. 分别给四个按钮加上 .ctrl、.alt、.shift、.meta修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效\n\n**注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发**\n```javascript\n<template>\n  <div class=\"system\">\n    <p>{{ msg }}</p>\n    <div class=\"buttons\">\n      <button @click.ctrl=\"onClickButon('ctrl')\">ctrl</button>\n      <button @click.alt=\"onClickButon('alt')\">alt</button>\n      <button @click.shift=\"onClickButon('shift')\">shift</button>\n      <button @click.meta=\"onClickButon('meta')\">meta</button>\n    </div>\n  </div>  \n</template>\n\nexport default {\n  name: 'system',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) => {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}\n```\n<a name=\"vrHrH\"></a>\n## 17 .ctrl\n仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"EDUwo\"></a>\n## 18 .alt\n仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"JBKLM\"></a>\n## 19 .shift\n仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"UnowS\"></a>\n## 20 .meta\n仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Xw5H6\"></a>\n## 21 .exact\n严格来说这.exact不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发.alt也可以触发.shift。<br />还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发<br />![image.png](https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif#clientId=ube0a7b57-a3b9-4&from=paste&id=uaac7048a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1&originWidth=1&originalType=url&ratio=1&size=70&status=done&style=none&taskId=u98a03c13-3c8f-42ff-aaf6-d3be97c1223)<br />system2.gif\n\n1. **只想某个系统修饰键按下时才触发点击**\n1. **没有任何系统修饰符被按下的时候才触发点击**\n\n要实现上面的需求.exact就派上用场了，用上面的例子稍作改造\n```javascript\n<template>\n  <div class=\"extra\">\n    <p>{{ msg }}</p>\n    <div class=\"buttons\">\n      <button @click.ctrl.exact=\"onClickButon('ctrl')\">ctrl</button>\n      <button @click.alt.exact=\"onClickButon('alt')\">alt</button>\n      <button @click.shift.exact=\"onClickButon('shift')\">shift</button>\n      <button @click.meta.exact=\"onClickButon('meta')\">meta</button>\n      <button @click.exact=\"onClickButon('非系统键')\">非系统键</button>\n    </div>\n  </div>  \n</template>\n\nexport default {\n  name: 'extra',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) => {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}\n```\n<a name=\"QRDoL\"></a>\n# 按键修饰符\n在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。<br />如下代码，我们分别给enter、tab、delete等按键指定了keydown事件，当在指定的输入框中按下指定的键盘，会打印出enter、tab、delete等，其他按键在输入框中无法触发该console\n```javascript\n<template>\n  <div class=\"key-modifiers\">\n    <div class=\"key-modifiers-item\">\n      enter:\n      <input type=\"text\" @keydown.enter=\"onKeydown('enter')\">\n    </div>\n    <div class=\"key-modifiers-item\">\n      tab:\n      <input type=\"text\" @keydown.tab=\"onKeydown('tab')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      delete:\n      <input type=\"text\" @keydown.delete=\"onKeydown('delete')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      esc:\n      <input type=\"text\" @keydown.esc=\"onKeydown('esc')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      space:\n      <input type=\"text\" @keydown.space=\"onKeydown('space')\">\n    </div> \n    <div class=\"key-modifiers-item\">\n      up:\n      <input type=\"text\" @keydown.up=\"onKeydown('up')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      down:\n      <input type=\"text\" @keydown.down=\"onKeydown('down')\">\n    </div> \n    <div class=\"key-modifiers-item\">\n      left:\n      <input type=\"text\" @keydown.left=\"onKeydown('left')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      right:\n      <input type=\"text\" @keydown.right=\"onKeydown('right')\">\n    </div>  \n    \n    <div class=\"key-modifiers-item\">\n      page-down:\n      <input type=\"text\" @keydown.page-down=\"onKeydown('page-down')\">\n    </div>  \n    <div class=\"key-modifiers-item\">\n      page-up:\n      <input type=\"text\" @keydown.page-up=\"onKeydown('page-up')\">\n    </div>  \n  </div>\n</template>\n\nexport default {\n  name: 'keyModifiers',\n  methods: {\n    onKeydown (keyName) {\n      console.log(keyName)\n    }\n  }\n}\n\n```\n<a name=\"C8jGV\"></a>\n## 22 .enter\n在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Jw4r0\"></a>\n## 23 .tab\n在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"U7gUW\"></a>\n## 24 .delete\n在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"q769F\"></a>\n## 25 .esc\n在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"lSVHX\"></a>\n## 26 .space\n在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"CJR2h\"></a>\n## 27 .up\n在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"jtFso\"></a>\n## 28 .down\n在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"KcsBn\"></a>\n## 29 .left\n在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"Mrnjd\"></a>\n## 30 .right\n在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"P5Hyd\"></a>\n## 31 .page-down\n在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"vV3ei\"></a>\n## 32 .page-up\n在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面\n<a name=\"iSrWh\"></a>\n# 如何自定义按键修饰符\nvue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？<br />通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。\n\n```javascript\nVue.config.keyCodes = {\n  q: 81\n}\n\n<div class=\"custom\">\n  <input type=\"text\" @keydown.q=\"f1Keydown\">\n</div>\n\nexport default {\n  name: 'custom',\n  methods: {\n    f1Keydown () {\n      console.log('按下了q')\n    }\n  }\n}\n```\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"pxcyU\"></h1><h1 id=\"th4rJ\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">前言</span></h1><p id=\"ua1c2d6c9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">vue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！</span></p><p id=\"uae0d1073\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">耽误您15分钟您可以收获：</span></p><ol class=\"ne-ol\"><li id=\"u614a523c\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用</span></li><li id=\"uc2cb978d\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">如何利用webpack动态注册vue路由，再也不手写路由配置啦！</span></li></ol><p id=\"udb6522f9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">文章中例子都放在了github源码上，也可以点击直接看例子</span></p><h1 id=\"Q2cOK\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">如何动态注册路由？</span></h1><p id=\"ua21b7e1e\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.</span></p><p id=\"u3ecae803\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">有什么办法可以帮我们自动完成路由注册呢？</span></p><h2 id=\"kP2Yc\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">1. 文件目录结构</span></h2><p id=\"u5449f10e\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">目录结构（已去除其他文件目录）大概如下</span></p><pre data-language=\"javascript\" id=\"kC7Aq\" class=\"ne-codeblock\">├── package.json\n└── src\n    ├── App.vue\n    ├── main.js\n    ├── router.js\n    └── views\n        ├── About.vue\n        ├── Home.vue\n        └── modifiers\n            ├── capture.vue\n            ├── once.vue\n            ├── order.vue\n            ├── passive.vue\n            ├── prevent.vue\n            ├── self.vue\n            └── stop.vue\n            └── ...</pre><h2 id=\"rxTi1\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">2. 期望的路由配置</span></h2><p id=\"uedb39fa1\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">最终给到</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">vue-router</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">的配置大概长下面这个样子，每个配置最重要的部分分别是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">path</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">name</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">和</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">component</span></p><pre data-language=\"javascript\" id=\"TjFd3\" class=\"ne-codeblock\">[\n  {\n    &quot;path&quot;: &quot;/home&quot;,\n    &quot;name&quot;: &quot;home&quot;,\n    &quot;component&quot;: {\n      &quot;name&quot;: &quot;Home&quot;,\n      &quot;methods&quot;: {},\n      &quot;staticRenderFns&quot;: [],\n      &quot;_compiled&quot;: true,\n      &quot;_scopeId&quot;: &quot;data-v-fae5bece&quot;,\n      &quot;beforeCreate&quot;: [\n        null\n      ],\n      &quot;beforeDestroy&quot;: [\n        null\n      ],\n      &quot;__file&quot;: &quot;src/views/Home.vue&quot;\n    }\n  },\n  {\n    &quot;path&quot;: &quot;/modifiers/capture&quot;,\n    &quot;name&quot;: &quot;modifiersCapture&quot;,\n    &quot;component&quot;: {\n      &quot;name&quot;: &quot;capture&quot;,\n      &quot;methods&quot;: {},\n      &quot;staticRenderFns&quot;: [],\n      &quot;_compiled&quot;: true,\n      &quot;_scopeId&quot;: &quot;data-v-63b4eeee&quot;,\n      &quot;beforeCreate&quot;: [\n        null\n      ],\n      &quot;beforeDestroy&quot;: [\n        null\n      ],\n      &quot;__file&quot;: &quot;src/views/modifiers/capture.vue&quot;\n    }\n  },\n  ... // 其他路由配置\n]</pre><p id=\"uf5b53993\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /><br /></span></p><h2 id=\"r0SDU\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">3. require.context实现动态注册路由</span></h2><p id=\"uec45424d\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下</span></p><pre data-language=\"javascript\" id=\"VTVVx\" class=\"ne-codeblock\">const registerRoutes = () =&gt; {\n  const contextInfo = require.context('./views', true, /.vue$/)\n  const routes = contextInfo.keys().map((filePath) =&gt; {\n    // filePath 形如 ./Home.vue、./modifiers/capture.vue\n    // path我们希望是/home、/modifiers/capture\n    // 所以需要把开头的./和.vue都替换为空\n    const path = filePath.toLowerCase().replace(/^\\.|\\.vue/g, '')\n    // name的话将/home、/modifiers/capture转成小驼峰即可\n    // 把开头的/先替换掉，再把第一个/后的单词变成大写就可以了\n    const name = path.replace(/^\\//, '').replace(/\\/(\\w)/, ($0, $1) =&gt; $1.toUpperCase())\n    // 通过require去读取.vue文件内容\n    const component = require(`./views${filePath.replace(/^\\./, '')}`).default\n\n    return {\n      path,\n      name,\n      component\n    }\n  })\n\n  return routes\n}\n</pre><p id=\"u6638b89b\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"></span></p><p id=\"u45fc22ff\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">效果</span></strong></p><p id=\"u55167b83\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果</span></p><p id=\"u52d96441\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(63, 63, 63); font-size: 16px\"><br /></span></p><h1 id=\"C7PDV\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">事件修饰符</span></h1><h2 id=\"NdTWe\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">1. 阻止冒泡的两种方式</span></h2><p id=\"u432abee9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><pre data-language=\"javascript\" id=\"Jej8E\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;parent&quot; @click=&quot;onClickParent&quot;&gt;\n    我是爸爸\n    &lt;div class=&quot;child&quot; @click=&quot;onClickChild&quot;&gt;\n      我是儿子\n    &lt;/div&gt;\n  &lt;/div&gt; \n&lt;/template&gt;\n\nexport default {\n  name: 'stop',\n  methods: {\n    onClickParent () {\n      console.log('我是爸爸')\n    },\n    onClickChild () {\n      console.log('我是儿子')\n    }\n  }\n}</pre><p id=\"ue288b8af\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(152, 195, 121); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><p id=\"u06d45470\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">点</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">击子节点</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">的时候因为事件冒泡的缘故不仅会打印出</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">我是儿子</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">还会打印</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">我是爸爸</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">。有什么办法可以阻止子节点的</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">事件冒泡</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">呢？</span></p><p id=\"u31500ace\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif\" width=\"1\" id=\"ufdb6c334\" class=\"ne-image\"></p><p id=\"u1a479574\" class=\"ne-p\"><br></p><h3 id=\"oWzps\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 17px\">1 .stop</span></h3><p id=\"u4de78f22\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。</span></p><p id=\"u14416e59\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">当添加上</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.stop</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符时，只会出现</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">我是儿子</span></p><pre data-language=\"javascript\" id=\"TVv7R\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;parent&quot; @click=&quot;onClickParent&quot;&gt;\n    我是爸爸\n    &lt;div class=&quot;child&quot; @click.stop=&quot;onClickChild&quot;&gt;\n      我是儿子\n    &lt;/div&gt;\n  &lt;/div&gt; \n&lt;/template&gt;</pre><h3 id=\"uNVNl\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 17px\">2. event.stopPropagation</span></h3><p id=\"u71246161\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">当然了，我们也可以通过调用</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">event.stopPropagation</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节</span></p><pre data-language=\"javascript\" id=\"JJeve\" class=\"ne-codeblock\">export default {\n  name: 'stop',\n  methods: {\n    onClickChild (event) {\n      console.log('我是儿子')\n      event.stopPropagation()\n    }\n  }\n}</pre><h2 id=\"IIPEs\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">2. 阻止默认事件的两种方式</span></h2><p id=\"ufcf19143\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">vue中阻止冒泡有两种方式，那阻止默认事件呢？</span></p><h3 id=\"fkfpq\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 17px\">1 .prevent</span></h3><pre data-language=\"javascript\" id=\"N0T9h\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;prevent&quot;&gt;\n    &lt;a href=&quot;https://juejin.cn/&quot; @click=&quot;onNoPrevent&quot;&gt;点击跳转掘金&lt;/a&gt;\n    &lt;br /&gt;\n    &lt;br /&gt;\n    &lt;a href=&quot;https://juejin.cn/&quot; @click.prevent=&quot;onPrevent&quot;&gt;阻止默认事件，无法跳转掘金&lt;/a&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'prevent',\n  methods: {\n    onNoPrevent () {\n      console.log('未阻止默认事件')\n    },\n    onPrevent () {\n      console.log('阻止默认事件')\n    }\n  }\n}</pre><p id=\"ubcb1c305\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">只要添加</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.prevent</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">轻松实现阻止默认事件</span></p><h3 id=\"B1pgj\"><span class=\"ne-text\">2.event.preventDefault()</span></h3><p id=\"uee407897\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">和阻止冒泡一样，我们也可以通过调用事件对象的</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">preventDefault</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">方法来阻止默认事件</span></p><pre data-language=\"javascript\" id=\"o9tKY\" class=\"ne-codeblock\">export default {\n  name: 'prevent',\n  methods: {\n    onPrevent (event) {\n      console.log('阻止默认事件')\n      event.preventDefault()\n    }\n  }\n}</pre><h2 id=\"LqMyK\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">3 .capture</span></h2><p id=\"u6f06ee36\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">默认情况下，事件流是以</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">冒泡</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">(由里向外)的形式传递的，如果想以</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">捕获（由外向里）</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">的形式应该怎么办呢？</span></p><pre data-language=\"javascript\" id=\"OnlN9\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;capture parent&quot; @click.capture=&quot;onClickParent&quot;&gt;\n    父节点\n    &lt;div class=&quot;child&quot; @click.capture=&quot;onClickChild&quot;&gt;自节点&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'capture',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}</pre><p id=\"u6b3fafbd\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(152, 195, 121); font-size: 12px; background-color: rgb(40, 44, 52)\"></span></p><p id=\"u2016e654\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">不加</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">catpture</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符，点击</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">子节点</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了</span></p><h2 id=\"HAwJz\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">4 .self</span></h2><p id=\"uf3b37375\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">只有当</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">event.target</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">是当前元素自身时才会触发事件回调函数</span></p><pre data-language=\"javascript\" id=\"YKen2\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;self&quot; @click.self=&quot;onClickSelf&quot;&gt;\n    &lt;div class=&quot;inner&quot; @click=&quot;onClickInner&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'self',\n  methods: {\n    onClickSelf () {\n      console.log('我是self节点')\n    },\n    onClickInner () {\n      console.log('我是inner节点')\n    }\n  }\n}</pre><p id=\"u5c09fae3\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(152, 195, 121); font-size: 12px; background-color: rgb(40, 44, 52)\"></span></p><p id=\"u73c55023\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">不加</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">self</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符的话，点击</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">inner</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">节点也会触发</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">self</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">的事件，加了之后只有触发事件的元素本身是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">self</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">，才会打印出</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">我是self节点</span></p><h2 id=\"RQFsF\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">暂停一下：修饰符的顺序如何理解？</span></h2><p id=\"u849019ff\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话</span></p><p id=\"u9c96fbfa\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif\" width=\"1\" id=\"ue6c22681\" class=\"ne-image\"></p><p id=\"u1a23ba6b\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(136, 136, 136); font-size: 12px\">image.png</span></p><p id=\"u13e865eb\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">怎么理解呢？我们来看两个栗子</span></strong></p><pre data-language=\"javascript\" id=\"ik1zw\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;order&quot;&gt;\n    &lt;div class=&quot;order-0&quot;&gt;\n      &lt;a href=&quot;https://juejin.cn/&quot; class=&quot;order-parent&quot; @click.self.prevent=&quot;onClickParent&quot;&gt;\n        我是父节点，会跳转掘金\n        &lt;br /&gt;\n        &lt;span class=&quot;order-child&quot; @click=&quot;onClickChild&quot;&gt;\n          我是子节点\n        &lt;/span&gt;\n      &lt;/a&gt;\n      &lt;hr /&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;order-2&quot;&gt;\n      &lt;a href=&quot;https://juejin.cn/&quot; class=&quot;order-parent&quot; @click.prevent.self=&quot;onClickParent&quot;&gt;\n        我是父节点，无法跳转掘金\n        &lt;br /&gt;\n        &lt;span class=&quot;order-child&quot; @click=&quot;onClickChild&quot;&gt;\n          我是子节点\n        &lt;/span&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt; \n&lt;/template&gt;\n\nexport default {\n  name: 'order',\n  methods: {\n    onClickParent () {\n      console.log('我是父节点')\n    },\n    onClickChild () {\n      console.log('我是子节点')\n    }\n  }\n}\n</pre><p id=\"u45abffaf\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？</span></p><ol class=\"ne-ol\"><li id=\"u026e0880\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件</span></li><li id=\"u699c1bdc\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">点击下面的父节点会打印出</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">我是父节点</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">，但是</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">不会跳转掘金</span></strong></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u3d45e281\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">点击上面的父节点</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">会</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">打印出</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">我是父节点</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">,</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">也不会跳转掘金</span></strong></li></ol><p id=\"u3f69b92c\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是</span><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">会</span></strong></p><p id=\"uc38b3260\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">为什么？</span></strong></p><p id=\"u215be7d4\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">a@click.self.prevent=&quot;onClickParent&quot;</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">onClickParent</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">回调。</span></p><p id=\"ub1da1b63\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">不会阻止默认事件</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">(此时也就发生跳转了)，当然也不会触发</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">onClickParent</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">回调</span></p><p id=\"uabac06b5\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">同理来我们分析一下</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">a@click.prevent.self=&quot;onClickParent&quot;</span></p><p id=\"ud0b596b4\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">onClickParent</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">回调函数。</span></p><p id=\"ua240052f\" class=\"ne-p\" style=\"text-align: left\"><br></p><p id=\"ucb88ba29\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">回过头看，你理解事件的顺序含义了吗？</span></strong></p><h2 id=\"DH91z\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">5. once</span></h2><p id=\"u06a5cb91\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">顾名思义，事件只会触发一次</span></p><pre data-language=\"javascript\" id=\"ODOcx\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;once&quot; @click.once=&quot;onClickOnce&quot;&gt;\n    只触发一次\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'once',\n  methods: {\n    onClickOnce () {\n      console.log('once，我只会触发一次点击事件回调')\n    }\n  }\n}</pre><p id=\"ucfa4a5b4\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">触发一次点击之后，任我再怎么点，回调怎也不会触发了。</span></p><h2 id=\"rB1Mt\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">6 .native</span></h2><p id=\"u918ccba9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.native</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">修饰符可以帮我们办到这点</span></p><p id=\"uc9adf63a\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">native.vue</span></strong></p><pre data-language=\"javascript\" id=\"tr0Jb\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;native-custom&quot;&gt;\n    &lt;input type=&quot;text&quot; @keydown=&quot;onKeydown&quot;&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'nativeCustom',\n  methods: {\n    onKeydown () {\n      this.$emit('onKeydown')\n    }\n  }\n}</pre><p id=\"u9d802653\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">custom.vue</span></strong></p><pre data-language=\"javascript\" id=\"muZrE\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;native&quot;&gt;\n    &lt;!-- 加上.native之后原生事件才得以监听成功 --&gt;\n    &lt;NativeCustom @onKeydown=&quot;onKeydown&quot; @click.native=&quot;onClick&quot; /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nimport NativeCustom from '../../components/native.vue'\n\nexport default {\n  name: 'native',\n  components: {\n    NativeCustom\n  },\n  methods: {\n    onKeydown () {\n      console.log('onKeydown')\n    },\n    onClick () {\n      console.log('onClick')\n    }\n  }\n}\n</pre><h2 id=\"R2RfU\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">7 .passive</span></h2><p id=\"u3aaf4433\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">vue对应 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">addEventListener</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> 中的 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">passive</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> 选项提供了 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.passive</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> 修饰符</span></p><pre data-language=\"javascript\" id=\"VOkR9\" class=\"ne-codeblock\">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt; \n&lt;!-- 而不会等待 `onScroll` 完成 --&gt; \n&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt; \n\n&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</pre><p id=\"u02d48cc4\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p id=\"ua36224c6\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p id=\"ua638a5ee\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><h1 id=\"qD7c9\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">v-bind修饰符</span></h1><h2 id=\"Z7kub\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">8 .sync</span></h2><p id=\"u1e9120fe\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">当我们想要在</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">父组件</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">和</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">子组件</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.sync</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">修饰符即可办到</span></p><p id=\"u5f314776\" class=\"ne-p\" style=\"text-align: left\"><br></p><h2 id=\"KZCOv\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">9 .camel</span></h2><p id=\"ub609f4e9\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.camel</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> 修饰符允许在使用 DOM 模板时将 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">v-bind</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> property 名称驼峰化，例如 SVG 的 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">viewBox</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> property：</span><span class=\"ne-text\" style=\"color: rgb(152, 195, 121); font-size: 12px; background-color: rgb(40, 44, 52)\"></span></p><h2 id=\"gux0B\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">10 .prop</span></h2><p id=\"ud239f232\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">关于.prop修饰符官网只有这句话</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\"> </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.prop</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。</span></p><p id=\"u83eab9d2\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">有啥作用？</span></strong></p><ol class=\"ne-ol\"><li id=\"u0c2d02f3\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">通过自定义属性存储变量，避免暴露数据</span></li><li id=\"ufab4e34e\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">防止污染 HTML 结构</span></li></ol><p id=\"u8e8dcaef\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">比如有以下代码</span></p><pre data-language=\"javascript\" id=\"ziFk9\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;prop&quot;&gt;\n    &lt;div class=&quot;prop-item&quot; :my-name=&quot;prop&quot;&gt;&lt;/div&gt;\n    // 最终变成了 &lt;div my-name=&quot;hello prop&quot; class=&quot;prop-item&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;prop-item&quot; :my-name.prop=&quot;prop2&quot;&gt;&lt;/div&gt;\n    // 最终变成了&lt;div class=&quot;prop-item&quot;&gt;&lt;/div&gt;\n    &lt;button @click=&quot;onGetResult&quot;&gt;获取结果&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'prop',\n  data () {\n    return {\n      prop: 'hello prop',\n      prop2: 'hello prop2'\n    }\n  },\n  methods: {\n    onGetResult () {\n      const $refProp = this.$refs.prop\n      const $refProp2 = this.$refs.prop2\n\n      console.log($refProp.getAttribute('my-name')) // hello prop\n      console.log($refProp2.getAttribute('my-name')) // null\n    }\n  }\n}\n</pre><p id=\"u7bde18fa\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">从示例上可以看出未使用</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.prop</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符的</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">my-name</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">属性会绑定到dom节点的attribute，从而出现暴露的情况。</span></p><h1 id=\"NWe8M\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">鼠标修饰符</span></h1><p id=\"u77b76e1c\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">当咱们想监听用户点击了</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">左键</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">右键</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">或者</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">中键</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">时也有修饰符可以快捷使用，分别是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.left</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.right</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">middle</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">，来看个例子试试</span></p><p id=\"u034c0d8c\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">根据MDN MouseEvent.button，介绍。</span></p><p id=\"u85e7910c\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">在最外层</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">div.mouse</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">监听</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">mousedown</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">事件，看下用户点击的是鼠标哪个键，三个</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">button</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">分别用三个修饰符快捷方式监听</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">左键</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">中键</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">右键</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">并打印出</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">left</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">middle</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">right</span></p><pre data-language=\"javascript\" id=\"OJArw\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;mouse&quot; @mousedown=&quot;onMousedown&quot;&gt;\n    &lt;button @click.left=&quot;onClickBtn('left')&quot;&gt;left&lt;/button&gt;\n    &lt;button @click.middle=&quot;onClickBtn('middle')&quot;&gt;middle&lt;/button&gt;\n    &lt;button @click.right=&quot;onClickBtn('right')&quot;&gt;right&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'mouse',\n  mounted () {\n\n  },\n  methods: {\n    onClickBtn (msg) {\n      console.log(msg)\n    },\n    onMousedown (event) {\n      const mosueMsgMap = {\n        0: '鼠标左键',\n        1: '鼠标中键',\n        2: '鼠标右键'\n      }\n      console.log('点击了', mosueMsgMap[event.button])\n    }\n  }\n}</pre><p id=\"u0a41ddbe\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">没有带鼠标回来，中键点击暂时不能演示，后续会补上</span></strong></p><p id=\"u5bf141f5\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718538-11650970-9341-438b-b845-a67688ff5897.gif\" width=\"1\" id=\"u4ad4c271\" class=\"ne-image\"></p><p id=\"ua6fe34d8\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(136, 136, 136); font-size: 12px\">mouse.gif</span></p><h2 id=\"fFSe7\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">11 .left</span></h2><p id=\"u73cf0bd7\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">同上例子，监听鼠标左键点击</span></p><h2 id=\"it85P\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">12 .right</span></h2><p id=\"u89c91167\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">同上例子，监听鼠标右键点击</span></p><h2 id=\"LAxXy\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">13 .middle</span></h2><p id=\"u7cc0d569\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">同上例子，监听鼠标中键点击</span></p><h1 id=\"hzYRz\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">表单相关修饰符</span></h1><h2 id=\"Yph9D\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">14 .trim</span></h2><p id=\"u1cb0902d\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">对于输入的内容，希望可以</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">过滤首尾空格</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">应该怎么做呢？</span></p><pre data-language=\"javascript\" id=\"Bx82u\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;trim&quot;&gt;\n    &lt;div class=&quot;trim-item&quot;&gt;\n      &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;\n      &lt;p&gt;用户名：&lt;span&gt;{{ name }}&lt;/span&gt;&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;trim-item&quot;&gt;\n      &lt;input type=&quot;text&quot; v-model.trim=&quot;name2&quot;&gt;\n      &lt;p&gt;用户名2：&lt;span&gt;{{ name2 }}&lt;/span&gt;&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'trim',\n  data () {\n    return {\n      name: '',\n      name2: '',\n    }\n  },\n  watch: {\n    name (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n    name2 (newVal) {\n      console.log(`'----${newVal}----'`)\n    },\n  }\n}</pre><p id=\"u9f76bc9c\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">.trim修饰符可以很方便做到</span></strong></p><h2 id=\"S4q4U\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">15 .lazy</span></h2><p id=\"u30cf5619\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">v-model</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">大家都很熟悉，默认情况下，每次</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">input事件</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？</span></p><p id=\"u17cf87ef\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">思路1：</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">绑定change事件，在事件回调中手动获取target的值</span></p><p id=\"u08b1b8a0\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">思路2：</span></strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">直接使用</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.lazy</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符即可达到效果</span></p><pre data-language=\"javascript\" id=\"HVqqo\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;lazy&quot;&gt;\n    &lt;div class=&quot;lazy-item&quot;&gt;\n      &lt;input type=&quot;text&quot; v-model=&quot;text&quot;&gt;\n      &lt;p&gt;无.lazy: {{ text }}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=&quot;lazy-item&quot;&gt;\n      &lt;input type=&quot;text&quot; v-model.lazy=&quot;text2&quot;&gt;\n      &lt;p&gt;.lazy: {{ text2 }}&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      text: '',\n      text2: ''\n    }\n  }\n}</pre><p id=\"udee19840\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">text2</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">的数据才更新了</span></p><h2 id=\"LkaRe\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">16 .number</span></h2><p id=\"u7b7164ba\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">我们知道</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">input</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">输入框的</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">type</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">哪怕是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">number</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">得到的值的类型也是</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">string</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">，如果我们想直接拿到</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">number</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">类型的数据，有不想麻烦的手动转换应该怎么办呢？</span></p><pre data-language=\"javascript\" id=\"I5e3R\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;number&quot;&gt;\n    &lt;div class=&quot;number-item&quot;&gt;\n      &lt;p&gt;无.number &lt;/p&gt;\n      &lt;input type=&quot;number&quot; v-model=&quot;number&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;number-item&quot;&gt;\n      &lt;p&gt;type:text .number &lt;/p&gt;\n      &lt;input type=&quot;text&quot; v-model.number=&quot;number1&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;number-item&quot;&gt;\n      &lt;p&gt;type:number .number &lt;/p&gt;\n      &lt;input type=&quot;number&quot; v-model.number=&quot;number2&quot;&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'lazy',\n  data () {\n    return {\n      number: 0,\n      number1: '',\n      number2: '',\n    }\n  },\n  watch: {\n    number (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number1 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n    number2 (newVal) {\n      console.log(typeof newVal, newVal)\n    },\n  }\n}</pre><p id=\"u821a9205\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><ol class=\"ne-ol\"><li id=\"ue47ec899\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">第一个输入框的类型是number，但是得到的值是string</span></li><li id=\"u4bc68a12\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">parseFloat()</span><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\"> 解析，则会返回原始的值。）</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u76d45212\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(1, 1, 1); font-size: 16px\">第三个输入框的类型是number，最后得到的值也是number</span></li></ol><p id=\"uab3ceedb\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif\" width=\"1\" id=\"u91c65a41\" class=\"ne-image\"></p><p id=\"u8d6fc7b8\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(136, 136, 136); font-size: 12px\">number.gif</span></p><h1 id=\"tKRUK\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">系统修饰符</span></h1><p id=\"ufaa7e651\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">当点击事件或者键盘事件需要系统键同时按下才触发时</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.ctrl</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.alt</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.shift</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.meta</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">可以帮大忙噢！</span></p><p id=\"u5fcc32c7\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">如下代码</span></strong></p><ol class=\"ne-ol\"><li id=\"uf606973f\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">全局监听keydown事件，尝试看</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.ctrl</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.alt</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.shift</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.meta</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">是否被按下</span></li><li id=\"u2bc1ab75\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">分别给四个按钮加上</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.ctrl</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.alt</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.shift</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.meta</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效</span></li></ol><p id=\"u91bd6c9d\" class=\"ne-p\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发</span></strong></p><pre data-language=\"javascript\" id=\"sEv8K\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;system&quot;&gt;\n    &lt;p&gt;{{ msg }}&lt;/p&gt;\n    &lt;div class=&quot;buttons&quot;&gt;\n      &lt;button @click.ctrl=&quot;onClickButon('ctrl')&quot;&gt;ctrl&lt;/button&gt;\n      &lt;button @click.alt=&quot;onClickButon('alt')&quot;&gt;alt&lt;/button&gt;\n      &lt;button @click.shift=&quot;onClickButon('shift')&quot;&gt;shift&lt;/button&gt;\n      &lt;button @click.meta=&quot;onClickButon('meta')&quot;&gt;meta&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;  \n&lt;/template&gt;\n\nexport default {\n  name: 'system',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) =&gt; {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}</pre><h2 id=\"vrHrH\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">17 .ctrl</span></h2><p id=\"u64329c6b\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"EDUwo\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">18 .alt</span></h2><p id=\"u38c5ac20\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"JBKLM\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">19 .shift</span></h2><p id=\"uf3481f3f\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"UnowS\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">20 .meta</span></h2><p id=\"u1f33c1d8\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"Xw5H6\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">21 .exact</span></h2><p id=\"ua62785aa\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">严格来说这</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.exact</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.alt</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">也可以触发</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px; background-color: rgb(251, 249, 253)\">.shift</span><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">。</span></p><p id=\"u97cf7b30\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发</span></p><p id=\"u041103f6\" class=\"ne-p\" style=\"text-align: left\"><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif\" width=\"1\" id=\"uaac7048a\" class=\"ne-image\"></p><p id=\"uf5f71344\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(136, 136, 136); font-size: 12px\">system2.gif</span></p><ol class=\"ne-ol\"><li id=\"ue2720757\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">只想某个系统修饰键按下时才触发点击</span></strong></li><li id=\"ua773930b\" style=\"text-align: left\"><strong><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">没有任何系统修饰符被按下的时候才触发点击</span></strong></li></ol><p id=\"u72b0ed7d\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">要实现上面的需求</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">.exact</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">就派上用场了，用上面的例子稍作改造</span></p><pre data-language=\"javascript\" id=\"RfSIX\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;extra&quot;&gt;\n    &lt;p&gt;{{ msg }}&lt;/p&gt;\n    &lt;div class=&quot;buttons&quot;&gt;\n      &lt;button @click.ctrl.exact=&quot;onClickButon('ctrl')&quot;&gt;ctrl&lt;/button&gt;\n      &lt;button @click.alt.exact=&quot;onClickButon('alt')&quot;&gt;alt&lt;/button&gt;\n      &lt;button @click.shift.exact=&quot;onClickButon('shift')&quot;&gt;shift&lt;/button&gt;\n      &lt;button @click.meta.exact=&quot;onClickButon('meta')&quot;&gt;meta&lt;/button&gt;\n      &lt;button @click.exact=&quot;onClickButon('非系统键')&quot;&gt;非系统键&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;  \n&lt;/template&gt;\n\nexport default {\n  name: 'extra',\n  data () {\n    return {\n      msg: ''\n    }\n  },\n  mounted () {\n    this.onListenSystemKeyDown()\n  },\n  methods: {\n    onListenSystemKeyDown () {\n      document.addEventListener('keydown', (event) =&gt; {\n        let msg = '按下了'\n\n        if (event.ctrlKey) {\n          msg += 'ctrl键'\n        } else if (event.altKey) {\n          msg += 'alt键'\n        } else if (event.shiftKey) {\n          msg += 'shift键'\n        } else if (event.metaKey) {\n          msg += 'meta键'\n        } else {\n          msg += '其他键'\n        }\n\n        this.msg = msg\n      }, false)\n    },\n    onClickButon (key) {\n      console.log(`只有同时按下${key}键，点击事件才会发生`)\n    }\n  }\n}</pre><h1 id=\"QRDoL\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">按键修饰符</span></h1><p id=\"u4d7607d4\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。</span></p><p id=\"u90021919\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">如下代码，我们分别给</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">enter</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">tab</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">delete</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">等按键指定了</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">keydown</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">事件，当在指定的输入框中按下指定的键盘，会打印出</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">enter</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">tab</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">、</span><span class=\"ne-text\" style=\"color: rgb(40, 202, 113); font-size: 14px\">delete</span><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">等，其他按键在输入框中无法触发该console</span></p><pre data-language=\"javascript\" id=\"B9SEe\" class=\"ne-codeblock\">&lt;template&gt;\n  &lt;div class=&quot;key-modifiers&quot;&gt;\n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      enter:\n      &lt;input type=&quot;text&quot; @keydown.enter=&quot;onKeydown('enter')&quot;&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      tab:\n      &lt;input type=&quot;text&quot; @keydown.tab=&quot;onKeydown('tab')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      delete:\n      &lt;input type=&quot;text&quot; @keydown.delete=&quot;onKeydown('delete')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      esc:\n      &lt;input type=&quot;text&quot; @keydown.esc=&quot;onKeydown('esc')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      space:\n      &lt;input type=&quot;text&quot; @keydown.space=&quot;onKeydown('space')&quot;&gt;\n    &lt;/div&gt; \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      up:\n      &lt;input type=&quot;text&quot; @keydown.up=&quot;onKeydown('up')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      down:\n      &lt;input type=&quot;text&quot; @keydown.down=&quot;onKeydown('down')&quot;&gt;\n    &lt;/div&gt; \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      left:\n      &lt;input type=&quot;text&quot; @keydown.left=&quot;onKeydown('left')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      right:\n      &lt;input type=&quot;text&quot; @keydown.right=&quot;onKeydown('right')&quot;&gt;\n    &lt;/div&gt;  \n    \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      page-down:\n      &lt;input type=&quot;text&quot; @keydown.page-down=&quot;onKeydown('page-down')&quot;&gt;\n    &lt;/div&gt;  \n    &lt;div class=&quot;key-modifiers-item&quot;&gt;\n      page-up:\n      &lt;input type=&quot;text&quot; @keydown.page-up=&quot;onKeydown('page-up')&quot;&gt;\n    &lt;/div&gt;  \n  &lt;/div&gt;\n&lt;/template&gt;\n\nexport default {\n  name: 'keyModifiers',\n  methods: {\n    onKeydown (keyName) {\n      console.log(keyName)\n    }\n  }\n}\n</pre><h2 id=\"C8jGV\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">22 .enter</span></h2><p id=\"ud5f87782\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"Jw4r0\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">23 .tab</span></h2><p id=\"u9c9e02bc\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"U7gUW\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">24 .delete</span></h2><p id=\"uc1a938d3\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"q769F\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">25 .esc</span></h2><p id=\"ub6706d3d\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"lSVHX\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">26 .space</span></h2><p id=\"u71878930\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"CJR2h\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">27 .up</span></h2><p id=\"ub10f88fd\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"jtFso\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">28 .down</span></h2><p id=\"u9dfc216b\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"KcsBn\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">29 .left</span></h2><p id=\"u700fb838\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"Mrnjd\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">30 .right</span></h2><p id=\"ub38af451\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"P5Hyd\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">31 .page-down</span></h2><p id=\"ufd717625\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 id=\"vV3ei\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 18px\">32 .page-up</span></h2><p id=\"u8e8f7298\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h1 id=\"iSrWh\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(72, 179, 120); font-size: 20px\">如何自定义按键修饰符</span></h1><p id=\"ue30e99ce\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(89, 89, 89); font-size: 15px; background-color: rgb(251, 249, 253)\">vue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？</span></p><p id=\"uac1c7481\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(74, 74, 74); font-size: 16px\">通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。</span></p><p id=\"ub35a9201\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><pre data-language=\"javascript\" id=\"yT5kG\" class=\"ne-codeblock\">Vue.config.keyCodes = {\n  q: 81\n}\n\n&lt;div class=&quot;custom&quot;&gt;\n  &lt;input type=&quot;text&quot; @keydown.q=&quot;f1Keydown&quot;&gt;\n&lt;/div&gt;\n\nexport default {\n  name: 'custom',\n  methods: {\n    f1Keydown () {\n      console.log('按下了q')\n    }\n  }\n}</pre><p id=\"u375923cb\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\" style=\"color: rgb(171, 178, 191); font-size: 12px; background-color: rgb(40, 44, 52)\"><br /></span></p><p id=\"u99728a98\" class=\"ne-p\" style=\"text-align: left\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"pxcyU\" id=\"pxcyU\"><br></h1><h1 data-lake-id=\"th4rJ\" id=\"th4rJ\" style=\"text-align: center\"><span data-lake-id=\"ud7ebaac4\" id=\"ud7ebaac4\" style=\"color: rgb(72, 179, 120)\">前言</span></h1><p data-lake-id=\"ua1c2d6c9\" id=\"ua1c2d6c9\" style=\"text-align: left\"><span data-lake-id=\"u949c65d8\" id=\"u949c65d8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！</span></p><p data-lake-id=\"uae0d1073\" id=\"uae0d1073\" style=\"text-align: left\"><span data-lake-id=\"u549699a9\" id=\"u549699a9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">耽误您15分钟您可以收获：</span></p><ol list=\"u8ac9aa71\"><li fid=\"ub7e94663\" data-lake-id=\"u614a523c\" id=\"u614a523c\" style=\"text-align: left\"><span data-lake-id=\"u368dcddb\" id=\"u368dcddb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用</span></li><li fid=\"ub7e94663\" data-lake-id=\"uc2cb978d\" id=\"uc2cb978d\" style=\"text-align: left\"><span data-lake-id=\"ufb257f98\" id=\"ufb257f98\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如何利用webpack动态注册vue路由，再也不手写路由配置啦！</span></li></ol><p data-lake-id=\"udb6522f9\" id=\"udb6522f9\" style=\"text-align: left\"><span data-lake-id=\"udfa5e871\" id=\"udfa5e871\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">文章中例子都放在了github源码上，也可以点击直接看例子</span></p><h1 data-lake-id=\"Q2cOK\" id=\"Q2cOK\" style=\"text-align: center\"><span data-lake-id=\"uaf42a95d\" id=\"uaf42a95d\" style=\"color: rgb(72, 179, 120)\">如何动态注册路由？</span></h1><p data-lake-id=\"ua21b7e1e\" id=\"ua21b7e1e\" style=\"text-align: left\"><span data-lake-id=\"u482de697\" id=\"u482de697\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.</span></p><p data-lake-id=\"u3ecae803\" id=\"u3ecae803\" style=\"text-align: left\"><span data-lake-id=\"u0bb0022a\" id=\"u0bb0022a\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">有什么办法可以帮我们自动完成路由注册呢？</span></p><h2 data-lake-id=\"kP2Yc\" id=\"kP2Yc\" style=\"text-align: center\"><span data-lake-id=\"uf42b2062\" id=\"uf42b2062\" style=\"color: rgb(72, 179, 120)\">1. 文件目录结构</span></h2><p data-lake-id=\"u5449f10e\" id=\"u5449f10e\" style=\"text-align: left\"><span data-lake-id=\"u106b9481\" id=\"u106b9481\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">目录结构（已去除其他文件目录）大概如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E2%94%9C%E2%94%80%E2%94%80%20package.json%5Cn%E2%94%94%E2%94%80%E2%94%80%20src%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20App.vue%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20main.js%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20router.js%5Cn%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20views%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20About.vue%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20Home.vue%5Cn%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20modifiers%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20capture.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20once.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20order.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20passive.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20prevent.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20self.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20stop.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20...%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22kC7Aq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"rxTi1\" id=\"rxTi1\" style=\"text-align: center\"><span data-lake-id=\"uc0af5740\" id=\"uc0af5740\" style=\"color: rgb(72, 179, 120)\">2. 期望的路由配置</span></h2><p data-lake-id=\"uedb39fa1\" id=\"uedb39fa1\" style=\"text-align: left\"><span data-lake-id=\"u40feb4b5\" id=\"u40feb4b5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">最终给到</span><span data-lake-id=\"ud9674ed2\" id=\"ud9674ed2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">vue-router</span><span data-lake-id=\"u247f9cbc\" id=\"u247f9cbc\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">的配置大概长下面这个样子，每个配置最重要的部分分别是</span><span data-lake-id=\"u50928c85\" id=\"u50928c85\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">path</span><span data-lake-id=\"ufb1f6842\" id=\"ufb1f6842\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u2c11bb8a\" id=\"u2c11bb8a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">name</span><span data-lake-id=\"ue358c909\" id=\"ue358c909\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和</span><span data-lake-id=\"ufc96942a\" id=\"ufc96942a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">component</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22%2Fhome%5C%22%2C%5Cn%20%20%20%20%5C%22name%5C%22%3A%20%5C%22home%5C%22%2C%5Cn%20%20%20%20%5C%22component%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Home%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22methods%5C%22%3A%20%7B%7D%2C%5Cn%20%20%20%20%20%20%5C%22staticRenderFns%5C%22%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%5C%22_compiled%5C%22%3A%20true%2C%5Cn%20%20%20%20%20%20%5C%22_scopeId%5C%22%3A%20%5C%22data-v-fae5bece%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22beforeCreate%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22beforeDestroy%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22__file%5C%22%3A%20%5C%22src%2Fviews%2FHome.vue%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22%2Fmodifiers%2Fcapture%5C%22%2C%5Cn%20%20%20%20%5C%22name%5C%22%3A%20%5C%22modifiersCapture%5C%22%2C%5Cn%20%20%20%20%5C%22component%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22capture%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22methods%5C%22%3A%20%7B%7D%2C%5Cn%20%20%20%20%20%20%5C%22staticRenderFns%5C%22%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%5C%22_compiled%5C%22%3A%20true%2C%5Cn%20%20%20%20%20%20%5C%22_scopeId%5C%22%3A%20%5C%22data-v-63b4eeee%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22beforeCreate%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22beforeDestroy%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22__file%5C%22%3A%20%5C%22src%2Fviews%2Fmodifiers%2Fcapture.vue%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20...%20%2F%2F%20%E5%85%B6%E4%BB%96%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TjFd3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf5b53993\" id=\"uf5b53993\" style=\"text-align: left\"><span data-lake-id=\"uf9af3215\" id=\"uf9af3215\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /><br /></span></p><h2 data-lake-id=\"r0SDU\" id=\"r0SDU\" style=\"text-align: center\"><span data-lake-id=\"ue3d6d947\" id=\"ue3d6d947\" style=\"color: rgb(72, 179, 120)\">3. require.context实现动态注册路由</span></h2><p data-lake-id=\"uec45424d\" id=\"uec45424d\" style=\"text-align: left\"><span data-lake-id=\"ub16ee7c6\" id=\"ub16ee7c6\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20registerRoutes%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20contextInfo%20%3D%20require.context('.%2Fviews'%2C%20true%2C%20%2F.vue%24%2F)%5Cn%20%20const%20routes%20%3D%20contextInfo.keys().map((filePath)%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20filePath%20%E5%BD%A2%E5%A6%82%20.%2FHome.vue%E3%80%81.%2Fmodifiers%2Fcapture.vue%5Cn%20%20%20%20%2F%2F%20path%E6%88%91%E4%BB%AC%E5%B8%8C%E6%9C%9B%E6%98%AF%2Fhome%E3%80%81%2Fmodifiers%2Fcapture%5Cn%20%20%20%20%2F%2F%20%E6%89%80%E4%BB%A5%E9%9C%80%E8%A6%81%E6%8A%8A%E5%BC%80%E5%A4%B4%E7%9A%84.%2F%E5%92%8C.vue%E9%83%BD%E6%9B%BF%E6%8D%A2%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20const%20path%20%3D%20filePath.toLowerCase().replace(%2F%5E%5C%5C.%7C%5C%5C.vue%2Fg%2C%20'')%5Cn%20%20%20%20%2F%2F%20name%E7%9A%84%E8%AF%9D%E5%B0%86%2Fhome%E3%80%81%2Fmodifiers%2Fcapture%E8%BD%AC%E6%88%90%E5%B0%8F%E9%A9%BC%E5%B3%B0%E5%8D%B3%E5%8F%AF%5Cn%20%20%20%20%2F%2F%20%E6%8A%8A%E5%BC%80%E5%A4%B4%E7%9A%84%2F%E5%85%88%E6%9B%BF%E6%8D%A2%E6%8E%89%EF%BC%8C%E5%86%8D%E6%8A%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%2F%E5%90%8E%E7%9A%84%E5%8D%95%E8%AF%8D%E5%8F%98%E6%88%90%E5%A4%A7%E5%86%99%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%5Cn%20%20%20%20const%20name%20%3D%20path.replace(%2F%5E%5C%5C%2F%2F%2C%20'').replace(%2F%5C%5C%2F(%5C%5Cw)%2F%2C%20(%240%2C%20%241)%20%3D%3E%20%241.toUpperCase())%5Cn%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87require%E5%8E%BB%E8%AF%BB%E5%8F%96.vue%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%5Cn%20%20%20%20const%20component%20%3D%20require(%60.%2Fviews%24%7BfilePath.replace(%2F%5E%5C%5C.%2F%2C%20'')%7D%60).default%5Cn%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20path%2C%5Cn%20%20%20%20%20%20name%2C%5Cn%20%20%20%20%20%20component%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%5Cn%5Cn%20%20return%20routes%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VTVVx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6638b89b\" id=\"u6638b89b\" style=\"text-align: left\"><span data-lake-id=\"ud6ac435a\" id=\"ud6ac435a\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u45fc22ff\" id=\"u45fc22ff\" style=\"text-align: left\"><strong><span data-lake-id=\"uab21980c\" id=\"uab21980c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">效果</span></strong></p><p data-lake-id=\"u55167b83\" id=\"u55167b83\" style=\"text-align: left\"><span data-lake-id=\"u06357184\" id=\"u06357184\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果</span></p><p data-lake-id=\"u52d96441\" id=\"u52d96441\" style=\"text-align: left\"><span data-lake-id=\"ueae0fc77\" id=\"ueae0fc77\" class=\"lake-fontsize-12\" style=\"color: rgb(63, 63, 63)\"><br /><br /></span></p><h1 data-lake-id=\"C7PDV\" id=\"C7PDV\" style=\"text-align: center\"><span data-lake-id=\"u39254a9a\" id=\"u39254a9a\" style=\"color: rgb(72, 179, 120)\">事件修饰符</span></h1><h2 data-lake-id=\"NdTWe\" id=\"NdTWe\" style=\"text-align: center\"><span data-lake-id=\"ud6ea17ec\" id=\"ud6ea17ec\" style=\"color: rgb(72, 179, 120)\">1. 阻止冒泡的两种方式</span></h2><p data-lake-id=\"u432abee9\" id=\"u432abee9\" style=\"text-align: left\"><span data-lake-id=\"u46fc4ef0\" id=\"u46fc4ef0\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22parent%5C%22%20%40click%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'stop'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Jej8E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue288b8af\" id=\"ue288b8af\" style=\"text-align: left\"><span data-lake-id=\"u9396e492\" id=\"u9396e492\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><p data-lake-id=\"u06d45470\" id=\"u06d45470\" style=\"text-align: left\"><span data-lake-id=\"ud2e052dd\" id=\"ud2e052dd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点</span><strong><span data-lake-id=\"uf5a851d8\" id=\"uf5a851d8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">击子节点</span></strong><span data-lake-id=\"u43a611fd\" id=\"u43a611fd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的时候因为事件冒泡的缘故不仅会打印出</span><span data-lake-id=\"u13feaf96\" id=\"u13feaf96\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是儿子</span><span data-lake-id=\"u705eafb4\" id=\"u705eafb4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">还会打印</span><span data-lake-id=\"u954d7539\" id=\"u954d7539\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是爸爸</span><span data-lake-id=\"u970bba11\" id=\"u970bba11\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">。有什么办法可以阻止子节点的</span><strong><span data-lake-id=\"uebce80bc\" id=\"uebce80bc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件冒泡</span></strong><span data-lake-id=\"ubc89fdf8\" id=\"ubc89fdf8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">呢？</span></p><p data-lake-id=\"u31500ace\" id=\"u31500ace\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif%22%2C%22taskId%22%3A%22u3a2a87aa-6cbd-4bcb-a622-0c7fdbb416c%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ufdb6c334%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1a479574\" id=\"u1a479574\"><br></p><h3 data-lake-id=\"oWzps\" id=\"oWzps\" style=\"text-align: left\"><span data-lake-id=\"u79535780\" id=\"u79535780\" style=\"color: rgb(72, 179, 120)\">1 .stop</span></h3><p data-lake-id=\"u4de78f22\" id=\"u4de78f22\" style=\"text-align: left\"><span data-lake-id=\"u23b8551e\" id=\"u23b8551e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。</span></p><p data-lake-id=\"u14416e59\" id=\"u14416e59\" style=\"text-align: left\"><span data-lake-id=\"uf9999d68\" id=\"uf9999d68\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">当添加上</span><span data-lake-id=\"u58f2808f\" id=\"u58f2808f\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.stop</span><span data-lake-id=\"u1a0fccf0\" id=\"u1a0fccf0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符时，只会出现</span><span data-lake-id=\"u41b97183\" id=\"u41b97183\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是儿子</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22parent%5C%22%20%40click%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click.stop%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TVv7R%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"uNVNl\" id=\"uNVNl\" style=\"text-align: left\"><span data-lake-id=\"u8c05b7e8\" id=\"u8c05b7e8\" style=\"color: rgb(72, 179, 120)\">2. event.stopPropagation</span></h3><p data-lake-id=\"u71246161\" id=\"u71246161\" style=\"text-align: left\"><span data-lake-id=\"ud417da85\" id=\"ud417da85\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当然了，我们也可以通过调用</span><span data-lake-id=\"uf35db083\" id=\"uf35db083\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">event.stopPropagation</span><span data-lake-id=\"u6419d384\" id=\"u6419d384\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20name%3A%20'stop'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickChild%20(event)%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90')%5Cn%20%20%20%20%20%20event.stopPropagation()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22JJeve%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"IIPEs\" id=\"IIPEs\" style=\"text-align: center\"><span data-lake-id=\"udce42c34\" id=\"udce42c34\" style=\"color: rgb(72, 179, 120)\">2. 阻止默认事件的两种方式</span></h2><p data-lake-id=\"ufcf19143\" id=\"ufcf19143\" style=\"text-align: left\"><span data-lake-id=\"u2d5624cd\" id=\"u2d5624cd\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue中阻止冒泡有两种方式，那阻止默认事件呢？</span></p><h3 data-lake-id=\"fkfpq\" id=\"fkfpq\" style=\"text-align: left\"><span data-lake-id=\"uf2f67f1a\" id=\"uf2f67f1a\" style=\"color: rgb(72, 179, 120)\">1 .prevent</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22prevent%5C%22%3E%5Cn%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20%40click%3D%5C%22onNoPrevent%5C%22%3E%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%3C%2Fa%3E%5Cn%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20%40click.prevent%3D%5C%22onPrevent%5C%22%3E%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%3C%2Fa%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'prevent'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onNoPrevent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%9C%AA%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onPrevent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22N0T9h%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ubcb1c305\" id=\"ubcb1c305\" style=\"text-align: left\"><span data-lake-id=\"u2d35d84e\" id=\"u2d35d84e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">只要添加</span><span data-lake-id=\"ue6140935\" id=\"ue6140935\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.prevent</span><span data-lake-id=\"uc56c87db\" id=\"uc56c87db\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">轻松实现阻止默认事件</span></p><h3 data-lake-id=\"B1pgj\" id=\"B1pgj\"><span data-lake-id=\"u5999797f\" id=\"u5999797f\">2.event.preventDefault()</span></h3><p data-lake-id=\"uee407897\" id=\"uee407897\" style=\"text-align: left\"><span data-lake-id=\"u5b1b8474\" id=\"u5b1b8474\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和阻止冒泡一样，我们也可以通过调用事件对象的</span><span data-lake-id=\"u65937e9b\" id=\"u65937e9b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">preventDefault</span><span data-lake-id=\"uf2b06ca1\" id=\"uf2b06ca1\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">方法来阻止默认事件</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20name%3A%20'prevent'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onPrevent%20(event)%20%7B%5Cn%20%20%20%20%20%20console.log('%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%20%20event.preventDefault()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22o9tKY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"LqMyK\" id=\"LqMyK\" style=\"text-align: center\"><span data-lake-id=\"u3fc24f1c\" id=\"u3fc24f1c\" style=\"color: rgb(72, 179, 120)\">3 .capture</span></h2><p data-lake-id=\"u6f06ee36\" id=\"u6f06ee36\" style=\"text-align: left\"><span data-lake-id=\"u234c9fe4\" id=\"u234c9fe4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">默认情况下，事件流是以</span><span data-lake-id=\"ud8b75d53\" id=\"ud8b75d53\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">冒泡</span><span data-lake-id=\"u2a76bcce\" id=\"u2a76bcce\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">(由里向外)的形式传递的，如果想以</span><span data-lake-id=\"uce4ea38d\" id=\"uce4ea38d\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">捕获（由外向里）</span><span data-lake-id=\"u83b8d4b5\" id=\"u83b8d4b5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">的形式应该怎么办呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22capture%20parent%5C%22%20%40click.capture%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E7%88%B6%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click.capture%3D%5C%22onClickChild%5C%22%3E%E8%87%AA%E8%8A%82%E7%82%B9%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'capture'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OnlN9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6b3fafbd\" id=\"u6b3fafbd\" style=\"text-align: left\"><span data-lake-id=\"ue99a76c8\" id=\"ue99a76c8\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u2016e654\" id=\"u2016e654\" style=\"text-align: left\"><span data-lake-id=\"u54bf58a7\" id=\"u54bf58a7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不加</span><span data-lake-id=\"u3798729e\" id=\"u3798729e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">catpture</span><span data-lake-id=\"u86add686\" id=\"u86add686\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符，点击</span><strong><span data-lake-id=\"u2dba5fb8\" id=\"u2dba5fb8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">子节点</span></strong><span data-lake-id=\"ue02add94\" id=\"ue02add94\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了</span></p><h2 data-lake-id=\"HAwJz\" id=\"HAwJz\" style=\"text-align: center\"><span data-lake-id=\"uf43933ad\" id=\"uf43933ad\" style=\"color: rgb(72, 179, 120)\">4 .self</span></h2><p data-lake-id=\"uf3b37375\" id=\"uf3b37375\" style=\"text-align: left\"><span data-lake-id=\"ubd8fdafe\" id=\"ubd8fdafe\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">只有当</span><span data-lake-id=\"u63f012a3\" id=\"u63f012a3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">event.target</span><span data-lake-id=\"u75d3ea2a\" id=\"u75d3ea2a\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">是当前元素自身时才会触发事件回调函数</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22self%5C%22%20%40click.self%3D%5C%22onClickSelf%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22inner%5C%22%20%40click%3D%5C%22onClickInner%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'self'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickSelf%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AFself%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickInner%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AFinner%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YKen2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5c09fae3\" id=\"u5c09fae3\" style=\"text-align: left\"><span data-lake-id=\"u88075ea1\" id=\"u88075ea1\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u73c55023\" id=\"u73c55023\" style=\"text-align: left\"><span data-lake-id=\"ub867409b\" id=\"ub867409b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不加</span><span data-lake-id=\"ua2869049\" id=\"ua2869049\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u48148729\" id=\"u48148729\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符的话，点击</span><span data-lake-id=\"u098ca11f\" id=\"u098ca11f\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">inner</span><span data-lake-id=\"u49cdf060\" id=\"u49cdf060\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">节点也会触发</span><span data-lake-id=\"u6328bae0\" id=\"u6328bae0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u8faf3ca1\" id=\"u8faf3ca1\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的事件，加了之后只有触发事件的元素本身是</span><span data-lake-id=\"ua33fa551\" id=\"ua33fa551\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u18127f2b\" id=\"u18127f2b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">，才会打印出</span><span data-lake-id=\"uf1887439\" id=\"uf1887439\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是self节点</span></p><h2 data-lake-id=\"RQFsF\" id=\"RQFsF\" style=\"text-align: center\"><span data-lake-id=\"u925db73d\" id=\"u925db73d\" style=\"color: rgb(72, 179, 120)\">暂停一下：修饰符的顺序如何理解？</span></h2><p data-lake-id=\"u849019ff\" id=\"u849019ff\" style=\"text-align: left\"><span data-lake-id=\"u8c705066\" id=\"u8c705066\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话</span></p><p data-lake-id=\"u9c96fbfa\" id=\"u9c96fbfa\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif%22%2C%22taskId%22%3A%22u4fe3b80c-310b-44fe-8997-3fbdc0a61e3%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ue6c22681%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1a23ba6b\" id=\"u1a23ba6b\" style=\"text-align: center\"><span data-lake-id=\"u3c25f557\" id=\"u3c25f557\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">image.png</span></p><p data-lake-id=\"u13e865eb\" id=\"u13e865eb\" style=\"text-align: left\"><strong><span data-lake-id=\"u9a2df4b0\" id=\"u9a2df4b0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">怎么理解呢？我们来看两个栗子</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22order%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22order-0%5C%22%3E%5Cn%20%20%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20class%3D%5C%22order-parent%5C%22%20%40click.self.prevent%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E4%BC%9A%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%5Cn%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%20class%3D%5C%22order-child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fa%3E%5Cn%20%20%20%20%20%20%3Chr%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22order-2%5C%22%3E%5Cn%20%20%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20class%3D%5C%22order-parent%5C%22%20%40click.prevent.self%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%5Cn%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%20class%3D%5C%22order-child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fa%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'order'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ik1zw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u45abffaf\" id=\"u45abffaf\" style=\"text-align: left\"><span data-lake-id=\"ufd2f59c6\" id=\"ufd2f59c6\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？</span></p><ol list=\"u64d31c97\"><li fid=\"ud87c03ab\" data-lake-id=\"u026e0880\" id=\"u026e0880\" style=\"text-align: left\"><span data-lake-id=\"ufa6517e8\" id=\"ufa6517e8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件</span></li><li fid=\"ud87c03ab\" data-lake-id=\"u699c1bdc\" id=\"u699c1bdc\" style=\"text-align: left\"><span data-lake-id=\"uc61fc751\" id=\"uc61fc751\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点击下面的父节点会打印出</span><strong><span data-lake-id=\"u4f800534\" id=\"u4f800534\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">我是父节点</span></strong><span data-lake-id=\"u2a7916b7\" id=\"u2a7916b7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">，但是</span><strong><span data-lake-id=\"uc2122e29\" id=\"uc2122e29\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不会跳转掘金</span></strong></li><li fid=\"ud87c03ab\" data-lake-id=\"u3d45e281\" id=\"u3d45e281\" style=\"text-align: left\"><span data-lake-id=\"u499435e9\" id=\"u499435e9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点击上面的父节点</span><strong><span data-lake-id=\"u3a7c27b9\" id=\"u3a7c27b9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会</span></strong><span data-lake-id=\"u729cae55\" id=\"u729cae55\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">打印出</span><strong><span data-lake-id=\"uea986708\" id=\"uea986708\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">我是父节点</span></strong><span data-lake-id=\"u7f4cbbcc\" id=\"u7f4cbbcc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">,</span><strong><span data-lake-id=\"ub5a58ef7\" id=\"ub5a58ef7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">也不会跳转掘金</span></strong></li></ol><p data-lake-id=\"u3f69b92c\" id=\"u3f69b92c\" style=\"text-align: left\"><span data-lake-id=\"uf3788ad8\" id=\"uf3788ad8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是</span><strong><span data-lake-id=\"u04a696d9\" id=\"u04a696d9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会</span></strong></p><p data-lake-id=\"uc38b3260\" id=\"uc38b3260\" style=\"text-align: left\"><strong><span data-lake-id=\"u02e07e82\" id=\"u02e07e82\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">为什么？</span></strong></p><p data-lake-id=\"u215be7d4\" id=\"u215be7d4\" style=\"text-align: left\"><span data-lake-id=\"u1d13e6ec\" id=\"u1d13e6ec\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">a@click.self.prevent=&quot;onClickParent&quot;</span><span data-lake-id=\"u9727462f\" id=\"u9727462f\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行</span><span data-lake-id=\"ue5642cac\" id=\"ue5642cac\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"uab01d356\" id=\"uab01d356\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调。</span></p><p data-lake-id=\"ub1da1b63\" id=\"ub1da1b63\" style=\"text-align: left\"><span data-lake-id=\"uef142f1e\" id=\"uef142f1e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就</span><span data-lake-id=\"u0ad19cbd\" id=\"u0ad19cbd\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">不会阻止默认事件</span><span data-lake-id=\"u245939eb\" id=\"u245939eb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">(此时也就发生跳转了)，当然也不会触发</span><span data-lake-id=\"u89f45faf\" id=\"u89f45faf\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"uf180d33b\" id=\"uf180d33b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调</span></p><p data-lake-id=\"uabac06b5\" id=\"uabac06b5\" style=\"text-align: left\"><span data-lake-id=\"u3d58dd5a\" id=\"u3d58dd5a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">同理来我们分析一下</span><span data-lake-id=\"ub392cdcb\" id=\"ub392cdcb\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">a@click.prevent.self=&quot;onClickParent&quot;</span></p><p data-lake-id=\"ud0b596b4\" id=\"ud0b596b4\" style=\"text-align: left\"><span data-lake-id=\"u8e45d2f4\" id=\"u8e45d2f4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行</span><span data-lake-id=\"u602f271b\" id=\"u602f271b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"u97fc194e\" id=\"u97fc194e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调函数。</span></p><p data-lake-id=\"ua240052f\" id=\"ua240052f\" style=\"text-align: left\"><br></p><p data-lake-id=\"ucb88ba29\" id=\"ucb88ba29\" style=\"text-align: left\"><strong><span data-lake-id=\"u3b1d9624\" id=\"u3b1d9624\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回过头看，你理解事件的顺序含义了吗？</span></strong></p><h2 data-lake-id=\"DH91z\" id=\"DH91z\" style=\"text-align: center\"><span data-lake-id=\"u6a50e933\" id=\"u6a50e933\" style=\"color: rgb(72, 179, 120)\">5. once</span></h2><p data-lake-id=\"u06a5cb91\" id=\"u06a5cb91\" style=\"text-align: left\"><span data-lake-id=\"uc2c3022e\" id=\"uc2c3022e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">顾名思义，事件只会触发一次</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22once%5C%22%20%40click.once%3D%5C%22onClickOnce%5C%22%3E%5Cn%20%20%20%20%E5%8F%AA%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'once'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickOnce%20()%20%7B%5Cn%20%20%20%20%20%20console.log('once%EF%BC%8C%E6%88%91%E5%8F%AA%E4%BC%9A%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ODOcx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ucfa4a5b4\" id=\"ucfa4a5b4\" style=\"text-align: left\"><span data-lake-id=\"u3ad3eb1c\" id=\"u3ad3eb1c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">触发一次点击之后，任我再怎么点，回调怎也不会触发了。</span></p><h2 data-lake-id=\"rB1Mt\" id=\"rB1Mt\" style=\"text-align: center\"><span data-lake-id=\"ueb7100c6\" id=\"ueb7100c6\" style=\"color: rgb(72, 179, 120)\">6 .native</span></h2><p data-lake-id=\"u918ccba9\" id=\"u918ccba9\" style=\"text-align: left\"><span data-lake-id=\"u25b855d6\" id=\"u25b855d6\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用</span><span data-lake-id=\"u3185ed9a\" id=\"u3185ed9a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.native</span><span data-lake-id=\"u48bab5c4\" id=\"u48bab5c4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">修饰符可以帮我们办到这点</span></p><p data-lake-id=\"uc9adf63a\" id=\"uc9adf63a\" style=\"text-align: left\"><strong><span data-lake-id=\"u04e5b17b\" id=\"u04e5b17b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">native.vue</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22native-custom%5C%22%3E%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown%3D%5C%22onKeydown%5C%22%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'nativeCustom'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20()%20%7B%5Cn%20%20%20%20%20%20this.%24emit('onKeydown')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tr0Jb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9d802653\" id=\"u9d802653\" style=\"text-align: left\"><strong><span data-lake-id=\"u52f2daa8\" id=\"u52f2daa8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">custom.vue</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22native%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E5%8A%A0%E4%B8%8A.native%E4%B9%8B%E5%90%8E%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E6%89%8D%E5%BE%97%E4%BB%A5%E7%9B%91%E5%90%AC%E6%88%90%E5%8A%9F%20--%3E%5Cn%20%20%20%20%3CNativeCustom%20%40onKeydown%3D%5C%22onKeydown%5C%22%20%40click.native%3D%5C%22onClick%5C%22%20%2F%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnimport%20NativeCustom%20from%20'..%2F..%2Fcomponents%2Fnative.vue'%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'native'%2C%5Cn%20%20components%3A%20%7B%5Cn%20%20%20%20NativeCustom%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20()%20%7B%5Cn%20%20%20%20%20%20console.log('onKeydown')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClick%20()%20%7B%5Cn%20%20%20%20%20%20console.log('onClick')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22muZrE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"R2RfU\" id=\"R2RfU\" style=\"text-align: center\"><span data-lake-id=\"ud6d71723\" id=\"ud6d71723\" style=\"color: rgb(72, 179, 120)\">7 .passive</span></h2><p data-lake-id=\"u3aaf4433\" id=\"u3aaf4433\" style=\"text-align: left\"><span data-lake-id=\"u61a7c823\" id=\"u61a7c823\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue对应 </span><span data-lake-id=\"uf6ccf160\" id=\"uf6ccf160\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">addEventListener</span><span data-lake-id=\"u294c6740\" id=\"u294c6740\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 中的 </span><span data-lake-id=\"uff59dcbc\" id=\"uff59dcbc\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">passive</span><span data-lake-id=\"u2f11a117\" id=\"u2f11a117\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 选项提供了 </span><span data-lake-id=\"u01beea48\" id=\"u01beea48\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.passive</span><span data-lake-id=\"u6eda2642\" id=\"u6eda2642\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 修饰符</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3C!--%20%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%20(%E5%8D%B3%E6%BB%9A%E5%8A%A8%E8%A1%8C%E4%B8%BA)%20%E5%B0%86%E4%BC%9A%E7%AB%8B%E5%8D%B3%E8%A7%A6%E5%8F%91%20--%3E%20%5Cn%3C!--%20%E8%80%8C%E4%B8%8D%E4%BC%9A%E7%AD%89%E5%BE%85%20%60onScroll%60%20%E5%AE%8C%E6%88%90%20--%3E%20%5Cn%3C!--%20%E8%BF%99%E5%85%B6%E4%B8%AD%E5%8C%85%E5%90%AB%20%60event.preventDefault()%60%20%E7%9A%84%E6%83%85%E5%86%B5%20--%3E%20%5Cn%5Cn%3Cdiv%20v-on%3Ascroll.passive%3D%5C%22onScroll%5C%22%3E...%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VOkR9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u02d48cc4\" id=\"u02d48cc4\" style=\"text-align: left\"><strong><span data-lake-id=\"u328905dc\" id=\"u328905dc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p data-lake-id=\"ua36224c6\" id=\"ua36224c6\" style=\"text-align: left\"><strong><span data-lake-id=\"u01dd724a\" id=\"u01dd724a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p data-lake-id=\"ua638a5ee\" id=\"ua638a5ee\" style=\"text-align: left\"><strong><span data-lake-id=\"u336d4982\" id=\"u336d4982\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><h1 data-lake-id=\"qD7c9\" id=\"qD7c9\" style=\"text-align: center\"><span data-lake-id=\"uc648cef1\" id=\"uc648cef1\" style=\"color: rgb(72, 179, 120)\">v-bind修饰符</span></h1><h2 data-lake-id=\"Z7kub\" id=\"Z7kub\" style=\"text-align: center\"><span data-lake-id=\"ubc4f71b1\" id=\"ubc4f71b1\" style=\"color: rgb(72, 179, 120)\">8 .sync</span></h2><p data-lake-id=\"u1e9120fe\" id=\"u1e9120fe\" style=\"text-align: left\"><span data-lake-id=\"u48435c66\" id=\"u48435c66\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当我们想要在</span><span data-lake-id=\"uef6a9e7e\" id=\"uef6a9e7e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">父组件</span><span data-lake-id=\"u4c841f64\" id=\"u4c841f64\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和</span><span data-lake-id=\"u8e925e02\" id=\"u8e925e02\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">子组件</span><span data-lake-id=\"ud8be41d8\" id=\"ud8be41d8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要</span><span data-lake-id=\"u69239036\" id=\"u69239036\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.sync</span><span data-lake-id=\"u3a7436a9\" id=\"u3a7436a9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">修饰符即可办到</span></p><p data-lake-id=\"u5f314776\" id=\"u5f314776\" style=\"text-align: left\"><br></p><h2 data-lake-id=\"KZCOv\" id=\"KZCOv\" style=\"text-align: center\"><span data-lake-id=\"ua139b88e\" id=\"ua139b88e\" style=\"color: rgb(72, 179, 120)\">9 .camel</span></h2><p data-lake-id=\"ub609f4e9\" id=\"ub609f4e9\" style=\"text-align: left\"><span data-lake-id=\"u2dc5d27b\" id=\"u2dc5d27b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.camel</span><span data-lake-id=\"ufee66121\" id=\"ufee66121\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 修饰符允许在使用 DOM 模板时将 </span><span data-lake-id=\"u07193159\" id=\"u07193159\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">v-bind</span><span data-lake-id=\"u436715b7\" id=\"u436715b7\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> property 名称驼峰化，例如 SVG 的 </span><span data-lake-id=\"uc28a4c91\" id=\"uc28a4c91\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">viewBox</span><span data-lake-id=\"ubf73fd3e\" id=\"ubf73fd3e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> property：</span><span data-lake-id=\"u5f39a61c\" id=\"u5f39a61c\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span></p><h2 data-lake-id=\"gux0B\" id=\"gux0B\" style=\"text-align: center\"><span data-lake-id=\"uacc6265c\" id=\"uacc6265c\" style=\"color: rgb(72, 179, 120)\">10 .prop</span></h2><p data-lake-id=\"ud239f232\" id=\"ud239f232\" style=\"text-align: left\"><span data-lake-id=\"u467e8f95\" id=\"u467e8f95\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">关于.prop修饰符官网只有这句话</span><span data-lake-id=\"ub1d2b259\" id=\"ub1d2b259\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> </span><span data-lake-id=\"u96392325\" id=\"u96392325\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.prop</span><span data-lake-id=\"u6de76d07\" id=\"u6de76d07\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。</span></p><p data-lake-id=\"u83eab9d2\" id=\"u83eab9d2\" style=\"text-align: left\"><strong><span data-lake-id=\"ud9a6307e\" id=\"ud9a6307e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">有啥作用？</span></strong></p><ol list=\"u98a92168\"><li fid=\"u377ad7c3\" data-lake-id=\"u0c2d02f3\" id=\"u0c2d02f3\" style=\"text-align: left\"><span data-lake-id=\"ub7475f2b\" id=\"ub7475f2b\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">通过自定义属性存储变量，避免暴露数据</span></li><li fid=\"u377ad7c3\" data-lake-id=\"ufab4e34e\" id=\"ufab4e34e\" style=\"text-align: left\"><span data-lake-id=\"u5ee521dc\" id=\"u5ee521dc\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">防止污染 HTML 结构</span></li></ol><p data-lake-id=\"u8e8dcaef\" id=\"u8e8dcaef\" style=\"text-align: left\"><span data-lake-id=\"ue93e2c10\" id=\"ue93e2c10\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">比如有以下代码</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22prop%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22prop-item%5C%22%20%3Amy-name%3D%5C%22prop%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%2F%2F%20%E6%9C%80%E7%BB%88%E5%8F%98%E6%88%90%E4%BA%86%20%3Cdiv%20my-name%3D%5C%22hello%20prop%5C%22%20class%3D%5C%22prop-item%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22prop-item%5C%22%20%3Amy-name.prop%3D%5C%22prop2%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%2F%2F%20%E6%9C%80%E7%BB%88%E5%8F%98%E6%88%90%E4%BA%86%3Cdiv%20class%3D%5C%22prop-item%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cbutton%20%40click%3D%5C%22onGetResult%5C%22%3E%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'prop'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20prop%3A%20'hello%20prop'%2C%5Cn%20%20%20%20%20%20prop2%3A%20'hello%20prop2'%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onGetResult%20()%20%7B%5Cn%20%20%20%20%20%20const%20%24refProp%20%3D%20this.%24refs.prop%5Cn%20%20%20%20%20%20const%20%24refProp2%20%3D%20this.%24refs.prop2%5Cn%5Cn%20%20%20%20%20%20console.log(%24refProp.getAttribute('my-name'))%20%2F%2F%20hello%20prop%5Cn%20%20%20%20%20%20console.log(%24refProp2.getAttribute('my-name'))%20%2F%2F%20null%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ziFk9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7bde18fa\" id=\"u7bde18fa\" style=\"text-align: left\"><span data-lake-id=\"u6a77b84b\" id=\"u6a77b84b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">从示例上可以看出未使用</span><span data-lake-id=\"ub003bb02\" id=\"ub003bb02\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.prop</span><span data-lake-id=\"u2be0e448\" id=\"u2be0e448\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符的</span><span data-lake-id=\"uf0642733\" id=\"uf0642733\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">my-name</span><span data-lake-id=\"u332b8f2e\" id=\"u332b8f2e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">属性会绑定到dom节点的attribute，从而出现暴露的情况。</span></p><h1 data-lake-id=\"NWe8M\" id=\"NWe8M\" style=\"text-align: center\"><span data-lake-id=\"u21aec479\" id=\"u21aec479\" style=\"color: rgb(72, 179, 120)\">鼠标修饰符</span></h1><p data-lake-id=\"u77b76e1c\" id=\"u77b76e1c\" style=\"text-align: left\"><span data-lake-id=\"u70061c48\" id=\"u70061c48\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当咱们想监听用户点击了</span><span data-lake-id=\"u2ee164c2\" id=\"u2ee164c2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">左键</span><span data-lake-id=\"u113dd482\" id=\"u113dd482\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u7435f193\" id=\"u7435f193\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">右键</span><span data-lake-id=\"uca6ca90c\" id=\"uca6ca90c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">或者</span><span data-lake-id=\"u99838646\" id=\"u99838646\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">中键</span><span data-lake-id=\"u7a4449f4\" id=\"u7a4449f4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">时也有修饰符可以快捷使用，分别是</span><span data-lake-id=\"u85668ad4\" id=\"u85668ad4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.left</span><span data-lake-id=\"u87199a6e\" id=\"u87199a6e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u38927fbe\" id=\"u38927fbe\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.right</span><span data-lake-id=\"u71a62b6e\" id=\"u71a62b6e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u734103d2\" id=\"u734103d2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">middle</span><span data-lake-id=\"u23a7b74f\" id=\"u23a7b74f\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">，来看个例子试试</span></p><p data-lake-id=\"u034c0d8c\" id=\"u034c0d8c\" style=\"text-align: left\"><span data-lake-id=\"u8f05b9b9\" id=\"u8f05b9b9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">根据MDN MouseEvent.button，介绍。</span></p><p data-lake-id=\"u85e7910c\" id=\"u85e7910c\" style=\"text-align: left\"><span data-lake-id=\"udc0795e4\" id=\"udc0795e4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">在最外层</span><span data-lake-id=\"u06acc726\" id=\"u06acc726\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">div.mouse</span><span data-lake-id=\"ue3b95e2b\" id=\"ue3b95e2b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">监听</span><span data-lake-id=\"ua2f69f32\" id=\"ua2f69f32\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">mousedown</span><span data-lake-id=\"u8d440a91\" id=\"u8d440a91\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件，看下用户点击的是鼠标哪个键，三个</span><span data-lake-id=\"u1ed81f0b\" id=\"u1ed81f0b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">button</span><span data-lake-id=\"u9a1dc4ac\" id=\"u9a1dc4ac\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">分别用三个修饰符快捷方式监听</span><span data-lake-id=\"u5e97c380\" id=\"u5e97c380\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">左键</span><span data-lake-id=\"ubffd9cb2\" id=\"ubffd9cb2\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u58b20840\" id=\"u58b20840\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">中键</span><span data-lake-id=\"uf3857139\" id=\"uf3857139\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u3b0b12c3\" id=\"u3b0b12c3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">右键</span><span data-lake-id=\"ua64d802a\" id=\"ua64d802a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">并打印出</span><span data-lake-id=\"uf84034bd\" id=\"uf84034bd\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">left</span><span data-lake-id=\"u6ed16036\" id=\"u6ed16036\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"ucfdb8c29\" id=\"ucfdb8c29\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">middle</span><span data-lake-id=\"uf4f1301c\" id=\"uf4f1301c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u30d44fe0\" id=\"u30d44fe0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">right</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22mouse%5C%22%20%40mousedown%3D%5C%22onMousedown%5C%22%3E%5Cn%20%20%20%20%3Cbutton%20%40click.left%3D%5C%22onClickBtn('left')%5C%22%3Eleft%3C%2Fbutton%3E%5Cn%20%20%20%20%3Cbutton%20%40click.middle%3D%5C%22onClickBtn('middle')%5C%22%3Emiddle%3C%2Fbutton%3E%5Cn%20%20%20%20%3Cbutton%20%40click.right%3D%5C%22onClickBtn('right')%5C%22%3Eright%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'mouse'%2C%5Cn%20%20mounted%20()%20%7B%5Cn%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickBtn%20(msg)%20%7B%5Cn%20%20%20%20%20%20console.log(msg)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onMousedown%20(event)%20%7B%5Cn%20%20%20%20%20%20const%20mosueMsgMap%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%200%3A%20'%E9%BC%A0%E6%A0%87%E5%B7%A6%E9%94%AE'%2C%5Cn%20%20%20%20%20%20%20%201%3A%20'%E9%BC%A0%E6%A0%87%E4%B8%AD%E9%94%AE'%2C%5Cn%20%20%20%20%20%20%20%202%3A%20'%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE'%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20console.log('%E7%82%B9%E5%87%BB%E4%BA%86'%2C%20mosueMsgMap%5Bevent.button%5D)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OJArw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0a41ddbe\" id=\"u0a41ddbe\" style=\"text-align: left\"><strong><span data-lake-id=\"uf17edfed\" id=\"uf17edfed\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">没有带鼠标回来，中键点击暂时不能演示，后续会补上</span></strong></p><p data-lake-id=\"u5bf141f5\" id=\"u5bf141f5\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718538-11650970-9341-438b-b845-a67688ff5897.gif%22%2C%22taskId%22%3A%22u74db735d-39da-43ad-b642-b24eee0ddf1%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22u4ad4c271%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua6fe34d8\" id=\"ua6fe34d8\" style=\"text-align: center\"><span data-lake-id=\"u230b710d\" id=\"u230b710d\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">mouse.gif</span></p><h2 data-lake-id=\"fFSe7\" id=\"fFSe7\" style=\"text-align: center\"><span data-lake-id=\"u7d2a0b47\" id=\"u7d2a0b47\" style=\"color: rgb(72, 179, 120)\">11 .left</span></h2><p data-lake-id=\"u73cf0bd7\" id=\"u73cf0bd7\" style=\"text-align: left\"><span data-lake-id=\"ubab06251\" id=\"ubab06251\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标左键点击</span></p><h2 data-lake-id=\"it85P\" id=\"it85P\" style=\"text-align: center\"><span data-lake-id=\"u43472952\" id=\"u43472952\" style=\"color: rgb(72, 179, 120)\">12 .right</span></h2><p data-lake-id=\"u89c91167\" id=\"u89c91167\" style=\"text-align: left\"><span data-lake-id=\"uff82bd4b\" id=\"uff82bd4b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标右键点击</span></p><h2 data-lake-id=\"LAxXy\" id=\"LAxXy\" style=\"text-align: center\"><span data-lake-id=\"ufec9e26a\" id=\"ufec9e26a\" style=\"color: rgb(72, 179, 120)\">13 .middle</span></h2><p data-lake-id=\"u7cc0d569\" id=\"u7cc0d569\" style=\"text-align: left\"><span data-lake-id=\"uec382e41\" id=\"uec382e41\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标中键点击</span></p><h1 data-lake-id=\"hzYRz\" id=\"hzYRz\" style=\"text-align: center\"><span data-lake-id=\"u6edec5ad\" id=\"u6edec5ad\" style=\"color: rgb(72, 179, 120)\">表单相关修饰符</span></h1><h2 data-lake-id=\"Yph9D\" id=\"Yph9D\" style=\"text-align: center\"><span data-lake-id=\"uf2a6fd37\" id=\"uf2a6fd37\" style=\"color: rgb(72, 179, 120)\">14 .trim</span></h2><p data-lake-id=\"u1cb0902d\" id=\"u1cb0902d\" style=\"text-align: left\"><span data-lake-id=\"u53ccf2f3\" id=\"u53ccf2f3\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">对于输入的内容，希望可以</span><span data-lake-id=\"ubd41da66\" id=\"ubd41da66\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">过滤首尾空格</span><span data-lake-id=\"uf84cb461\" id=\"uf84cb461\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">应该怎么做呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22trim%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22trim-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model%3D%5C%22name%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%9A%3Cspan%3E%7B%7B%20name%20%7D%7D%3C%2Fspan%3E%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22trim-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.trim%3D%5C%22name2%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E7%94%A8%E6%88%B7%E5%90%8D2%EF%BC%9A%3Cspan%3E%7B%7B%20name2%20%7D%7D%3C%2Fspan%3E%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'trim'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20name%3A%20''%2C%5Cn%20%20%20%20%20%20name2%3A%20''%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20watch%3A%20%7B%5Cn%20%20%20%20name%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(%60'----%24%7BnewVal%7D----'%60)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20name2%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(%60'----%24%7BnewVal%7D----'%60)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Bx82u%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9f76bc9c\" id=\"u9f76bc9c\" style=\"text-align: left\"><strong><span data-lake-id=\"uaaf76aeb\" id=\"uaaf76aeb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">.trim修饰符可以很方便做到</span></strong></p><h2 data-lake-id=\"S4q4U\" id=\"S4q4U\" style=\"text-align: center\"><span data-lake-id=\"u523e1764\" id=\"u523e1764\" style=\"color: rgb(72, 179, 120)\">15 .lazy</span></h2><p data-lake-id=\"u30cf5619\" id=\"u30cf5619\" style=\"text-align: left\"><span data-lake-id=\"u5f1b9449\" id=\"u5f1b9449\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">v-model</span><span data-lake-id=\"uefc3dd80\" id=\"uefc3dd80\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">大家都很熟悉，默认情况下，每次</span><span data-lake-id=\"ud4464356\" id=\"ud4464356\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">input事件</span><span data-lake-id=\"ud865ddb5\" id=\"ud865ddb5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？</span></p><p data-lake-id=\"u17cf87ef\" id=\"u17cf87ef\" style=\"text-align: left\"><strong><span data-lake-id=\"u13ec8cd8\" id=\"u13ec8cd8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">思路1：</span></strong><span data-lake-id=\"u76089b8a\" id=\"u76089b8a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"u29d49872\" id=\"u29d49872\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">绑定change事件，在事件回调中手动获取target的值</span></p><p data-lake-id=\"u08b1b8a0\" id=\"u08b1b8a0\" style=\"text-align: left\"><strong><span data-lake-id=\"u6bb19acf\" id=\"u6bb19acf\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">思路2：</span></strong><span data-lake-id=\"u82ebf9ba\" id=\"u82ebf9ba\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"ub365d7d2\" id=\"ub365d7d2\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">直接使用</span><span data-lake-id=\"ubbdd602e\" id=\"ubbdd602e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.lazy</span><span data-lake-id=\"uc251a322\" id=\"uc251a322\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符即可达到效果</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22lazy%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22lazy-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model%3D%5C%22text%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E6%97%A0.lazy%3A%20%7B%7B%20text%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22lazy-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.lazy%3D%5C%22text2%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E.lazy%3A%20%7B%7B%20text2%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'lazy'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20text%3A%20''%2C%5Cn%20%20%20%20%20%20text2%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HVqqo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"udee19840\" id=\"udee19840\" style=\"text-align: left\"><span data-lake-id=\"u45de1934\" id=\"u45de1934\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，</span><span data-lake-id=\"u0818e561\" id=\"u0818e561\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">text2</span><span data-lake-id=\"u0359bbef\" id=\"u0359bbef\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的数据才更新了</span></p><h2 data-lake-id=\"LkaRe\" id=\"LkaRe\" style=\"text-align: center\"><span data-lake-id=\"u9bd0696f\" id=\"u9bd0696f\" style=\"color: rgb(72, 179, 120)\">16 .number</span></h2><p data-lake-id=\"u7b7164ba\" id=\"u7b7164ba\" style=\"text-align: left\"><span data-lake-id=\"u0d1b805c\" id=\"u0d1b805c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">我们知道</span><span data-lake-id=\"u3ec2baec\" id=\"u3ec2baec\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">input</span><span data-lake-id=\"u03d1e915\" id=\"u03d1e915\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">输入框的</span><span data-lake-id=\"u9589acc3\" id=\"u9589acc3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">type</span><span data-lake-id=\"u5ede771d\" id=\"u5ede771d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">哪怕是</span><span data-lake-id=\"u43eaf4ee\" id=\"u43eaf4ee\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">number</span><span data-lake-id=\"u7dc1d024\" id=\"u7dc1d024\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">得到的值的类型也是</span><span data-lake-id=\"u1fef5508\" id=\"u1fef5508\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">string</span><span data-lake-id=\"uc3a9a8ab\" id=\"uc3a9a8ab\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">，如果我们想直接拿到</span><span data-lake-id=\"u76a7da75\" id=\"u76a7da75\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">number</span><span data-lake-id=\"u1cb93f60\" id=\"u1cb93f60\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">类型的数据，有不想麻烦的手动转换应该怎么办呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22number%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E6%97%A0.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model%3D%5C%22number%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3Etype%3Atext%20.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.number%3D%5C%22number1%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3Etype%3Anumber%20.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model.number%3D%5C%22number2%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'lazy'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20number%3A%200%2C%5Cn%20%20%20%20%20%20number1%3A%20''%2C%5Cn%20%20%20%20%20%20number2%3A%20''%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20watch%3A%20%7B%5Cn%20%20%20%20number%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20number1%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20number2%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22I5e3R%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u821a9205\" id=\"u821a9205\" style=\"text-align: left\"><span data-lake-id=\"ue0f09da4\" id=\"ue0f09da4\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><ol list=\"u811b0df5\"><li fid=\"ubfde6257\" data-lake-id=\"ue47ec899\" id=\"ue47ec899\" style=\"text-align: left\"><span data-lake-id=\"u3fec194d\" id=\"u3fec194d\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第一个输入框的类型是number，但是得到的值是string</span></li><li fid=\"ubfde6257\" data-lake-id=\"u4bc68a12\" id=\"u4bc68a12\" style=\"text-align: left\"><span data-lake-id=\"uaea0bc65\" id=\"uaea0bc65\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 </span><span data-lake-id=\"uc0037fa8\" id=\"uc0037fa8\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">parseFloat()</span><span data-lake-id=\"u45278a79\" id=\"u45278a79\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\"> 解析，则会返回原始的值。）</span></li><li fid=\"ubfde6257\" data-lake-id=\"u76d45212\" id=\"u76d45212\" style=\"text-align: left\"><span data-lake-id=\"ua9a2254f\" id=\"ua9a2254f\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第三个输入框的类型是number，最后得到的值也是number</span></li></ol><p data-lake-id=\"uab3ceedb\" id=\"uab3ceedb\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif%22%2C%22taskId%22%3A%22u41d07f12-da60-4a2b-8499-f0209ae7331%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22u91c65a41%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u8d6fc7b8\" id=\"u8d6fc7b8\" style=\"text-align: center\"><span data-lake-id=\"u07bcd0ab\" id=\"u07bcd0ab\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">number.gif</span></p><h1 data-lake-id=\"tKRUK\" id=\"tKRUK\" style=\"text-align: center\"><span data-lake-id=\"u4d8f43d8\" id=\"u4d8f43d8\" style=\"color: rgb(72, 179, 120)\">系统修饰符</span></h1><p data-lake-id=\"ufaa7e651\" id=\"ufaa7e651\" style=\"text-align: left\"><span data-lake-id=\"ude2334a0\" id=\"ude2334a0\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当点击事件或者键盘事件需要系统键同时按下才触发时</span><span data-lake-id=\"u2901b4a9\" id=\"u2901b4a9\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.ctrl</span><span data-lake-id=\"u3f125b55\" id=\"u3f125b55\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u622ce860\" id=\"u622ce860\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.alt</span><span data-lake-id=\"ud6869c6d\" id=\"ud6869c6d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"ub458bf9a\" id=\"ub458bf9a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.shift</span><span data-lake-id=\"u1edc2518\" id=\"u1edc2518\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u46fba77b\" id=\"u46fba77b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.meta</span><span data-lake-id=\"u9a18352b\" id=\"u9a18352b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">可以帮大忙噢！</span></p><p data-lake-id=\"u5fcc32c7\" id=\"u5fcc32c7\" style=\"text-align: left\"><strong><span data-lake-id=\"u28ddb0fc\" id=\"u28ddb0fc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如下代码</span></strong></p><ol list=\"u9147195a\"><li fid=\"ud57cb901\" data-lake-id=\"uf606973f\" id=\"uf606973f\" style=\"text-align: left\"><span data-lake-id=\"ud6fc24ee\" id=\"ud6fc24ee\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">全局监听keydown事件，尝试看</span><span data-lake-id=\"u480ba258\" id=\"u480ba258\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.ctrl</span><span data-lake-id=\"u631f914d\" id=\"u631f914d\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u034682f4\" id=\"u034682f4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.alt</span><span data-lake-id=\"ua84d8ba6\" id=\"ua84d8ba6\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u30b9e19d\" id=\"u30b9e19d\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.shift</span><span data-lake-id=\"u1c346d70\" id=\"u1c346d70\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u76c35f7a\" id=\"u76c35f7a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.meta</span><span data-lake-id=\"u89c38233\" id=\"u89c38233\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">是否被按下</span></li><li fid=\"ud57cb901\" data-lake-id=\"u2bc1ab75\" id=\"u2bc1ab75\" style=\"text-align: left\"><span data-lake-id=\"u6260c966\" id=\"u6260c966\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">分别给四个按钮加上</span><span data-lake-id=\"ua8f93abf\" id=\"ua8f93abf\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"uc6fd784b\" id=\"uc6fd784b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.ctrl</span><span data-lake-id=\"u2a6d31fd\" id=\"u2a6d31fd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u59aa2655\" id=\"u59aa2655\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.alt</span><span data-lake-id=\"u31bd89a8\" id=\"u31bd89a8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"ud66e4550\" id=\"ud66e4550\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.shift</span><span data-lake-id=\"ua0700796\" id=\"ua0700796\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u72474bfe\" id=\"u72474bfe\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.meta</span><span data-lake-id=\"ue902c1ee\" id=\"ue902c1ee\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效</span></li></ol><p data-lake-id=\"u91bd6c9d\" id=\"u91bd6c9d\" style=\"text-align: left\"><strong><span data-lake-id=\"u2324a8dc\" id=\"u2324a8dc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22system%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%7B%7B%20msg%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22buttons%5C%22%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.ctrl%3D%5C%22onClickButon('ctrl')%5C%22%3Ectrl%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.alt%3D%5C%22onClickButon('alt')%5C%22%3Ealt%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.shift%3D%5C%22onClickButon('shift')%5C%22%3Eshift%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.meta%3D%5C%22onClickButon('meta')%5C%22%3Emeta%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'system'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20msg%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.onListenSystemKeyDown()%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onListenSystemKeyDown%20()%20%7B%5Cn%20%20%20%20%20%20document.addEventListener('keydown'%2C%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20let%20msg%20%3D%20'%E6%8C%89%E4%B8%8B%E4%BA%86'%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(event.ctrlKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'ctrl%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.altKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'alt%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.shiftKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'shift%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.metaKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'meta%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'%E5%85%B6%E4%BB%96%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.msg%20%3D%20msg%5Cn%20%20%20%20%20%20%7D%2C%20false)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickButon%20(key)%20%7B%5Cn%20%20%20%20%20%20console.log(%60%E5%8F%AA%E6%9C%89%E5%90%8C%E6%97%B6%E6%8C%89%E4%B8%8B%24%7Bkey%7D%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%60)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22sEv8K%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"vrHrH\" id=\"vrHrH\" style=\"text-align: center\"><span data-lake-id=\"u3319dd7c\" id=\"u3319dd7c\" style=\"color: rgb(72, 179, 120)\">17 .ctrl</span></h2><p data-lake-id=\"u64329c6b\" id=\"u64329c6b\" style=\"text-align: left\"><span data-lake-id=\"u60d29d8e\" id=\"u60d29d8e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"EDUwo\" id=\"EDUwo\" style=\"text-align: center\"><span data-lake-id=\"ub7fe4845\" id=\"ub7fe4845\" style=\"color: rgb(72, 179, 120)\">18 .alt</span></h2><p data-lake-id=\"u38c5ac20\" id=\"u38c5ac20\" style=\"text-align: left\"><span data-lake-id=\"u772e7304\" id=\"u772e7304\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"JBKLM\" id=\"JBKLM\" style=\"text-align: center\"><span data-lake-id=\"u19ccadea\" id=\"u19ccadea\" style=\"color: rgb(72, 179, 120)\">19 .shift</span></h2><p data-lake-id=\"uf3481f3f\" id=\"uf3481f3f\" style=\"text-align: left\"><span data-lake-id=\"uf99c4263\" id=\"uf99c4263\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"UnowS\" id=\"UnowS\" style=\"text-align: center\"><span data-lake-id=\"uce751ccf\" id=\"uce751ccf\" style=\"color: rgb(72, 179, 120)\">20 .meta</span></h2><p data-lake-id=\"u1f33c1d8\" id=\"u1f33c1d8\" style=\"text-align: left\"><span data-lake-id=\"u7764a65b\" id=\"u7764a65b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Xw5H6\" id=\"Xw5H6\" style=\"text-align: center\"><span data-lake-id=\"u24c67305\" id=\"u24c67305\" style=\"color: rgb(72, 179, 120)\">21 .exact</span></h2><p data-lake-id=\"ua62785aa\" id=\"ua62785aa\" style=\"text-align: left\"><span data-lake-id=\"u46f32d6f\" id=\"u46f32d6f\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">严格来说这</span><span data-lake-id=\"u4dbac899\" id=\"u4dbac899\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.exact</span><span data-lake-id=\"u43b5013c\" id=\"u43b5013c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发</span><span data-lake-id=\"u89155beb\" id=\"u89155beb\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.alt</span><span data-lake-id=\"uea00f4cc\" id=\"uea00f4cc\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">也可以触发</span><span data-lake-id=\"uf76142e0\" id=\"uf76142e0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.shift</span><span data-lake-id=\"ubecfe885\" id=\"ubecfe885\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">。</span></p><p data-lake-id=\"u97cf7b30\" id=\"u97cf7b30\" style=\"text-align: left\"><span data-lake-id=\"uc2817803\" id=\"uc2817803\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发</span></p><p data-lake-id=\"u041103f6\" id=\"u041103f6\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif%22%2C%22taskId%22%3A%22u98a03c13-3c8f-42ff-aaf6-d3be97c1223%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22uaac7048a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf5f71344\" id=\"uf5f71344\" style=\"text-align: center\"><span data-lake-id=\"u79e233e3\" id=\"u79e233e3\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">system2.gif</span></p><ol list=\"u0c8cb98f\"><li fid=\"u082a9c9d\" data-lake-id=\"ue2720757\" id=\"ue2720757\" style=\"text-align: left\"><strong><span data-lake-id=\"u202b2ffd\" id=\"u202b2ffd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">只想某个系统修饰键按下时才触发点击</span></strong></li><li fid=\"u082a9c9d\" data-lake-id=\"ua773930b\" id=\"ua773930b\" style=\"text-align: left\"><strong><span data-lake-id=\"uea07182f\" id=\"uea07182f\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">没有任何系统修饰符被按下的时候才触发点击</span></strong></li></ol><p data-lake-id=\"u72b0ed7d\" id=\"u72b0ed7d\" style=\"text-align: left\"><span data-lake-id=\"u333076e0\" id=\"u333076e0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">要实现上面的需求</span><span data-lake-id=\"u836b73f7\" id=\"u836b73f7\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.exact</span><span data-lake-id=\"u8efeff6e\" id=\"u8efeff6e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">就派上用场了，用上面的例子稍作改造</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22extra%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%7B%7B%20msg%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22buttons%5C%22%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.ctrl.exact%3D%5C%22onClickButon('ctrl')%5C%22%3Ectrl%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.alt.exact%3D%5C%22onClickButon('alt')%5C%22%3Ealt%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.shift.exact%3D%5C%22onClickButon('shift')%5C%22%3Eshift%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.meta.exact%3D%5C%22onClickButon('meta')%5C%22%3Emeta%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.exact%3D%5C%22onClickButon('%E9%9D%9E%E7%B3%BB%E7%BB%9F%E9%94%AE')%5C%22%3E%E9%9D%9E%E7%B3%BB%E7%BB%9F%E9%94%AE%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'extra'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20msg%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.onListenSystemKeyDown()%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onListenSystemKeyDown%20()%20%7B%5Cn%20%20%20%20%20%20document.addEventListener('keydown'%2C%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20let%20msg%20%3D%20'%E6%8C%89%E4%B8%8B%E4%BA%86'%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(event.ctrlKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'ctrl%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.altKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'alt%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.shiftKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'shift%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.metaKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'meta%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'%E5%85%B6%E4%BB%96%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.msg%20%3D%20msg%5Cn%20%20%20%20%20%20%7D%2C%20false)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickButon%20(key)%20%7B%5Cn%20%20%20%20%20%20console.log(%60%E5%8F%AA%E6%9C%89%E5%90%8C%E6%97%B6%E6%8C%89%E4%B8%8B%24%7Bkey%7D%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%60)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22RfSIX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h1 data-lake-id=\"QRDoL\" id=\"QRDoL\" style=\"text-align: center\"><span data-lake-id=\"u9e072fe4\" id=\"u9e072fe4\" style=\"color: rgb(72, 179, 120)\">按键修饰符</span></h1><p data-lake-id=\"u4d7607d4\" id=\"u4d7607d4\" style=\"text-align: left\"><span data-lake-id=\"ud435401d\" id=\"ud435401d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。</span></p><p data-lake-id=\"u90021919\" id=\"u90021919\" style=\"text-align: left\"><span data-lake-id=\"u90ca1994\" id=\"u90ca1994\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如下代码，我们分别给</span><span data-lake-id=\"u1b9ae731\" id=\"u1b9ae731\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">enter</span><span data-lake-id=\"u77e90de4\" id=\"u77e90de4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u843ed54b\" id=\"u843ed54b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">tab</span><span data-lake-id=\"uc436000b\" id=\"uc436000b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"uf15decc4\" id=\"uf15decc4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">delete</span><span data-lake-id=\"u9eea15d1\" id=\"u9eea15d1\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">等按键指定了</span><span data-lake-id=\"u84258e58\" id=\"u84258e58\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">keydown</span><span data-lake-id=\"u6b965914\" id=\"u6b965914\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件，当在指定的输入框中按下指定的键盘，会打印出</span><span data-lake-id=\"uf4a443c5\" id=\"uf4a443c5\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">enter</span><span data-lake-id=\"u22d7fe84\" id=\"u22d7fe84\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u24545ebc\" id=\"u24545ebc\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">tab</span><span data-lake-id=\"ua5469367\" id=\"ua5469367\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u94786a77\" id=\"u94786a77\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">delete</span><span data-lake-id=\"ud11bd656\" id=\"ud11bd656\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">等，其他按键在输入框中无法触发该console</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22key-modifiers%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20enter%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.enter%3D%5C%22onKeydown('enter')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20tab%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.tab%3D%5C%22onKeydown('tab')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20delete%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.delete%3D%5C%22onKeydown('delete')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20esc%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.esc%3D%5C%22onKeydown('esc')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20space%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.space%3D%5C%22onKeydown('space')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20up%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.up%3D%5C%22onKeydown('up')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20down%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.down%3D%5C%22onKeydown('down')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20left%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.left%3D%5C%22onKeydown('left')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20right%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.right%3D%5C%22onKeydown('right')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20page-down%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.page-down%3D%5C%22onKeydown('page-down')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20page-up%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.page-up%3D%5C%22onKeydown('page-up')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'keyModifiers'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20(keyName)%20%7B%5Cn%20%20%20%20%20%20console.log(keyName)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22B9SEe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"C8jGV\" id=\"C8jGV\" style=\"text-align: center\"><span data-lake-id=\"u3727bbec\" id=\"u3727bbec\" style=\"color: rgb(72, 179, 120)\">22 .enter</span></h2><p data-lake-id=\"ud5f87782\" id=\"ud5f87782\" style=\"text-align: left\"><span data-lake-id=\"uad1dcaf4\" id=\"uad1dcaf4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Jw4r0\" id=\"Jw4r0\" style=\"text-align: center\"><span data-lake-id=\"u9ecaef2a\" id=\"u9ecaef2a\" style=\"color: rgb(72, 179, 120)\">23 .tab</span></h2><p data-lake-id=\"u9c9e02bc\" id=\"u9c9e02bc\" style=\"text-align: left\"><span data-lake-id=\"udc6c96c9\" id=\"udc6c96c9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"U7gUW\" id=\"U7gUW\" style=\"text-align: center\"><span data-lake-id=\"u8a6d0533\" id=\"u8a6d0533\" style=\"color: rgb(72, 179, 120)\">24 .delete</span></h2><p data-lake-id=\"uc1a938d3\" id=\"uc1a938d3\" style=\"text-align: left\"><span data-lake-id=\"uc59dbfb9\" id=\"uc59dbfb9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"q769F\" id=\"q769F\" style=\"text-align: center\"><span data-lake-id=\"u9b7785bc\" id=\"u9b7785bc\" style=\"color: rgb(72, 179, 120)\">25 .esc</span></h2><p data-lake-id=\"ub6706d3d\" id=\"ub6706d3d\" style=\"text-align: left\"><span data-lake-id=\"ue546c163\" id=\"ue546c163\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"lSVHX\" id=\"lSVHX\" style=\"text-align: center\"><span data-lake-id=\"u108dbc34\" id=\"u108dbc34\" style=\"color: rgb(72, 179, 120)\">26 .space</span></h2><p data-lake-id=\"u71878930\" id=\"u71878930\" style=\"text-align: left\"><span data-lake-id=\"u3d475235\" id=\"u3d475235\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"CJR2h\" id=\"CJR2h\" style=\"text-align: center\"><span data-lake-id=\"ua84f430a\" id=\"ua84f430a\" style=\"color: rgb(72, 179, 120)\">27 .up</span></h2><p data-lake-id=\"ub10f88fd\" id=\"ub10f88fd\" style=\"text-align: left\"><span data-lake-id=\"uecd98c1b\" id=\"uecd98c1b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"jtFso\" id=\"jtFso\" style=\"text-align: center\"><span data-lake-id=\"u61610469\" id=\"u61610469\" style=\"color: rgb(72, 179, 120)\">28 .down</span></h2><p data-lake-id=\"u9dfc216b\" id=\"u9dfc216b\" style=\"text-align: left\"><span data-lake-id=\"uc830c3b3\" id=\"uc830c3b3\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"KcsBn\" id=\"KcsBn\" style=\"text-align: center\"><span data-lake-id=\"u54800d8b\" id=\"u54800d8b\" style=\"color: rgb(72, 179, 120)\">29 .left</span></h2><p data-lake-id=\"u700fb838\" id=\"u700fb838\" style=\"text-align: left\"><span data-lake-id=\"uc63696ba\" id=\"uc63696ba\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Mrnjd\" id=\"Mrnjd\" style=\"text-align: center\"><span data-lake-id=\"u7fd7a6bb\" id=\"u7fd7a6bb\" style=\"color: rgb(72, 179, 120)\">30 .right</span></h2><p data-lake-id=\"ub38af451\" id=\"ub38af451\" style=\"text-align: left\"><span data-lake-id=\"ua611fea8\" id=\"ua611fea8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"P5Hyd\" id=\"P5Hyd\" style=\"text-align: center\"><span data-lake-id=\"u47e836c0\" id=\"u47e836c0\" style=\"color: rgb(72, 179, 120)\">31 .page-down</span></h2><p data-lake-id=\"ufd717625\" id=\"ufd717625\" style=\"text-align: left\"><span data-lake-id=\"udf6c0267\" id=\"udf6c0267\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"vV3ei\" id=\"vV3ei\" style=\"text-align: center\"><span data-lake-id=\"u1425a2c6\" id=\"u1425a2c6\" style=\"color: rgb(72, 179, 120)\">32 .page-up</span></h2><p data-lake-id=\"u8e8f7298\" id=\"u8e8f7298\" style=\"text-align: left\"><span data-lake-id=\"u8159c057\" id=\"u8159c057\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h1 data-lake-id=\"iSrWh\" id=\"iSrWh\" style=\"text-align: center\"><span data-lake-id=\"u77cef408\" id=\"u77cef408\" style=\"color: rgb(72, 179, 120)\">如何自定义按键修饰符</span></h1><p data-lake-id=\"ue30e99ce\" id=\"ue30e99ce\" style=\"text-align: left\"><span data-lake-id=\"u972e1832\" id=\"u972e1832\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？</span></p><p data-lake-id=\"uac1c7481\" id=\"uac1c7481\" style=\"text-align: left\"><span data-lake-id=\"u652ee143\" id=\"u652ee143\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。</span></p><p data-lake-id=\"ub35a9201\" id=\"ub35a9201\" style=\"text-align: left\"><span data-lake-id=\"u980a877d\" id=\"u980a877d\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Vue.config.keyCodes%20%3D%20%7B%5Cn%20%20q%3A%2081%5Cn%7D%5Cn%5Cn%3Cdiv%20class%3D%5C%22custom%5C%22%3E%5Cn%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.q%3D%5C%22f1Keydown%5C%22%3E%5Cn%3C%2Fdiv%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'custom'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20f1Keydown%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%8C%89%E4%B8%8B%E4%BA%86q')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22yT5kG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u375923cb\" id=\"u375923cb\" style=\"text-align: left\"><span data-lake-id=\"u8c6843cd\" id=\"u8c6843cd\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><p data-lake-id=\"u99728a98\" id=\"u99728a98\" style=\"text-align: left\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"pxcyU\" id=\"pxcyU\"><br></h1><h1 data-lake-id=\"th4rJ\" id=\"th4rJ\" style=\"text-align: center\"><span data-lake-id=\"ud7ebaac4\" id=\"ud7ebaac4\" style=\"color: rgb(72, 179, 120)\">前言</span></h1><p data-lake-id=\"ua1c2d6c9\" id=\"ua1c2d6c9\" style=\"text-align: left\"><span data-lake-id=\"u949c65d8\" id=\"u949c65d8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！</span></p><p data-lake-id=\"uae0d1073\" id=\"uae0d1073\" style=\"text-align: left\"><span data-lake-id=\"u549699a9\" id=\"u549699a9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">耽误您15分钟您可以收获：</span></p><ol list=\"u8ac9aa71\"><li fid=\"ub7e94663\" data-lake-id=\"u614a523c\" id=\"u614a523c\" style=\"text-align: left\"><span data-lake-id=\"u368dcddb\" id=\"u368dcddb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用</span></li><li fid=\"ub7e94663\" data-lake-id=\"uc2cb978d\" id=\"uc2cb978d\" style=\"text-align: left\"><span data-lake-id=\"ufb257f98\" id=\"ufb257f98\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如何利用webpack动态注册vue路由，再也不手写路由配置啦！</span></li></ol><p data-lake-id=\"udb6522f9\" id=\"udb6522f9\" style=\"text-align: left\"><span data-lake-id=\"udfa5e871\" id=\"udfa5e871\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">文章中例子都放在了github源码上，也可以点击直接看例子</span></p><h1 data-lake-id=\"Q2cOK\" id=\"Q2cOK\" style=\"text-align: center\"><span data-lake-id=\"uaf42a95d\" id=\"uaf42a95d\" style=\"color: rgb(72, 179, 120)\">如何动态注册路由？</span></h1><p data-lake-id=\"ua21b7e1e\" id=\"ua21b7e1e\" style=\"text-align: left\"><span data-lake-id=\"u482de697\" id=\"u482de697\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">文中的每个修饰符例子都由一个页面承载，聪明的你肯定不想手动引入几十个.vue文件并配置路由.</span></p><p data-lake-id=\"u3ecae803\" id=\"u3ecae803\" style=\"text-align: left\"><span data-lake-id=\"u0bb0022a\" id=\"u0bb0022a\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">有什么办法可以帮我们自动完成路由注册呢？</span></p><h2 data-lake-id=\"kP2Yc\" id=\"kP2Yc\" style=\"text-align: center\"><span data-lake-id=\"uf42b2062\" id=\"uf42b2062\" style=\"color: rgb(72, 179, 120)\">1. 文件目录结构</span></h2><p data-lake-id=\"u5449f10e\" id=\"u5449f10e\" style=\"text-align: left\"><span data-lake-id=\"u106b9481\" id=\"u106b9481\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">目录结构（已去除其他文件目录）大概如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E2%94%9C%E2%94%80%E2%94%80%20package.json%5Cn%E2%94%94%E2%94%80%E2%94%80%20src%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20App.vue%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20main.js%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20router.js%5Cn%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20views%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20About.vue%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20Home.vue%5Cn%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20modifiers%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20capture.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20once.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20order.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20passive.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20prevent.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20self.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20stop.vue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20...%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22kC7Aq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"rxTi1\" id=\"rxTi1\" style=\"text-align: center\"><span data-lake-id=\"uc0af5740\" id=\"uc0af5740\" style=\"color: rgb(72, 179, 120)\">2. 期望的路由配置</span></h2><p data-lake-id=\"uedb39fa1\" id=\"uedb39fa1\" style=\"text-align: left\"><span data-lake-id=\"u40feb4b5\" id=\"u40feb4b5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">最终给到</span><span data-lake-id=\"ud9674ed2\" id=\"ud9674ed2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">vue-router</span><span data-lake-id=\"u247f9cbc\" id=\"u247f9cbc\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">的配置大概长下面这个样子，每个配置最重要的部分分别是</span><span data-lake-id=\"u50928c85\" id=\"u50928c85\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">path</span><span data-lake-id=\"ufb1f6842\" id=\"ufb1f6842\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u2c11bb8a\" id=\"u2c11bb8a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">name</span><span data-lake-id=\"ue358c909\" id=\"ue358c909\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和</span><span data-lake-id=\"ufc96942a\" id=\"ufc96942a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">component</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22%2Fhome%5C%22%2C%5Cn%20%20%20%20%5C%22name%5C%22%3A%20%5C%22home%5C%22%2C%5Cn%20%20%20%20%5C%22component%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Home%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22methods%5C%22%3A%20%7B%7D%2C%5Cn%20%20%20%20%20%20%5C%22staticRenderFns%5C%22%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%5C%22_compiled%5C%22%3A%20true%2C%5Cn%20%20%20%20%20%20%5C%22_scopeId%5C%22%3A%20%5C%22data-v-fae5bece%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22beforeCreate%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22beforeDestroy%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22__file%5C%22%3A%20%5C%22src%2Fviews%2FHome.vue%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22%2Fmodifiers%2Fcapture%5C%22%2C%5Cn%20%20%20%20%5C%22name%5C%22%3A%20%5C%22modifiersCapture%5C%22%2C%5Cn%20%20%20%20%5C%22component%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22capture%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22methods%5C%22%3A%20%7B%7D%2C%5Cn%20%20%20%20%20%20%5C%22staticRenderFns%5C%22%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%5C%22_compiled%5C%22%3A%20true%2C%5Cn%20%20%20%20%20%20%5C%22_scopeId%5C%22%3A%20%5C%22data-v-63b4eeee%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22beforeCreate%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22beforeDestroy%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20null%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22__file%5C%22%3A%20%5C%22src%2Fviews%2Fmodifiers%2Fcapture.vue%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20...%20%2F%2F%20%E5%85%B6%E4%BB%96%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TjFd3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf5b53993\" id=\"uf5b53993\" style=\"text-align: left\"><span data-lake-id=\"uf9af3215\" id=\"uf9af3215\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /><br /></span></p><h2 data-lake-id=\"r0SDU\" id=\"r0SDU\" style=\"text-align: center\"><span data-lake-id=\"ue3d6d947\" id=\"ue3d6d947\" style=\"color: rgb(72, 179, 120)\">3. require.context实现动态注册路由</span></h2><p data-lake-id=\"uec45424d\" id=\"uec45424d\" style=\"text-align: left\"><span data-lake-id=\"ub16ee7c6\" id=\"ub16ee7c6\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">借助webpack require.context 的能力，可以非常方便地实现上面目录到路由配置的映射工作，源码如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20registerRoutes%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20contextInfo%20%3D%20require.context('.%2Fviews'%2C%20true%2C%20%2F.vue%24%2F)%5Cn%20%20const%20routes%20%3D%20contextInfo.keys().map((filePath)%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20filePath%20%E5%BD%A2%E5%A6%82%20.%2FHome.vue%E3%80%81.%2Fmodifiers%2Fcapture.vue%5Cn%20%20%20%20%2F%2F%20path%E6%88%91%E4%BB%AC%E5%B8%8C%E6%9C%9B%E6%98%AF%2Fhome%E3%80%81%2Fmodifiers%2Fcapture%5Cn%20%20%20%20%2F%2F%20%E6%89%80%E4%BB%A5%E9%9C%80%E8%A6%81%E6%8A%8A%E5%BC%80%E5%A4%B4%E7%9A%84.%2F%E5%92%8C.vue%E9%83%BD%E6%9B%BF%E6%8D%A2%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20const%20path%20%3D%20filePath.toLowerCase().replace(%2F%5E%5C%5C.%7C%5C%5C.vue%2Fg%2C%20'')%5Cn%20%20%20%20%2F%2F%20name%E7%9A%84%E8%AF%9D%E5%B0%86%2Fhome%E3%80%81%2Fmodifiers%2Fcapture%E8%BD%AC%E6%88%90%E5%B0%8F%E9%A9%BC%E5%B3%B0%E5%8D%B3%E5%8F%AF%5Cn%20%20%20%20%2F%2F%20%E6%8A%8A%E5%BC%80%E5%A4%B4%E7%9A%84%2F%E5%85%88%E6%9B%BF%E6%8D%A2%E6%8E%89%EF%BC%8C%E5%86%8D%E6%8A%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%2F%E5%90%8E%E7%9A%84%E5%8D%95%E8%AF%8D%E5%8F%98%E6%88%90%E5%A4%A7%E5%86%99%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%5Cn%20%20%20%20const%20name%20%3D%20path.replace(%2F%5E%5C%5C%2F%2F%2C%20'').replace(%2F%5C%5C%2F(%5C%5Cw)%2F%2C%20(%240%2C%20%241)%20%3D%3E%20%241.toUpperCase())%5Cn%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87require%E5%8E%BB%E8%AF%BB%E5%8F%96.vue%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%5Cn%20%20%20%20const%20component%20%3D%20require(%60.%2Fviews%24%7BfilePath.replace(%2F%5E%5C%5C.%2F%2C%20'')%7D%60).default%5Cn%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20path%2C%5Cn%20%20%20%20%20%20name%2C%5Cn%20%20%20%20%20%20component%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%5Cn%5Cn%20%20return%20routes%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VTVVx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6638b89b\" id=\"u6638b89b\" style=\"text-align: left\"><span data-lake-id=\"ud6ac435a\" id=\"ud6ac435a\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u45fc22ff\" id=\"u45fc22ff\" style=\"text-align: left\"><strong><span data-lake-id=\"uab21980c\" id=\"uab21980c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">效果</span></strong></p><p data-lake-id=\"u55167b83\" id=\"u55167b83\" style=\"text-align: left\"><span data-lake-id=\"u06357184\" id=\"u06357184\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">经过上面的简单处理，动态注册路由就完成啦！您也可以点击vue-demos查看效果</span></p><p data-lake-id=\"u52d96441\" id=\"u52d96441\" style=\"text-align: left\"><span data-lake-id=\"ueae0fc77\" id=\"ueae0fc77\" class=\"lake-fontsize-12\" style=\"color: rgb(63, 63, 63)\"><br /><br /></span></p><h1 data-lake-id=\"C7PDV\" id=\"C7PDV\" style=\"text-align: center\"><span data-lake-id=\"u39254a9a\" id=\"u39254a9a\" style=\"color: rgb(72, 179, 120)\">事件修饰符</span></h1><h2 data-lake-id=\"NdTWe\" id=\"NdTWe\" style=\"text-align: center\"><span data-lake-id=\"ud6ea17ec\" id=\"ud6ea17ec\" style=\"color: rgb(72, 179, 120)\">1. 阻止冒泡的两种方式</span></h2><p data-lake-id=\"u432abee9\" id=\"u432abee9\" style=\"text-align: left\"><span data-lake-id=\"u46fc4ef0\" id=\"u46fc4ef0\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22parent%5C%22%20%40click%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'stop'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Jej8E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue288b8af\" id=\"ue288b8af\" style=\"text-align: left\"><span data-lake-id=\"u9396e492\" id=\"u9396e492\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><p data-lake-id=\"u06d45470\" id=\"u06d45470\" style=\"text-align: left\"><span data-lake-id=\"ud2e052dd\" id=\"ud2e052dd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点</span><strong><span data-lake-id=\"uf5a851d8\" id=\"uf5a851d8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">击子节点</span></strong><span data-lake-id=\"u43a611fd\" id=\"u43a611fd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的时候因为事件冒泡的缘故不仅会打印出</span><span data-lake-id=\"u13feaf96\" id=\"u13feaf96\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是儿子</span><span data-lake-id=\"u705eafb4\" id=\"u705eafb4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">还会打印</span><span data-lake-id=\"u954d7539\" id=\"u954d7539\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是爸爸</span><span data-lake-id=\"u970bba11\" id=\"u970bba11\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">。有什么办法可以阻止子节点的</span><strong><span data-lake-id=\"uebce80bc\" id=\"uebce80bc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件冒泡</span></strong><span data-lake-id=\"ubc89fdf8\" id=\"ubc89fdf8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">呢？</span></p><p data-lake-id=\"u31500ace\" id=\"u31500ace\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif%22%2C%22taskId%22%3A%22u3a2a87aa-6cbd-4bcb-a622-0c7fdbb416c%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ufdb6c334%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1a479574\" id=\"u1a479574\"><br></p><h3 data-lake-id=\"oWzps\" id=\"oWzps\" style=\"text-align: left\"><span data-lake-id=\"u79535780\" id=\"u79535780\" style=\"color: rgb(72, 179, 120)\">1 .stop</span></h3><p data-lake-id=\"u4de78f22\" id=\"u4de78f22\" style=\"text-align: left\"><span data-lake-id=\"u23b8551e\" id=\"u23b8551e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">只要加.stop修饰符即可，阻止事件冒泡的及简方式，很方便是不是。</span></p><p data-lake-id=\"u14416e59\" id=\"u14416e59\" style=\"text-align: left\"><span data-lake-id=\"uf9999d68\" id=\"uf9999d68\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">当添加上</span><span data-lake-id=\"u58f2808f\" id=\"u58f2808f\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.stop</span><span data-lake-id=\"u1a0fccf0\" id=\"u1a0fccf0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符时，只会出现</span><span data-lake-id=\"u41b97183\" id=\"u41b97183\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是儿子</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22parent%5C%22%20%40click%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B8%E7%88%B8%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click.stop%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TVv7R%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"uNVNl\" id=\"uNVNl\" style=\"text-align: left\"><span data-lake-id=\"u8c05b7e8\" id=\"u8c05b7e8\" style=\"color: rgb(72, 179, 120)\">2. event.stopPropagation</span></h3><p data-lake-id=\"u71246161\" id=\"u71246161\" style=\"text-align: left\"><span data-lake-id=\"ud417da85\" id=\"ud417da85\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当然了，我们也可以通过调用</span><span data-lake-id=\"uf35db083\" id=\"uf35db083\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">event.stopPropagation</span><span data-lake-id=\"u6419d384\" id=\"u6419d384\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">来阻止冒泡。不过更加推荐修饰符的做法，这样你的函数会更加专注在逻辑处理上，而不用关心DOM事件细节</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20name%3A%20'stop'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickChild%20(event)%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%84%BF%E5%AD%90')%5Cn%20%20%20%20%20%20event.stopPropagation()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22JJeve%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"IIPEs\" id=\"IIPEs\" style=\"text-align: center\"><span data-lake-id=\"udce42c34\" id=\"udce42c34\" style=\"color: rgb(72, 179, 120)\">2. 阻止默认事件的两种方式</span></h2><p data-lake-id=\"ufcf19143\" id=\"ufcf19143\" style=\"text-align: left\"><span data-lake-id=\"u2d5624cd\" id=\"u2d5624cd\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue中阻止冒泡有两种方式，那阻止默认事件呢？</span></p><h3 data-lake-id=\"fkfpq\" id=\"fkfpq\" style=\"text-align: left\"><span data-lake-id=\"uf2f67f1a\" id=\"uf2f67f1a\" style=\"color: rgb(72, 179, 120)\">1 .prevent</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22prevent%5C%22%3E%5Cn%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20%40click%3D%5C%22onNoPrevent%5C%22%3E%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%3C%2Fa%3E%5Cn%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20%40click.prevent%3D%5C%22onPrevent%5C%22%3E%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%3C%2Fa%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'prevent'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onNoPrevent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%9C%AA%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onPrevent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22N0T9h%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ubcb1c305\" id=\"ubcb1c305\" style=\"text-align: left\"><span data-lake-id=\"u2d35d84e\" id=\"u2d35d84e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">只要添加</span><span data-lake-id=\"ue6140935\" id=\"ue6140935\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.prevent</span><span data-lake-id=\"uc56c87db\" id=\"uc56c87db\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">轻松实现阻止默认事件</span></p><h3 data-lake-id=\"B1pgj\" id=\"B1pgj\"><span data-lake-id=\"u5999797f\" id=\"u5999797f\">2.event.preventDefault()</span></h3><p data-lake-id=\"uee407897\" id=\"uee407897\" style=\"text-align: left\"><span data-lake-id=\"u5b1b8474\" id=\"u5b1b8474\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和阻止冒泡一样，我们也可以通过调用事件对象的</span><span data-lake-id=\"u65937e9b\" id=\"u65937e9b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">preventDefault</span><span data-lake-id=\"uf2b06ca1\" id=\"uf2b06ca1\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">方法来阻止默认事件</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20name%3A%20'prevent'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onPrevent%20(event)%20%7B%5Cn%20%20%20%20%20%20console.log('%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6')%5Cn%20%20%20%20%20%20event.preventDefault()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22o9tKY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"LqMyK\" id=\"LqMyK\" style=\"text-align: center\"><span data-lake-id=\"u3fc24f1c\" id=\"u3fc24f1c\" style=\"color: rgb(72, 179, 120)\">3 .capture</span></h2><p data-lake-id=\"u6f06ee36\" id=\"u6f06ee36\" style=\"text-align: left\"><span data-lake-id=\"u234c9fe4\" id=\"u234c9fe4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">默认情况下，事件流是以</span><span data-lake-id=\"ud8b75d53\" id=\"ud8b75d53\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">冒泡</span><span data-lake-id=\"u2a76bcce\" id=\"u2a76bcce\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">(由里向外)的形式传递的，如果想以</span><span data-lake-id=\"uce4ea38d\" id=\"uce4ea38d\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">捕获（由外向里）</span><span data-lake-id=\"u83b8d4b5\" id=\"u83b8d4b5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">的形式应该怎么办呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22capture%20parent%5C%22%20%40click.capture%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%E7%88%B6%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22child%5C%22%20%40click.capture%3D%5C%22onClickChild%5C%22%3E%E8%87%AA%E8%8A%82%E7%82%B9%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'capture'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OnlN9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6b3fafbd\" id=\"u6b3fafbd\" style=\"text-align: left\"><span data-lake-id=\"ue99a76c8\" id=\"ue99a76c8\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u2016e654\" id=\"u2016e654\" style=\"text-align: left\"><span data-lake-id=\"u54bf58a7\" id=\"u54bf58a7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不加</span><span data-lake-id=\"u3798729e\" id=\"u3798729e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">catpture</span><span data-lake-id=\"u86add686\" id=\"u86add686\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符，点击</span><strong><span data-lake-id=\"u2dba5fb8\" id=\"u2dba5fb8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">子节点</span></strong><span data-lake-id=\"ue02add94\" id=\"ue02add94\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会陆续打印我是父节点以及我是子节点，加了之后，则是反过来了</span></p><h2 data-lake-id=\"HAwJz\" id=\"HAwJz\" style=\"text-align: center\"><span data-lake-id=\"uf43933ad\" id=\"uf43933ad\" style=\"color: rgb(72, 179, 120)\">4 .self</span></h2><p data-lake-id=\"uf3b37375\" id=\"uf3b37375\" style=\"text-align: left\"><span data-lake-id=\"ubd8fdafe\" id=\"ubd8fdafe\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">只有当</span><span data-lake-id=\"u63f012a3\" id=\"u63f012a3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">event.target</span><span data-lake-id=\"u75d3ea2a\" id=\"u75d3ea2a\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">是当前元素自身时才会触发事件回调函数</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22self%5C%22%20%40click.self%3D%5C%22onClickSelf%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22inner%5C%22%20%40click%3D%5C%22onClickInner%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'self'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickSelf%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AFself%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickInner%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AFinner%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YKen2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5c09fae3\" id=\"u5c09fae3\" style=\"text-align: left\"><span data-lake-id=\"u88075ea1\" id=\"u88075ea1\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span><br></p><p data-lake-id=\"u73c55023\" id=\"u73c55023\" style=\"text-align: left\"><span data-lake-id=\"ub867409b\" id=\"ub867409b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不加</span><span data-lake-id=\"ua2869049\" id=\"ua2869049\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u48148729\" id=\"u48148729\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符的话，点击</span><span data-lake-id=\"u098ca11f\" id=\"u098ca11f\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">inner</span><span data-lake-id=\"u49cdf060\" id=\"u49cdf060\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">节点也会触发</span><span data-lake-id=\"u6328bae0\" id=\"u6328bae0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u8faf3ca1\" id=\"u8faf3ca1\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的事件，加了之后只有触发事件的元素本身是</span><span data-lake-id=\"ua33fa551\" id=\"ua33fa551\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">self</span><span data-lake-id=\"u18127f2b\" id=\"u18127f2b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">，才会打印出</span><span data-lake-id=\"uf1887439\" id=\"uf1887439\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">我是self节点</span></p><h2 data-lake-id=\"RQFsF\" id=\"RQFsF\" style=\"text-align: center\"><span data-lake-id=\"u925db73d\" id=\"u925db73d\" style=\"color: rgb(72, 179, 120)\">暂停一下：修饰符的顺序如何理解？</span></h2><p data-lake-id=\"u849019ff\" id=\"u849019ff\" style=\"text-align: left\"><span data-lake-id=\"u8c705066\" id=\"u8c705066\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">已经回顾了4个修饰符，单独使用的时候很容易理解，但是注意官网有这么一句话</span></p><p data-lake-id=\"u9c96fbfa\" id=\"u9c96fbfa\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744717749-e6349a30-d17e-494e-bda7-01e582b7022f.gif%22%2C%22taskId%22%3A%22u4fe3b80c-310b-44fe-8997-3fbdc0a61e3%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ue6c22681%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1a23ba6b\" id=\"u1a23ba6b\" style=\"text-align: center\"><span data-lake-id=\"u3c25f557\" id=\"u3c25f557\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">image.png</span></p><p data-lake-id=\"u13e865eb\" id=\"u13e865eb\" style=\"text-align: left\"><strong><span data-lake-id=\"u9a2df4b0\" id=\"u9a2df4b0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">怎么理解呢？我们来看两个栗子</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22order%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22order-0%5C%22%3E%5Cn%20%20%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20class%3D%5C%22order-parent%5C%22%20%40click.self.prevent%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E4%BC%9A%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%5Cn%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%20class%3D%5C%22order-child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fa%3E%5Cn%20%20%20%20%20%20%3Chr%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22order-2%5C%22%3E%5Cn%20%20%20%20%20%20%3Ca%20href%3D%5C%22https%3A%2F%2Fjuejin.cn%2F%5C%22%20class%3D%5C%22order-parent%5C%22%20%40click.prevent.self%3D%5C%22onClickParent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8E%98%E9%87%91%5Cn%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cspan%20class%3D%5C%22order-child%5C%22%20%40click%3D%5C%22onClickChild%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fa%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'order'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickParent%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E7%88%B6%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickChild%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%88%91%E6%98%AF%E5%AD%90%E8%8A%82%E7%82%B9')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ik1zw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u45abffaf\" id=\"u45abffaf\" style=\"text-align: left\"><span data-lake-id=\"ufd2f59c6\" id=\"ufd2f59c6\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">您可以猜一下，上面的代码会发生什么，以下三点是可以明确的？</span></p><ol list=\"u64d31c97\"><li fid=\"ud87c03ab\" data-lake-id=\"u026e0880\" id=\"u026e0880\" style=\"text-align: left\"><span data-lake-id=\"ufa6517e8\" id=\"ufa6517e8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">首先可以明确的是点击上面和下面的子节点都不会触发父节点的点击事件</span></li><li fid=\"ud87c03ab\" data-lake-id=\"u699c1bdc\" id=\"u699c1bdc\" style=\"text-align: left\"><span data-lake-id=\"uc61fc751\" id=\"uc61fc751\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点击下面的父节点会打印出</span><strong><span data-lake-id=\"u4f800534\" id=\"u4f800534\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">我是父节点</span></strong><span data-lake-id=\"u2a7916b7\" id=\"u2a7916b7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">，但是</span><strong><span data-lake-id=\"uc2122e29\" id=\"uc2122e29\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不会跳转掘金</span></strong></li><li fid=\"ud87c03ab\" data-lake-id=\"u3d45e281\" id=\"u3d45e281\" style=\"text-align: left\"><span data-lake-id=\"u499435e9\" id=\"u499435e9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">点击上面的父节点</span><strong><span data-lake-id=\"u3a7c27b9\" id=\"u3a7c27b9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会</span></strong><span data-lake-id=\"u729cae55\" id=\"u729cae55\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">打印出</span><strong><span data-lake-id=\"uea986708\" id=\"uea986708\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">我是父节点</span></strong><span data-lake-id=\"u7f4cbbcc\" id=\"u7f4cbbcc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">,</span><strong><span data-lake-id=\"ub5a58ef7\" id=\"ub5a58ef7\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">也不会跳转掘金</span></strong></li></ol><p data-lake-id=\"u3f69b92c\" id=\"u3f69b92c\" style=\"text-align: left\"><span data-lake-id=\"uf3788ad8\" id=\"uf3788ad8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">但是点击上面的子节点，父节点会不会跳转至掘金呢？答案是</span><strong><span data-lake-id=\"u04a696d9\" id=\"u04a696d9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">会</span></strong></p><p data-lake-id=\"uc38b3260\" id=\"uc38b3260\" style=\"text-align: left\"><strong><span data-lake-id=\"u02e07e82\" id=\"u02e07e82\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">为什么？</span></strong></p><p data-lake-id=\"u215be7d4\" id=\"u215be7d4\" style=\"text-align: left\"><span data-lake-id=\"u1d13e6ec\" id=\"u1d13e6ec\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">a@click.self.prevent=&quot;onClickParent&quot;</span><span data-lake-id=\"u9727462f\" id=\"u9727462f\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的意思是当点击的元素是a元素本身时，会阻止默认事件（可以解释3，不会发生跳转），并且执行</span><span data-lake-id=\"ue5642cac\" id=\"ue5642cac\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"uab01d356\" id=\"uab01d356\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调。</span></p><p data-lake-id=\"ub1da1b63\" id=\"ub1da1b63\" style=\"text-align: left\"><span data-lake-id=\"uef142f1e\" id=\"uef142f1e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">而点击span元素时，由于冒泡的缘故，点击事件会传递给a，但是此时a会判断出该事件不是由自身触发的也就</span><span data-lake-id=\"u0ad19cbd\" id=\"u0ad19cbd\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">不会阻止默认事件</span><span data-lake-id=\"u245939eb\" id=\"u245939eb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">(此时也就发生跳转了)，当然也不会触发</span><span data-lake-id=\"u89f45faf\" id=\"u89f45faf\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"uf180d33b\" id=\"uf180d33b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调</span></p><p data-lake-id=\"uabac06b5\" id=\"uabac06b5\" style=\"text-align: left\"><span data-lake-id=\"u3d58dd5a\" id=\"u3d58dd5a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">同理来我们分析一下</span><span data-lake-id=\"ub392cdcb\" id=\"ub392cdcb\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">a@click.prevent.self=&quot;onClickParent&quot;</span></p><p data-lake-id=\"ud0b596b4\" id=\"ud0b596b4\" style=\"text-align: left\"><span data-lake-id=\"u8e45d2f4\" id=\"u8e45d2f4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">不管是子节点还是自身点击，都是先阻止默认事件，只有当触发点击事件是a元素本身时才会执行</span><span data-lake-id=\"u602f271b\" id=\"u602f271b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">onClickParent</span><span data-lake-id=\"u97fc194e\" id=\"u97fc194e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回调函数。</span></p><p data-lake-id=\"ua240052f\" id=\"ua240052f\" style=\"text-align: left\"><br></p><p data-lake-id=\"ucb88ba29\" id=\"ucb88ba29\" style=\"text-align: left\"><strong><span data-lake-id=\"u3b1d9624\" id=\"u3b1d9624\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">回过头看，你理解事件的顺序含义了吗？</span></strong></p><h2 data-lake-id=\"DH91z\" id=\"DH91z\" style=\"text-align: center\"><span data-lake-id=\"u6a50e933\" id=\"u6a50e933\" style=\"color: rgb(72, 179, 120)\">5. once</span></h2><p data-lake-id=\"u06a5cb91\" id=\"u06a5cb91\" style=\"text-align: left\"><span data-lake-id=\"uc2c3022e\" id=\"uc2c3022e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">顾名思义，事件只会触发一次</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22once%5C%22%20%40click.once%3D%5C%22onClickOnce%5C%22%3E%5Cn%20%20%20%20%E5%8F%AA%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'once'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickOnce%20()%20%7B%5Cn%20%20%20%20%20%20console.log('once%EF%BC%8C%E6%88%91%E5%8F%AA%E4%BC%9A%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ODOcx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ucfa4a5b4\" id=\"ucfa4a5b4\" style=\"text-align: left\"><span data-lake-id=\"u3ad3eb1c\" id=\"u3ad3eb1c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">触发一次点击之后，任我再怎么点，回调怎也不会触发了。</span></p><h2 data-lake-id=\"rB1Mt\" id=\"rB1Mt\" style=\"text-align: center\"><span data-lake-id=\"ueb7100c6\" id=\"ueb7100c6\" style=\"color: rgb(72, 179, 120)\">6 .native</span></h2><p data-lake-id=\"u918ccba9\" id=\"u918ccba9\" style=\"text-align: left\"><span data-lake-id=\"u25b855d6\" id=\"u25b855d6\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">我们知道在自定义组件上，只能监听自定义事件，一些原生事件（比如click）是没有办法直接触发的，但是使用</span><span data-lake-id=\"u3185ed9a\" id=\"u3185ed9a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.native</span><span data-lake-id=\"u48bab5c4\" id=\"u48bab5c4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">修饰符可以帮我们办到这点</span></p><p data-lake-id=\"uc9adf63a\" id=\"uc9adf63a\" style=\"text-align: left\"><strong><span data-lake-id=\"u04e5b17b\" id=\"u04e5b17b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">native.vue</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22native-custom%5C%22%3E%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown%3D%5C%22onKeydown%5C%22%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'nativeCustom'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20()%20%7B%5Cn%20%20%20%20%20%20this.%24emit('onKeydown')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tr0Jb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9d802653\" id=\"u9d802653\" style=\"text-align: left\"><strong><span data-lake-id=\"u52f2daa8\" id=\"u52f2daa8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">custom.vue</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22native%5C%22%3E%5Cn%20%20%20%20%3C!--%20%E5%8A%A0%E4%B8%8A.native%E4%B9%8B%E5%90%8E%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E6%89%8D%E5%BE%97%E4%BB%A5%E7%9B%91%E5%90%AC%E6%88%90%E5%8A%9F%20--%3E%5Cn%20%20%20%20%3CNativeCustom%20%40onKeydown%3D%5C%22onKeydown%5C%22%20%40click.native%3D%5C%22onClick%5C%22%20%2F%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnimport%20NativeCustom%20from%20'..%2F..%2Fcomponents%2Fnative.vue'%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'native'%2C%5Cn%20%20components%3A%20%7B%5Cn%20%20%20%20NativeCustom%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20()%20%7B%5Cn%20%20%20%20%20%20console.log('onKeydown')%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClick%20()%20%7B%5Cn%20%20%20%20%20%20console.log('onClick')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22muZrE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"R2RfU\" id=\"R2RfU\" style=\"text-align: center\"><span data-lake-id=\"ud6d71723\" id=\"ud6d71723\" style=\"color: rgb(72, 179, 120)\">7 .passive</span></h2><p data-lake-id=\"u3aaf4433\" id=\"u3aaf4433\" style=\"text-align: left\"><span data-lake-id=\"u61a7c823\" id=\"u61a7c823\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue对应 </span><span data-lake-id=\"uf6ccf160\" id=\"uf6ccf160\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">addEventListener</span><span data-lake-id=\"u294c6740\" id=\"u294c6740\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 中的 </span><span data-lake-id=\"uff59dcbc\" id=\"uff59dcbc\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">passive</span><span data-lake-id=\"u2f11a117\" id=\"u2f11a117\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 选项提供了 </span><span data-lake-id=\"u01beea48\" id=\"u01beea48\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.passive</span><span data-lake-id=\"u6eda2642\" id=\"u6eda2642\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 修饰符</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3C!--%20%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%20(%E5%8D%B3%E6%BB%9A%E5%8A%A8%E8%A1%8C%E4%B8%BA)%20%E5%B0%86%E4%BC%9A%E7%AB%8B%E5%8D%B3%E8%A7%A6%E5%8F%91%20--%3E%20%5Cn%3C!--%20%E8%80%8C%E4%B8%8D%E4%BC%9A%E7%AD%89%E5%BE%85%20%60onScroll%60%20%E5%AE%8C%E6%88%90%20--%3E%20%5Cn%3C!--%20%E8%BF%99%E5%85%B6%E4%B8%AD%E5%8C%85%E5%90%AB%20%60event.preventDefault()%60%20%E7%9A%84%E6%83%85%E5%86%B5%20--%3E%20%5Cn%5Cn%3Cdiv%20v-on%3Ascroll.passive%3D%5C%22onScroll%5C%22%3E...%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VOkR9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u02d48cc4\" id=\"u02d48cc4\" style=\"text-align: left\"><strong><span data-lake-id=\"u328905dc\" id=\"u328905dc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p data-lake-id=\"ua36224c6\" id=\"ua36224c6\" style=\"text-align: left\"><strong><span data-lake-id=\"u01dd724a\" id=\"u01dd724a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><p data-lake-id=\"ua638a5ee\" id=\"ua638a5ee\" style=\"text-align: left\"><strong><span data-lake-id=\"u336d4982\" id=\"u336d4982\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">这个修饰符对于滚动性能的提升，一直没找到合适的例子，跪求广大掘友有例子啊</span></strong></p><h1 data-lake-id=\"qD7c9\" id=\"qD7c9\" style=\"text-align: center\"><span data-lake-id=\"uc648cef1\" id=\"uc648cef1\" style=\"color: rgb(72, 179, 120)\">v-bind修饰符</span></h1><h2 data-lake-id=\"Z7kub\" id=\"Z7kub\" style=\"text-align: center\"><span data-lake-id=\"ubc4f71b1\" id=\"ubc4f71b1\" style=\"color: rgb(72, 179, 120)\">8 .sync</span></h2><p data-lake-id=\"u1e9120fe\" id=\"u1e9120fe\" style=\"text-align: left\"><span data-lake-id=\"u48435c66\" id=\"u48435c66\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当我们想要在</span><span data-lake-id=\"uef6a9e7e\" id=\"uef6a9e7e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">父组件</span><span data-lake-id=\"u4c841f64\" id=\"u4c841f64\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">和</span><span data-lake-id=\"u8e925e02\" id=\"u8e925e02\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">子组件</span><span data-lake-id=\"ud8be41d8\" id=\"ud8be41d8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">之间对某个属性值进行双向绑定时,有什么便捷的方式？是的只要</span><span data-lake-id=\"u69239036\" id=\"u69239036\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.sync</span><span data-lake-id=\"u3a7436a9\" id=\"u3a7436a9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">修饰符即可办到</span></p><p data-lake-id=\"u5f314776\" id=\"u5f314776\" style=\"text-align: left\"><br></p><h2 data-lake-id=\"KZCOv\" id=\"KZCOv\" style=\"text-align: center\"><span data-lake-id=\"ua139b88e\" id=\"ua139b88e\" style=\"color: rgb(72, 179, 120)\">9 .camel</span></h2><p data-lake-id=\"ub609f4e9\" id=\"ub609f4e9\" style=\"text-align: left\"><span data-lake-id=\"u2dc5d27b\" id=\"u2dc5d27b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.camel</span><span data-lake-id=\"ufee66121\" id=\"ufee66121\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> 修饰符允许在使用 DOM 模板时将 </span><span data-lake-id=\"u07193159\" id=\"u07193159\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">v-bind</span><span data-lake-id=\"u436715b7\" id=\"u436715b7\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> property 名称驼峰化，例如 SVG 的 </span><span data-lake-id=\"uc28a4c91\" id=\"uc28a4c91\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">viewBox</span><span data-lake-id=\"ubf73fd3e\" id=\"ubf73fd3e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> property：</span><span data-lake-id=\"u5f39a61c\" id=\"u5f39a61c\" class=\"lake-fontsize-9\" style=\"color: rgb(152, 195, 121); background-color: rgb(40, 44, 52)\">​</span></p><h2 data-lake-id=\"gux0B\" id=\"gux0B\" style=\"text-align: center\"><span data-lake-id=\"uacc6265c\" id=\"uacc6265c\" style=\"color: rgb(72, 179, 120)\">10 .prop</span></h2><p data-lake-id=\"ud239f232\" id=\"ud239f232\" style=\"text-align: left\"><span data-lake-id=\"u467e8f95\" id=\"u467e8f95\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">关于.prop修饰符官网只有这句话</span><span data-lake-id=\"ub1d2b259\" id=\"ub1d2b259\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\"> </span><span data-lake-id=\"u96392325\" id=\"u96392325\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.prop</span><span data-lake-id=\"u6de76d07\" id=\"u6de76d07\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">  作为一个 DOM property 绑定而不是作为 attribute 绑定。`。</span></p><p data-lake-id=\"u83eab9d2\" id=\"u83eab9d2\" style=\"text-align: left\"><strong><span data-lake-id=\"ud9a6307e\" id=\"ud9a6307e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">有啥作用？</span></strong></p><ol list=\"u98a92168\"><li fid=\"u377ad7c3\" data-lake-id=\"u0c2d02f3\" id=\"u0c2d02f3\" style=\"text-align: left\"><span data-lake-id=\"ub7475f2b\" id=\"ub7475f2b\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">通过自定义属性存储变量，避免暴露数据</span></li><li fid=\"u377ad7c3\" data-lake-id=\"ufab4e34e\" id=\"ufab4e34e\" style=\"text-align: left\"><span data-lake-id=\"u5ee521dc\" id=\"u5ee521dc\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">防止污染 HTML 结构</span></li></ol><p data-lake-id=\"u8e8dcaef\" id=\"u8e8dcaef\" style=\"text-align: left\"><span data-lake-id=\"ue93e2c10\" id=\"ue93e2c10\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">比如有以下代码</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22prop%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22prop-item%5C%22%20%3Amy-name%3D%5C%22prop%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%2F%2F%20%E6%9C%80%E7%BB%88%E5%8F%98%E6%88%90%E4%BA%86%20%3Cdiv%20my-name%3D%5C%22hello%20prop%5C%22%20class%3D%5C%22prop-item%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22prop-item%5C%22%20%3Amy-name.prop%3D%5C%22prop2%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%2F%2F%20%E6%9C%80%E7%BB%88%E5%8F%98%E6%88%90%E4%BA%86%3Cdiv%20class%3D%5C%22prop-item%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cbutton%20%40click%3D%5C%22onGetResult%5C%22%3E%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'prop'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20prop%3A%20'hello%20prop'%2C%5Cn%20%20%20%20%20%20prop2%3A%20'hello%20prop2'%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onGetResult%20()%20%7B%5Cn%20%20%20%20%20%20const%20%24refProp%20%3D%20this.%24refs.prop%5Cn%20%20%20%20%20%20const%20%24refProp2%20%3D%20this.%24refs.prop2%5Cn%5Cn%20%20%20%20%20%20console.log(%24refProp.getAttribute('my-name'))%20%2F%2F%20hello%20prop%5Cn%20%20%20%20%20%20console.log(%24refProp2.getAttribute('my-name'))%20%2F%2F%20null%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ziFk9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7bde18fa\" id=\"u7bde18fa\" style=\"text-align: left\"><span data-lake-id=\"u6a77b84b\" id=\"u6a77b84b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">从示例上可以看出未使用</span><span data-lake-id=\"ub003bb02\" id=\"ub003bb02\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.prop</span><span data-lake-id=\"u2be0e448\" id=\"u2be0e448\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符的</span><span data-lake-id=\"uf0642733\" id=\"uf0642733\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">my-name</span><span data-lake-id=\"u332b8f2e\" id=\"u332b8f2e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">属性会绑定到dom节点的attribute，从而出现暴露的情况。</span></p><h1 data-lake-id=\"NWe8M\" id=\"NWe8M\" style=\"text-align: center\"><span data-lake-id=\"u21aec479\" id=\"u21aec479\" style=\"color: rgb(72, 179, 120)\">鼠标修饰符</span></h1><p data-lake-id=\"u77b76e1c\" id=\"u77b76e1c\" style=\"text-align: left\"><span data-lake-id=\"u70061c48\" id=\"u70061c48\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当咱们想监听用户点击了</span><span data-lake-id=\"u2ee164c2\" id=\"u2ee164c2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">左键</span><span data-lake-id=\"u113dd482\" id=\"u113dd482\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u7435f193\" id=\"u7435f193\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">右键</span><span data-lake-id=\"uca6ca90c\" id=\"uca6ca90c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">或者</span><span data-lake-id=\"u99838646\" id=\"u99838646\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">中键</span><span data-lake-id=\"u7a4449f4\" id=\"u7a4449f4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">时也有修饰符可以快捷使用，分别是</span><span data-lake-id=\"u85668ad4\" id=\"u85668ad4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.left</span><span data-lake-id=\"u87199a6e\" id=\"u87199a6e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u38927fbe\" id=\"u38927fbe\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.right</span><span data-lake-id=\"u71a62b6e\" id=\"u71a62b6e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u734103d2\" id=\"u734103d2\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">middle</span><span data-lake-id=\"u23a7b74f\" id=\"u23a7b74f\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">，来看个例子试试</span></p><p data-lake-id=\"u034c0d8c\" id=\"u034c0d8c\" style=\"text-align: left\"><span data-lake-id=\"u8f05b9b9\" id=\"u8f05b9b9\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">根据MDN MouseEvent.button，介绍。</span></p><p data-lake-id=\"u85e7910c\" id=\"u85e7910c\" style=\"text-align: left\"><span data-lake-id=\"udc0795e4\" id=\"udc0795e4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">在最外层</span><span data-lake-id=\"u06acc726\" id=\"u06acc726\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">div.mouse</span><span data-lake-id=\"ue3b95e2b\" id=\"ue3b95e2b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">监听</span><span data-lake-id=\"ua2f69f32\" id=\"ua2f69f32\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">mousedown</span><span data-lake-id=\"u8d440a91\" id=\"u8d440a91\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件，看下用户点击的是鼠标哪个键，三个</span><span data-lake-id=\"u1ed81f0b\" id=\"u1ed81f0b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">button</span><span data-lake-id=\"u9a1dc4ac\" id=\"u9a1dc4ac\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">分别用三个修饰符快捷方式监听</span><span data-lake-id=\"u5e97c380\" id=\"u5e97c380\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">左键</span><span data-lake-id=\"ubffd9cb2\" id=\"ubffd9cb2\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u58b20840\" id=\"u58b20840\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">中键</span><span data-lake-id=\"uf3857139\" id=\"uf3857139\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u3b0b12c3\" id=\"u3b0b12c3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">右键</span><span data-lake-id=\"ua64d802a\" id=\"ua64d802a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">并打印出</span><span data-lake-id=\"uf84034bd\" id=\"uf84034bd\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">left</span><span data-lake-id=\"u6ed16036\" id=\"u6ed16036\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"ucfdb8c29\" id=\"ucfdb8c29\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">middle</span><span data-lake-id=\"uf4f1301c\" id=\"uf4f1301c\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u30d44fe0\" id=\"u30d44fe0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">right</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22mouse%5C%22%20%40mousedown%3D%5C%22onMousedown%5C%22%3E%5Cn%20%20%20%20%3Cbutton%20%40click.left%3D%5C%22onClickBtn('left')%5C%22%3Eleft%3C%2Fbutton%3E%5Cn%20%20%20%20%3Cbutton%20%40click.middle%3D%5C%22onClickBtn('middle')%5C%22%3Emiddle%3C%2Fbutton%3E%5Cn%20%20%20%20%3Cbutton%20%40click.right%3D%5C%22onClickBtn('right')%5C%22%3Eright%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'mouse'%2C%5Cn%20%20mounted%20()%20%7B%5Cn%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onClickBtn%20(msg)%20%7B%5Cn%20%20%20%20%20%20console.log(msg)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onMousedown%20(event)%20%7B%5Cn%20%20%20%20%20%20const%20mosueMsgMap%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%200%3A%20'%E9%BC%A0%E6%A0%87%E5%B7%A6%E9%94%AE'%2C%5Cn%20%20%20%20%20%20%20%201%3A%20'%E9%BC%A0%E6%A0%87%E4%B8%AD%E9%94%AE'%2C%5Cn%20%20%20%20%20%20%20%202%3A%20'%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE'%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20console.log('%E7%82%B9%E5%87%BB%E4%BA%86'%2C%20mosueMsgMap%5Bevent.button%5D)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OJArw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u0a41ddbe\" id=\"u0a41ddbe\" style=\"text-align: left\"><strong><span data-lake-id=\"uf17edfed\" id=\"uf17edfed\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">没有带鼠标回来，中键点击暂时不能演示，后续会补上</span></strong></p><p data-lake-id=\"u5bf141f5\" id=\"u5bf141f5\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718538-11650970-9341-438b-b845-a67688ff5897.gif%22%2C%22taskId%22%3A%22u74db735d-39da-43ad-b642-b24eee0ddf1%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22u4ad4c271%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua6fe34d8\" id=\"ua6fe34d8\" style=\"text-align: center\"><span data-lake-id=\"u230b710d\" id=\"u230b710d\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">mouse.gif</span></p><h2 data-lake-id=\"fFSe7\" id=\"fFSe7\" style=\"text-align: center\"><span data-lake-id=\"u7d2a0b47\" id=\"u7d2a0b47\" style=\"color: rgb(72, 179, 120)\">11 .left</span></h2><p data-lake-id=\"u73cf0bd7\" id=\"u73cf0bd7\" style=\"text-align: left\"><span data-lake-id=\"ubab06251\" id=\"ubab06251\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标左键点击</span></p><h2 data-lake-id=\"it85P\" id=\"it85P\" style=\"text-align: center\"><span data-lake-id=\"u43472952\" id=\"u43472952\" style=\"color: rgb(72, 179, 120)\">12 .right</span></h2><p data-lake-id=\"u89c91167\" id=\"u89c91167\" style=\"text-align: left\"><span data-lake-id=\"uff82bd4b\" id=\"uff82bd4b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标右键点击</span></p><h2 data-lake-id=\"LAxXy\" id=\"LAxXy\" style=\"text-align: center\"><span data-lake-id=\"ufec9e26a\" id=\"ufec9e26a\" style=\"color: rgb(72, 179, 120)\">13 .middle</span></h2><p data-lake-id=\"u7cc0d569\" id=\"u7cc0d569\" style=\"text-align: left\"><span data-lake-id=\"uec382e41\" id=\"uec382e41\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">同上例子，监听鼠标中键点击</span></p><h1 data-lake-id=\"hzYRz\" id=\"hzYRz\" style=\"text-align: center\"><span data-lake-id=\"u6edec5ad\" id=\"u6edec5ad\" style=\"color: rgb(72, 179, 120)\">表单相关修饰符</span></h1><h2 data-lake-id=\"Yph9D\" id=\"Yph9D\" style=\"text-align: center\"><span data-lake-id=\"uf2a6fd37\" id=\"uf2a6fd37\" style=\"color: rgb(72, 179, 120)\">14 .trim</span></h2><p data-lake-id=\"u1cb0902d\" id=\"u1cb0902d\" style=\"text-align: left\"><span data-lake-id=\"u53ccf2f3\" id=\"u53ccf2f3\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">对于输入的内容，希望可以</span><span data-lake-id=\"ubd41da66\" id=\"ubd41da66\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">过滤首尾空格</span><span data-lake-id=\"uf84cb461\" id=\"uf84cb461\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">应该怎么做呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22trim%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22trim-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model%3D%5C%22name%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%9A%3Cspan%3E%7B%7B%20name%20%7D%7D%3C%2Fspan%3E%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22trim-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.trim%3D%5C%22name2%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E7%94%A8%E6%88%B7%E5%90%8D2%EF%BC%9A%3Cspan%3E%7B%7B%20name2%20%7D%7D%3C%2Fspan%3E%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'trim'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20name%3A%20''%2C%5Cn%20%20%20%20%20%20name2%3A%20''%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20watch%3A%20%7B%5Cn%20%20%20%20name%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(%60'----%24%7BnewVal%7D----'%60)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20name2%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(%60'----%24%7BnewVal%7D----'%60)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Bx82u%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9f76bc9c\" id=\"u9f76bc9c\" style=\"text-align: left\"><strong><span data-lake-id=\"uaaf76aeb\" id=\"uaaf76aeb\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">.trim修饰符可以很方便做到</span></strong></p><h2 data-lake-id=\"S4q4U\" id=\"S4q4U\" style=\"text-align: center\"><span data-lake-id=\"u523e1764\" id=\"u523e1764\" style=\"color: rgb(72, 179, 120)\">15 .lazy</span></h2><p data-lake-id=\"u30cf5619\" id=\"u30cf5619\" style=\"text-align: left\"><span data-lake-id=\"u5f1b9449\" id=\"u5f1b9449\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">v-model</span><span data-lake-id=\"uefc3dd80\" id=\"uefc3dd80\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">大家都很熟悉，默认情况下，每次</span><span data-lake-id=\"ud4464356\" id=\"ud4464356\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">input事件</span><span data-lake-id=\"ud865ddb5\" id=\"ud865ddb5\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">触发的时候都会将输入框的值与其绑定的数据进行实时同步。但是如果想要实现光标离开的时候再更新数据如何实现呢？</span></p><p data-lake-id=\"u17cf87ef\" id=\"u17cf87ef\" style=\"text-align: left\"><strong><span data-lake-id=\"u13ec8cd8\" id=\"u13ec8cd8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">思路1：</span></strong><span data-lake-id=\"u76089b8a\" id=\"u76089b8a\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"u29d49872\" id=\"u29d49872\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">绑定change事件，在事件回调中手动获取target的值</span></p><p data-lake-id=\"u08b1b8a0\" id=\"u08b1b8a0\" style=\"text-align: left\"><strong><span data-lake-id=\"u6bb19acf\" id=\"u6bb19acf\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">思路2：</span></strong><span data-lake-id=\"u82ebf9ba\" id=\"u82ebf9ba\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"ub365d7d2\" id=\"ub365d7d2\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">直接使用</span><span data-lake-id=\"ubbdd602e\" id=\"ubbdd602e\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.lazy</span><span data-lake-id=\"uc251a322\" id=\"uc251a322\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符即可达到效果</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22lazy%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22lazy-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model%3D%5C%22text%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E6%97%A0.lazy%3A%20%7B%7B%20text%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22lazy-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.lazy%3D%5C%22text2%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E.lazy%3A%20%7B%7B%20text2%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'lazy'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20text%3A%20''%2C%5Cn%20%20%20%20%20%20text2%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HVqqo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"udee19840\" id=\"udee19840\" style=\"text-align: left\"><span data-lake-id=\"u45de1934\" id=\"u45de1934\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">可以看到添加了.lazy修饰符之后，第二个输入框输入的值不会实时反应在下面，而是光标离开实，</span><span data-lake-id=\"u0818e561\" id=\"u0818e561\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">text2</span><span data-lake-id=\"u0359bbef\" id=\"u0359bbef\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">的数据才更新了</span></p><h2 data-lake-id=\"LkaRe\" id=\"LkaRe\" style=\"text-align: center\"><span data-lake-id=\"u9bd0696f\" id=\"u9bd0696f\" style=\"color: rgb(72, 179, 120)\">16 .number</span></h2><p data-lake-id=\"u7b7164ba\" id=\"u7b7164ba\" style=\"text-align: left\"><span data-lake-id=\"u0d1b805c\" id=\"u0d1b805c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">我们知道</span><span data-lake-id=\"u3ec2baec\" id=\"u3ec2baec\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">input</span><span data-lake-id=\"u03d1e915\" id=\"u03d1e915\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">输入框的</span><span data-lake-id=\"u9589acc3\" id=\"u9589acc3\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">type</span><span data-lake-id=\"u5ede771d\" id=\"u5ede771d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">哪怕是</span><span data-lake-id=\"u43eaf4ee\" id=\"u43eaf4ee\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">number</span><span data-lake-id=\"u7dc1d024\" id=\"u7dc1d024\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">得到的值的类型也是</span><span data-lake-id=\"u1fef5508\" id=\"u1fef5508\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">string</span><span data-lake-id=\"uc3a9a8ab\" id=\"uc3a9a8ab\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">，如果我们想直接拿到</span><span data-lake-id=\"u76a7da75\" id=\"u76a7da75\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">number</span><span data-lake-id=\"u1cb93f60\" id=\"u1cb93f60\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">类型的数据，有不想麻烦的手动转换应该怎么办呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22number%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%E6%97%A0.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model%3D%5C%22number%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3Etype%3Atext%20.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20v-model.number%3D%5C%22number1%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22number-item%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3Etype%3Anumber%20.number%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model.number%3D%5C%22number2%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'lazy'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20number%3A%200%2C%5Cn%20%20%20%20%20%20number1%3A%20''%2C%5Cn%20%20%20%20%20%20number2%3A%20''%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20watch%3A%20%7B%5Cn%20%20%20%20number%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20number1%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20number2%20(newVal)%20%7B%5Cn%20%20%20%20%20%20console.log(typeof%20newVal%2C%20newVal)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22I5e3R%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u821a9205\" id=\"u821a9205\" style=\"text-align: left\"><span data-lake-id=\"ue0f09da4\" id=\"ue0f09da4\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><ol list=\"u811b0df5\"><li fid=\"ubfde6257\" data-lake-id=\"ue47ec899\" id=\"ue47ec899\" style=\"text-align: left\"><span data-lake-id=\"u3fec194d\" id=\"u3fec194d\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第一个输入框的类型是number，但是得到的值是string</span></li><li fid=\"ubfde6257\" data-lake-id=\"u4bc68a12\" id=\"u4bc68a12\" style=\"text-align: left\"><span data-lake-id=\"uaea0bc65\" id=\"uaea0bc65\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第二个输入框的类型是text,但是添加了number修饰符，得到的值可以是number（如果这个值无法被 </span><span data-lake-id=\"uc0037fa8\" id=\"uc0037fa8\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">parseFloat()</span><span data-lake-id=\"u45278a79\" id=\"u45278a79\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\"> 解析，则会返回原始的值。）</span></li><li fid=\"ubfde6257\" data-lake-id=\"u76d45212\" id=\"u76d45212\" style=\"text-align: left\"><span data-lake-id=\"ua9a2254f\" id=\"ua9a2254f\" class=\"lake-fontsize-12\" style=\"color: rgb(1, 1, 1)\">第三个输入框的类型是number，最后得到的值也是number</span></li></ol><p data-lake-id=\"uab3ceedb\" id=\"uab3ceedb\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718730-63ac6979-605e-4f25-b99e-4c4b0c6e222f.gif%22%2C%22taskId%22%3A%22u41d07f12-da60-4a2b-8499-f0209ae7331%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22u91c65a41%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u8d6fc7b8\" id=\"u8d6fc7b8\" style=\"text-align: center\"><span data-lake-id=\"u07bcd0ab\" id=\"u07bcd0ab\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">number.gif</span></p><h1 data-lake-id=\"tKRUK\" id=\"tKRUK\" style=\"text-align: center\"><span data-lake-id=\"u4d8f43d8\" id=\"u4d8f43d8\" style=\"color: rgb(72, 179, 120)\">系统修饰符</span></h1><p data-lake-id=\"ufaa7e651\" id=\"ufaa7e651\" style=\"text-align: left\"><span data-lake-id=\"ude2334a0\" id=\"ude2334a0\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">当点击事件或者键盘事件需要系统键同时按下才触发时</span><span data-lake-id=\"u2901b4a9\" id=\"u2901b4a9\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.ctrl</span><span data-lake-id=\"u3f125b55\" id=\"u3f125b55\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u622ce860\" id=\"u622ce860\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.alt</span><span data-lake-id=\"ud6869c6d\" id=\"ud6869c6d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"ub458bf9a\" id=\"ub458bf9a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.shift</span><span data-lake-id=\"u1edc2518\" id=\"u1edc2518\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">、</span><span data-lake-id=\"u46fba77b\" id=\"u46fba77b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.meta</span><span data-lake-id=\"u9a18352b\" id=\"u9a18352b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">可以帮大忙噢！</span></p><p data-lake-id=\"u5fcc32c7\" id=\"u5fcc32c7\" style=\"text-align: left\"><strong><span data-lake-id=\"u28ddb0fc\" id=\"u28ddb0fc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如下代码</span></strong></p><ol list=\"u9147195a\"><li fid=\"ud57cb901\" data-lake-id=\"uf606973f\" id=\"uf606973f\" style=\"text-align: left\"><span data-lake-id=\"ud6fc24ee\" id=\"ud6fc24ee\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">全局监听keydown事件，尝试看</span><span data-lake-id=\"u480ba258\" id=\"u480ba258\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.ctrl</span><span data-lake-id=\"u631f914d\" id=\"u631f914d\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u034682f4\" id=\"u034682f4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.alt</span><span data-lake-id=\"ua84d8ba6\" id=\"ua84d8ba6\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u30b9e19d\" id=\"u30b9e19d\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.shift</span><span data-lake-id=\"u1c346d70\" id=\"u1c346d70\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u76c35f7a\" id=\"u76c35f7a\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.meta</span><span data-lake-id=\"u89c38233\" id=\"u89c38233\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">是否被按下</span></li><li fid=\"ud57cb901\" data-lake-id=\"u2bc1ab75\" id=\"u2bc1ab75\" style=\"text-align: left\"><span data-lake-id=\"u6260c966\" id=\"u6260c966\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">分别给四个按钮加上</span><span data-lake-id=\"ua8f93abf\" id=\"ua8f93abf\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\"> </span><span data-lake-id=\"uc6fd784b\" id=\"uc6fd784b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.ctrl</span><span data-lake-id=\"u2a6d31fd\" id=\"u2a6d31fd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u59aa2655\" id=\"u59aa2655\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.alt</span><span data-lake-id=\"u31bd89a8\" id=\"u31bd89a8\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"ud66e4550\" id=\"ud66e4550\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.shift</span><span data-lake-id=\"ua0700796\" id=\"ua0700796\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u72474bfe\" id=\"u72474bfe\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.meta</span><span data-lake-id=\"ue902c1ee\" id=\"ue902c1ee\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">修饰符并配合点击事件，验证是否同时按下指定按键，再点击才会生效</span></li></ol><p data-lake-id=\"u91bd6c9d\" id=\"u91bd6c9d\" style=\"text-align: left\"><strong><span data-lake-id=\"u2324a8dc\" id=\"u2324a8dc\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">注明：电脑ctrl键 + 点击估计和浏览器快捷配置冲突了，导致没触发</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22system%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%7B%7B%20msg%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22buttons%5C%22%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.ctrl%3D%5C%22onClickButon('ctrl')%5C%22%3Ectrl%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.alt%3D%5C%22onClickButon('alt')%5C%22%3Ealt%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.shift%3D%5C%22onClickButon('shift')%5C%22%3Eshift%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.meta%3D%5C%22onClickButon('meta')%5C%22%3Emeta%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'system'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20msg%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.onListenSystemKeyDown()%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onListenSystemKeyDown%20()%20%7B%5Cn%20%20%20%20%20%20document.addEventListener('keydown'%2C%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20let%20msg%20%3D%20'%E6%8C%89%E4%B8%8B%E4%BA%86'%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(event.ctrlKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'ctrl%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.altKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'alt%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.shiftKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'shift%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.metaKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'meta%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'%E5%85%B6%E4%BB%96%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.msg%20%3D%20msg%5Cn%20%20%20%20%20%20%7D%2C%20false)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickButon%20(key)%20%7B%5Cn%20%20%20%20%20%20console.log(%60%E5%8F%AA%E6%9C%89%E5%90%8C%E6%97%B6%E6%8C%89%E4%B8%8B%24%7Bkey%7D%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%60)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22sEv8K%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"vrHrH\" id=\"vrHrH\" style=\"text-align: center\"><span data-lake-id=\"u3319dd7c\" id=\"u3319dd7c\" style=\"color: rgb(72, 179, 120)\">17 .ctrl</span></h2><p data-lake-id=\"u64329c6b\" id=\"u64329c6b\" style=\"text-align: left\"><span data-lake-id=\"u60d29d8e\" id=\"u60d29d8e\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下ctrl按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"EDUwo\" id=\"EDUwo\" style=\"text-align: center\"><span data-lake-id=\"ub7fe4845\" id=\"ub7fe4845\" style=\"color: rgb(72, 179, 120)\">18 .alt</span></h2><p data-lake-id=\"u38c5ac20\" id=\"u38c5ac20\" style=\"text-align: left\"><span data-lake-id=\"u772e7304\" id=\"u772e7304\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下alt按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"JBKLM\" id=\"JBKLM\" style=\"text-align: center\"><span data-lake-id=\"u19ccadea\" id=\"u19ccadea\" style=\"color: rgb(72, 179, 120)\">19 .shift</span></h2><p data-lake-id=\"uf3481f3f\" id=\"uf3481f3f\" style=\"text-align: left\"><span data-lake-id=\"uf99c4263\" id=\"uf99c4263\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下shift按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"UnowS\" id=\"UnowS\" style=\"text-align: center\"><span data-lake-id=\"uce751ccf\" id=\"uce751ccf\" style=\"color: rgb(72, 179, 120)\">20 .meta</span></h2><p data-lake-id=\"u1f33c1d8\" id=\"u1f33c1d8\" style=\"text-align: left\"><span data-lake-id=\"u7764a65b\" id=\"u7764a65b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">仅在按下meta按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Xw5H6\" id=\"Xw5H6\" style=\"text-align: center\"><span data-lake-id=\"u24c67305\" id=\"u24c67305\" style=\"color: rgb(72, 179, 120)\">21 .exact</span></h2><p data-lake-id=\"ua62785aa\" id=\"ua62785aa\" style=\"text-align: left\"><span data-lake-id=\"u46f32d6f\" id=\"u46f32d6f\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">严格来说这</span><span data-lake-id=\"u4dbac899\" id=\"u4dbac899\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.exact</span><span data-lake-id=\"u43b5013c\" id=\"u43b5013c\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">不属于系统修饰符，只是上面例子的写法有一个现象，同时按下几个系统修饰键（例如alt和shift）既可以触发</span><span data-lake-id=\"u89155beb\" id=\"u89155beb\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.alt</span><span data-lake-id=\"uea00f4cc\" id=\"uea00f4cc\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">也可以触发</span><span data-lake-id=\"uf76142e0\" id=\"uf76142e0\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113); background-color: rgb(251, 249, 253)\">.shift</span><span data-lake-id=\"ubecfe885\" id=\"ubecfe885\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">。</span></p><p data-lake-id=\"u97cf7b30\" id=\"u97cf7b30\" style=\"text-align: left\"><span data-lake-id=\"uc2817803\" id=\"uc2817803\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">还是用上面的例子，看一下下面的gif, 此时我同时按下了alt和shift，对应的两个事件都可以触发</span></p><p data-lake-id=\"u041103f6\" id=\"u041103f6\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F12838787%2F1637744718900-f7f1c0a9-53bb-4896-8df6-7b136c77f55f.gif%22%2C%22taskId%22%3A%22u98a03c13-3c8f-42ff-aaf6-d3be97c1223%22%2C%22clientId%22%3A%22ube0a7b57-a3b9-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A70%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1%2C%22originHeight%22%3A1%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22uaac7048a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf5f71344\" id=\"uf5f71344\" style=\"text-align: center\"><span data-lake-id=\"u79e233e3\" id=\"u79e233e3\" class=\"lake-fontsize-9\" style=\"color: rgb(136, 136, 136)\">system2.gif</span></p><ol list=\"u0c8cb98f\"><li fid=\"u082a9c9d\" data-lake-id=\"ue2720757\" id=\"ue2720757\" style=\"text-align: left\"><strong><span data-lake-id=\"u202b2ffd\" id=\"u202b2ffd\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">只想某个系统修饰键按下时才触发点击</span></strong></li><li fid=\"u082a9c9d\" data-lake-id=\"ua773930b\" id=\"ua773930b\" style=\"text-align: left\"><strong><span data-lake-id=\"uea07182f\" id=\"uea07182f\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">没有任何系统修饰符被按下的时候才触发点击</span></strong></li></ol><p data-lake-id=\"u72b0ed7d\" id=\"u72b0ed7d\" style=\"text-align: left\"><span data-lake-id=\"u333076e0\" id=\"u333076e0\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">要实现上面的需求</span><span data-lake-id=\"u836b73f7\" id=\"u836b73f7\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">.exact</span><span data-lake-id=\"u8efeff6e\" id=\"u8efeff6e\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">就派上用场了，用上面的例子稍作改造</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22extra%5C%22%3E%5Cn%20%20%20%20%3Cp%3E%7B%7B%20msg%20%7D%7D%3C%2Fp%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22buttons%5C%22%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.ctrl.exact%3D%5C%22onClickButon('ctrl')%5C%22%3Ectrl%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.alt.exact%3D%5C%22onClickButon('alt')%5C%22%3Ealt%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.shift.exact%3D%5C%22onClickButon('shift')%5C%22%3Eshift%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.meta.exact%3D%5C%22onClickButon('meta')%5C%22%3Emeta%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20%40click.exact%3D%5C%22onClickButon('%E9%9D%9E%E7%B3%BB%E7%BB%9F%E9%94%AE')%5C%22%3E%E9%9D%9E%E7%B3%BB%E7%BB%9F%E9%94%AE%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fdiv%3E%20%20%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'extra'%2C%5Cn%20%20data%20()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20msg%3A%20''%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20mounted%20()%20%7B%5Cn%20%20%20%20this.onListenSystemKeyDown()%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onListenSystemKeyDown%20()%20%7B%5Cn%20%20%20%20%20%20document.addEventListener('keydown'%2C%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20let%20msg%20%3D%20'%E6%8C%89%E4%B8%8B%E4%BA%86'%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(event.ctrlKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'ctrl%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.altKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'alt%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.shiftKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'shift%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(event.metaKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'meta%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20msg%20%2B%3D%20'%E5%85%B6%E4%BB%96%E9%94%AE'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.msg%20%3D%20msg%5Cn%20%20%20%20%20%20%7D%2C%20false)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20onClickButon%20(key)%20%7B%5Cn%20%20%20%20%20%20console.log(%60%E5%8F%AA%E6%9C%89%E5%90%8C%E6%97%B6%E6%8C%89%E4%B8%8B%24%7Bkey%7D%E9%94%AE%EF%BC%8C%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%89%8D%E4%BC%9A%E5%8F%91%E7%94%9F%60)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22RfSIX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h1 data-lake-id=\"QRDoL\" id=\"QRDoL\" style=\"text-align: center\"><span data-lake-id=\"u9e072fe4\" id=\"u9e072fe4\" style=\"color: rgb(72, 179, 120)\">按键修饰符</span></h1><p data-lake-id=\"u4d7607d4\" id=\"u4d7607d4\" style=\"text-align: left\"><span data-lake-id=\"ud435401d\" id=\"ud435401d\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在监听键盘事件时，我们经常需要检查详细的按键再执行对应的逻辑，vue也为我们内置了至少11+的按键修饰符。</span></p><p data-lake-id=\"u90021919\" id=\"u90021919\" style=\"text-align: left\"><span data-lake-id=\"u90ca1994\" id=\"u90ca1994\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">如下代码，我们分别给</span><span data-lake-id=\"u1b9ae731\" id=\"u1b9ae731\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">enter</span><span data-lake-id=\"u77e90de4\" id=\"u77e90de4\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u843ed54b\" id=\"u843ed54b\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">tab</span><span data-lake-id=\"uc436000b\" id=\"uc436000b\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"uf15decc4\" id=\"uf15decc4\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">delete</span><span data-lake-id=\"u9eea15d1\" id=\"u9eea15d1\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">等按键指定了</span><span data-lake-id=\"u84258e58\" id=\"u84258e58\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">keydown</span><span data-lake-id=\"u6b965914\" id=\"u6b965914\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">事件，当在指定的输入框中按下指定的键盘，会打印出</span><span data-lake-id=\"uf4a443c5\" id=\"uf4a443c5\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">enter</span><span data-lake-id=\"u22d7fe84\" id=\"u22d7fe84\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u24545ebc\" id=\"u24545ebc\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">tab</span><span data-lake-id=\"ua5469367\" id=\"ua5469367\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">、</span><span data-lake-id=\"u94786a77\" id=\"u94786a77\" class=\"lake-fontsize-11\" style=\"color: rgb(40, 202, 113)\">delete</span><span data-lake-id=\"ud11bd656\" id=\"ud11bd656\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">等，其他按键在输入框中无法触发该console</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22key-modifiers%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20enter%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.enter%3D%5C%22onKeydown('enter')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20tab%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.tab%3D%5C%22onKeydown('tab')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20delete%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.delete%3D%5C%22onKeydown('delete')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20esc%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.esc%3D%5C%22onKeydown('esc')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20space%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.space%3D%5C%22onKeydown('space')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20up%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.up%3D%5C%22onKeydown('up')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20down%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.down%3D%5C%22onKeydown('down')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20left%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.left%3D%5C%22onKeydown('left')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20right%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.right%3D%5C%22onKeydown('right')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20page-down%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.page-down%3D%5C%22onKeydown('page-down')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22key-modifiers-item%5C%22%3E%5Cn%20%20%20%20%20%20page-up%3A%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.page-up%3D%5C%22onKeydown('page-up')%5C%22%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'keyModifiers'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20onKeydown%20(keyName)%20%7B%5Cn%20%20%20%20%20%20console.log(keyName)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22B9SEe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"C8jGV\" id=\"C8jGV\" style=\"text-align: center\"><span data-lake-id=\"u3727bbec\" id=\"u3727bbec\" style=\"color: rgb(72, 179, 120)\">22 .enter</span></h2><p data-lake-id=\"ud5f87782\" id=\"ud5f87782\" style=\"text-align: left\"><span data-lake-id=\"uad1dcaf4\" id=\"uad1dcaf4\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下enter按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Jw4r0\" id=\"Jw4r0\" style=\"text-align: center\"><span data-lake-id=\"u9ecaef2a\" id=\"u9ecaef2a\" style=\"color: rgb(72, 179, 120)\">23 .tab</span></h2><p data-lake-id=\"u9c9e02bc\" id=\"u9c9e02bc\" style=\"text-align: left\"><span data-lake-id=\"udc6c96c9\" id=\"udc6c96c9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下tab按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"U7gUW\" id=\"U7gUW\" style=\"text-align: center\"><span data-lake-id=\"u8a6d0533\" id=\"u8a6d0533\" style=\"color: rgb(72, 179, 120)\">24 .delete</span></h2><p data-lake-id=\"uc1a938d3\" id=\"uc1a938d3\" style=\"text-align: left\"><span data-lake-id=\"uc59dbfb9\" id=\"uc59dbfb9\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下delete按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"q769F\" id=\"q769F\" style=\"text-align: center\"><span data-lake-id=\"u9b7785bc\" id=\"u9b7785bc\" style=\"color: rgb(72, 179, 120)\">25 .esc</span></h2><p data-lake-id=\"ub6706d3d\" id=\"ub6706d3d\" style=\"text-align: left\"><span data-lake-id=\"ue546c163\" id=\"ue546c163\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下esc按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"lSVHX\" id=\"lSVHX\" style=\"text-align: center\"><span data-lake-id=\"u108dbc34\" id=\"u108dbc34\" style=\"color: rgb(72, 179, 120)\">26 .space</span></h2><p data-lake-id=\"u71878930\" id=\"u71878930\" style=\"text-align: left\"><span data-lake-id=\"u3d475235\" id=\"u3d475235\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下space按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"CJR2h\" id=\"CJR2h\" style=\"text-align: center\"><span data-lake-id=\"ua84f430a\" id=\"ua84f430a\" style=\"color: rgb(72, 179, 120)\">27 .up</span></h2><p data-lake-id=\"ub10f88fd\" id=\"ub10f88fd\" style=\"text-align: left\"><span data-lake-id=\"uecd98c1b\" id=\"uecd98c1b\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下up按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"jtFso\" id=\"jtFso\" style=\"text-align: center\"><span data-lake-id=\"u61610469\" id=\"u61610469\" style=\"color: rgb(72, 179, 120)\">28 .down</span></h2><p data-lake-id=\"u9dfc216b\" id=\"u9dfc216b\" style=\"text-align: left\"><span data-lake-id=\"uc830c3b3\" id=\"uc830c3b3\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下down按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"KcsBn\" id=\"KcsBn\" style=\"text-align: center\"><span data-lake-id=\"u54800d8b\" id=\"u54800d8b\" style=\"color: rgb(72, 179, 120)\">29 .left</span></h2><p data-lake-id=\"u700fb838\" id=\"u700fb838\" style=\"text-align: left\"><span data-lake-id=\"uc63696ba\" id=\"uc63696ba\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下left按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"Mrnjd\" id=\"Mrnjd\" style=\"text-align: center\"><span data-lake-id=\"u7fd7a6bb\" id=\"u7fd7a6bb\" style=\"color: rgb(72, 179, 120)\">30 .right</span></h2><p data-lake-id=\"ub38af451\" id=\"ub38af451\" style=\"text-align: left\"><span data-lake-id=\"ua611fea8\" id=\"ua611fea8\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下right按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"P5Hyd\" id=\"P5Hyd\" style=\"text-align: center\"><span data-lake-id=\"u47e836c0\" id=\"u47e836c0\" style=\"color: rgb(72, 179, 120)\">31 .page-down</span></h2><p data-lake-id=\"ufd717625\" id=\"ufd717625\" style=\"text-align: left\"><span data-lake-id=\"udf6c0267\" id=\"udf6c0267\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下(fn + down)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h2 data-lake-id=\"vV3ei\" id=\"vV3ei\" style=\"text-align: center\"><span data-lake-id=\"u1425a2c6\" id=\"u1425a2c6\" style=\"color: rgb(72, 179, 120)\">32 .page-up</span></h2><p data-lake-id=\"u8e8f7298\" id=\"u8e8f7298\" style=\"text-align: left\"><span data-lake-id=\"u8159c057\" id=\"u8159c057\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">在按下(fn + up)按键时才触发鼠标或键盘事件的监听器，详细例子请看上面</span></p><h1 data-lake-id=\"iSrWh\" id=\"iSrWh\" style=\"text-align: center\"><span data-lake-id=\"u77cef408\" id=\"u77cef408\" style=\"color: rgb(72, 179, 120)\">如何自定义按键修饰符</span></h1><p data-lake-id=\"ue30e99ce\" id=\"ue30e99ce\" style=\"text-align: left\"><span data-lake-id=\"u972e1832\" id=\"u972e1832\" class=\"lake-fontsize-1515\" style=\"color: rgb(89, 89, 89); background-color: rgb(251, 249, 253)\">vue本身给我们内置了很多实用的按键修饰符，大部分情况下可以满足我们的日常需求了，那么有没有办法可以自定义按键修饰符呢？</span></p><p data-lake-id=\"uac1c7481\" id=\"uac1c7481\" style=\"text-align: left\"><span data-lake-id=\"u652ee143\" id=\"u652ee143\" class=\"lake-fontsize-12\" style=\"color: rgb(74, 74, 74)\">通过以下配置即可定义一个属于我们自己的按键修饰符, 比如我们定义q为按下q的快捷键。</span></p><p data-lake-id=\"ub35a9201\" id=\"ub35a9201\" style=\"text-align: left\"><span data-lake-id=\"u980a877d\" id=\"u980a877d\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Vue.config.keyCodes%20%3D%20%7B%5Cn%20%20q%3A%2081%5Cn%7D%5Cn%5Cn%3Cdiv%20class%3D%5C%22custom%5C%22%3E%5Cn%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%40keydown.q%3D%5C%22f1Keydown%5C%22%3E%5Cn%3C%2Fdiv%3E%5Cn%5Cnexport%20default%20%7B%5Cn%20%20name%3A%20'custom'%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20f1Keydown%20()%20%7B%5Cn%20%20%20%20%20%20console.log('%E6%8C%89%E4%B8%8B%E4%BA%86q')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22yT5kG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u375923cb\" id=\"u375923cb\" style=\"text-align: left\"><span data-lake-id=\"u8c6843cd\" id=\"u8c6843cd\" class=\"lake-fontsize-9\" style=\"color: rgb(171, 178, 191); background-color: rgb(40, 44, 52)\"><br /><br /></span></p><p data-lake-id=\"u99728a98\" id=\"u99728a98\" style=\"text-align: left\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-09T02:36:37.000Z",
    "deleted_at": null,
    "created_at": "2021-11-24T09:05:01.000Z",
    "updated_at": "2021-12-09T02:40:34.000Z",
    "published_at": "2021-12-09T02:36:37.000Z",
    "first_published_at": "2021-12-09T02:36:37.000Z",
    "word_count": 4778,
    "cover": "https://cdn.nlark.com/yuque/0/2021/gif/12838787/1637744717267-b64bf757-8e0a-4acf-8499-ff28cfb0e9a5.gif",
    "description": "前言vue简洁好用体现在很多个地方，比如其内置了32+修饰符，可以很方便我们阻止冒泡、阻止默认事件、鼠标事件处理、系统键盘事件等等，让我们可以快速搞定业务，简直不要太方便噢！！！耽误您15分钟您可以收获：32+修饰符（包括事件修饰符、鼠标修饰符、表单修饰符、系统修饰符等等）的含义和使用如何利用...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 62339583,
    "slug": "xgatwt",
    "title": "使用类型断言达到预期",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 5,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-10T06:09:29.957Z",
      "updated_at": "2021-12-10T06:09:29.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-10T05:50:00.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-10T05:50:00.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"iQDKT\"></a>\n## tags: [vue修饰符]\ncategories: [vue修饰符]\n<a name=\"bT6Bo\"></a>\n## 类型断言\n\n<br />在学习TyScript的时候，虽然TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：\n```javascript\nconst getLength = target => {\n  if (target.length) {\n    return target.length;\n  } else {\n    return target.toString().length;\n  }\n};\n```\n这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：\n```typescript\nconst getLength = (target: string | number): number => {\n  if (target.length) { //  类型\"string | number\"上不存在属性\"length\"\n    return target.length; // 类型\"number\"上不存在属性\"length\"\n  } else {\n    return target.toString().length;\n  }\n};\n```\n当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。<br />                                     ![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png#clientId=u71ea46b0-f53e-4&from=paste&id=u58fe898e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=310&originWidth=667&originalType=binary&ratio=1&size=24199&status=done&style=none&taskId=uca4e8114-2b20-44b6-ac65-45cfd789757)<br />很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是<type>value，一种是value as type , 例子:\n```typescript\nconst getStrLength = (target: string | number): number => {\n  \n  if ((<string>target).length) { // 这种形式在JSX代码中不可以使用，而且也是TSLint不建议的写法\n    \n    return (target as string).length; // 这种形式是没有任何问题的写法，所以建议大家始终使用这种形式\n  } else {\n    return target.toString().length;\n  }\n};\n```\n​\n\n例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。<br />这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用**自定义类型保护**来简化这里。<br />注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。<br />​\n\n​\n\n![5cf4bfc100015d6b16000232.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg#clientId=u71ea46b0-f53e-4&from=ui&id=u7de5a917&margin=%5Bobject%20Object%5D&name=5cf4bfc100015d6b16000232.jpg&originHeight=232&originWidth=1600&originalType=binary&ratio=1&size=51607&status=done&style=none&taskId=u77d837b2-ece7-46af-a349-de5a00db9d2)<br />​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​<br />\n",
    "body_draft": "<a name=\"iQDKT\"></a>\n## tags: [vue修饰符]\ncategories: [vue修饰符]\n<a name=\"bT6Bo\"></a>\n## 类型断言\n\n<br />在学习TyScript的时候，虽然TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：\n```javascript\nconst getLength = target => {\n  if (target.length) {\n    return target.length;\n  } else {\n    return target.toString().length;\n  }\n};\n```\n这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：\n```typescript\nconst getLength = (target: string | number): number => {\n  if (target.length) { //  类型\"string | number\"上不存在属性\"length\"\n    return target.length; // 类型\"number\"上不存在属性\"length\"\n  } else {\n    return target.toString().length;\n  }\n};\n```\n当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。<br />                                     ![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png#clientId=u71ea46b0-f53e-4&from=paste&id=u58fe898e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=310&originWidth=667&originalType=binary&ratio=1&size=24199&status=done&style=none&taskId=uca4e8114-2b20-44b6-ac65-45cfd789757)<br />很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是<type>value，一种是value as type , 例子:\n```typescript\nconst getStrLength = (target: string | number): number => {\n  \n  if ((<string>target).length) { // 这种形式在JSX代码中不可以使用，而且也是TSLint不建议的写法\n    \n    return (target as string).length; // 这种形式是没有任何问题的写法，所以建议大家始终使用这种形式\n  } else {\n    return target.toString().length;\n  }\n};\n```\n​\n\n例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。<br />这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用**自定义类型保护**来简化这里。<br />注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。<br />​\n\n​\n\n![5cf4bfc100015d6b16000232.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg#clientId=u71ea46b0-f53e-4&from=ui&id=u7de5a917&margin=%5Bobject%20Object%5D&name=5cf4bfc100015d6b16000232.jpg&originHeight=232&originWidth=1600&originalType=binary&ratio=1&size=51607&status=done&style=none&taskId=u77d837b2-ece7-46af-a349-de5a00db9d2)<br />​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​\n\n​<br />\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"iQDKT\"><span class=\"ne-text\" style=\"color: #e06c75; font-size: 14px\">tags</span><span class=\"ne-text\" style=\"color: #abb2bf; font-size: 14px\">:</span><span class=\"ne-text\" style=\"color: #bbbbbb; font-size: 14px\"> [</span><span class=\"ne-text\" style=\"color: #e5c07b; font-size: 14px\">vue修饰符</span><span class=\"ne-text\" style=\"color: #bbbbbb; font-size: 14px\">]</span></h2><p id=\"u2bf98518\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: #e06c75; font-size: 14px\">categories</span><span class=\"ne-text\" style=\"color: #abb2bf; font-size: 14px\">:</span><span class=\"ne-text\" style=\"color: #bbbbbb; font-size: 14px\"> [</span><span class=\"ne-text\" style=\"color: #e5c07b; font-size: 14px\">vue修饰符</span><span class=\"ne-text\" style=\"color: #bbbbbb; font-size: 14px\">]</span></p><h2 id=\"bT6Bo\"><span class=\"ne-text\">类型断言</span></h2><p id=\"u21313d29\" class=\"ne-p\"><br></p><p id=\"ubf507e37\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 22px\">在学习TyScript的时候，虽然</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px\">TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：</span></p><pre data-language=\"javascript\" id=\"gdooN\" class=\"ne-codeblock language-javascript\">const getLength = target =&gt; {\n  if (target.length) {\n    return target.length;\n  } else {\n    return target.toString().length;\n  }\n};</pre><p id=\"u239f86b1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px\">这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：</span></p><pre data-language=\"typescript\" id=\"CE4Oc\" class=\"ne-codeblock language-typescript\">const getLength = (target: string | number): number =&gt; {\n  if (target.length) { //  类型&quot;string | number&quot;上不存在属性&quot;length&quot;\n    return target.length; // 类型&quot;number&quot;上不存在属性&quot;length&quot;\n  } else {\n    return target.toString().length;\n  }\n};</pre><p id=\"u69f4574a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。</span></p><p id=\"ue740337d\" class=\"ne-p\"><span class=\"ne-text\">                                     </span><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png\" width=\"667\" id=\"u58fe898e\" class=\"ne-image\"></p><p id=\"u0872c59d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是&lt;type&gt;value，一种是value as type , 例子:</span></p><pre data-language=\"typescript\" id=\"MJkLK\" class=\"ne-codeblock language-typescript\">const getStrLength = (target: string | number): number =&gt; {\n  \n  if ((&lt;string&gt;target).length) { // 这种形式在JSX代码中不可以使用，而且也是TSLint不建议的写法\n    \n    return (target as string).length; // 这种形式是没有任何问题的写法，所以建议大家始终使用这种形式\n  } else {\n    return target.toString().length;\n  }\n};</pre><p id=\"uba8da948\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"udd91489d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。</span></p><p id=\"u7bbba7c2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用</span><strong><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">自定义类型保护</span></strong><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">来简化这里。</span></p><p id=\"uee9f8db0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 22px; background-color: rgb(243, 245, 246)\">注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。</span></p><p id=\"u5d2ea52e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u38c9e2b1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u9d73cd36\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg\" width=\"1600\" id=\"u7de5a917\" class=\"ne-image\"></p><p id=\"u14351333\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ue71dfdda\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u2f6540c5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u516ee536\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ud965c3ad\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u05d5a341\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ube0fb324\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u37a253fb\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u7e8ed675\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u33f361bd\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ud0013144\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"ufa54ad67\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u672e206f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u6d4edc80\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"uf5e371d4\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u1ce67147\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p><p id=\"u0040830d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 19px; background-color: rgb(243, 245, 246)\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"iQDKT\" id=\"iQDKT\"><span data-lake-id=\"u3dbc43a5\" id=\"u3dbc43a5\" class=\"lake-fontsize-11\" style=\"color: #e06c75\">tags</span><span data-lake-id=\"u0ce93002\" id=\"u0ce93002\" class=\"lake-fontsize-11\" style=\"color: #abb2bf\">:</span><span data-lake-id=\"ue0327172\" id=\"ue0327172\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\"> [</span><span data-lake-id=\"u822efe32\" id=\"u822efe32\" class=\"lake-fontsize-11\" style=\"color: #e5c07b\">vue修饰符</span><span data-lake-id=\"u7e349071\" id=\"u7e349071\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\">]</span></h2><p data-lake-id=\"u2bf98518\" id=\"u2bf98518\"><span data-lake-id=\"u5efaffc8\" id=\"u5efaffc8\" class=\"lake-fontsize-11\" style=\"color: #e06c75\">categories</span><span data-lake-id=\"u4790ca91\" id=\"u4790ca91\" class=\"lake-fontsize-11\" style=\"color: #abb2bf\">:</span><span data-lake-id=\"u0f80582b\" id=\"u0f80582b\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\"> [</span><span data-lake-id=\"uae509e68\" id=\"uae509e68\" class=\"lake-fontsize-11\" style=\"color: #e5c07b\">vue修饰符</span><span data-lake-id=\"uf8377e9a\" id=\"uf8377e9a\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\">]</span></p><h2 data-lake-id=\"bT6Bo\" id=\"bT6Bo\"><span data-lake-id=\"ue5eda6f0\" id=\"ue5eda6f0\">类型断言</span></h2><p data-lake-id=\"u21313d29\" id=\"u21313d29\"><br></p><p data-lake-id=\"ubf507e37\" id=\"ubf507e37\"><span data-lake-id=\"ub22b44a5\" id=\"ub22b44a5\" class=\"lake-fontsize-16\">在学习TyScript的时候，虽然</span><span data-lake-id=\"u408c2514\" id=\"u408c2514\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33)\">TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20getLength%20%3D%20target%20%3D%3E%20%7B%5Cn%20%20if%20(target.length)%20%7B%5Cn%20%20%20%20return%20target.length%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22gdooN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u239f86b1\" id=\"u239f86b1\"><span data-lake-id=\"ue9e0a2e1\" id=\"ue9e0a2e1\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33)\">这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getLength%20%3D%20(target%3A%20string%20%7C%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20if%20(target.length)%20%7B%20%2F%2F%20%20%E7%B1%BB%E5%9E%8B%5C%22string%20%7C%20number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%5Cn%20%20%20%20return%20target.length%3B%20%2F%2F%20%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22CE4Oc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u69f4574a\" id=\"u69f4574a\"><span data-lake-id=\"u19a6b717\" id=\"u19a6b717\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。</span></p><p data-lake-id=\"ue740337d\" id=\"ue740337d\"><span data-lake-id=\"u7c9af4d1\" id=\"u7c9af4d1\">                                     </span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png%22%2C%22taskId%22%3A%22uca4e8114-2b20-44b6-ac65-45cfd789757%22%2C%22clientId%22%3A%22u71ea46b0-f53e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A24199%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A667%2C%22originHeight%22%3A310%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%20number*%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7length%5C%22'.%20%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7ength'ts(2339)%20any%20constgetLength%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%20%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20number%5C%22%E4%B8%8A%E4%B8%8D%E4%BB%94%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%20if(target.length)f%2F%E7%B1%BB%E5%9E%8B%5C%22'string%20r%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%221ength%5C%22%20ntarget.length%3B%2F%2F%E7%B1%BB%E5%9E%8B%20returnta%20number%5C%22%E4%B8%8A%20elsef%20returntarget.tostring).1ength%3B%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A157.87666%2C%22y%22%3A46.53325%2C%22width%22%3A105.32259000000002%2C%22height%22%3A25.157779999999995%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%22%7D%2C%7B%22x%22%3A283.64227%2C%22y%22%3A48.42235%2C%22width%22%3A256.61798000000005%2C%22height%22%3A19.546315999999997%2C%22text%22%3A%22number*%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7length%5C%22'.%22%7D%2C%7B%22x%22%3A176.13332%2C%22y%22%3A69.09079%2C%22width%22%3A391.28324%2C%22height%22%3A22.260000000000005%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7ength'ts(2339)%22%7D%2C%7B%22x%22%3A157.96732%2C%22y%22%3A108.469826%2C%22width%22%3A27.1027%2C%22height%22%3A12.099364000000008%2C%22text%22%3A%22any%22%7D%2C%7B%22x%22%3A7.2820873%2C%22y%22%3A135.2783%2C%22width%22%3A291.8120627%2C%22height%22%3A17.278870000000012%2C%22text%22%3A%22constgetLength%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%22%7D%2C%7B%22x%22%3A298.90787%2C%22y%22%3A136.9494%2C%22width%22%3A133.93319000000002%2C%22height%22%3A13.811160000000001%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A405.235%2C%22y%22%3A154.425%2C%22width%22%3A244.14679999999998%2C%22height%22%3A17.611069999999984%2C%22text%22%3A%22number%5C%22%E4%B8%8A%E4%B8%8D%E4%BB%94%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%22%7D%2C%7B%22x%22%3A45.043514%2C%22y%22%3A154.9553%2C%22width%22%3A333.448946%2C%22height%22%3A21.820809999999994%2C%22text%22%3A%22if(target.length)f%2F%E7%B1%BB%E5%9E%8B%5C%22'string%22%7D%2C%7B%22x%22%3A392.65646%2C%22y%22%3A178.39015%2C%22width%22%3A188.14298000000002%2C%22height%22%3A17.711309999999997%2C%22text%22%3A%22r%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%221ength%5C%22%22%7D%2C%7B%22x%22%3A113.206764%2C%22y%22%3A177.73004%2C%22width%22%3A218.59380599999997%2C%22height%22%3A19.355760000000004%2C%22text%22%3A%22ntarget.length%3B%2F%2F%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A63.28467%2C%22y%22%3A179.98299%2C%22width%22%3A77.49309%2C%22height%22%3A16.132409999999993%2C%22text%22%3A%22returnta%22%7D%2C%7B%22x%22%3A339.0349%2C%22y%22%3A180.60414%2C%22width%22%3A74.95035999999999%2C%22height%22%3A14.720220000000012%2C%22text%22%3A%22number%5C%22%E4%B8%8A%22%7D%2C%7B%22x%22%3A49.52126%2C%22y%22%3A201.50458%2C%22width%22%3A70.11055%2C%22height%22%3A20.072630000000004%2C%22text%22%3A%22elsef%22%7D%2C%7B%22x%22%3A63.835316%2C%22y%22%3A224.68762%2C%22width%22%3A296.90641400000004%2C%22height%22%3A23.850269999999995%2C%22text%22%3A%22returntarget.tostring).1ength%3B%22%7D%5D%2C%22id%22%3A%22u58fe898e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u0872c59d\" id=\"u0872c59d\"><span data-lake-id=\"u917e3102\" id=\"u917e3102\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是&lt;type&gt;value，一种是value as type , 例子:</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getStrLength%20%3D%20(target%3A%20string%20%7C%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20%5Cn%20%20if%20((%3Cstring%3Etarget).length)%20%7B%20%2F%2F%20%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E5%9C%A8JSX%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%80%8C%E4%B8%94%E4%B9%9F%E6%98%AFTSLint%E4%B8%8D%E5%BB%BA%E8%AE%AE%E7%9A%84%E5%86%99%E6%B3%95%5Cn%20%20%20%20%5Cn%20%20%20%20return%20(target%20as%20string).length%3B%20%2F%2F%20%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E6%98%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E9%97%AE%E9%A2%98%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BB%BA%E8%AE%AE%E5%A4%A7%E5%AE%B6%E5%A7%8B%E7%BB%88%E4%BD%BF%E7%94%A8%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22MJkLK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uba8da948\" id=\"uba8da948\"><span data-lake-id=\"uc7f69782\" id=\"uc7f69782\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"udd91489d\" id=\"udd91489d\"><span data-lake-id=\"ua459e61f\" id=\"ua459e61f\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。</span></p><p data-lake-id=\"u7bbba7c2\" id=\"u7bbba7c2\"><span data-lake-id=\"u7a07bd58\" id=\"u7a07bd58\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用</span><strong><span data-lake-id=\"ud1d685f5\" id=\"ud1d685f5\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">自定义类型保护</span></strong><span data-lake-id=\"u9ff29b70\" id=\"u9ff29b70\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">来简化这里。</span></p><p data-lake-id=\"uee9f8db0\" id=\"uee9f8db0\"><span data-lake-id=\"u65a25d67\" id=\"u65a25d67\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。</span></p><p data-lake-id=\"u5d2ea52e\" id=\"u5d2ea52e\"><span data-lake-id=\"uc2ecdb53\" id=\"uc2ecdb53\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u38c9e2b1\" id=\"u38c9e2b1\"><span data-lake-id=\"u592724a9\" id=\"u592724a9\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u9d73cd36\" id=\"u9d73cd36\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg%22%2C%22taskId%22%3A%22u77d837b2-ece7-46af-a349-de5a00db9d2%22%2C%22clientId%22%3A%22u71ea46b0-f53e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfc100015d6b16000232.jpg%22%2C%22size%22%3A51607%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A232%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%A0%B9%E5%BF%B5%20%E5%9E%8B%E6%96%AD%E8%A8%80%E6%9C%89%E7%82%B9%E5%81%B6%E6%98%AF%E4%B8%80%E7%A7%8D%E5%9E%8B%E8%BD%AC%E6%8D%A2%2C%E4%BB%96%E6%8A%8A%E7%AE%97%E4%B8%AA%E5%80%BC%E5%BC%BA%E8%A1%8C%E6%8C%87%E5%AE%9A%E4%B8%BA%E7%89%B9%E5%AE%9A%E7%BE%8E%E5%9E%8B%20%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E8%BE%BE%E5%88%B0%E9%A2%84%E6%9C%9F%20%E7%84%B6%5D5%E5%BE%88%E5%BC%BA%E5%A4%A7%2C%E4%BD%86%E4%B8%BA%E6%97%B6%E5%AE%9D%E6%97%BA%E6%98%AF%E4%B8%8D%E5%A6%82%E6%88%91%E4%BB%AC%5D%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E7%9A%84%E4%BA%A4%E5%9E%8B%2C%E8%BF%99%E5%AF%B9%E4%BE%AF%E6%88%91%E4%BB%AC%E6%9B%B4%E5%B8%8C%E6%9C%9B%E4%B8%8D%E8%A6%81%20%E5%B8%AE%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E9%BA%A6%E5%9E%8B%E6%A3%80%E6%9F%A5%2C%E8%80%8C%E6%98%AF%E4%BA%A4%E7%BB%99%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9D%A5%2C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%94%A8%E5%88%B0%E4%BA%86%E9%BA%A6%E5%9E%8B%E6%96%AD%E5%AF%8C%20%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%2C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89%E7%BC%96%E8%AF%91%E5%AE%B6%E6%9F%90%E4%B8%AA%E5%80%BC%E7%A1%AE%E5%AE%9E%E6%98%AF%E6%88%91%E4%BB%AC%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E5%80%BC%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A563.8293%2C%22y%22%3A33.804096%2C%22width%22%3A144.91520000000003%2C%22height%22%3A19.966754%2C%22text%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%A0%B9%E5%BF%B5%22%7D%2C%7B%22x%22%3A788.755%2C%22y%22%3A33.79473%2C%22width%22%3A515.8702%2C%22height%22%3A19.417629999999996%2C%22text%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E6%9C%89%E7%82%B9%E5%81%B6%E6%98%AF%E4%B8%80%E7%A7%8D%E5%9E%8B%E8%BD%AC%E6%8D%A2%2C%E4%BB%96%E6%8A%8A%E7%AE%97%E4%B8%AA%E5%80%BC%E5%BC%BA%E8%A1%8C%E6%8C%87%E5%AE%9A%E4%B8%BA%E7%89%B9%E5%AE%9A%E7%BE%8E%E5%9E%8B%22%7D%2C%7B%22x%22%3A149.63089%2C%22y%22%3A103.366585%2C%22width%22%3A262.00261%2C%22height%22%3A25.86690499999999%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E8%BE%BE%E5%88%B0%E9%A2%84%E6%9C%9F%22%7D%2C%7B%22x%22%3A789.7317%2C%22y%22%3A121.12553%2C%22width%22%3A669.3433%2C%22height%22%3A19.44243%2C%22text%22%3A%22%E7%84%B6%5D5%E5%BE%88%E5%BC%BA%E5%A4%A7%2C%E4%BD%86%E4%B8%BA%E6%97%B6%E5%AE%9D%E6%97%BA%E6%98%AF%E4%B8%8D%E5%A6%82%E6%88%91%E4%BB%AC%5D%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E7%9A%84%E4%BA%A4%E5%9E%8B%2C%E8%BF%99%E5%AF%B9%E4%BE%AF%E6%88%91%E4%BB%AC%E6%9B%B4%E5%B8%8C%E6%9C%9B%E4%B8%8D%E8%A6%81%22%7D%2C%7B%22x%22%3A788.9221%2C%22y%22%3A147.46765%2C%22width%22%3A526.1944000000001%2C%22height%22%3A18.290160000000014%2C%22text%22%3A%22%E5%B8%AE%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E9%BA%A6%E5%9E%8B%E6%A3%80%E6%9F%A5%2C%E8%80%8C%E6%98%AF%E4%BA%A4%E7%BB%99%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9D%A5%2C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%94%A8%E5%88%B0%E4%BA%86%E9%BA%A6%E5%9E%8B%E6%96%AD%E5%AF%8C%22%7D%2C%7B%22x%22%3A556.7541%2C%22y%22%3A152.43811%2C%22width%22%3A151.95720000000006%2C%22height%22%3A22.52788000000001%2C%22text%22%3A%22%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%22%7D%2C%7B%22x%22%3A787.69055%2C%22y%22%3A189.42978%2C%22width%22%3A517.28855%2C%22height%22%3A19.349440000000016%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%2C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89%E7%BC%96%E8%AF%91%E5%AE%B6%E6%9F%90%E4%B8%AA%E5%80%BC%E7%A1%AE%E5%AE%9E%E6%98%AF%E6%88%91%E4%BB%AC%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E5%80%BC%22%7D%5D%2C%22id%22%3A%22u7de5a917%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u14351333\" id=\"u14351333\"><span data-lake-id=\"u0826ee32\" id=\"u0826ee32\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ue71dfdda\" id=\"ue71dfdda\"><span data-lake-id=\"u01011a96\" id=\"u01011a96\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u2f6540c5\" id=\"u2f6540c5\"><span data-lake-id=\"uc17d7fa4\" id=\"uc17d7fa4\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u516ee536\" id=\"u516ee536\"><span data-lake-id=\"ua757f033\" id=\"ua757f033\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ud965c3ad\" id=\"ud965c3ad\"><span data-lake-id=\"u740488fe\" id=\"u740488fe\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u05d5a341\" id=\"u05d5a341\"><span data-lake-id=\"u3e435fec\" id=\"u3e435fec\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ube0fb324\" id=\"ube0fb324\"><span data-lake-id=\"u833dd66f\" id=\"u833dd66f\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u37a253fb\" id=\"u37a253fb\"><span data-lake-id=\"uf56bfe51\" id=\"uf56bfe51\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u7e8ed675\" id=\"u7e8ed675\"><span data-lake-id=\"u8bd03524\" id=\"u8bd03524\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u33f361bd\" id=\"u33f361bd\"><span data-lake-id=\"u2f2e1d92\" id=\"u2f2e1d92\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ud0013144\" id=\"ud0013144\"><span data-lake-id=\"ud0b374bd\" id=\"ud0b374bd\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ufa54ad67\" id=\"ufa54ad67\"><span data-lake-id=\"u1e3f74ee\" id=\"u1e3f74ee\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u672e206f\" id=\"u672e206f\"><span data-lake-id=\"uc7fc6350\" id=\"uc7fc6350\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u6d4edc80\" id=\"u6d4edc80\"><span data-lake-id=\"ua7c4bc04\" id=\"ua7c4bc04\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"uf5e371d4\" id=\"uf5e371d4\"><span data-lake-id=\"u66a1a248\" id=\"u66a1a248\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u1ce67147\" id=\"u1ce67147\"><span data-lake-id=\"ud5592ad1\" id=\"ud5592ad1\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u0040830d\" id=\"u0040830d\"><span data-lake-id=\"u729a4e7f\" id=\"u729a4e7f\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"iQDKT\" id=\"iQDKT\"><span data-lake-id=\"u3dbc43a5\" id=\"u3dbc43a5\" class=\"lake-fontsize-11\" style=\"color: #e06c75\">tags</span><span data-lake-id=\"u0ce93002\" id=\"u0ce93002\" class=\"lake-fontsize-11\" style=\"color: #abb2bf\">:</span><span data-lake-id=\"ue0327172\" id=\"ue0327172\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\"> [</span><span data-lake-id=\"u822efe32\" id=\"u822efe32\" class=\"lake-fontsize-11\" style=\"color: #e5c07b\">vue修饰符</span><span data-lake-id=\"u7e349071\" id=\"u7e349071\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\">]</span></h2><p data-lake-id=\"u2bf98518\" id=\"u2bf98518\"><span data-lake-id=\"u5efaffc8\" id=\"u5efaffc8\" class=\"lake-fontsize-11\" style=\"color: #e06c75\">categories</span><span data-lake-id=\"u4790ca91\" id=\"u4790ca91\" class=\"lake-fontsize-11\" style=\"color: #abb2bf\">:</span><span data-lake-id=\"u0f80582b\" id=\"u0f80582b\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\"> [</span><span data-lake-id=\"uae509e68\" id=\"uae509e68\" class=\"lake-fontsize-11\" style=\"color: #e5c07b\">vue修饰符</span><span data-lake-id=\"uf8377e9a\" id=\"uf8377e9a\" class=\"lake-fontsize-11\" style=\"color: #bbbbbb\">]</span></p><h2 data-lake-id=\"bT6Bo\" id=\"bT6Bo\"><span data-lake-id=\"ue5eda6f0\" id=\"ue5eda6f0\">类型断言</span></h2><p data-lake-id=\"u21313d29\" id=\"u21313d29\"><br></p><p data-lake-id=\"ubf507e37\" id=\"ubf507e37\"><span data-lake-id=\"ub22b44a5\" id=\"ub22b44a5\" class=\"lake-fontsize-16\">在学习TyScript的时候，虽然</span><span data-lake-id=\"u408c2514\" id=\"u408c2514\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33)\">TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有点像是一种类型转换，它把某个值强行指定为特定类型 ：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20getLength%20%3D%20target%20%3D%3E%20%7B%5Cn%20%20if%20(target.length)%20%7B%5Cn%20%20%20%20return%20target.length%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22gdooN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u239f86b1\" id=\"u239f86b1\"><span data-lake-id=\"ue9e0a2e1\" id=\"ue9e0a2e1\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33)\">这个函数能够接收一个参数，并返回它的长度，我们可以传入字符串、数组或数值等类型的值。如果有 length 属性，说明参数是数组或字符串类型，如果是数值类型是没有 length 属性的，所以需要把数值类型转为字符串然后再获取 length 值。现在我们限定传入的值只能是字符串或数值类型的值：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getLength%20%3D%20(target%3A%20string%20%7C%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20if%20(target.length)%20%7B%20%2F%2F%20%20%E7%B1%BB%E5%9E%8B%5C%22string%20%7C%20number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%5Cn%20%20%20%20return%20target.length%3B%20%2F%2F%20%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22CE4Oc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u69f4574a\" id=\"u69f4574a\"><span data-lake-id=\"u19a6b717\" id=\"u19a6b717\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法，所以现在加了对参数target和返回值的类型定义之后就会报错。</span></p><p data-lake-id=\"ue740337d\" id=\"ue740337d\"><span data-lake-id=\"u7c9af4d1\" id=\"u7c9af4d1\">                                     </span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png%22%2C%22taskId%22%3A%22uca4e8114-2b20-44b6-ac65-45cfd789757%22%2C%22clientId%22%3A%22u71ea46b0-f53e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A24199%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A667%2C%22originHeight%22%3A310%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%20number*%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7length%5C%22'.%20%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7ength'ts(2339)%20any%20constgetLength%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%20%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20number%5C%22%E4%B8%8A%E4%B8%8D%E4%BB%94%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%20if(target.length)f%2F%E7%B1%BB%E5%9E%8B%5C%22'string%20r%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%221ength%5C%22%20ntarget.length%3B%2F%2F%E7%B1%BB%E5%9E%8B%20returnta%20number%5C%22%E4%B8%8A%20elsef%20returntarget.tostring).1ength%3B%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A157.87666%2C%22y%22%3A46.53325%2C%22width%22%3A105.32259000000002%2C%22height%22%3A25.157779999999995%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%22%7D%2C%7B%22x%22%3A283.64227%2C%22y%22%3A48.42235%2C%22width%22%3A256.61798000000005%2C%22height%22%3A19.546315999999997%2C%22text%22%3A%22number*%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7length%5C%22'.%22%7D%2C%7B%22x%22%3A176.13332%2C%22y%22%3A69.09079%2C%22width%22%3A391.28324%2C%22height%22%3A22.260000000000005%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7ength'ts(2339)%22%7D%2C%7B%22x%22%3A157.96732%2C%22y%22%3A108.469826%2C%22width%22%3A27.1027%2C%22height%22%3A12.099364000000008%2C%22text%22%3A%22any%22%7D%2C%7B%22x%22%3A7.2820873%2C%22y%22%3A135.2783%2C%22width%22%3A291.8120627%2C%22height%22%3A17.278870000000012%2C%22text%22%3A%22constgetLength%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%22%7D%2C%7B%22x%22%3A298.90787%2C%22y%22%3A136.9494%2C%22width%22%3A133.93319000000002%2C%22height%22%3A13.811160000000001%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A405.235%2C%22y%22%3A154.425%2C%22width%22%3A244.14679999999998%2C%22height%22%3A17.611069999999984%2C%22text%22%3A%22number%5C%22%E4%B8%8A%E4%B8%8D%E4%BB%94%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22length%5C%22%22%7D%2C%7B%22x%22%3A45.043514%2C%22y%22%3A154.9553%2C%22width%22%3A333.448946%2C%22height%22%3A21.820809999999994%2C%22text%22%3A%22if(target.length)f%2F%E7%B1%BB%E5%9E%8B%5C%22'string%22%7D%2C%7B%22x%22%3A392.65646%2C%22y%22%3A178.39015%2C%22width%22%3A188.14298000000002%2C%22height%22%3A17.711309999999997%2C%22text%22%3A%22r%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%221ength%5C%22%22%7D%2C%7B%22x%22%3A113.206764%2C%22y%22%3A177.73004%2C%22width%22%3A218.59380599999997%2C%22height%22%3A19.355760000000004%2C%22text%22%3A%22ntarget.length%3B%2F%2F%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A63.28467%2C%22y%22%3A179.98299%2C%22width%22%3A77.49309%2C%22height%22%3A16.132409999999993%2C%22text%22%3A%22returnta%22%7D%2C%7B%22x%22%3A339.0349%2C%22y%22%3A180.60414%2C%22width%22%3A74.95035999999999%2C%22height%22%3A14.720220000000012%2C%22text%22%3A%22number%5C%22%E4%B8%8A%22%7D%2C%7B%22x%22%3A49.52126%2C%22y%22%3A201.50458%2C%22width%22%3A70.11055%2C%22height%22%3A20.072630000000004%2C%22text%22%3A%22elsef%22%7D%2C%7B%22x%22%3A63.835316%2C%22y%22%3A224.68762%2C%22width%22%3A296.90641400000004%2C%22height%22%3A23.850269999999995%2C%22text%22%3A%22returntarget.tostring).1ength%3B%22%7D%5D%2C%22id%22%3A%22u58fe898e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u0872c59d\" id=\"u0872c59d\"><span data-lake-id=\"u917e3102\" id=\"u917e3102\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">很显然，我们是要做判断的，我们判断如果 target.length 不为 undefined， 说明它是有 length 属性的，但我们的参数是string | number联合类型，所以在我们开始做判断的时候就会报错。这个时候就要用类型断言，将tagrget的类型断言成string类型。它有两种写法，一种是&lt;type&gt;value，一种是value as type , 例子:</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getStrLength%20%3D%20(target%3A%20string%20%7C%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20%5Cn%20%20if%20((%3Cstring%3Etarget).length)%20%7B%20%2F%2F%20%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E5%9C%A8JSX%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%80%8C%E4%B8%94%E4%B9%9F%E6%98%AFTSLint%E4%B8%8D%E5%BB%BA%E8%AE%AE%E7%9A%84%E5%86%99%E6%B3%95%5Cn%20%20%20%20%5Cn%20%20%20%20return%20(target%20as%20string).length%3B%20%2F%2F%20%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E6%98%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E9%97%AE%E9%A2%98%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BB%BA%E8%AE%AE%E5%A4%A7%E5%AE%B6%E5%A7%8B%E7%BB%88%E4%BD%BF%E7%94%A8%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20target.toString().length%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22MJkLK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uba8da948\" id=\"uba8da948\"><span data-lake-id=\"uc7f69782\" id=\"uc7f69782\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"udd91489d\" id=\"udd91489d\"><span data-lake-id=\"ua459e61f\" id=\"ua459e61f\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">例子的函数体用到了三次target，前两次都是访问了 target.length 属性，所以都要用类型断言来表明这个地方是 string 类型；而最后的 target 调用了 toString方法，因为 number 和 string 类型的值都有 toString 方法，所以没有报错。</span></p><p data-lake-id=\"u7bbba7c2\" id=\"u7bbba7c2\"><span data-lake-id=\"u7a07bd58\" id=\"u7a07bd58\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">这样虽然没问题了，但是每一处不同值会有不同情况的地方都需要用类型断言，后面会使用</span><strong><span data-lake-id=\"ud1d685f5\" id=\"ud1d685f5\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">自定义类型保护</span></strong><span data-lake-id=\"u9ff29b70\" id=\"u9ff29b70\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">来简化这里。</span></p><p data-lake-id=\"uee9f8db0\" id=\"uee9f8db0\"><span data-lake-id=\"u65a25d67\" id=\"u65a25d67\" class=\"lake-fontsize-16\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">注意了，这两种写法都可以，但是 tslint 推荐使用as关键字，而且在 JSX 中只能使用as这种写法。</span></p><p data-lake-id=\"u5d2ea52e\" id=\"u5d2ea52e\"><span data-lake-id=\"uc2ecdb53\" id=\"uc2ecdb53\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u38c9e2b1\" id=\"u38c9e2b1\"><span data-lake-id=\"u592724a9\" id=\"u592724a9\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u9d73cd36\" id=\"u9d73cd36\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639116337330-534acb54-7a63-427d-9d74-8d7c9ce28dc3.jpeg%22%2C%22taskId%22%3A%22u77d837b2-ece7-46af-a349-de5a00db9d2%22%2C%22clientId%22%3A%22u71ea46b0-f53e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfc100015d6b16000232.jpg%22%2C%22size%22%3A51607%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A232%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%A0%B9%E5%BF%B5%20%E5%9E%8B%E6%96%AD%E8%A8%80%E6%9C%89%E7%82%B9%E5%81%B6%E6%98%AF%E4%B8%80%E7%A7%8D%E5%9E%8B%E8%BD%AC%E6%8D%A2%2C%E4%BB%96%E6%8A%8A%E7%AE%97%E4%B8%AA%E5%80%BC%E5%BC%BA%E8%A1%8C%E6%8C%87%E5%AE%9A%E4%B8%BA%E7%89%B9%E5%AE%9A%E7%BE%8E%E5%9E%8B%20%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E8%BE%BE%E5%88%B0%E9%A2%84%E6%9C%9F%20%E7%84%B6%5D5%E5%BE%88%E5%BC%BA%E5%A4%A7%2C%E4%BD%86%E4%B8%BA%E6%97%B6%E5%AE%9D%E6%97%BA%E6%98%AF%E4%B8%8D%E5%A6%82%E6%88%91%E4%BB%AC%5D%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E7%9A%84%E4%BA%A4%E5%9E%8B%2C%E8%BF%99%E5%AF%B9%E4%BE%AF%E6%88%91%E4%BB%AC%E6%9B%B4%E5%B8%8C%E6%9C%9B%E4%B8%8D%E8%A6%81%20%E5%B8%AE%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E9%BA%A6%E5%9E%8B%E6%A3%80%E6%9F%A5%2C%E8%80%8C%E6%98%AF%E4%BA%A4%E7%BB%99%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9D%A5%2C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%94%A8%E5%88%B0%E4%BA%86%E9%BA%A6%E5%9E%8B%E6%96%AD%E5%AF%8C%20%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%2C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89%E7%BC%96%E8%AF%91%E5%AE%B6%E6%9F%90%E4%B8%AA%E5%80%BC%E7%A1%AE%E5%AE%9E%E6%98%AF%E6%88%91%E4%BB%AC%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E5%80%BC%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A563.8293%2C%22y%22%3A33.804096%2C%22width%22%3A144.91520000000003%2C%22height%22%3A19.966754%2C%22text%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%A0%B9%E5%BF%B5%22%7D%2C%7B%22x%22%3A788.755%2C%22y%22%3A33.79473%2C%22width%22%3A515.8702%2C%22height%22%3A19.417629999999996%2C%22text%22%3A%22%E5%9E%8B%E6%96%AD%E8%A8%80%E6%9C%89%E7%82%B9%E5%81%B6%E6%98%AF%E4%B8%80%E7%A7%8D%E5%9E%8B%E8%BD%AC%E6%8D%A2%2C%E4%BB%96%E6%8A%8A%E7%AE%97%E4%B8%AA%E5%80%BC%E5%BC%BA%E8%A1%8C%E6%8C%87%E5%AE%9A%E4%B8%BA%E7%89%B9%E5%AE%9A%E7%BE%8E%E5%9E%8B%22%7D%2C%7B%22x%22%3A149.63089%2C%22y%22%3A103.366585%2C%22width%22%3A262.00261%2C%22height%22%3A25.86690499999999%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E8%BE%BE%E5%88%B0%E9%A2%84%E6%9C%9F%22%7D%2C%7B%22x%22%3A789.7317%2C%22y%22%3A121.12553%2C%22width%22%3A669.3433%2C%22height%22%3A19.44243%2C%22text%22%3A%22%E7%84%B6%5D5%E5%BE%88%E5%BC%BA%E5%A4%A7%2C%E4%BD%86%E4%B8%BA%E6%97%B6%E5%AE%9D%E6%97%BA%E6%98%AF%E4%B8%8D%E5%A6%82%E6%88%91%E4%BB%AC%5D%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E7%9A%84%E4%BA%A4%E5%9E%8B%2C%E8%BF%99%E5%AF%B9%E4%BE%AF%E6%88%91%E4%BB%AC%E6%9B%B4%E5%B8%8C%E6%9C%9B%E4%B8%8D%E8%A6%81%22%7D%2C%7B%22x%22%3A788.9221%2C%22y%22%3A147.46765%2C%22width%22%3A526.1944000000001%2C%22height%22%3A18.290160000000014%2C%22text%22%3A%22%E5%B8%AE%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E9%BA%A6%E5%9E%8B%E6%A3%80%E6%9F%A5%2C%E8%80%8C%E6%98%AF%E4%BA%A4%E7%BB%99%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9D%A5%2C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%94%A8%E5%88%B0%E4%BA%86%E9%BA%A6%E5%9E%8B%E6%96%AD%E5%AF%8C%22%7D%2C%7B%22x%22%3A556.7541%2C%22y%22%3A152.43811%2C%22width%22%3A151.95720000000006%2C%22height%22%3A22.52788000000001%2C%22text%22%3A%22%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8%22%7D%2C%7B%22x%22%3A787.69055%2C%22y%22%3A189.42978%2C%22width%22%3A517.28855%2C%22height%22%3A19.349440000000016%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%2C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89%E7%BC%96%E8%AF%91%E5%AE%B6%E6%9F%90%E4%B8%AA%E5%80%BC%E7%A1%AE%E5%AE%9E%E6%98%AF%E6%88%91%E4%BB%AC%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E5%80%BC%22%7D%5D%2C%22id%22%3A%22u7de5a917%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u14351333\" id=\"u14351333\"><span data-lake-id=\"u0826ee32\" id=\"u0826ee32\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ue71dfdda\" id=\"ue71dfdda\"><span data-lake-id=\"u01011a96\" id=\"u01011a96\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u2f6540c5\" id=\"u2f6540c5\"><span data-lake-id=\"uc17d7fa4\" id=\"uc17d7fa4\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u516ee536\" id=\"u516ee536\"><span data-lake-id=\"ua757f033\" id=\"ua757f033\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ud965c3ad\" id=\"ud965c3ad\"><span data-lake-id=\"u740488fe\" id=\"u740488fe\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u05d5a341\" id=\"u05d5a341\"><span data-lake-id=\"u3e435fec\" id=\"u3e435fec\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ube0fb324\" id=\"ube0fb324\"><span data-lake-id=\"u833dd66f\" id=\"u833dd66f\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u37a253fb\" id=\"u37a253fb\"><span data-lake-id=\"uf56bfe51\" id=\"uf56bfe51\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u7e8ed675\" id=\"u7e8ed675\"><span data-lake-id=\"u8bd03524\" id=\"u8bd03524\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u33f361bd\" id=\"u33f361bd\"><span data-lake-id=\"u2f2e1d92\" id=\"u2f2e1d92\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ud0013144\" id=\"ud0013144\"><span data-lake-id=\"ud0b374bd\" id=\"ud0b374bd\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"ufa54ad67\" id=\"ufa54ad67\"><span data-lake-id=\"u1e3f74ee\" id=\"u1e3f74ee\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u672e206f\" id=\"u672e206f\"><span data-lake-id=\"uc7fc6350\" id=\"uc7fc6350\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u6d4edc80\" id=\"u6d4edc80\"><span data-lake-id=\"ua7c4bc04\" id=\"ua7c4bc04\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"uf5e371d4\" id=\"uf5e371d4\"><span data-lake-id=\"u66a1a248\" id=\"u66a1a248\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u1ce67147\" id=\"u1ce67147\"><span data-lake-id=\"ud5592ad1\" id=\"ud5592ad1\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p><p data-lake-id=\"u0040830d\" id=\"u0040830d\"><span data-lake-id=\"u729a4e7f\" id=\"u729a4e7f\" class=\"lake-fontsize-14\" style=\"color: rgb(28, 31, 33); background-color: rgb(243, 245, 246)\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-10T06:09:29.000Z",
    "deleted_at": null,
    "created_at": "2021-12-10T05:50:00.000Z",
    "updated_at": "2021-12-10T06:09:30.000Z",
    "published_at": "2021-12-10T06:09:29.000Z",
    "first_published_at": "2021-12-10T05:52:13.000Z",
    "word_count": 758,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/12838787/1639116215975-d4a94ec0-0d5d-4c6e-9430-777bcd283f2a.png",
    "description": "tags: [vue修饰符]categories: [vue修饰符]类型断言在学习TyScript的时候，虽然TypeScript 很强大，但有时它还是不如我们了解一个值的类型，这时候我们更希望 TypeScript 不要帮我们进行类型检查，而是交给我们自己来，所以就用到了类型断言。类型断言有...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 62342570,
    "slug": "ogqnlv",
    "title": "使用接口定义几乎任意结构",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 6,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-10T08:08:17.743Z",
      "updated_at": "2021-12-10T08:08:17.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-10T06:17:03.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-10T06:17:03.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"ga2EL\"></a>\n## 基本用法\n我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：firstName和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：\n```javascript\n// 注：这段代码为纯JavaScript代码，请在JavaScript开发环境编写下面代码，在TypeScript环境会报一些类型错误\nconst getFullName = ({ firstName, lastName }) => {\n  return `${firstName} ${lastName}`;\n};\n\n使用时传入参数：\ngetFullName({\n  firstName: \"Lison\",\n  lastName: \"Li\"\n}); // => 'Lison Li'\n```\n没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：\n```javascript\ngetFullName(); // Uncaught TypeError: Cannot destructure property `a` of 'undefined' or 'null'\ngetFullName({ age: 18, phone: \"13312345678\" }); // 'undefined undefined'\ngetFullName({ firstName: \"Lison\" }); // 'Lison undefined'\n```\n  这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：\n```typescript\nconst getFullName = ({\n  firstName,\n  lastName,\n}: { // 指定这个参数的类型，因为他是一个对象，所以这里来指定对象中每个字段的类型\n  firstName: string; // 指定属性名为firstName和lastName的字段的属性值必须为string类型\n  lastName: string;\n}) => {\n  return `${firstName} ${lastName}`;\n}\n\n\n```\n我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png#clientId=ue1d2c419-1221-4&from=paste&height=234&id=ua1b0f756&margin=%5Bobject%20Object%5D&name=image.png&originHeight=234&originWidth=675&originalType=binary&ratio=1&size=25936&status=done&style=none&taskId=u33945ad6-a930-45ff-97a4-b26d83fb21f&width=675)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png#clientId=ue1d2c419-1221-4&from=paste&height=79&id=u992b1d80&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=1540&originalType=binary&ratio=1&size=33443&status=done&style=none&taskId=u9fb570d1-61b4-4d58-a47c-7931a7f9d9b&width=770)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png#clientId=ue1d2c419-1221-4&from=paste&height=176&id=ub3bff8f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=176&originWidth=1358&originalType=binary&ratio=1&size=32398&status=done&style=none&taskId=u99960eb5-aae8-4d2b-b893-b896dcdeab1&width=1358)<br />这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：\n```typescript\ninterface Info {\n  firstName: string;\n  lastName: string;\n}\nconst getFullName = ({ firstName, lastName }: Info) =>\n  `${firstName} ${lastName}`;\n```\n注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。\n<a name=\"Osi0T\"></a>\n## 可选属性\n当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，_typescript_为我们提供了可选属性。<br />我们先定义一个描述传入蔬菜信息的句子的函数：\n```typescript\nconst getVegetables = ({ color, type }) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\n```\n我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：\n```typescript\ninterface Vegetables {\n  color?: string;\n  type: string;\n}\n```\n这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加\"interface-name\": [true, “never-prefix”]来关闭。\n```typescript\ninterface Vegetables {\n    color?: string;\n    type: string;\n  }\n\nconst getVegetables = ({ color, type }:Vegetables) => {\n    return `A ${color ? color + \" \" : \"\"}${type}`;\n  };\n```\n<a name=\"C3pXm\"></a>\n## 多余属性检查\n```typescript\ngetVegetables({\n  type: \"tomato\",\n  size: \"big\" // 'size'不在类型'Vegetables'中\n});\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png#clientId=ue1d2c419-1221-4&from=paste&height=167&id=u73a7cee0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=167&originWidth=891&originalType=binary&ratio=1&size=17620&status=done&style=none&taskId=u7d7b2296-d6c0-4b56-b4a5-5e78d030178&width=891)<br />我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。<br />这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加\"object-literal-sort-keys\": [false]来关闭。\n<a name=\"izjCz\"></a>\n## 绕开多余属性检查\n有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：\n<a name=\"UbRno\"></a>\n### 使用类型断言\n我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：\n```typescript\ninterface Vegetables {\n  color?: string;\n  type: string;\n}\nconst getVegetables = ({ color, type }: Vegetables) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\ngetVegetables({\n  type: \"tomato\",\n  size: 12,\n  price: 1.2\n} as Vegetables);\n```\n<a name=\"T7Ilu\"></a>\n### 添加索引签名\n更好的方式是添加字符串索引签名\n```typescript\ninterface Vegetables {\n  color: string;\n  type: string;\n  [prop: string]: any;\n}\nconst getVegetables = ({ color, type }: Vegetables) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\ngetVegetables({\n  color: \"red\",\n  type: \"tomato\",\n  size: 12,\n  price: 1.2\n});\n```\n<a name=\"WqgZw\"></a>\n### 利用类型兼容性\n```typescript\ninterface Vegetables {\n  type: string;\n}\nconst getVegetables = ({ type }: Vegetables) => {\n  return `A ${type}`;\n};\n\nconst option = { type: \"tomato\", size: 12 };\ngetVegetables(option);\n```\n上面这种方法完美通过检查，我们将对象字面量赋给一个变量option，然后getVegetables传入 option，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。<br />在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错\n<a name=\"DYDQK\"></a>\n### 只读属性\n接口也可以设置只读属性，如下：\n```typescript\ninterface Role {\n  readonly 0: string;\n  readonly 1: string;\n} \n这里我们定义了一个角色字典，有 0 和 1 两种角色 id。下面我们定义一个实际的角色  数据，然后来试图修改一下它的值：\n\nconst role: Role = {\n  0: \"super_admin\",\n  1: \"admin\"\n};\nrole[1] = \"super_admin\"; // Cannot assign to '0' because it is a read-only property\n```\n我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：\n```typescript\nconst NAME: string = \"Lison\";\nNAME = \"Haha\"; // Uncaught TypeError: Assignment to constant variable\n\nconst obj = {\n  name: \"lison\"\n};\nobj.name = \"Haha\";\n\ninterface Info {\n  readonly name: string;\n}\nconst info: Info = {\n  name: \"Lison\"\n};\ninfo[\"name\"] = \"Haha\"; // Cannot assign to 'name' because it is a read-only property\n```\n我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。\n<a name=\"tkCr2\"></a>\n### 函数类型\n接口可以描述普通对象，还可以描述函数类型，我们先看写法：\n```typescript\ninterface AddFunc {\n  (num1: number, num2: number): number;\n}\n```\n这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为_调用签名_，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：\n```typescript\nconst add: AddFunc = (n1, n2) => n1 + n2;\nconst join: AddFunc = (n1, n2) => `${n1} ${n2}`; // 不能将类型'string'分配给类型'number'\nadd(\"a\", 2); // 类型'string'的参数不能赋给类型'number'的参数\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png#clientId=uebca35a6-d065-4&from=paste&height=107&id=u41545c4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=143&originWidth=953&originalType=binary&ratio=1&size=21366&status=done&style=none&taskId=ueb62392c-919f-4c0c-9cc7-717889ec8d6&width=715)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png#clientId=uebca35a6-d065-4&from=paste&id=u91b90715&margin=%5Bobject%20Object%5D&name=image.png&originHeight=109&originWidth=724&originalType=binary&ratio=1&size=12456&status=done&style=none&taskId=u4dd12a49-ea62-4869-9f7c-1eb5ab88d18)<br />上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。<br />你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。<br />![5cf4bfd200012bae16000820.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg#clientId=uebca35a6-d065-4&from=ui&id=u240e1d03&margin=%5Bobject%20Object%5D&name=5cf4bfd200012bae16000820.jpg&originHeight=820&originWidth=1600&originalType=binary&ratio=1&size=134441&status=done&style=none&taskId=u81f8ae0c-7d78-4d36-8bad-24066b4ff1d)<br />​<br />\n",
    "body_draft": "<a name=\"ga2EL\"></a>\n## 基本用法\n我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：firstName和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：\n```javascript\n// 注：这段代码为纯JavaScript代码，请在JavaScript开发环境编写下面代码，在TypeScript环境会报一些类型错误\nconst getFullName = ({ firstName, lastName }) => {\n  return `${firstName} ${lastName}`;\n};\n\n使用时传入参数：\ngetFullName({\n  firstName: \"Lison\",\n  lastName: \"Li\"\n}); // => 'Lison Li'\n```\n没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：\n```javascript\ngetFullName(); // Uncaught TypeError: Cannot destructure property `a` of 'undefined' or 'null'\ngetFullName({ age: 18, phone: \"13312345678\" }); // 'undefined undefined'\ngetFullName({ firstName: \"Lison\" }); // 'Lison undefined'\n```\n  这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：\n```typescript\nconst getFullName = ({\n  firstName,\n  lastName,\n}: { // 指定这个参数的类型，因为他是一个对象，所以这里来指定对象中每个字段的类型\n  firstName: string; // 指定属性名为firstName和lastName的字段的属性值必须为string类型\n  lastName: string;\n}) => {\n  return `${firstName} ${lastName}`;\n}\n\n\n```\n我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png#clientId=ue1d2c419-1221-4&from=paste&height=234&id=ua1b0f756&margin=%5Bobject%20Object%5D&name=image.png&originHeight=234&originWidth=675&originalType=binary&ratio=1&size=25936&status=done&style=none&taskId=u33945ad6-a930-45ff-97a4-b26d83fb21f&width=675)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png#clientId=ue1d2c419-1221-4&from=paste&height=79&id=u992b1d80&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=1540&originalType=binary&ratio=1&size=33443&status=done&style=none&taskId=u9fb570d1-61b4-4d58-a47c-7931a7f9d9b&width=770)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png#clientId=ue1d2c419-1221-4&from=paste&height=176&id=ub3bff8f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=176&originWidth=1358&originalType=binary&ratio=1&size=32398&status=done&style=none&taskId=u99960eb5-aae8-4d2b-b893-b896dcdeab1&width=1358)<br />这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：\n```typescript\ninterface Info {\n  firstName: string;\n  lastName: string;\n}\nconst getFullName = ({ firstName, lastName }: Info) =>\n  `${firstName} ${lastName}`;\n```\n注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。\n<a name=\"Osi0T\"></a>\n## 可选属性\n当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，_typescript_为我们提供了可选属性。<br />我们先定义一个描述传入蔬菜信息的句子的函数：\n```typescript\nconst getVegetables = ({ color, type }) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\n```\n我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：\n```typescript\ninterface Vegetables {\n  color?: string;\n  type: string;\n}\n```\n这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加\"interface-name\": [true, “never-prefix”]来关闭。\n```typescript\ninterface Vegetables {\n    color?: string;\n    type: string;\n  }\n\nconst getVegetables = ({ color, type }:Vegetables) => {\n    return `A ${color ? color + \" \" : \"\"}${type}`;\n  };\n```\n<a name=\"C3pXm\"></a>\n## 多余属性检查\n```typescript\ngetVegetables({\n  type: \"tomato\",\n  size: \"big\" // 'size'不在类型'Vegetables'中\n});\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png#clientId=ue1d2c419-1221-4&from=paste&height=167&id=u73a7cee0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=167&originWidth=891&originalType=binary&ratio=1&size=17620&status=done&style=none&taskId=u7d7b2296-d6c0-4b56-b4a5-5e78d030178&width=891)<br />我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。<br />这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加\"object-literal-sort-keys\": [false]来关闭。\n<a name=\"izjCz\"></a>\n## 绕开多余属性检查\n有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：\n<a name=\"UbRno\"></a>\n### 使用类型断言\n我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：\n```typescript\ninterface Vegetables {\n  color?: string;\n  type: string;\n}\nconst getVegetables = ({ color, type }: Vegetables) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\ngetVegetables({\n  type: \"tomato\",\n  size: 12,\n  price: 1.2\n} as Vegetables);\n```\n<a name=\"T7Ilu\"></a>\n### 添加索引签名\n更好的方式是添加字符串索引签名\n```typescript\ninterface Vegetables {\n  color: string;\n  type: string;\n  [prop: string]: any;\n}\nconst getVegetables = ({ color, type }: Vegetables) => {\n  return `A ${color ? color + \" \" : \"\"}${type}`;\n};\ngetVegetables({\n  color: \"red\",\n  type: \"tomato\",\n  size: 12,\n  price: 1.2\n});\n```\n<a name=\"WqgZw\"></a>\n### 利用类型兼容性\n```typescript\ninterface Vegetables {\n  type: string;\n}\nconst getVegetables = ({ type }: Vegetables) => {\n  return `A ${type}`;\n};\n\nconst option = { type: \"tomato\", size: 12 };\ngetVegetables(option);\n```\n上面这种方法完美通过检查，我们将对象字面量赋给一个变量option，然后getVegetables传入 option，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。<br />在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错\n<a name=\"DYDQK\"></a>\n### 只读属性\n接口也可以设置只读属性，如下：\n```typescript\ninterface Role {\n  readonly 0: string;\n  readonly 1: string;\n} \n这里我们定义了一个角色字典，有 0 和 1 两种角色 id。下面我们定义一个实际的角色  数据，然后来试图修改一下它的值：\n\nconst role: Role = {\n  0: \"super_admin\",\n  1: \"admin\"\n};\nrole[1] = \"super_admin\"; // Cannot assign to '0' because it is a read-only property\n```\n我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：\n```typescript\nconst NAME: string = \"Lison\";\nNAME = \"Haha\"; // Uncaught TypeError: Assignment to constant variable\n\nconst obj = {\n  name: \"lison\"\n};\nobj.name = \"Haha\";\n\ninterface Info {\n  readonly name: string;\n}\nconst info: Info = {\n  name: \"Lison\"\n};\ninfo[\"name\"] = \"Haha\"; // Cannot assign to 'name' because it is a read-only property\n```\n我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。\n<a name=\"tkCr2\"></a>\n### 函数类型\n接口可以描述普通对象，还可以描述函数类型，我们先看写法：\n```typescript\ninterface AddFunc {\n  (num1: number, num2: number): number;\n}\n```\n这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为_调用签名_，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：\n```typescript\nconst add: AddFunc = (n1, n2) => n1 + n2;\nconst join: AddFunc = (n1, n2) => `${n1} ${n2}`; // 不能将类型'string'分配给类型'number'\nadd(\"a\", 2); // 类型'string'的参数不能赋给类型'number'的参数\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png#clientId=uebca35a6-d065-4&from=paste&height=107&id=u41545c4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=143&originWidth=953&originalType=binary&ratio=1&size=21366&status=done&style=none&taskId=ueb62392c-919f-4c0c-9cc7-717889ec8d6&width=715)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png#clientId=uebca35a6-d065-4&from=paste&id=u91b90715&margin=%5Bobject%20Object%5D&name=image.png&originHeight=109&originWidth=724&originalType=binary&ratio=1&size=12456&status=done&style=none&taskId=u4dd12a49-ea62-4869-9f7c-1eb5ab88d18)<br />上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。<br />你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。<br />![5cf4bfd200012bae16000820.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg#clientId=uebca35a6-d065-4&from=ui&id=u240e1d03&margin=%5Bobject%20Object%5D&name=5cf4bfd200012bae16000820.jpg&originHeight=820&originWidth=1600&originalType=binary&ratio=1&size=134441&status=done&style=none&taskId=u81f8ae0c-7d78-4d36-8bad-24066b4ff1d)<br />​<br />\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"ga2EL\"><span class=\"ne-text\">基本用法</span></h2><p id=\"u4c6734a0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：</span><span class=\"ne-text\" style=\"font-size: 29px\">firstName</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：</span></p><pre data-language=\"javascript\" id=\"qqc7N\" class=\"ne-codeblock language-javascript\">// 注：这段代码为纯JavaScript代码，请在JavaScript开发环境编写下面代码，在TypeScript环境会报一些类型错误\nconst getFullName = ({ firstName, lastName }) =&gt; {\n  return `${firstName} ${lastName}`;\n};\n\n使用时传入参数：\ngetFullName({\n  firstName: &quot;Lison&quot;,\n  lastName: &quot;Li&quot;\n}); // =&gt; 'Lison Li'</pre><p id=\"u981badb3\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 29px\">没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：</span></p><pre data-language=\"javascript\" id=\"PehQm\" class=\"ne-codeblock language-javascript\">getFullName(); // Uncaught TypeError: Cannot destructure property `a` of 'undefined' or 'null'\ngetFullName({ age: 18, phone: &quot;13312345678&quot; }); // 'undefined undefined'\ngetFullName({ firstName: &quot;Lison&quot; }); // 'Lison undefined'</pre><p id=\"u1d1136e7\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 29px\"> </span><span class=\"ne-text\" style=\"font-size: 29px\"> 这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：</span></p><pre data-language=\"typescript\" id=\"jcuFq\" class=\"ne-codeblock language-typescript\">const getFullName = ({\n  firstName,\n  lastName,\n}: { // 指定这个参数的类型，因为他是一个对象，所以这里来指定对象中每个字段的类型\n  firstName: string; // 指定属性名为firstName和lastName的字段的属性值必须为string类型\n  lastName: string;\n}) =&gt; {\n  return `${firstName} ${lastName}`;\n}\n\n</pre><p id=\"u55acf1f2\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 29px\">我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：</span></p><p id=\"u64baef33\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png\" width=\"675\" id=\"ua1b0f756\" class=\"ne-image\"></p><p id=\"uf19ffe58\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png\" width=\"770\" id=\"u992b1d80\" class=\"ne-image\"></p><p id=\"u2fe3580b\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png\" width=\"1358\" id=\"ub3bff8f8\" class=\"ne-image\"></p><p id=\"ua8031729\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：</span></p><pre data-language=\"typescript\" id=\"RTUnh\" class=\"ne-codeblock language-typescript\">interface Info {\n  firstName: string;\n  lastName: string;\n}\nconst getFullName = ({ firstName, lastName }: Info) =&gt;\n  `${firstName} ${lastName}`;</pre><p id=\"u9a6f2a03\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。</span></p><h2 id=\"Osi0T\"><span class=\"ne-text\">可选属性</span></h2><p id=\"ud81f38f2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，</span><em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">typescript</span></em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">为我们提供了可选属性。</span></p><p id=\"u211124af\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们先定义一个描述传入蔬菜信息的句子的函数：</span></p><pre data-language=\"typescript\" id=\"JpneV\" class=\"ne-codeblock language-typescript\">const getVegetables = ({ color, type }) =&gt; {\n  return `A ${color ? color + &quot; &quot; : &quot;&quot;}${type}`;\n};</pre><p id=\"u4a4bd115\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：</span></p><pre data-language=\"typescript\" id=\"MVeDl\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  color?: string;\n  type: string;\n}</pre><p id=\"u1e00958e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;interface-name&quot;: [true, “never-prefix”]来关闭。</span></p><pre data-language=\"typescript\" id=\"GExE2\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n    color?: string;\n    type: string;\n  }\n\nconst getVegetables = ({ color, type }:Vegetables) =&gt; {\n    return `A ${color ? color + &quot; &quot; : &quot;&quot;}${type}`;\n  };</pre><h2 id=\"C3pXm\"><span class=\"ne-text\">多余属性检查</span></h2><pre data-language=\"typescript\" id=\"EcyRb\" class=\"ne-codeblock language-typescript\">getVegetables({\n  type: &quot;tomato&quot;,\n  size: &quot;big&quot; // 'size'不在类型'Vegetables'中\n});</pre><p id=\"ua27818ba\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png\" width=\"891\" id=\"u73a7cee0\" class=\"ne-image\"></p><p id=\"u701dba2a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。</span></p><p id=\"u04a99e81\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;object-literal-sort-keys&quot;: [false]来关闭。</span></p><h2 id=\"izjCz\"><span class=\"ne-text\">绕开多余属性检查</span></h2><p id=\"ua1763e3d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：</span></p><h3 id=\"UbRno\"><span class=\"ne-text\">使用类型断言</span></h3><p id=\"uce1645b6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：</span></p><pre data-language=\"typescript\" id=\"KJaSQ\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  color?: string;\n  type: string;\n}\nconst getVegetables = ({ color, type }: Vegetables) =&gt; {\n  return `A ${color ? color + &quot; &quot; : &quot;&quot;}${type}`;\n};\ngetVegetables({\n  type: &quot;tomato&quot;,\n  size: 12,\n  price: 1.2\n} as Vegetables);</pre><h3 id=\"T7Ilu\"><span class=\"ne-text\">添加索引签名</span></h3><p id=\"u71358f5f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">更好的方式是添加字符串索引签名</span></p><pre data-language=\"typescript\" id=\"OLak3\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  color: string;\n  type: string;\n  [prop: string]: any;\n}\nconst getVegetables = ({ color, type }: Vegetables) =&gt; {\n  return `A ${color ? color + &quot; &quot; : &quot;&quot;}${type}`;\n};\ngetVegetables({\n  color: &quot;red&quot;,\n  type: &quot;tomato&quot;,\n  size: 12,\n  price: 1.2\n});</pre><h3 id=\"WqgZw\"><span class=\"ne-text\">利用类型兼容性</span></h3><pre data-language=\"typescript\" id=\"E9HPU\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  type: string;\n}\nconst getVegetables = ({ type }: Vegetables) =&gt; {\n  return `A ${type}`;\n};\n\nconst option = { type: &quot;tomato&quot;, size: 12 };\ngetVegetables(option);</pre><p id=\"uf3d82ca8\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">上面这种方法完美通过检查，我们将对象字面量赋给一个变量</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">option</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">，然后</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">getVegetables</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">传入</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\"> </span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">option</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。</span></p><p id=\"uf4ce67c2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错</span></p><h3 id=\"DYDQK\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33)\">只读属性</span></h3><p id=\"u99cef886\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">接口也可以设置只读属性，如下：</span></p><pre data-language=\"typescript\" id=\"tvwz7\" class=\"ne-codeblock language-typescript\">interface Role {\n  readonly 0: string;\n  readonly 1: string;\n} \n这里我们定义了一个角色字典，有 0 和 1 两种角色 id。下面我们定义一个实际的角色 \b 数据，然后来试图修改一下它的值：\n\nconst role: Role = {\n  0: &quot;super_admin&quot;,\n  1: &quot;admin&quot;\n};\nrole[1] = &quot;super_admin&quot;; // Cannot assign to '0' because it is a read-only property</pre><p id=\"u9e49879d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：</span></p><pre data-language=\"typescript\" id=\"fvjM5\" class=\"ne-codeblock language-typescript\">const NAME: string = &quot;Lison&quot;;\nNAME = &quot;Haha&quot;; // Uncaught TypeError: Assignment to constant variable\n\nconst obj = {\n  name: &quot;lison&quot;\n};\nobj.name = &quot;Haha&quot;;\n\ninterface Info {\n  readonly name: string;\n}\nconst info: Info = {\n  name: &quot;Lison&quot;\n};\ninfo[&quot;name&quot;] = &quot;Haha&quot;; // Cannot assign to 'name' because it is a read-only property</pre><p id=\"u298476e7\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。</span></p><h3 id=\"tkCr2\"><span class=\"ne-text\">函数类型</span></h3><p id=\"ubf5c9623\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">接口可以描述普通对象，还可以描述函数类型，我们先看写法：</span></p><pre data-language=\"typescript\" id=\"V5Aiu\" class=\"ne-codeblock language-typescript\">interface AddFunc {\n  (num1: number, num2: number): number;\n}</pre><p id=\"uc3813531\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为</span><em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">调用签名</span></em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：</span></p><pre data-language=\"typescript\" id=\"wiFm0\" class=\"ne-codeblock language-typescript\">const add: AddFunc = (n1, n2) =&gt; n1 + n2;\nconst join: AddFunc = (n1, n2) =&gt; `${n1} ${n2}`; // 不能将类型'string'分配给类型'number'\nadd(&quot;a&quot;, 2); // 类型'string'的参数不能赋给类型'number'的参数</pre><p id=\"u9a4c6d21\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png\" width=\"715\" id=\"u41545c4f\" class=\"ne-image\"></p><p id=\"u3c925611\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png\" width=\"724\" id=\"u91b90715\" class=\"ne-image\"></p><p id=\"u6eaf2ecd\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。</span></p><p id=\"u160cc3d5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 29px\">你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。</span></p><p id=\"uc34d1cd4\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg\" width=\"1600\" id=\"u240e1d03\" class=\"ne-image\"></p><p id=\"u6b68740b\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 29px\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"ga2EL\" id=\"ga2EL\"><span data-lake-id=\"u9d3b4def\" id=\"u9d3b4def\">基本用法</span></h2><p data-lake-id=\"u4c6734a0\" id=\"u4c6734a0\"><span data-lake-id=\"u4f9a9017\" id=\"u4f9a9017\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：</span><span data-lake-id=\"ua9fa4c49\" id=\"ua9fa4c49\" class=\"lake-fontsize-22\">firstName</span><span data-lake-id=\"uc7835a87\" id=\"uc7835a87\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%B3%A8%EF%BC%9A%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E4%B8%BA%E7%BA%AFJavaScript%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AF%B7%E5%9C%A8JavaScript%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%BC%96%E5%86%99%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%9C%A8TypeScript%E7%8E%AF%E5%A2%83%E4%BC%9A%E6%8A%A5%E4%B8%80%E4%BA%9B%E7%B1%BB%E5%9E%8B%E9%94%99%E8%AF%AF%5Cnconst%20getFullName%20%3D%20(%7B%20firstName%2C%20lastName%20%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%5Cn%7D%3B%5Cn%5Cn%E4%BD%BF%E7%94%A8%E6%97%B6%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%EF%BC%9A%5CngetFullName(%7B%5Cn%20%20firstName%3A%20%5C%22Lison%5C%22%2C%5Cn%20%20lastName%3A%20%5C%22Li%5C%22%5Cn%7D)%3B%20%2F%2F%20%3D%3E%20'Lison%20Li'%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22qqc7N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u981badb3\" id=\"u981badb3\"><span data-lake-id=\"u6be843d1\" id=\"u6be843d1\" class=\"lake-fontsize-22\">没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22getFullName()%3B%20%2F%2F%20Uncaught%20TypeError%3A%20Cannot%20destructure%20property%20%60a%60%20of%20'undefined'%20or%20'null'%5CngetFullName(%7B%20age%3A%2018%2C%20phone%3A%20%5C%2213312345678%5C%22%20%7D)%3B%20%2F%2F%20'undefined%20undefined'%5CngetFullName(%7B%20firstName%3A%20%5C%22Lison%5C%22%20%7D)%3B%20%2F%2F%20'Lison%20undefined'%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22PehQm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1d1136e7\" id=\"u1d1136e7\"><span data-lake-id=\"u60d3aa18\" id=\"u60d3aa18\" class=\"lake-fontsize-22\"> </span><span data-lake-id=\"u8a36f91f\" id=\"u8a36f91f\" class=\"lake-fontsize-22\"> 这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getFullName%20%3D%20(%7B%5Cn%20%20firstName%2C%5Cn%20%20lastName%2C%5Cn%7D%3A%20%7B%20%2F%2F%20%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20firstName%3A%20string%3B%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B8%BAfirstName%E5%92%8ClastName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E5%BF%85%E9%A1%BB%E4%B8%BAstring%E7%B1%BB%E5%9E%8B%5Cn%20%20lastName%3A%20string%3B%5Cn%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%5Cn%7D%5Cn%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22jcuFq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u55acf1f2\" id=\"u55acf1f2\"><span data-lake-id=\"u7a126b53\" id=\"u7a126b53\" class=\"lake-fontsize-22\">我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：</span></p><p data-lake-id=\"u64baef33\" id=\"u64baef33\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png%22%2C%22taskId%22%3A%22u33945ad6-a930-45ff-97a4-b26d83fb21f%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A675%2C%22height%22%3A234%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A25936%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A675%2C%22originHeight%22%3A234%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%3A%2F%2F%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%90%8D%2028%20%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA.%20ts(2554)%20tName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%2029%2030%20index.ts(25%2C22)%3A%E6%9C%AA%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%AD%A4%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84%E8%87%AA%E5%8F%98%E9%87%8F.%2031%20constgetFuiiName(firstNamelastame%2032%20firstName%3Astring%3B%2033%20lastName%3Astring%3B%2034%20H)-%3Estring%2035%2036%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20getFuiinameV)%3B%2F%2F%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA%2037%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A70.056694%2C%22y%22%3A0.96522015%2C%22width%22%3A596.478766%2C%22height%22%3A21.59890685%2C%22text%22%3A%22%3A%2F%2F%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%90%8D%22%7D%2C%7B%22x%22%3A5.0437083%2C%22y%22%3A6.245795%2C%22width%22%3A19.799583700000003%2C%22height%22%3A14.83794%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A65.60348%2C%22y%22%3A25.08641%2C%22width%22%3A249.14724999999999%2C%22height%22%3A18.444077%2C%22text%22%3A%22%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA.%22%7D%2C%7B%22x%22%3A323.7029%2C%22y%22%3A28.03306%2C%22width%22%3A75.65748000000002%2C%22height%22%3A15.834519999999998%2C%22text%22%3A%22ts(2554)%22%7D%2C%7B%22x%22%3A531.24426%2C%22y%22%3A27.71959%2C%22width%22%3A136.3881899999999%2C%22height%22%3A16.90845%2C%22text%22%3A%22tName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%22%7D%2C%7B%22x%22%3A5.735676%2C%22y%22%3A29.95294%2C%22width%22%3A18.747625%2C%22height%22%3A12.598111999999997%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A5.457086%2C%22y%22%3A53.39238%2C%22width%22%3A19.089966%2C%22height%22%3A12.549199999999999%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A65.03882%2C%22y%22%3A57.28209%2C%22width%22%3A444.88171%2C%22height%22%3A18.36057000000001%2C%22text%22%3A%22index.ts(25%2C22)%3A%E6%9C%AA%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%AD%A4%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84%E8%87%AA%E5%8F%98%E9%87%8F.%22%7D%2C%7B%22x%22%3A5.6048245%2C%22y%22%3A76.96992%2C%22width%22%3A18.0566875%2C%22height%22%3A12.168660000000003%2C%22text%22%3A%2231%22%7D%2C%7B%22x%22%3A65.52161%2C%22y%22%3A93.11087%2C%22width%22%3A437.20219%2C%22height%22%3A17.99866%2C%22text%22%3A%22constgetFuiiName(firstNamelastame%22%7D%2C%7B%22x%22%3A5.746605%2C%22y%22%3A99.58777%2C%22width%22%3A18.04672%2C%22height%22%3A12.949193999999991%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A100.47341%2C%22y%22%3A112.93966%2C%22width%22%3A167.69535000000002%2C%22height%22%3A19.976290000000006%2C%22text%22%3A%22firstName%3Astring%3B%22%7D%2C%7B%22x%22%3A5.519258%2C%22y%22%3A121.7748%2C%22width%22%3A17.620244%2C%22height%22%3A12.538000000000011%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A100.86469%2C%22y%22%3A136.19089%2C%22width%22%3A159.22755999999998%2C%22height%22%3A19.160690000000017%2C%22text%22%3A%22lastName%3Astring%3B%22%7D%2C%7B%22x%22%3A4.8655324%2C%22y%22%3A144.20634%2C%22width%22%3A18.9732036%2C%22height%22%3A12.11529999999999%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A64.182816%2C%22y%22%3A158.51576%2C%22width%22%3A112.92837399999999%2C%22height%22%3A17.703309999999988%2C%22text%22%3A%22H)-%3Estring%22%7D%2C%7B%22x%22%3A4.467048%2C%22y%22%3A166.96953%2C%22width%22%3A19.276704000000002%2C%22height%22%3A12.623970000000014%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A4.63562%2C%22y%22%3A190.24937%2C%22width%22%3A19.443548%2C%22height%22%3A12.062659999999994%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A63.764385%2C%22y%22%3A190.37323%2C%22width%22%3A276.764115%2C%22height%22%3A15.586960000000005%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A53.709553%2C%22y%22%3A209.68217%2C%22width%22%3A365.58170700000005%2C%22height%22%3A20.822829999999982%2C%22text%22%3A%22getFuiinameV)%3B%2F%2F%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA%22%7D%2C%7B%22x%22%3A5.249744%2C%22y%22%3A212.72105%2C%22width%22%3A17.806106%2C%22height%22%3A12.032990000000012%2C%22text%22%3A%2237%22%7D%5D%2C%22id%22%3A%22ua1b0f756%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf19ffe58\" id=\"uf19ffe58\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png%22%2C%22taskId%22%3A%22u9fb570d1-61b4-4d58-a47c-7931a7f9d9b%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A770%2C%22height%22%3A79%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A33443%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1540%2C%22originHeight%22%3A158%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SittirstMameSt%20%E5%9E%8Bae%3Amuber%3Aphomemute%3BY%E5%8F%82%E8%87%B4%E4%B8%8D%E8%83%BD%E8%9E%BA%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22fnsthrlestrlme%3BLostlmstl.%20%E5%AF%B9%E5%AE%B6%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7.%E5%B9%B6%E4%B8%94%5C%22e%5C%22%E4%B8%8D%E5%9C%A8%E5%85%B1%E5%9E%8B%5C%22firstovestrintsm%20(property)age%3Anumber%20me%E6%9F%A5%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20%E7%B1%BB%E5%9E%8B%5C%22(aee%3Anumber%3Aphone%3Anumber%3BP%E7%9A%84%E5%8F%82%E6%95%99%E4%B8%8D%E8%83%BD%E6%84%9F%E7%BB%99%E5%9E%8Bfirsthame%3Bs%20lastName%3Astring%3B.2%5C%22%E7%9A%84%E5%8F%82%E6%95%B0.%20stringjla%20getFuliname(age%3A18%2Cphone123456789%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.19127%2C%22y%22%3A-0.96889234%2C%22width%22%3A141.30107%2C%22height%22%3A14.38983534%2C%22text%22%3A%22SittirstMameSt%22%7D%2C%7B%22x%22%3A158.49146%2C%22y%22%3A19.361862%2C%22width%22%3A943.5999400000001%2C%22height%22%3A22.317166000000004%2C%22text%22%3A%22%E5%9E%8Bae%3Amuber%3Aphomemute%3BY%E5%8F%82%E8%87%B4%E4%B8%8D%E8%83%BD%E8%9E%BA%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22fnsthrlestrlme%3BLostlmstl.%22%7D%2C%7B%22x%22%3A173.39833%2C%22y%22%3A41.914288%2C%22width%22%3A912.71867%2C%22height%22%3A25.102292000000006%2C%22text%22%3A%22%E5%AF%B9%E5%AE%B6%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7.%E5%B9%B6%E4%B8%94%5C%22e%5C%22%E4%B8%8D%E5%9C%A8%E5%85%B1%E5%9E%8B%5C%22firstovestrintsm%22%7D%2C%7B%22x%22%3A158.09389%2C%22y%22%3A75.88823%2C%22width%22%3A203.30771%2C%22height%22%3A20.376365000000007%2C%22text%22%3A%22(property)age%3Anumber%22%7D%2C%7B%22x%22%3A136.04724%2C%22y%22%3A109.524315%2C%22width%22%3A300.35043%2C%22height%22%3A15.923175%2C%22text%22%3A%22me%E6%9F%A5%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A442.7086%2C%22y%22%3A129.50824%2C%22width%22%3A644.3739%2C%22height%22%3A20.530110000000008%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22(aee%3Anumber%3Aphone%3Anumber%3BP%E7%9A%84%E5%8F%82%E6%95%99%E4%B8%8D%E8%83%BD%E6%84%9F%E7%BB%99%E5%9E%8Bfirsthame%3Bs%22%7D%2C%7B%22x%22%3A1151.2697%2C%22y%22%3A129.19928%2C%22width%22%3A253.68979999999988%2C%22height%22%3A19.493360000000024%2C%22text%22%3A%22lastName%3Astring%3B.2%5C%22%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A1078.0663%2C%22y%22%3A131.69977%2C%22width%22%3A97.45759999999996%2C%22height%22%3A18.598160000000007%2C%22text%22%3A%22stringjla%22%7D%2C%7B%22x%22%3A14.136898%2C%22y%22%3A131.9145%2C%22width%22%3A401.97873200000004%2C%22height%22%3A19.273020000000002%2C%22text%22%3A%22getFuliname(age%3A18%2Cphone123456789%22%7D%5D%2C%22id%22%3A%22u992b1d80%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u2fe3580b\" id=\"u2fe3580b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png%22%2C%22taskId%22%3A%22u99960eb5-aae8-4d2b-b893-b896dcdeab1%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1358%2C%22height%22%3A176%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A32398%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1358%2C%22originHeight%22%3A176%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8BfirstName%3Astring%3B%20%3B%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bfirstname%3Astring%3BlastName%3Astring%3B%E7%9A%84%E5%8F%82%E6%95%B0.%20%E4%B8%9A%E4%BA%86%E6%9D%91%E4%B8%AD%E5%B0%91%E5%AE%B6%E4%BD%8F%E5%A5%96m%E4%B8%AD%2034%2035%20index.ts(30%2C5)%3A%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%A3%B0%E6%98%8E%E4%BA%86%5C%22lastName%2036%20(propertyfirstame%3Astring%2037%20getFuiina%2038%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D...(C.trl%2B)%20getFulina%20getFulinamefirstName%5C%22Lison%3B%E7%A7%AF%E5%B0%91%E5%BF%85%E8%A6%81%E5%B1%9E%E6%80%A7astName%2039%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A172.4774%2C%22y%22%3A10.630165%2C%22width%22%3A245.23560000000003%2C%22height%22%3A18.862198%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8BfirstName%3Astring%3B%22%7D%2C%7B%22x%22%3A392.5245%2C%22y%22%3A9.898132%2C%22width%22%3A646.0127%2C%22height%22%3A19.38568%2C%22text%22%3A%22%3B%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bfirstname%3Astring%3BlastName%3Astring%3B%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A186.99178%2C%22y%22%3A31.103899%2C%22width%22%3A1156.91602%2C%22height%22%3A23.747583%2C%22text%22%3A%22%E4%B8%9A%E4%BA%86%E6%9D%91%E4%B8%AD%E5%B0%91%E5%AE%B6%E4%BD%8F%E5%A5%96m%E4%B8%AD%22%7D%2C%7B%22x%22%3A1.4795045%2C%22y%22%3A38.20511%2C%22width%22%3A19.7915375%2C%22height%22%3A14.615973000000004%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A0.20263453%2C%22y%22%3A61.615917%2C%22width%22%3A20.76056847%2C%22height%22%3A16.095638%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A169.64444%2C%22y%22%3A65.85934%2C%22width%22%3A367.43405999999993%2C%22height%22%3A21.666200000000003%2C%22text%22%3A%22index.ts(30%2C5)%3A%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%A3%B0%E6%98%8E%E4%BA%86%5C%22lastName%22%7D%2C%7B%22x%22%3A0.15577894%2C%22y%22%3A83.290474%2C%22width%22%3A21.76526806%2C%22height%22%3A16.584996000000004%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A169.97092%2C%22y%22%3A100.989525%2C%22width%22%3A263.52698%2C%22height%22%3A18.525175000000004%2C%22text%22%3A%22(propertyfirstame%3Astring%22%7D%2C%7B%22x%22%3A0.87860405%2C%22y%22%3A104.689095%2C%22width%22%3A22.20265895%2C%22height%22%3A18.445739000000003%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A75.97925%2C%22y%22%3A105.367256%2C%22width%22%3A85.42351000000001%2C%22height%22%3A20.387833999999998%2C%22text%22%3A%22getFuiina%22%7D%2C%7B%22x%22%3A0.6956785%2C%22y%22%3A129.5022%2C%22width%22%3A22.3032155%2C%22height%22%3A16.804070000000024%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A169.17944%2C%22y%22%3A131.52187%2C%22width%22%3A268.85656%2C%22height%22%3A16.261300000000006%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D...(C.trl%2B)%22%7D%2C%7B%22x%22%3A69.88076%2C%22y%22%3A130.09065%2C%22width%22%3A91.84313000000002%2C%22height%22%3A17.37720999999999%2C%22text%22%3A%22getFulina%22%7D%2C%7B%22x%22%3A46.90255%2C%22y%22%3A150.04514%2C%22width%22%3A558.11015%2C%22height%22%3A19.361580000000004%2C%22text%22%3A%22getFulinamefirstName%5C%22Lison%3B%E7%A7%AF%E5%B0%91%E5%BF%85%E8%A6%81%E5%B1%9E%E6%80%A7astName%22%7D%2C%7B%22x%22%3A0.22041021%2C%22y%22%3A151.85524%2C%22width%22%3A22.68226379%2C%22height%22%3A16.181759999999997%2C%22text%22%3A%2239%22%7D%5D%2C%22id%22%3A%22ub3bff8f8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua8031729\" id=\"ua8031729\"><span data-lake-id=\"ue7315539\" id=\"ue7315539\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Info%20%7B%5Cn%20%20firstName%3A%20string%3B%5Cn%20%20lastName%3A%20string%3B%5Cn%7D%5Cnconst%20getFullName%20%3D%20(%7B%20firstName%2C%20lastName%20%7D%3A%20Info)%20%3D%3E%5Cn%20%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22RTUnh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9a6f2a03\" id=\"u9a6f2a03\"><span data-lake-id=\"ubf519eb9\" id=\"ubf519eb9\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。</span></p><h2 data-lake-id=\"Osi0T\" id=\"Osi0T\"><span data-lake-id=\"ue9ab45a1\" id=\"ue9ab45a1\">可选属性</span></h2><p data-lake-id=\"ud81f38f2\" id=\"ud81f38f2\"><span data-lake-id=\"u5dda12f6\" id=\"u5dda12f6\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，</span><em><span data-lake-id=\"ufa2e09a8\" id=\"ufa2e09a8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">typescript</span></em><span data-lake-id=\"u68502803\" id=\"u68502803\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">为我们提供了可选属性。</span></p><p data-lake-id=\"u211124af\" id=\"u211124af\"><span data-lake-id=\"u733373b3\" id=\"u733373b3\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们先定义一个描述传入蔬菜信息的句子的函数：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22JpneV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4a4bd115\" id=\"u4a4bd115\"><span data-lake-id=\"u9ecea93d\" id=\"u9ecea93d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3F%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22MVeDl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1e00958e\" id=\"u1e00958e\"><span data-lake-id=\"uc4c7a9c8\" id=\"uc4c7a9c8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;interface-name&quot;: [true, “never-prefix”]来关闭。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20%20%20color%3F%3A%20string%3B%5Cn%20%20%20%20type%3A%20string%3B%5Cn%20%20%7D%5Cn%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3AVegetables)%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%20%20%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22GExE2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"C3pXm\" id=\"C3pXm\"><span data-lake-id=\"u7e1a24dd\" id=\"u7e1a24dd\">多余属性检查</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22getVegetables(%7B%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%20%5C%22big%5C%22%20%2F%2F%20'size'%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22EcyRb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ua27818ba\" id=\"ua27818ba\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png%22%2C%22taskId%22%3A%22u7d7b2296-d6c0-4b56-b4a5-5e78d030178%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A891%2C%22height%22%3A167%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A17620%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A891%2C%22originHeight%22%3A167%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8Btype%3Astring%3Bsize%3Astring%3BY%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bvegetables%E7%9A%84%E5%8F%82%E6%95%B0.%20%E5%AF%B9%E8%B1%A1%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%2C%E5%B9%B6%E4%B8%94%5C%22size%5C%22%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8Bvegetables%E4%B8%AD.ts(2345)%20ge%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20e%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%20sizei%5C%22big%5C%22%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A67.5127%2C%22y%22%3A25.286406%2C%22width%22%3A675.2846%2C%22height%22%3A21.289991%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8Btype%3Astring%3Bsize%3Astring%3BY%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bvegetables%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A85.4596%2C%22y%22%3A49.351418%2C%22width%22%3A643.7776%2C%22height%22%3A20.491831999999995%2C%22text%22%3A%22%E5%AF%B9%E8%B1%A1%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%2C%E5%B9%B6%E4%B8%94%5C%22size%5C%22%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8Bvegetables%E4%B8%AD.ts(2345)%22%7D%2C%7B%22x%22%3A35.680283%2C%22y%22%3A61.57533%2C%22width%22%3A20.579184999999995%2C%22height%22%3A15.130749999999999%2C%22text%22%3A%22ge%22%7D%2C%7B%22x%22%3A64.41642%2C%22y%22%3A83.77975%2C%22width%22%3A278.47344%2C%22height%22%3A15.072483999999989%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A237.45085%2C%22y%22%3A102.820984%2C%22width%22%3A212.82965000000002%2C%22height%22%3A18.565336000000002%2C%22text%22%3A%22e%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%22%7D%2C%7B%22x%22%3A55.005783%2C%22y%22%3A106.04333%2C%22width%22%3A104.96859699999999%2C%22height%22%3A16.713790000000003%2C%22text%22%3A%22sizei%5C%22big%5C%22%22%7D%5D%2C%22id%22%3A%22u73a7cee0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u701dba2a\" id=\"u701dba2a\"><span data-lake-id=\"u0eebc0b4\" id=\"u0eebc0b4\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。</span></p><p data-lake-id=\"u04a99e81\" id=\"u04a99e81\"><span data-lake-id=\"ue9c7e70b\" id=\"ue9c7e70b\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;object-literal-sort-keys&quot;: [false]来关闭。</span></p><h2 data-lake-id=\"izjCz\" id=\"izjCz\"><span data-lake-id=\"u7faf4ea8\" id=\"u7faf4ea8\">绕开多余属性检查</span></h2><p data-lake-id=\"ua1763e3d\" id=\"ua1763e3d\"><span data-lake-id=\"u56fb9801\" id=\"u56fb9801\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：</span></p><h3 data-lake-id=\"UbRno\" id=\"UbRno\"><span data-lake-id=\"u74755d88\" id=\"u74755d88\">使用类型断言</span></h3><p data-lake-id=\"uce1645b6\" id=\"uce1645b6\"><span data-lake-id=\"u7922a974\" id=\"u7922a974\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3F%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%5CngetVegetables(%7B%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%2012%2C%5Cn%20%20price%3A%201.2%5Cn%7D%20as%20Vegetables)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22KJaSQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"T7Ilu\" id=\"T7Ilu\"><span data-lake-id=\"ufb39e02b\" id=\"ufb39e02b\">添加索引签名</span></h3><p data-lake-id=\"u71358f5f\" id=\"u71358f5f\"><span data-lake-id=\"u065059e0\" id=\"u065059e0\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">更好的方式是添加字符串索引签名</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%20%20%5Bprop%3A%20string%5D%3A%20any%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%5CngetVegetables(%7B%5Cn%20%20color%3A%20%5C%22red%5C%22%2C%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%2012%2C%5Cn%20%20price%3A%201.2%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OLak3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"WqgZw\" id=\"WqgZw\"><span data-lake-id=\"ucf451079\" id=\"ucf451079\">利用类型兼容性</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Btype%7D%60%3B%5Cn%7D%3B%5Cn%5Cnconst%20option%20%3D%20%7B%20type%3A%20%5C%22tomato%5C%22%2C%20size%3A%2012%20%7D%3B%5CngetVegetables(option)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22E9HPU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf3d82ca8\" id=\"uf3d82ca8\"><span data-lake-id=\"u28be7669\" id=\"u28be7669\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">上面这种方法完美通过检查，我们将对象字面量赋给一个变量</span><span data-lake-id=\"ufb9a3832\" id=\"ufb9a3832\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">option</span><span data-lake-id=\"ucb75d1be\" id=\"ucb75d1be\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，然后</span><span data-lake-id=\"u44ea4dd8\" id=\"u44ea4dd8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">getVegetables</span><span data-lake-id=\"u96fc8a3a\" id=\"u96fc8a3a\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">传入</span><span data-lake-id=\"u9b4e19dd\" id=\"u9b4e19dd\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u9833b37d\" id=\"u9833b37d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">option</span><span data-lake-id=\"u5791a42e\" id=\"u5791a42e\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。</span></p><p data-lake-id=\"uf4ce67c2\" id=\"uf4ce67c2\"><span data-lake-id=\"u752c01e7\" id=\"u752c01e7\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错</span></p><h3 data-lake-id=\"DYDQK\" id=\"DYDQK\"><span data-lake-id=\"u5fd15db9\" id=\"u5fd15db9\" style=\"color: rgb(28, 31, 33)\">只读属性</span></h3><p data-lake-id=\"u99cef886\" id=\"u99cef886\"><span data-lake-id=\"u2dafa39a\" id=\"u2dafa39a\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">接口也可以设置只读属性，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Role%20%7B%5Cn%20%20readonly%200%3A%20string%3B%5Cn%20%20readonly%201%3A%20string%3B%5Cn%7D%20%5Cn%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%80%E4%B8%AA%E8%A7%92%E8%89%B2%E5%AD%97%E5%85%B8%EF%BC%8C%E6%9C%89%200%20%E5%92%8C%201%20%E4%B8%A4%E7%A7%8D%E8%A7%92%E8%89%B2%20id%E3%80%82%E4%B8%8B%E9%9D%A2%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%99%85%E7%9A%84%E8%A7%92%E8%89%B2%20%5Cb%20%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9D%A5%E8%AF%95%E5%9B%BE%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%8B%E5%AE%83%E7%9A%84%E5%80%BC%EF%BC%9A%5Cn%5Cnconst%20role%3A%20Role%20%3D%20%7B%5Cn%20%200%3A%20%5C%22super_admin%5C%22%2C%5Cn%20%201%3A%20%5C%22admin%5C%22%5Cn%7D%3B%5Cnrole%5B1%5D%20%3D%20%5C%22super_admin%5C%22%3B%20%2F%2F%20Cannot%20assign%20to%20'0'%20because%20it%20is%20a%20read-only%20property%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tvwz7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9e49879d\" id=\"u9e49879d\"><span data-lake-id=\"u54ba90cf\" id=\"u54ba90cf\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20NAME%3A%20string%20%3D%20%5C%22Lison%5C%22%3B%5CnNAME%20%3D%20%5C%22Haha%5C%22%3B%20%2F%2F%20Uncaught%20TypeError%3A%20Assignment%20to%20constant%20variable%5Cn%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22lison%5C%22%5Cn%7D%3B%5Cnobj.name%20%3D%20%5C%22Haha%5C%22%3B%5Cn%5Cninterface%20Info%20%7B%5Cn%20%20readonly%20name%3A%20string%3B%5Cn%7D%5Cnconst%20info%3A%20Info%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22Lison%5C%22%5Cn%7D%3B%5Cninfo%5B%5C%22name%5C%22%5D%20%3D%20%5C%22Haha%5C%22%3B%20%2F%2F%20Cannot%20assign%20to%20'name'%20because%20it%20is%20a%20read-only%20property%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fvjM5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u298476e7\" id=\"u298476e7\"><span data-lake-id=\"ufdba14a0\" id=\"ufdba14a0\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。</span></p><h3 data-lake-id=\"tkCr2\" id=\"tkCr2\"><span data-lake-id=\"u54efff58\" id=\"u54efff58\">函数类型</span></h3><p data-lake-id=\"ubf5c9623\" id=\"ubf5c9623\"><span data-lake-id=\"u92915e0e\" id=\"u92915e0e\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">接口可以描述普通对象，还可以描述函数类型，我们先看写法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20AddFunc%20%7B%5Cn%20%20(num1%3A%20number%2C%20num2%3A%20number)%3A%20number%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22V5Aiu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc3813531\" id=\"uc3813531\"><span data-lake-id=\"u62b8d59d\" id=\"u62b8d59d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为</span><em><span data-lake-id=\"u67a66298\" id=\"u67a66298\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">调用签名</span></em><span data-lake-id=\"u14467059\" id=\"u14467059\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20add%3A%20AddFunc%20%3D%20(n1%2C%20n2)%20%3D%3E%20n1%20%2B%20n2%3B%5Cnconst%20join%3A%20AddFunc%20%3D%20(n1%2C%20n2)%20%3D%3E%20%60%24%7Bn1%7D%20%24%7Bn2%7D%60%3B%20%2F%2F%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B'string'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B'number'%5Cnadd(%5C%22a%5C%22%2C%202)%3B%20%2F%2F%20%E7%B1%BB%E5%9E%8B'string'%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B'number'%E7%9A%84%E5%8F%82%E6%95%B0%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22wiFm0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9a4c6d21\" id=\"u9a4c6d21\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png%22%2C%22taskId%22%3A%22ueb62392c-919f-4c0c-9cc7-717889ec8d6%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A715%2C%22height%22%3A107%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A21366%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A953%2C%22originHeight%22%3A143%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8Bstring'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%20%E7%B1%BB%E5%9E%8B%5C%22number'.ts(2322)%20interfaceAddFunc%20index.ts(64%2C13)%3A%E6%89%80%E9%9C%80%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%87%AA%E6%AD%A4%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.%20(numl%3Anumber%2Cnum2%3Anumber)%3Anu%20(parameter)n1%3Anumber%20constadd%3AAddFunc-(n1%2Cn2)-%3E%20%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%20%24n1in2%3B%20constjoin%3AAddFunc-(%2Cn%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A360.26846%2C%22y%22%3A3.2358212%2C%22width%22%3A255.67164000000002%2C%22height%22%3A19.2425588%2C%22text%22%3A%22%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8Bstring'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A577.9371%2C%22y%22%3A6.278446%2C%22width%22%3A210.12300000000005%2C%22height%22%3A17.558342%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22number'.ts(2322)%22%7D%2C%7B%22x%22%3A36.108833%2C%22y%22%3A29.425035%2C%22width%22%3A179.703837%2C%22height%22%3A21.692023%2C%22text%22%3A%22interfaceAddFunc%22%7D%2C%7B%22x%22%3A360.20572%2C%22y%22%3A35.35116%2C%22width%22%3A426.82938000000007%2C%22height%22%3A18.20225%2C%22text%22%3A%22index.ts(64%2C13)%3A%E6%89%80%E9%9C%80%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%87%AA%E6%AD%A4%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.%22%7D%2C%7B%22x%22%3A55.44603%2C%22y%22%3A56.10835%2C%22width%22%3A296.44626999999997%2C%22height%22%3A17.257019999999997%2C%22text%22%3A%22(numl%3Anumber%2Cnum2%3Anumber)%3Anu%22%7D%2C%7B%22x%22%3A366.1037%2C%22y%22%3A71.00154%2C%22width%22%3A201.43880000000001%2C%22height%22%3A18.70581999999999%2C%22text%22%3A%22(parameter)n1%3Anumber%22%7D%2C%7B%22x%22%3A36.70705%2C%22y%22%3A100.40108%2C%22width%22%3A286.61573000000004%2C%22height%22%3A17.54453000000001%2C%22text%22%3A%22constadd%3AAddFunc-(n1%2Cn2)-%3E%22%7D%2C%7B%22x%22%3A504.33707%2C%22y%22%3A101.76711%2C%22width%22%3A132.79519%2C%22height%22%3A15.820899999999995%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A354.69107%2C%22y%22%3A102.00822%2C%22width%22%3A133.09747%2C%22height%22%3A15.27645600000001%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%22%7D%2C%7B%22x%22%3A359.33408%2C%22y%22%3A123.40791%2C%22width%22%3A124.97152000000006%2C%22height%22%3A18.29798000000001%2C%22text%22%3A%22%24n1in2%3B%22%7D%2C%7B%22x%22%3A36.91246%2C%22y%22%3A123.505806%2C%22width%22%3A277.92618999999996%2C%22height%22%3A16.565573999999998%2C%22text%22%3A%22constjoin%3AAddFunc-(%2Cn%22%7D%5D%2C%22id%22%3A%22u41545c4f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u3c925611\" id=\"u3c925611\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png%22%2C%22taskId%22%3A%22u4dd12a49-ea62-4869-9f7c-1eb5ab88d18%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12456%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A724%2C%22originHeight%22%3A109%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%E7%9A%84%E5%8F%82%E6%95%B0.%20ts(2345)%20conS%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20conS%20adda%5C%22%2C2%3B%2F%2F%E7%B1%BB%E5%9E%8B'string%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%20%E7%9A%84%E5%8F%82%E6%95%B0%20number%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A84.21963%2C%22y%22%3A18.177246%2C%22width%22%3A403.29749%2C%22height%22%3A21.882458000000003%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A508.1918%2C%22y%22%3A22.715536%2C%22width%22%3A73.76394999999997%2C%22height%22%3A15.990609999999997%2C%22text%22%3A%22ts(2345)%22%7D%2C%7B%22x%22%3A35.819202%2C%22y%22%3A32.51003%2C%22width%22%3A37.022498000000006%2C%22height%22%3A12.230905999999997%2C%22text%22%3A%22conS%22%7D%2C%7B%22x%22%3A82.22469%2C%22y%22%3A54.35365%2C%22width%22%3A278.05183%2C%22height%22%3A16.687269999999998%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A35.931484%2C%22y%22%3A55.578228%2C%22width%22%3A37.602226%2C%22height%22%3A12.761912000000002%2C%22text%22%3A%22conS%22%7D%2C%7B%22x%22%3A34.65141%2C%22y%22%3A72.876945%2C%22width%22%3A422.89073%2C%22height%22%3A19.73806499999999%2C%22text%22%3A%22adda%5C%22%2C2%3B%2F%2F%E7%B1%BB%E5%9E%8B'string%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A528.8692%2C%22y%22%3A74.59742%2C%22width%22%3A55.02200000000005%2C%22height%22%3A17.137200000000007%2C%22text%22%3A%22%E7%9A%84%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A463.91177%2C%22y%22%3A79.057495%2C%22width%22%3A55.22913%2C%22height%22%3A11.216065%2C%22text%22%3A%22number%22%7D%5D%2C%22id%22%3A%22u91b90715%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6eaf2ecd\" id=\"u6eaf2ecd\"><span data-lake-id=\"u1420f6b8\" id=\"u1420f6b8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。</span></p><p data-lake-id=\"u160cc3d5\" id=\"u160cc3d5\"><span data-lake-id=\"u6862f42b\" id=\"u6862f42b\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。</span></p><p data-lake-id=\"uc34d1cd4\" id=\"uc34d1cd4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg%22%2C%22taskId%22%3A%22u81f8ae0c-7d78-4d36-8bad-24066b4ff1d%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfd200012bae16000820.jpg%22%2C%22size%22%3A134441%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A820%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BD%BF%E7%94%A8%20interface%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%20%E6%B3%A8%E6%84%8F%E5%9C%A8%E5%AE%9A%E4%B9%89%E6%8C%82%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%2C%E4%BD%A0%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%BB%96%E7%90%86%E8%A7%A3%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E8%80%8C%E8%A6%81%E7%90%86%E8%A7%A3%E4%B8%BA%E4%BB%AC%E5%8F%B7%E5%8C%85%E7%9A%84%20%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%9D%97%2C%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E6%9D%A1%E6%9D%A1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8B%BA%2C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E8%80%8C%E6%98%AF%E5%9E%8B%20%E5%8F%AF%E9%80%89%E5%B1%85%E6%80%A7%20%E6%9C%89%E6%97%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%AE%9A%E5%8F%88%E5%9C%A8mtifke%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9B%BF%E6%98%AF%E4%BA%9B%E9%A1%B9%E7%9A%84%2Ctpecirt%E4%B8%AD%E4%BE%BF%E4%B8%BA%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%AF%E9%80%89%E5%B1%82%E6%80%A7%20%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%20%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8D%E6%AF%94%E6%8E%A5%E5%8F%A3%E5%B0%91%E9%81%93%E4%B8%80%E4%BA%9B%E8%80%B3%E8%80%85%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E8%AE%B8%E7%9A%84%20%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B9%8E%E4%BB%BB%E6%84%8F%E7%BB%93%E6%9E%84%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%20%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%20%E7%BB%95%E5%BC%80%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%20%E5%88%A9%E7%94%A8%E7%BE%8E%E5%9E%8B%E7%B4%A0%E5%AE%A2%E6%80%A7%20%E4%BD%BF%E7%94%A8const%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%BE%88%E9%95%AF%E7%9A%84%20%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%20%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%9D%E8%AF%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9%2C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8readonly%20%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E5%96%84%E9%80%9A%E5%AF%B9%E8%B1%A1%2C%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E8%8F%8C%E6%95%99%E8%A1%A8%E5%9E%8B%20%E9%9D%A2%E6%95%B0%E7%B1%BB%E5%9E%8B%20%E5%AE%9E%E9%99%85%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E7%9A%84%E6%97%B6%E5%80%99%2C%E5%90%8D%E5%AD%97%E6%98%AF%E6%97%A0%E9%9C%80%E5%92%8C%E6%8C%82%E5%8F%A3%E4%B8%AD%E5%8F%82%E6%95%B0%E5%90%8D%E7%9B%B8%E9%97%B4%E7%9A%84%2C%E5%8F%AA%E9%9C%80%E8%A6%81%E4%BD%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E5%8D%B3%E5%8F%AF%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A778.23425%2C%22y%22%3A24.854164%2C%22width%22%3A38.69965000000002%2C%22height%22%3A21.344956%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%22%7D%2C%7B%22x%22%3A827.28033%2C%22y%22%3A26.263094%2C%22width%22%3A172.57566999999995%2C%22height%22%3A19.792932000000004%2C%22text%22%3A%22interface%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A593.55023%2C%22y%22%3A61.879852%2C%22width%22%3A97.52976999999998%2C%22height%22%3A24.731967999999995%2C%22text%22%3A%22%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%22%7D%2C%7B%22x%22%3A776.6905%2C%22y%22%3A72.23591%2C%22width%22%3A776.2237999999999%2C%22height%22%3A21.919209999999993%2C%22text%22%3A%22%E6%B3%A8%E6%84%8F%E5%9C%A8%E5%AE%9A%E4%B9%89%E6%8C%82%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%2C%E4%BD%A0%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%BB%96%E7%90%86%E8%A7%A3%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E8%80%8C%E8%A6%81%E7%90%86%E8%A7%A3%E4%B8%BA%E4%BB%AC%E5%8F%B7%E5%8C%85%E7%9A%84%22%7D%2C%7B%22x%22%3A778.42065%2C%22y%22%3A100.49816%2C%22width%22%3A678.8297499999999%2C%22height%22%3A21.701814%2C%22text%22%3A%22%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%9D%97%2C%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E6%9D%A1%E6%9D%A1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8B%BA%2C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E8%80%8C%E6%98%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A596.7596%2C%22y%22%3A197.34923%2C%22width%22%3A93.83339999999998%2C%22height%22%3A25.477069999999998%2C%22text%22%3A%22%E5%8F%AF%E9%80%89%E5%B1%85%E6%80%A7%22%7D%2C%7B%22x%22%3A782.0851%2C%22y%22%3A200.52173%2C%22width%22%3A762.3989999999999%2C%22height%22%3A23.950500000000005%2C%22text%22%3A%22%E6%9C%89%E6%97%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%AE%9A%E5%8F%88%E5%9C%A8mtifke%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9B%BF%E6%98%AF%E4%BA%9B%E9%A1%B9%E7%9A%84%2Ctpecirt%E4%B8%AD%E4%BE%BF%E4%B8%BA%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%AF%E9%80%89%E5%B1%82%E6%80%A7%22%7D%2C%7B%22x%22%3A597.22046%2C%22y%22%3A308.25293%2C%22width%22%3A138.92363999999998%2C%22height%22%3A25.314120000000003%2C%22text%22%3A%22%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%22%7D%2C%7B%22x%22%3A828.28455%2C%22y%22%3A311.3899%2C%22width%22%3A510.08525%2C%22height%22%3A19.363459999999975%2C%22text%22%3A%22%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8D%E6%AF%94%E6%8E%A5%E5%8F%A3%E5%B0%91%E9%81%93%E4%B8%80%E4%BA%9B%E8%80%B3%E8%80%85%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E8%AE%B8%E7%9A%84%22%7D%2C%7B%22x%22%3A71.84581%2C%22y%22%3A394.8105%2C%22width%22%3A358.67754%2C%22height%22%3A31.83913000000001%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B9%8E%E4%BB%BB%E6%84%8F%E7%BB%93%E6%9E%84%22%7D%2C%7B%22x%22%3A877.55035%2C%22y%22%3A408.61316%2C%22width%22%3A120.98005%2C%22height%22%3A21.127009999999984%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%22%7D%2C%7B%22x%22%3A877.3996%2C%22y%22%3A454.9849%2C%22width%22%3A122.30450000000008%2C%22height%22%3A22.209069999999997%2C%22text%22%3A%22%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A591.8626%2C%22y%22%3A456.42032%2C%22width%22%3A196.19385999999997%2C%22height%22%3A23.305360000000007%2C%22text%22%3A%22%E7%BB%95%E5%BC%80%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%22%7D%2C%7B%22x%22%3A879.0666%2C%22y%22%3A504.0202%2C%22width%22%3A141.96929999999998%2C%22height%22%3A21.512200000000064%2C%22text%22%3A%22%E5%88%A9%E7%94%A8%E7%BE%8E%E5%9E%8B%E7%B4%A0%E5%AE%A2%E6%80%A7%22%7D%2C%7B%22x%22%3A777.16095%2C%22y%22%3A592.86554%2C%22width%22%3A596.4436499999999%2C%22height%22%3A21.175960000000032%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8const%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%BE%88%E9%95%AF%E7%9A%84%22%7D%2C%7B%22x%22%3A594.65857%2C%22y%22%3A612.65704%2C%22width%22%3A96.08762999999999%2C%22height%22%3A26.271429999999896%2C%22text%22%3A%22%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%22%7D%2C%7B%22x%22%3A777.686%2C%22y%22%3A639.3086%2C%22width%22%3A508.34209999999996%2C%22height%22%3A21.071160000000077%2C%22text%22%3A%22%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%9D%E8%AF%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9%2C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8readonly%22%7D%2C%7B%22x%22%3A778.1251%2C%22y%22%3A723.17633%2C%22width%22%3A403.60169999999994%2C%22height%22%3A24.788509999999974%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E5%96%84%E9%80%9A%E5%AF%B9%E8%B1%A1%2C%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E8%8F%8C%E6%95%99%E8%A1%A8%E5%9E%8B%22%7D%2C%7B%22x%22%3A593.13214%2C%22y%22%3A747.2824%2C%22width%22%3A96.51265999999998%2C%22height%22%3A26.85089999999991%2C%22text%22%3A%22%E9%9D%A2%E6%95%B0%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A777.8692%2C%22y%22%3A772.46375%2C%22width%22%3A700.2081999999999%2C%22height%22%3A20.61755000000005%2C%22text%22%3A%22%E5%AE%9E%E9%99%85%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E7%9A%84%E6%97%B6%E5%80%99%2C%E5%90%8D%E5%AD%97%E6%98%AF%E6%97%A0%E9%9C%80%E5%92%8C%E6%8C%82%E5%8F%A3%E4%B8%AD%E5%8F%82%E6%95%B0%E5%90%8D%E7%9B%B8%E9%97%B4%E7%9A%84%2C%E5%8F%AA%E9%9C%80%E8%A6%81%E4%BD%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E5%8D%B3%E5%8F%AF%22%7D%5D%2C%22id%22%3A%22u240e1d03%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6b68740b\" id=\"u6b68740b\"><span data-lake-id=\"u0a8f08f7\" id=\"u0a8f08f7\" class=\"lake-fontsize-22\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"ga2EL\" id=\"ga2EL\"><span data-lake-id=\"u9d3b4def\" id=\"u9d3b4def\">基本用法</span></h2><p data-lake-id=\"u4c6734a0\" id=\"u4c6734a0\"><span data-lake-id=\"u4f9a9017\" id=\"u4f9a9017\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：</span><span data-lake-id=\"ua9fa4c49\" id=\"ua9fa4c49\" class=\"lake-fontsize-22\">firstName</span><span data-lake-id=\"uc7835a87\" id=\"uc7835a87\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%B3%A8%EF%BC%9A%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E4%B8%BA%E7%BA%AFJavaScript%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AF%B7%E5%9C%A8JavaScript%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%BC%96%E5%86%99%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%9C%A8TypeScript%E7%8E%AF%E5%A2%83%E4%BC%9A%E6%8A%A5%E4%B8%80%E4%BA%9B%E7%B1%BB%E5%9E%8B%E9%94%99%E8%AF%AF%5Cnconst%20getFullName%20%3D%20(%7B%20firstName%2C%20lastName%20%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%5Cn%7D%3B%5Cn%5Cn%E4%BD%BF%E7%94%A8%E6%97%B6%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%EF%BC%9A%5CngetFullName(%7B%5Cn%20%20firstName%3A%20%5C%22Lison%5C%22%2C%5Cn%20%20lastName%3A%20%5C%22Li%5C%22%5Cn%7D)%3B%20%2F%2F%20%3D%3E%20'Lison%20Li'%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22qqc7N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u981badb3\" id=\"u981badb3\"><span data-lake-id=\"u6be843d1\" id=\"u6be843d1\" class=\"lake-fontsize-22\">没有问题，我们得到了拼接后的完整名字，但是使用这个函数的人如果传入一些不是很理想的参数时，就会导致各种结果：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22getFullName()%3B%20%2F%2F%20Uncaught%20TypeError%3A%20Cannot%20destructure%20property%20%60a%60%20of%20'undefined'%20or%20'null'%5CngetFullName(%7B%20age%3A%2018%2C%20phone%3A%20%5C%2213312345678%5C%22%20%7D)%3B%20%2F%2F%20'undefined%20undefined'%5CngetFullName(%7B%20firstName%3A%20%5C%22Lison%5C%22%20%7D)%3B%20%2F%2F%20'Lison%20undefined'%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22PehQm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1d1136e7\" id=\"u1d1136e7\"><span data-lake-id=\"u60d3aa18\" id=\"u60d3aa18\" class=\"lake-fontsize-22\"> </span><span data-lake-id=\"u8a36f91f\" id=\"u8a36f91f\" class=\"lake-fontsize-22\"> 这些都是我们不想要的，在开发时难免会传入错误的参数，所以 TypeScript 能够帮我们在编译阶段就检测到这些错误。我们来完善下这个函数的定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getFullName%20%3D%20(%7B%5Cn%20%20firstName%2C%5Cn%20%20lastName%2C%5Cn%7D%3A%20%7B%20%2F%2F%20%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20firstName%3A%20string%3B%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B8%BAfirstName%E5%92%8ClastName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E5%BF%85%E9%A1%BB%E4%B8%BAstring%E7%B1%BB%E5%9E%8B%5Cn%20%20lastName%3A%20string%3B%5Cn%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%5Cn%7D%5Cn%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22jcuFq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u55acf1f2\" id=\"u55acf1f2\"><span data-lake-id=\"u7a126b53\" id=\"u7a126b53\" class=\"lake-fontsize-22\">我们通过对象字面量的形式去限定我们传入的这个对象的结构，现在再来看下之前的调用会出现什么提示：</span></p><p data-lake-id=\"u64baef33\" id=\"u64baef33\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png%22%2C%22taskId%22%3A%22u33945ad6-a930-45ff-97a4-b26d83fb21f%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A675%2C%22height%22%3A234%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A25936%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A675%2C%22originHeight%22%3A234%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%3A%2F%2F%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%90%8D%2028%20%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA.%20ts(2554)%20tName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%2029%2030%20index.ts(25%2C22)%3A%E6%9C%AA%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%AD%A4%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84%E8%87%AA%E5%8F%98%E9%87%8F.%2031%20constgetFuiiName(firstNamelastame%2032%20firstName%3Astring%3B%2033%20lastName%3Astring%3B%2034%20H)-%3Estring%2035%2036%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20getFuiinameV)%3B%2F%2F%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA%2037%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A70.056694%2C%22y%22%3A0.96522015%2C%22width%22%3A596.478766%2C%22height%22%3A21.59890685%2C%22text%22%3A%22%3A%2F%2F%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%2C%E5%9B%A0%E4%B8%BA%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%90%8D%22%7D%2C%7B%22x%22%3A5.0437083%2C%22y%22%3A6.245795%2C%22width%22%3A19.799583700000003%2C%22height%22%3A14.83794%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A65.60348%2C%22y%22%3A25.08641%2C%22width%22%3A249.14724999999999%2C%22height%22%3A18.444077%2C%22text%22%3A%22%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA.%22%7D%2C%7B%22x%22%3A323.7029%2C%22y%22%3A28.03306%2C%22width%22%3A75.65748000000002%2C%22height%22%3A15.834519999999998%2C%22text%22%3A%22ts(2554)%22%7D%2C%7B%22x%22%3A531.24426%2C%22y%22%3A27.71959%2C%22width%22%3A136.3881899999999%2C%22height%22%3A16.90845%2C%22text%22%3A%22tName%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B1%9E%22%7D%2C%7B%22x%22%3A5.735676%2C%22y%22%3A29.95294%2C%22width%22%3A18.747625%2C%22height%22%3A12.598111999999997%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A5.457086%2C%22y%22%3A53.39238%2C%22width%22%3A19.089966%2C%22height%22%3A12.549199999999999%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A65.03882%2C%22y%22%3A57.28209%2C%22width%22%3A444.88171%2C%22height%22%3A18.36057000000001%2C%22text%22%3A%22index.ts(25%2C22)%3A%E6%9C%AA%E6%8F%90%E4%BE%9B%E4%B8%8E%E6%AD%A4%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84%E8%87%AA%E5%8F%98%E9%87%8F.%22%7D%2C%7B%22x%22%3A5.6048245%2C%22y%22%3A76.96992%2C%22width%22%3A18.0566875%2C%22height%22%3A12.168660000000003%2C%22text%22%3A%2231%22%7D%2C%7B%22x%22%3A65.52161%2C%22y%22%3A93.11087%2C%22width%22%3A437.20219%2C%22height%22%3A17.99866%2C%22text%22%3A%22constgetFuiiName(firstNamelastame%22%7D%2C%7B%22x%22%3A5.746605%2C%22y%22%3A99.58777%2C%22width%22%3A18.04672%2C%22height%22%3A12.949193999999991%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A100.47341%2C%22y%22%3A112.93966%2C%22width%22%3A167.69535000000002%2C%22height%22%3A19.976290000000006%2C%22text%22%3A%22firstName%3Astring%3B%22%7D%2C%7B%22x%22%3A5.519258%2C%22y%22%3A121.7748%2C%22width%22%3A17.620244%2C%22height%22%3A12.538000000000011%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A100.86469%2C%22y%22%3A136.19089%2C%22width%22%3A159.22755999999998%2C%22height%22%3A19.160690000000017%2C%22text%22%3A%22lastName%3Astring%3B%22%7D%2C%7B%22x%22%3A4.8655324%2C%22y%22%3A144.20634%2C%22width%22%3A18.9732036%2C%22height%22%3A12.11529999999999%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A64.182816%2C%22y%22%3A158.51576%2C%22width%22%3A112.92837399999999%2C%22height%22%3A17.703309999999988%2C%22text%22%3A%22H)-%3Estring%22%7D%2C%7B%22x%22%3A4.467048%2C%22y%22%3A166.96953%2C%22width%22%3A19.276704000000002%2C%22height%22%3A12.623970000000014%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A4.63562%2C%22y%22%3A190.24937%2C%22width%22%3A19.443548%2C%22height%22%3A12.062659999999994%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A63.764385%2C%22y%22%3A190.37323%2C%22width%22%3A276.764115%2C%22height%22%3A15.586960000000005%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A53.709553%2C%22y%22%3A209.68217%2C%22width%22%3A365.58170700000005%2C%22height%22%3A20.822829999999982%2C%22text%22%3A%22getFuiinameV)%3B%2F%2F%E5%BA%94%E6%9C%891%E4%B8%AA%E5%8F%82%E6%95%B0%2C%E4%BD%86%E8%8E%B7%E5%BE%970%E4%B8%AA%22%7D%2C%7B%22x%22%3A5.249744%2C%22y%22%3A212.72105%2C%22width%22%3A17.806106%2C%22height%22%3A12.032990000000012%2C%22text%22%3A%2237%22%7D%5D%2C%22id%22%3A%22ua1b0f756%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf19ffe58\" id=\"uf19ffe58\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117619611-8d9184b4-5317-4e7f-9d80-68c5b16c1fbd.png%22%2C%22taskId%22%3A%22u9fb570d1-61b4-4d58-a47c-7931a7f9d9b%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A770%2C%22height%22%3A79%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A33443%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1540%2C%22originHeight%22%3A158%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SittirstMameSt%20%E5%9E%8Bae%3Amuber%3Aphomemute%3BY%E5%8F%82%E8%87%B4%E4%B8%8D%E8%83%BD%E8%9E%BA%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22fnsthrlestrlme%3BLostlmstl.%20%E5%AF%B9%E5%AE%B6%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7.%E5%B9%B6%E4%B8%94%5C%22e%5C%22%E4%B8%8D%E5%9C%A8%E5%85%B1%E5%9E%8B%5C%22firstovestrintsm%20(property)age%3Anumber%20me%E6%9F%A5%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20%E7%B1%BB%E5%9E%8B%5C%22(aee%3Anumber%3Aphone%3Anumber%3BP%E7%9A%84%E5%8F%82%E6%95%99%E4%B8%8D%E8%83%BD%E6%84%9F%E7%BB%99%E5%9E%8Bfirsthame%3Bs%20lastName%3Astring%3B.2%5C%22%E7%9A%84%E5%8F%82%E6%95%B0.%20stringjla%20getFuliname(age%3A18%2Cphone123456789%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.19127%2C%22y%22%3A-0.96889234%2C%22width%22%3A141.30107%2C%22height%22%3A14.38983534%2C%22text%22%3A%22SittirstMameSt%22%7D%2C%7B%22x%22%3A158.49146%2C%22y%22%3A19.361862%2C%22width%22%3A943.5999400000001%2C%22height%22%3A22.317166000000004%2C%22text%22%3A%22%E5%9E%8Bae%3Amuber%3Aphomemute%3BY%E5%8F%82%E8%87%B4%E4%B8%8D%E8%83%BD%E8%9E%BA%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22fnsthrlestrlme%3BLostlmstl.%22%7D%2C%7B%22x%22%3A173.39833%2C%22y%22%3A41.914288%2C%22width%22%3A912.71867%2C%22height%22%3A25.102292000000006%2C%22text%22%3A%22%E5%AF%B9%E5%AE%B6%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7.%E5%B9%B6%E4%B8%94%5C%22e%5C%22%E4%B8%8D%E5%9C%A8%E5%85%B1%E5%9E%8B%5C%22firstovestrintsm%22%7D%2C%7B%22x%22%3A158.09389%2C%22y%22%3A75.88823%2C%22width%22%3A203.30771%2C%22height%22%3A20.376365000000007%2C%22text%22%3A%22(property)age%3Anumber%22%7D%2C%7B%22x%22%3A136.04724%2C%22y%22%3A109.524315%2C%22width%22%3A300.35043%2C%22height%22%3A15.923175%2C%22text%22%3A%22me%E6%9F%A5%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A442.7086%2C%22y%22%3A129.50824%2C%22width%22%3A644.3739%2C%22height%22%3A20.530110000000008%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22(aee%3Anumber%3Aphone%3Anumber%3BP%E7%9A%84%E5%8F%82%E6%95%99%E4%B8%8D%E8%83%BD%E6%84%9F%E7%BB%99%E5%9E%8Bfirsthame%3Bs%22%7D%2C%7B%22x%22%3A1151.2697%2C%22y%22%3A129.19928%2C%22width%22%3A253.68979999999988%2C%22height%22%3A19.493360000000024%2C%22text%22%3A%22lastName%3Astring%3B.2%5C%22%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A1078.0663%2C%22y%22%3A131.69977%2C%22width%22%3A97.45759999999996%2C%22height%22%3A18.598160000000007%2C%22text%22%3A%22stringjla%22%7D%2C%7B%22x%22%3A14.136898%2C%22y%22%3A131.9145%2C%22width%22%3A401.97873200000004%2C%22height%22%3A19.273020000000002%2C%22text%22%3A%22getFuliname(age%3A18%2Cphone123456789%22%7D%5D%2C%22id%22%3A%22u992b1d80%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u2fe3580b\" id=\"u2fe3580b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639117677060-910be000-9aad-431c-b371-2cf46b9b794c.png%22%2C%22taskId%22%3A%22u99960eb5-aae8-4d2b-b893-b896dcdeab1%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1358%2C%22height%22%3A176%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A32398%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1358%2C%22originHeight%22%3A176%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8BfirstName%3Astring%3B%20%3B%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bfirstname%3Astring%3BlastName%3Astring%3B%E7%9A%84%E5%8F%82%E6%95%B0.%20%E4%B8%9A%E4%BA%86%E6%9D%91%E4%B8%AD%E5%B0%91%E5%AE%B6%E4%BD%8F%E5%A5%96m%E4%B8%AD%2034%2035%20index.ts(30%2C5)%3A%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%A3%B0%E6%98%8E%E4%BA%86%5C%22lastName%2036%20(propertyfirstame%3Astring%2037%20getFuiina%2038%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D...(C.trl%2B)%20getFulina%20getFulinamefirstName%5C%22Lison%3B%E7%A7%AF%E5%B0%91%E5%BF%85%E8%A6%81%E5%B1%9E%E6%80%A7astName%2039%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A172.4774%2C%22y%22%3A10.630165%2C%22width%22%3A245.23560000000003%2C%22height%22%3A18.862198%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8BfirstName%3Astring%3B%22%7D%2C%7B%22x%22%3A392.5245%2C%22y%22%3A9.898132%2C%22width%22%3A646.0127%2C%22height%22%3A19.38568%2C%22text%22%3A%22%3B%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bfirstname%3Astring%3BlastName%3Astring%3B%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A186.99178%2C%22y%22%3A31.103899%2C%22width%22%3A1156.91602%2C%22height%22%3A23.747583%2C%22text%22%3A%22%E4%B8%9A%E4%BA%86%E6%9D%91%E4%B8%AD%E5%B0%91%E5%AE%B6%E4%BD%8F%E5%A5%96m%E4%B8%AD%22%7D%2C%7B%22x%22%3A1.4795045%2C%22y%22%3A38.20511%2C%22width%22%3A19.7915375%2C%22height%22%3A14.615973000000004%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A0.20263453%2C%22y%22%3A61.615917%2C%22width%22%3A20.76056847%2C%22height%22%3A16.095638%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A169.64444%2C%22y%22%3A65.85934%2C%22width%22%3A367.43405999999993%2C%22height%22%3A21.666200000000003%2C%22text%22%3A%22index.ts(30%2C5)%3A%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%A3%B0%E6%98%8E%E4%BA%86%5C%22lastName%22%7D%2C%7B%22x%22%3A0.15577894%2C%22y%22%3A83.290474%2C%22width%22%3A21.76526806%2C%22height%22%3A16.584996000000004%2C%22text%22%3A%2236%22%7D%2C%7B%22x%22%3A169.97092%2C%22y%22%3A100.989525%2C%22width%22%3A263.52698%2C%22height%22%3A18.525175000000004%2C%22text%22%3A%22(propertyfirstame%3Astring%22%7D%2C%7B%22x%22%3A0.87860405%2C%22y%22%3A104.689095%2C%22width%22%3A22.20265895%2C%22height%22%3A18.445739000000003%2C%22text%22%3A%2237%22%7D%2C%7B%22x%22%3A75.97925%2C%22y%22%3A105.367256%2C%22width%22%3A85.42351000000001%2C%22height%22%3A20.387833999999998%2C%22text%22%3A%22getFuiina%22%7D%2C%7B%22x%22%3A0.6956785%2C%22y%22%3A129.5022%2C%22width%22%3A22.3032155%2C%22height%22%3A16.804070000000024%2C%22text%22%3A%2238%22%7D%2C%7B%22x%22%3A169.17944%2C%22y%22%3A131.52187%2C%22width%22%3A268.85656%2C%22height%22%3A16.261300000000006%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D...(C.trl%2B)%22%7D%2C%7B%22x%22%3A69.88076%2C%22y%22%3A130.09065%2C%22width%22%3A91.84313000000002%2C%22height%22%3A17.37720999999999%2C%22text%22%3A%22getFulina%22%7D%2C%7B%22x%22%3A46.90255%2C%22y%22%3A150.04514%2C%22width%22%3A558.11015%2C%22height%22%3A19.361580000000004%2C%22text%22%3A%22getFulinamefirstName%5C%22Lison%3B%E7%A7%AF%E5%B0%91%E5%BF%85%E8%A6%81%E5%B1%9E%E6%80%A7astName%22%7D%2C%7B%22x%22%3A0.22041021%2C%22y%22%3A151.85524%2C%22width%22%3A22.68226379%2C%22height%22%3A16.181759999999997%2C%22text%22%3A%2239%22%7D%5D%2C%22id%22%3A%22ub3bff8f8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua8031729\" id=\"ua8031729\"><span data-lake-id=\"ue7315539\" id=\"ue7315539\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这些都是在我们编写代码的时候 TypeScript 提示给我们的错误信息，这样就避免了在使用函数的时候传入不正确的参数。我们使用interface来定义接口：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Info%20%7B%5Cn%20%20firstName%3A%20string%3B%5Cn%20%20lastName%3A%20string%3B%5Cn%7D%5Cnconst%20getFullName%20%3D%20(%7B%20firstName%2C%20lastName%20%7D%3A%20Info)%20%3D%3E%5Cn%20%20%60%24%7BfirstName%7D%20%24%7BlastName%7D%60%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22RTUnh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9a6f2a03\" id=\"u9a6f2a03\"><span data-lake-id=\"ubf519eb9\" id=\"ubf519eb9\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">注意在定义接口的时候，你不要把它理解为是在定义一个对象，而要理解为{}括号包裹的是一个代码块，里面是一条条声明语句，只不过声明的不是变量的值而是类型。声明也不用等号赋值，而是冒号指定类型。每条声明之前用换行分隔即可，或者也可以使用分号或者逗号，都是可以的。</span></p><h2 data-lake-id=\"Osi0T\" id=\"Osi0T\"><span data-lake-id=\"ue9ab45a1\" id=\"ue9ab45a1\">可选属性</span></h2><p data-lake-id=\"ud81f38f2\" id=\"ud81f38f2\"><span data-lake-id=\"u5dda12f6\" id=\"u5dda12f6\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，</span><em><span data-lake-id=\"ufa2e09a8\" id=\"ufa2e09a8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">typescript</span></em><span data-lake-id=\"u68502803\" id=\"u68502803\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">为我们提供了可选属性。</span></p><p data-lake-id=\"u211124af\" id=\"u211124af\"><span data-lake-id=\"u733373b3\" id=\"u733373b3\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们先定义一个描述传入蔬菜信息的句子的函数：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22JpneV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4a4bd115\" id=\"u4a4bd115\"><span data-lake-id=\"u9ecea93d\" id=\"u9ecea93d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们可以看到这个函数中根据传入对象中的 color 和 type 来进行描述返回一句话，color 是可选的，所以我们可以给接口设置可选属性，在属性名后面加个?即可：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3F%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22MVeDl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1e00958e\" id=\"u1e00958e\"><span data-lake-id=\"uc4c7a9c8\" id=\"uc4c7a9c8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里可能 tslint 会报一个警告，告诉我们接口应该以大写的i开头，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;interface-name&quot;: [true, “never-prefix”]来关闭。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20%20%20color%3F%3A%20string%3B%5Cn%20%20%20%20type%3A%20string%3B%5Cn%20%20%7D%5Cn%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3AVegetables)%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%20%20%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22GExE2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"C3pXm\" id=\"C3pXm\"><span data-lake-id=\"u7e1a24dd\" id=\"u7e1a24dd\">多余属性检查</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22getVegetables(%7B%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%20%5C%22big%5C%22%20%2F%2F%20'size'%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22EcyRb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ua27818ba\" id=\"ua27818ba\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639118186449-02098c1e-5a3f-4e36-a5ba-8d49b0d4411a.png%22%2C%22taskId%22%3A%22u7d7b2296-d6c0-4b56-b4a5-5e78d030178%22%2C%22clientId%22%3A%22ue1d2c419-1221-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A891%2C%22height%22%3A167%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A17620%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A891%2C%22originHeight%22%3A167%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8Btype%3Astring%3Bsize%3Astring%3BY%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bvegetables%E7%9A%84%E5%8F%82%E6%95%B0.%20%E5%AF%B9%E8%B1%A1%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%2C%E5%B9%B6%E4%B8%94%5C%22size%5C%22%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8Bvegetables%E4%B8%AD.ts(2345)%20ge%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20e%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%20sizei%5C%22big%5C%22%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A67.5127%2C%22y%22%3A25.286406%2C%22width%22%3A675.2846%2C%22height%22%3A21.289991%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8Btype%3Astring%3Bsize%3Astring%3BY%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8Bvegetables%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A85.4596%2C%22y%22%3A49.351418%2C%22width%22%3A643.7776%2C%22height%22%3A20.491831999999995%2C%22text%22%3A%22%E5%AF%B9%E8%B1%A1%E6%96%87%E5%AD%97%E5%8F%AF%E4%BB%A5%E5%8F%AA%E6%8C%87%E5%AE%9A%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%2C%E5%B9%B6%E4%B8%94%5C%22size%5C%22%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8Bvegetables%E4%B8%AD.ts(2345)%22%7D%2C%7B%22x%22%3A35.680283%2C%22y%22%3A61.57533%2C%22width%22%3A20.579184999999995%2C%22height%22%3A15.130749999999999%2C%22text%22%3A%22ge%22%7D%2C%7B%22x%22%3A64.41642%2C%22y%22%3A83.77975%2C%22width%22%3A278.47344%2C%22height%22%3A15.072483999999989%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(CtrI%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A237.45085%2C%22y%22%3A102.820984%2C%22width%22%3A212.82965000000002%2C%22height%22%3A18.565336000000002%2C%22text%22%3A%22e%E4%B8%8D%E5%9C%A8%E7%B1%BB%E5%9E%8B'Vegetables'%E4%B8%AD%22%7D%2C%7B%22x%22%3A55.005783%2C%22y%22%3A106.04333%2C%22width%22%3A104.96859699999999%2C%22height%22%3A16.713790000000003%2C%22text%22%3A%22sizei%5C%22big%5C%22%22%7D%5D%2C%22id%22%3A%22u73a7cee0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u701dba2a\" id=\"u701dba2a\"><span data-lake-id=\"u0eebc0b4\" id=\"u0eebc0b4\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们看到，传入的参数没有 color 属性，但也没有错误，因为它是可选属性。但是我们多传入了一个 size 属性，这同样会报错，TypeScript 会告诉你，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错，但如果你定义了可选属性 size，那么上面的例子就不会报错。</span></p><p data-lake-id=\"u04a99e81\" id=\"u04a99e81\"><span data-lake-id=\"ue9c7e70b\" id=\"ue9c7e70b\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里可能 tslint 会报一个警告，告诉我们属性名没有按开头字母顺序排列属性列表，如果你想关闭这条规则，可以在 tslint.json 的 rules 里添加&quot;object-literal-sort-keys&quot;: [false]来关闭。</span></p><h2 data-lake-id=\"izjCz\" id=\"izjCz\"><span data-lake-id=\"u7faf4ea8\" id=\"u7faf4ea8\">绕开多余属性检查</span></h2><p data-lake-id=\"ua1763e3d\" id=\"ua1763e3d\"><span data-lake-id=\"u56fb9801\" id=\"u56fb9801\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">有时我们并不希望 TypeScript 这么严格地对我们的数据进行检查，比如我们只需要保证传入getVegetables的对象有type属性就可以了，至于实际使用的时候传入对象有没有多余的属性，多余属性的属性值是什么类型，这些都无所谓，那就需要绕开多余属性检查，有如下三个方法：</span></p><h3 data-lake-id=\"UbRno\" id=\"UbRno\"><span data-lake-id=\"u74755d88\" id=\"u74755d88\">使用类型断言</span></h3><p data-lake-id=\"uce1645b6\" id=\"uce1645b6\"><span data-lake-id=\"u7922a974\" id=\"u7922a974\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们在基础类型中讲过，类型断言就是用来明确告诉 TypeScript，我们已经自行进行了检查，确保这个类型没有问题，希望 TypeScript 对此不进行检查，所以最简单的方式就是使用类型断言：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3F%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%5CngetVegetables(%7B%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%2012%2C%5Cn%20%20price%3A%201.2%5Cn%7D%20as%20Vegetables)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22KJaSQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"T7Ilu\" id=\"T7Ilu\"><span data-lake-id=\"ufb39e02b\" id=\"ufb39e02b\">添加索引签名</span></h3><p data-lake-id=\"u71358f5f\" id=\"u71358f5f\"><span data-lake-id=\"u065059e0\" id=\"u065059e0\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">更好的方式是添加字符串索引签名</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%20%20type%3A%20string%3B%5Cn%20%20%5Bprop%3A%20string%5D%3A%20any%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20color%2C%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Bcolor%20%3F%20color%20%2B%20%5C%22%20%5C%22%20%3A%20%5C%22%5C%22%7D%24%7Btype%7D%60%3B%5Cn%7D%3B%5CngetVegetables(%7B%5Cn%20%20color%3A%20%5C%22red%5C%22%2C%5Cn%20%20type%3A%20%5C%22tomato%5C%22%2C%5Cn%20%20size%3A%2012%2C%5Cn%20%20price%3A%201.2%5Cn%7D)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OLak3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"WqgZw\" id=\"WqgZw\"><span data-lake-id=\"ucf451079\" id=\"ucf451079\">利用类型兼容性</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cnconst%20getVegetables%20%3D%20(%7B%20type%20%7D%3A%20Vegetables)%20%3D%3E%20%7B%5Cn%20%20return%20%60A%20%24%7Btype%7D%60%3B%5Cn%7D%3B%5Cn%5Cnconst%20option%20%3D%20%7B%20type%3A%20%5C%22tomato%5C%22%2C%20size%3A%2012%20%7D%3B%5CngetVegetables(option)%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22E9HPU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf3d82ca8\" id=\"uf3d82ca8\"><span data-lake-id=\"u28be7669\" id=\"u28be7669\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">上面这种方法完美通过检查，我们将对象字面量赋给一个变量</span><span data-lake-id=\"ufb9a3832\" id=\"ufb9a3832\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">option</span><span data-lake-id=\"ucb75d1be\" id=\"ucb75d1be\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，然后</span><span data-lake-id=\"u44ea4dd8\" id=\"u44ea4dd8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">getVegetables</span><span data-lake-id=\"u96fc8a3a\" id=\"u96fc8a3a\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">传入</span><span data-lake-id=\"u9b4e19dd\" id=\"u9b4e19dd\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u9833b37d\" id=\"u9833b37d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">option</span><span data-lake-id=\"u5791a42e\" id=\"u5791a42e\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，这时没有报错。是因为直接将对象字面量传入函数，和先赋给变量再将变量传入函数，这两种检查机制是不一样的，后者是因为类型兼容性。我们后面会有专门一节来讲类型兼容性。简单地来说：如果 b 要赋值给 a，那要求 b 至少需要与 a 有相同的属性，多了无所谓。</span></p><p data-lake-id=\"uf4ce67c2\" id=\"uf4ce67c2\"><span data-lake-id=\"u752c01e7\" id=\"u752c01e7\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">在上面这个例子中，option的类型应该是Vegetables类型，对象{ type: ‘tomato’, size: 12 }要赋值给 option，option中所有的属性在这个对象字面量中都有，所以这个对象的类型和option(也就是Vegetables类型)是兼容的，所以上面例子不会报错</span></p><h3 data-lake-id=\"DYDQK\" id=\"DYDQK\"><span data-lake-id=\"u5fd15db9\" id=\"u5fd15db9\" style=\"color: rgb(28, 31, 33)\">只读属性</span></h3><p data-lake-id=\"u99cef886\" id=\"u99cef886\"><span data-lake-id=\"u2dafa39a\" id=\"u2dafa39a\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">接口也可以设置只读属性，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Role%20%7B%5Cn%20%20readonly%200%3A%20string%3B%5Cn%20%20readonly%201%3A%20string%3B%5Cn%7D%20%5Cn%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%80%E4%B8%AA%E8%A7%92%E8%89%B2%E5%AD%97%E5%85%B8%EF%BC%8C%E6%9C%89%200%20%E5%92%8C%201%20%E4%B8%A4%E7%A7%8D%E8%A7%92%E8%89%B2%20id%E3%80%82%E4%B8%8B%E9%9D%A2%E6%88%91%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%99%85%E7%9A%84%E8%A7%92%E8%89%B2%20%5Cb%20%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9D%A5%E8%AF%95%E5%9B%BE%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%8B%E5%AE%83%E7%9A%84%E5%80%BC%EF%BC%9A%5Cn%5Cnconst%20role%3A%20Role%20%3D%20%7B%5Cn%20%200%3A%20%5C%22super_admin%5C%22%2C%5Cn%20%201%3A%20%5C%22admin%5C%22%5Cn%7D%3B%5Cnrole%5B1%5D%20%3D%20%5C%22super_admin%5C%22%3B%20%2F%2F%20Cannot%20assign%20to%20'0'%20because%20it%20is%20a%20read-only%20property%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tvwz7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9e49879d\" id=\"u9e49879d\"><span data-lake-id=\"u54ba90cf\" id=\"u54ba90cf\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们看到 TypeScript 告诉我们不能分配给索引0，因为它是只读属性。设置一个值只读，我们是否想到ES6里定义常量的关键字const？使用const定义的常量定义之后不能再修改，这有点只读的意思。那readonly和const在使用时该如何选择呢？这主要看你这个值的用途，如果是定义一个常量，那用const，如果这个值是作为对象的属性，那请用readonly。我们来看下面的代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20NAME%3A%20string%20%3D%20%5C%22Lison%5C%22%3B%5CnNAME%20%3D%20%5C%22Haha%5C%22%3B%20%2F%2F%20Uncaught%20TypeError%3A%20Assignment%20to%20constant%20variable%5Cn%5Cnconst%20obj%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22lison%5C%22%5Cn%7D%3B%5Cnobj.name%20%3D%20%5C%22Haha%5C%22%3B%5Cn%5Cninterface%20Info%20%7B%5Cn%20%20readonly%20name%3A%20string%3B%5Cn%7D%5Cnconst%20info%3A%20Info%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22Lison%5C%22%5Cn%7D%3B%5Cninfo%5B%5C%22name%5C%22%5D%20%3D%20%5C%22Haha%5C%22%3B%20%2F%2F%20Cannot%20assign%20to%20'name'%20because%20it%20is%20a%20read-only%20property%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fvjM5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u298476e7\" id=\"u298476e7\"><span data-lake-id=\"ufdba14a0\" id=\"ufdba14a0\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">我们可以看到上面使用const定义的常量NAME定义之后再修改会报错，但是如果使用const定义一个对象，然后修改对象里属性的值是不会报错的。所以如果我们要保证对象的属性值不可修改，需要使用readonly。</span></p><h3 data-lake-id=\"tkCr2\" id=\"tkCr2\"><span data-lake-id=\"u54efff58\" id=\"u54efff58\">函数类型</span></h3><p data-lake-id=\"ubf5c9623\" id=\"ubf5c9623\"><span data-lake-id=\"u92915e0e\" id=\"u92915e0e\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">接口可以描述普通对象，还可以描述函数类型，我们先看写法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20AddFunc%20%7B%5Cn%20%20(num1%3A%20number%2C%20num2%3A%20number)%3A%20number%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22V5Aiu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc3813531\" id=\"uc3813531\"><span data-lake-id=\"u62b8d59d\" id=\"u62b8d59d\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">这里我们定义了一个AddFunc结构，这个结构要求实现这个结构的值，必须包含一个和结构里定义的函数一样参数、一样返回值的方法，或者这个值就是符合这个函数要求的函数。我们管花括号里包着的内容为</span><em><span data-lake-id=\"u67a66298\" id=\"u67a66298\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">调用签名</span></em><span data-lake-id=\"u14467059\" id=\"u14467059\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">，它由带有参数类型的参数列表和返回值类型组成。来看下如何使用：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20add%3A%20AddFunc%20%3D%20(n1%2C%20n2)%20%3D%3E%20n1%20%2B%20n2%3B%5Cnconst%20join%3A%20AddFunc%20%3D%20(n1%2C%20n2)%20%3D%3E%20%60%24%7Bn1%7D%20%24%7Bn2%7D%60%3B%20%2F%2F%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B'string'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B'number'%5Cnadd(%5C%22a%5C%22%2C%202)%3B%20%2F%2F%20%E7%B1%BB%E5%9E%8B'string'%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B'number'%E7%9A%84%E5%8F%82%E6%95%B0%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22wiFm0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9a4c6d21\" id=\"u9a4c6d21\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639123573062-c48e099c-f98d-416e-9c20-56f2d58cd6c9.png%22%2C%22taskId%22%3A%22ueb62392c-919f-4c0c-9cc7-717889ec8d6%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A715%2C%22height%22%3A107%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A21366%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A953%2C%22originHeight%22%3A143%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8Bstring'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%20%E7%B1%BB%E5%9E%8B%5C%22number'.ts(2322)%20interfaceAddFunc%20index.ts(64%2C13)%3A%E6%89%80%E9%9C%80%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%87%AA%E6%AD%A4%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.%20(numl%3Anumber%2Cnum2%3Anumber)%3Anu%20(parameter)n1%3Anumber%20constadd%3AAddFunc-(n1%2Cn2)-%3E%20%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%20%24n1in2%3B%20constjoin%3AAddFunc-(%2Cn%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A360.26846%2C%22y%22%3A3.2358212%2C%22width%22%3A255.67164000000002%2C%22height%22%3A19.2425588%2C%22text%22%3A%22%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8Bstring'%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A577.9371%2C%22y%22%3A6.278446%2C%22width%22%3A210.12300000000005%2C%22height%22%3A17.558342%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22number'.ts(2322)%22%7D%2C%7B%22x%22%3A36.108833%2C%22y%22%3A29.425035%2C%22width%22%3A179.703837%2C%22height%22%3A21.692023%2C%22text%22%3A%22interfaceAddFunc%22%7D%2C%7B%22x%22%3A360.20572%2C%22y%22%3A35.35116%2C%22width%22%3A426.82938000000007%2C%22height%22%3A18.20225%2C%22text%22%3A%22index.ts(64%2C13)%3A%E6%89%80%E9%9C%80%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%87%AA%E6%AD%A4%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.%22%7D%2C%7B%22x%22%3A55.44603%2C%22y%22%3A56.10835%2C%22width%22%3A296.44626999999997%2C%22height%22%3A17.257019999999997%2C%22text%22%3A%22(numl%3Anumber%2Cnum2%3Anumber)%3Anu%22%7D%2C%7B%22x%22%3A366.1037%2C%22y%22%3A71.00154%2C%22width%22%3A201.43880000000001%2C%22height%22%3A18.70581999999999%2C%22text%22%3A%22(parameter)n1%3Anumber%22%7D%2C%7B%22x%22%3A36.70705%2C%22y%22%3A100.40108%2C%22width%22%3A286.61573000000004%2C%22height%22%3A17.54453000000001%2C%22text%22%3A%22constadd%3AAddFunc-(n1%2Cn2)-%3E%22%7D%2C%7B%22x%22%3A504.33707%2C%22y%22%3A101.76711%2C%22width%22%3A132.79519%2C%22height%22%3A15.820899999999995%2C%22text%22%3A%22%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A354.69107%2C%22y%22%3A102.00822%2C%22width%22%3A133.09747%2C%22height%22%3A15.27645600000001%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%22%7D%2C%7B%22x%22%3A359.33408%2C%22y%22%3A123.40791%2C%22width%22%3A124.97152000000006%2C%22height%22%3A18.29798000000001%2C%22text%22%3A%22%24n1in2%3B%22%7D%2C%7B%22x%22%3A36.91246%2C%22y%22%3A123.505806%2C%22width%22%3A277.92618999999996%2C%22height%22%3A16.565573999999998%2C%22text%22%3A%22constjoin%3AAddFunc-(%2Cn%22%7D%5D%2C%22id%22%3A%22u41545c4f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u3c925611\" id=\"u3c925611\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1639123601409-f37f6927-5a57-4975-b0bf-bf4f446913c9.png%22%2C%22taskId%22%3A%22u4dd12a49-ea62-4869-9f7c-1eb5ab88d18%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A12456%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A724%2C%22originHeight%22%3A109%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%E7%9A%84%E5%8F%82%E6%95%B0.%20ts(2345)%20conS%20%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%20conS%20adda%5C%22%2C2%3B%2F%2F%E7%B1%BB%E5%9E%8B'string%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%20%E7%9A%84%E5%8F%82%E6%95%B0%20number%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A84.21963%2C%22y%22%3A18.177246%2C%22width%22%3A403.29749%2C%22height%22%3A21.882458000000003%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%E7%9A%84%E5%8F%82%E6%95%B0.%22%7D%2C%7B%22x%22%3A508.1918%2C%22y%22%3A22.715536%2C%22width%22%3A73.76394999999997%2C%22height%22%3A15.990609999999997%2C%22text%22%3A%22ts(2345)%22%7D%2C%7B%22x%22%3A35.819202%2C%22y%22%3A32.51003%2C%22width%22%3A37.022498000000006%2C%22height%22%3A12.230905999999997%2C%22text%22%3A%22conS%22%7D%2C%7B%22x%22%3A82.22469%2C%22y%22%3A54.35365%2C%22width%22%3A278.05183%2C%22height%22%3A16.687269999999998%2C%22text%22%3A%22%E6%9F%A5%E7%9C%8B%E9%97%AE%E9%A2%98(Ctrl%2BKN)%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BF%AE%E5%A4%8D%22%7D%2C%7B%22x%22%3A35.931484%2C%22y%22%3A55.578228%2C%22width%22%3A37.602226%2C%22height%22%3A12.761912000000002%2C%22text%22%3A%22conS%22%7D%2C%7B%22x%22%3A34.65141%2C%22y%22%3A72.876945%2C%22width%22%3A422.89073%2C%22height%22%3A19.73806499999999%2C%22text%22%3A%22adda%5C%22%2C2%3B%2F%2F%E7%B1%BB%E5%9E%8B'string%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A528.8692%2C%22y%22%3A74.59742%2C%22width%22%3A55.02200000000005%2C%22height%22%3A17.137200000000007%2C%22text%22%3A%22%E7%9A%84%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A463.91177%2C%22y%22%3A79.057495%2C%22width%22%3A55.22913%2C%22height%22%3A11.216065%2C%22text%22%3A%22number%22%7D%5D%2C%22id%22%3A%22u91b90715%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6eaf2ecd\" id=\"u6eaf2ecd\"><span data-lake-id=\"u1420f6b8\" id=\"u1420f6b8\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">上面我们定义的add函数接收两个数值类型的参数，返回的结果也是数值类型，所以没有问题。而join函数参数类型没错，但是返回的是字符串，所以会报错。而当我们调用add函数时，传入的参数如果和接口定义的类型不一致，也会报错。</span></p><p data-lake-id=\"u160cc3d5\" id=\"u160cc3d5\"><span data-lake-id=\"u6862f42b\" id=\"u6862f42b\" class=\"lake-fontsize-22\" style=\"color: rgb(28, 31, 33)\">你应该注意到了，实际定义函数的时候，名字是无需和接口中参数名相同的，只需要位置对应即可。</span></p><p data-lake-id=\"uc34d1cd4\" id=\"uc34d1cd4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639123685996-a8d0f773-a593-4bbb-a490-080bdb5ad8a0.jpeg%22%2C%22taskId%22%3A%22u81f8ae0c-7d78-4d36-8bad-24066b4ff1d%22%2C%22clientId%22%3A%22uebca35a6-d065-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfd200012bae16000820.jpg%22%2C%22size%22%3A134441%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A820%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BD%BF%E7%94%A8%20interface%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%20%E6%B3%A8%E6%84%8F%E5%9C%A8%E5%AE%9A%E4%B9%89%E6%8C%82%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%2C%E4%BD%A0%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%BB%96%E7%90%86%E8%A7%A3%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E8%80%8C%E8%A6%81%E7%90%86%E8%A7%A3%E4%B8%BA%E4%BB%AC%E5%8F%B7%E5%8C%85%E7%9A%84%20%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%9D%97%2C%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E6%9D%A1%E6%9D%A1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8B%BA%2C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E8%80%8C%E6%98%AF%E5%9E%8B%20%E5%8F%AF%E9%80%89%E5%B1%85%E6%80%A7%20%E6%9C%89%E6%97%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%AE%9A%E5%8F%88%E5%9C%A8mtifke%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9B%BF%E6%98%AF%E4%BA%9B%E9%A1%B9%E7%9A%84%2Ctpecirt%E4%B8%AD%E4%BE%BF%E4%B8%BA%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%AF%E9%80%89%E5%B1%82%E6%80%A7%20%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%20%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8D%E6%AF%94%E6%8E%A5%E5%8F%A3%E5%B0%91%E9%81%93%E4%B8%80%E4%BA%9B%E8%80%B3%E8%80%85%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E8%AE%B8%E7%9A%84%20%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B9%8E%E4%BB%BB%E6%84%8F%E7%BB%93%E6%9E%84%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%20%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%20%E7%BB%95%E5%BC%80%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%20%E5%88%A9%E7%94%A8%E7%BE%8E%E5%9E%8B%E7%B4%A0%E5%AE%A2%E6%80%A7%20%E4%BD%BF%E7%94%A8const%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%BE%88%E9%95%AF%E7%9A%84%20%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%20%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%9D%E8%AF%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9%2C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8readonly%20%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E5%96%84%E9%80%9A%E5%AF%B9%E8%B1%A1%2C%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E8%8F%8C%E6%95%99%E8%A1%A8%E5%9E%8B%20%E9%9D%A2%E6%95%B0%E7%B1%BB%E5%9E%8B%20%E5%AE%9E%E9%99%85%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E7%9A%84%E6%97%B6%E5%80%99%2C%E5%90%8D%E5%AD%97%E6%98%AF%E6%97%A0%E9%9C%80%E5%92%8C%E6%8C%82%E5%8F%A3%E4%B8%AD%E5%8F%82%E6%95%B0%E5%90%8D%E7%9B%B8%E9%97%B4%E7%9A%84%2C%E5%8F%AA%E9%9C%80%E8%A6%81%E4%BD%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E5%8D%B3%E5%8F%AF%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A778.23425%2C%22y%22%3A24.854164%2C%22width%22%3A38.69965000000002%2C%22height%22%3A21.344956%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%22%7D%2C%7B%22x%22%3A827.28033%2C%22y%22%3A26.263094%2C%22width%22%3A172.57566999999995%2C%22height%22%3A19.792932000000004%2C%22text%22%3A%22interface%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A593.55023%2C%22y%22%3A61.879852%2C%22width%22%3A97.52976999999998%2C%22height%22%3A24.731967999999995%2C%22text%22%3A%22%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%22%7D%2C%7B%22x%22%3A776.6905%2C%22y%22%3A72.23591%2C%22width%22%3A776.2237999999999%2C%22height%22%3A21.919209999999993%2C%22text%22%3A%22%E6%B3%A8%E6%84%8F%E5%9C%A8%E5%AE%9A%E4%B9%89%E6%8C%82%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%2C%E4%BD%A0%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%BB%96%E7%90%86%E8%A7%A3%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E8%80%8C%E8%A6%81%E7%90%86%E8%A7%A3%E4%B8%BA%E4%BB%AC%E5%8F%B7%E5%8C%85%E7%9A%84%22%7D%2C%7B%22x%22%3A778.42065%2C%22y%22%3A100.49816%2C%22width%22%3A678.8297499999999%2C%22height%22%3A21.701814%2C%22text%22%3A%22%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%9D%97%2C%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E6%9D%A1%E6%9D%A1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8B%BA%2C%E5%8F%AA%E4%B8%8D%E8%BF%87%E5%A3%B0%E6%98%8E%E7%9A%84%E4%B8%8D%E6%98%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E8%80%8C%E6%98%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A596.7596%2C%22y%22%3A197.34923%2C%22width%22%3A93.83339999999998%2C%22height%22%3A25.477069999999998%2C%22text%22%3A%22%E5%8F%AF%E9%80%89%E5%B1%85%E6%80%A7%22%7D%2C%7B%22x%22%3A782.0851%2C%22y%22%3A200.52173%2C%22width%22%3A762.3989999999999%2C%22height%22%3A23.950500000000005%2C%22text%22%3A%22%E6%9C%89%E6%97%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E5%AE%9A%E5%8F%88%E5%9C%A8mtifke%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9B%BF%E6%98%AF%E4%BA%9B%E9%A1%B9%E7%9A%84%2Ctpecirt%E4%B8%AD%E4%BE%BF%E4%B8%BA%E6%88%91%E4%BB%AC%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%AF%E9%80%89%E5%B1%82%E6%80%A7%22%7D%2C%7B%22x%22%3A597.22046%2C%22y%22%3A308.25293%2C%22width%22%3A138.92363999999998%2C%22height%22%3A25.314120000000003%2C%22text%22%3A%22%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%22%7D%2C%7B%22x%22%3A828.28455%2C%22y%22%3A311.3899%2C%22width%22%3A510.08525%2C%22height%22%3A19.363459999999975%2C%22text%22%3A%22%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8D%E6%AF%94%E6%8E%A5%E5%8F%A3%E5%B0%91%E9%81%93%E4%B8%80%E4%BA%9B%E8%80%B3%E8%80%85%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E8%AE%B8%E7%9A%84%22%7D%2C%7B%22x%22%3A71.84581%2C%22y%22%3A394.8105%2C%22width%22%3A358.67754%2C%22height%22%3A31.83913000000001%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B9%8E%E4%BB%BB%E6%84%8F%E7%BB%93%E6%9E%84%22%7D%2C%7B%22x%22%3A877.55035%2C%22y%22%3A408.61316%2C%22width%22%3A120.98005%2C%22height%22%3A21.127009999999984%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E6%96%AD%E8%A8%80%22%7D%2C%7B%22x%22%3A877.3996%2C%22y%22%3A454.9849%2C%22width%22%3A122.30450000000008%2C%22height%22%3A22.209069999999997%2C%22text%22%3A%22%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%22%7D%2C%7B%22x%22%3A591.8626%2C%22y%22%3A456.42032%2C%22width%22%3A196.19385999999997%2C%22height%22%3A23.305360000000007%2C%22text%22%3A%22%E7%BB%95%E5%BC%80%E5%A4%9A%E4%BD%99%E5%B1%9E%E6%80%A7%E6%A3%80%E6%9F%A5%22%7D%2C%7B%22x%22%3A879.0666%2C%22y%22%3A504.0202%2C%22width%22%3A141.96929999999998%2C%22height%22%3A21.512200000000064%2C%22text%22%3A%22%E5%88%A9%E7%94%A8%E7%BE%8E%E5%9E%8B%E7%B4%A0%E5%AE%A2%E6%80%A7%22%7D%2C%7B%22x%22%3A777.16095%2C%22y%22%3A592.86554%2C%22width%22%3A596.4436499999999%2C%22height%22%3A21.175960000000032%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8const%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%2C%E7%84%B6%E5%90%8E%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%BE%88%E9%95%AF%E7%9A%84%22%7D%2C%7B%22x%22%3A594.65857%2C%22y%22%3A612.65704%2C%22width%22%3A96.08762999999999%2C%22height%22%3A26.271429999999896%2C%22text%22%3A%22%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%22%7D%2C%7B%22x%22%3A777.686%2C%22y%22%3A639.3086%2C%22width%22%3A508.34209999999996%2C%22height%22%3A21.071160000000077%2C%22text%22%3A%22%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E8%A6%81%E4%BF%9D%E8%AF%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9%2C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8readonly%22%7D%2C%7B%22x%22%3A778.1251%2C%22y%22%3A723.17633%2C%22width%22%3A403.60169999999994%2C%22height%22%3A24.788509999999974%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E5%96%84%E9%80%9A%E5%AF%B9%E8%B1%A1%2C%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%98%E8%8F%8C%E6%95%99%E8%A1%A8%E5%9E%8B%22%7D%2C%7B%22x%22%3A593.13214%2C%22y%22%3A747.2824%2C%22width%22%3A96.51265999999998%2C%22height%22%3A26.85089999999991%2C%22text%22%3A%22%E9%9D%A2%E6%95%B0%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A777.8692%2C%22y%22%3A772.46375%2C%22width%22%3A700.2081999999999%2C%22height%22%3A20.61755000000005%2C%22text%22%3A%22%E5%AE%9E%E9%99%85%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E7%9A%84%E6%97%B6%E5%80%99%2C%E5%90%8D%E5%AD%97%E6%98%AF%E6%97%A0%E9%9C%80%E5%92%8C%E6%8C%82%E5%8F%A3%E4%B8%AD%E5%8F%82%E6%95%B0%E5%90%8D%E7%9B%B8%E9%97%B4%E7%9A%84%2C%E5%8F%AA%E9%9C%80%E8%A6%81%E4%BD%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E5%8D%B3%E5%8F%AF%22%7D%5D%2C%22id%22%3A%22u240e1d03%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6b68740b\" id=\"u6b68740b\"><span data-lake-id=\"u0a8f08f7\" id=\"u0a8f08f7\" class=\"lake-fontsize-22\">​</span><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-10T08:08:17.000Z",
    "deleted_at": null,
    "created_at": "2021-12-10T06:17:02.000Z",
    "updated_at": "2021-12-10T08:08:17.000Z",
    "published_at": "2021-12-10T08:08:17.000Z",
    "first_published_at": "2021-12-10T06:19:25.000Z",
    "word_count": 2437,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/12838787/1639117591596-cf54e0a2-377e-4750-9287-cd6926dc7348.png",
    "description": "基本用法我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：firstName和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字。来看下函数的定义：// 注：这段代码为纯JavaScript代码，请在JavaScript开发环境编写下面代码，在TypeScript环...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 63205060,
    "slug": "obk3qh",
    "title": "lodash 入门",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-22T05:31:44.747Z",
      "updated_at": "2021-12-22T05:31:44.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-22T05:28:17.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-22T05:28:17.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"e05dce83\"></a>\n## 简介\n\n<br />Lodash 是一个著名的 javascript 原生库，不需要引入其他第三方依赖。是一个意在提高开发者效率,提高 JS 原生方法性能的 JS 库。简单的说就是，很多方法 lodash 已经帮你写好了，直接调用就行，不用自己费尽心思去写了，而且可以统一方法的一致性。Lodash 使用了一个简单的 _ 符号，就像 Jquery 的 $ 一样，十分简洁。<br />类似的还有 Underscore.js 和 Lazy.js<br />\n\n<a name=\"262b0b07\"></a>\n## 支持\n\n<br />chrome 43 往上<br />Firefox 38 往上<br />IE 6-11<br />MS Edge<br />Safari 5 往上<br />（几乎涵盖现在市面上可以见到的大部分浏览器）<br />\n\n<a name=\"28e2c808\"></a>\n## 如何安装\n\n<br />浏览器<br />NPM<br />$ npm i -g npm$ npm i --save lodash 复制代码<br />先全局安装，在单独安装到项目中<br />node.js<br />var _ = require('lodash')<br />\n\n<a name=\"bd16146f\"></a>\n## 为什么使用 lodash\n\n<br />通过使用数组，数字，对象，字符串等方法，Lodash 使 JavaScript 变得更简单。<br />\n\n<a name=\"b870eaea\"></a>\n## 模块组成\n\n<br />Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：<br />\n<br />Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作<br />\n<br />Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作<br />\n<br />Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作<br />\n<br />Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换<br />\n<br />Math， 使用与数值类型，常用于执行数学运算<br />\n<br />Number， 适用于生成随机数，比较数值与数值区间的关系<br />\n<br />Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作<br />\n<br />Seq， 常用于创建链式调用，提高执行性能（惰性计算）<br />\n<br />String， 适用于字符串类型<br />\n<br />lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。<br />\n<br />Fixed Arity，固化参数个数，便于柯里化<br />\n<br />Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合<br />\n<br />Capped Iteratee Argument， 封装Iteratee参数<br />\n\n<a name=\"3397fe6c\"></a>\n## 1、N 次循环\n\n\n```\n<script type=\"text/javascript\">\n console.log('------- javascript -------')\n //js原生的循环方法\n for(var i = 0; i < 5; i++){\n  console.log(i);\n }\n console.log('------- lodash -------')\n //ladash的times方法\n _.times(5,function(a){\n  console.log(a)\n });</script>\n```\n\n<br />for 语句是执行循环的不二选择，但在上面代码的使用场景下，_.times()的解决方式更加简洁和易于理解。<br />\n\n<a name=\"51eea445\"></a>\n## 2、深层查找属性值\n\n\n```\n<script type=\"text/javascript\">\n    var ownerArr = [{\n        \"owner\": \"Colin\",\n        \"pets\": [{\"name\": \"dog1\"}, {\"name\": \"dog2\"}]\n    }, {\n        \"owner\": \"John\",\n        \"pets\": [{\"name\": \"dog3\"}, {\"name\": \"dog4\"}]\n    }];\n    var jsMap = ownerArr.map(function (owner) {\n        return owner.pets[0].name;\n    });\n    console.log('------- jsMap -------');\n    console.log(jsMap);\n\n    var lodashMap = _.map(ownerArr, 'pets[0].name');\n    console.log('------- lodashMap -------');\n    console.log(lodashMap);</script>\n```\n\n<br />Lodash 中的_.map 方法和 JavaScript 中原生的数组方法非常的像，但它还是有非常有用的升级。 你可以通过一个字符串而不是回调函数来浏览深度嵌套的对象属性。<br />\n\n<a name=\"edcab6f6\"></a>\n## 3、深克隆对象\n\n\n```\n<script type=\"text/javascript\">\n    var objA = {\n        \"name\": \"戈德斯文\"\n    };\n    var objB = _.cloneDeep(objA);\n    console.log(objA);\n    console.log(objB);\n    console.log(objA === objB);</script>\n```\n\n<br />深度克隆 JavaScript 对象是困难的，并且也没有什么简单的解决方案。你可以使用原生的解决方案:JSON.parse(JSON.stringify(objectToClone))  进行深度克隆。但是，这种方案仅在对象内部没有方法的时候才可行。<br />\n\n<a name=\"77726af0\"></a>\n## 4、在指定范围内获取一个随机值\n\n\n```\n<script type=\"text/javascript\">\n    function getRandomNumber(min, max){\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n    console.log(getRandomNumber(15, 20));\n\n    console.log(_.random(15, 20));\n</script>\n```\n\n<br />Lodash 中的  _.random  方法要比上面的原生方法更强大与灵活。你可以只传入一个参数作为最大值， 你也可以指定返回的结果为浮点数_.random(15,20,true)<br />\n\n<a name=\"8e39c7be\"></a>\n## 5、扩展对象\n\n\n```\n<script type=\"text/javascript\">\n    Object.prototype.extend = function(obj) {\n        for (var i in obj) {\n            if (obj.hasOwnProperty(i)) {    //判断被扩展的对象有没有某个属性，\n                this[i] = obj[i];\n            }\n        }\n    };\n\n    var objA = {\"name\": \"戈德斯文\", \"car\": \"宝马\"};\n    var objB = {\"name\": \"柴硕\", \"loveEat\": true};\n\n    objA.extend(objB);\n    console.log(objA);\n\n    console.log(_.assign(objA, objB));</script>\n```\n\n<br />_.assign  方法也可以接收多个参数对象进行扩展，都是往后面的对象上合并<br />\n\n<a name=\"878b86ae\"></a>\n## 6、从列表中随机的选择列表项\n\n\n```\n<script type=\"text/javascript\">\n    var smartTeam = [\"戈德斯文\", \"杨海月\", \"柴硕\", \"师贝贝\"];\n\n    function randomSmarter(smartTeam){\n        var index = Math.floor(Math.random() * smartTeam.length);\n        return smartTeam[index];\n    }\n\n    console.log(randomSmarter(smartTeam));\n\n    // Lodash\n    console.log(_.sample(smartTeam));\n    console.log(_.sampleSize(smartTeam,2));</script>\n```\n\n<br />此外，你也可以指定随机返回元素的个数_.sampleSize(smartTeam,n)，n 为需要返回的元素个数<br />\n\n<a name=\"ba6a97e3\"></a>\n## 7、判断对象中是否含有某元素\n\n\n```\n<script type=\"text/javascript\">\n    var smartPerson = {\n            'name': '戈德斯文',\n            'gender': 'male'\n        },\n        smartTeam = [\"戈德斯文\", \"杨海月\", \"柴硕\", \"师贝贝\"];\n\n\n    console.log(_.includes(smartPerson, '戈德斯文'));\n    console.log(_.includes(smartTeam, '杨海月'));\n    console.log(_.includes(smartTeam, '杨海月',2));</script>\n```\n\n<br />_.includes()第一个参数是需要查询的对象，第二个参数是需要查询的元素，第三个参数是开始查询的下标<br />\n\n<a name=\"7c6ff51e\"></a>\n## 8、遍历循环\n\n\n```\n<script type=\"text/javascript\">\n    _([1, 2]).forEach(function(value) {\n        console.log(value);\n    });\n    _.forEach([1, 3] , function(value, key) {\n        console.log(key,value);\n    });</script>\n```\n\n<br />这两种方法都会分别输出‘1’和‘2’，不仅是数组，对象也可以，数组的是后 key 是元素的下标，当传入的是对象的时候，key 是属性，value 是值<br />\n\n<a name=\"b0e332ed\"></a>\n## 9、遍历循环执行某个方法\n\n<br />_.map()<br />\n\n```\n<script type=\"text/javascript\">\n    function square(n) {\n        return n * n;\n    }\n\n    console.log(_.map([4, 8], square));\n    // => [16, 64]\n\n    console.log(_.map({ 'a': 4, 'b': 8 }, square));\n    // => [16, 64] (iteration order is not guaranteed)\n\n    var users = [\n        { 'user': 'barney' },\n        { 'user': 'fred' }\n    ];\n\n    // The `_.property` iteratee shorthand.\n    console.log(_.map(users, 'user'));\n    // => ['barney', 'fred']</script>\n```\n\n\n<a name=\"d0403165\"></a>\n## 10、检验值是否为空\n\n<br />_.isEmpty()<br />\n\n```\n<script type=\"text/javascript\">\n    _.isEmpty(null);\n    // => true\n\n    _.isEmpty(true);\n    // => true\n\n    _.isEmpty(1);\n    // => true\n\n    _.isEmpty([1, 2, 3]);\n    // => false\n\n    _.isEmpty({ 'a': 1 });\n    // => false</script>\n```\n\n\n<a name=\"56b0d4be\"></a>\n## 11、查找属性\n\n<br />_.find()、_.filter()、_.reject()<br />\n\n```javascript\n<script type=\"text/javascript\">\n    var users = [\n        {'user': 'barney', 'age': 36, 'active': true},\n        {'user': 'fred', 'age': 40, 'active': false},\n        {'user': 'pebbles', 'age': 1, 'active': true}\n    ];\n\n    console.log(_.find(users, function (o) {\n        return o.age < 40;\n    }));\n    console.log(_.find(users, {'age': 1, 'active': true}));\n    console.log(_.filter(users, {'age': 1, 'active': true}));\n    console.log(_.find(users, ['active', false]));\n    console.log(_.filter(users, ['active', false]));\n    console.log(_.find(users, 'active'));\n    console.log(_.filter(users, 'active'));\n</script>\n```\n\n<br />_.find()第一个返回真值的第一个元素。_.filter()返回真值的所有元素的数组。 _.reject()是_.filter 的反向方法，不返回真值的（集合）元素<br />\n\n<a name=\"8a0e603a\"></a>\n## 12、数组去重\n\n<br />_.uniq(array)创建一个去重后的 array 数组副本。参数  array (Array): 要检查的数组。<br />返回新的去重后的数组<br />\n\n```javascript\n<script type=\"text/javascript\">\n    var arr1 = [2, 1, 2];\n\n    var arr2 = _.uniq(arr1);\n\n\n    function unique(arr) {\n        var newArr = [];\n        for (var i = 0; i < arr.length; i++) {\n            if(newArr.indexOf(arr[i]) == -1){\n                newArr.push(arr[i]);\n            }\n        }\n        return newArr;\n    }\n\n    console.log(arr1);\n    console.log(arr2);\n    console.log(unique(arr1));</script>\n```\n\n<br />_.uniqBy(array,[iteratee=_.identity])这个方法类似  _.uniq，除了它接受一个  iteratee（迭代函数），调用每一个数组（array）的每个元素以产生唯一性计算的标准。iteratee 调用时会传入一个参数：(value)。<br />\n\n```\n<script type=\"text/javascript\">\n    console.log(_.uniqBy([2.1, 1.2, 2.3], Math.floor));\n    // => [2.1, 1.2]\n\n    console.log(_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x'));\n    // => [{ 'x': 1 }, { 'x': 2 }]</script>\n```\n\n<br />Math.floor 只是向下取整，去重，并没有改变原有的数组，所以还是 2.1 和 1.2，不是 2 和 1。<br />\n\n<a name=\"53d875bb\"></a>\n## 13、模板插入\n\n<br />_.template([string=''], [options={}])<br />\n\n```\n<div id=\"container\"></div>\n<script src=\"https://cdn.bootcss.com/lodash.js/4.17.4/lodash.min.js\"></script><script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script><script type=\"text/javascript\">\n    $(function () {\n        var data = [{name: '戈德斯文'}, {name: '柴硕'}, {name: '杨海月'}];\n        $('#container').html( _.template($('#tpl').html(), data) )\n    });</script><script type=\"text/template\" id=\"tpl\">\n    <% _.each(obj,function(e,i){ %>\n        <ul>\n            <li><%= e.name %><%= i %></li>\n        </ul>\n    <%})%></script>\n 注意，这个<script>标签的type是text/template，类似于react的JSX的写法，就是js和html可以混写，用<% %>括起来的就是js代码，可以执行，直接写的就是html的标签，并且有类似MVC框架的的数据绑定，在<%= %>中可以调用到数据呈现（纯属个人见解，不知道理解的对不对）\n```\n",
    "body_draft": "<a name=\"e05dce83\"></a>\n## 简介\n\n<br />Lodash 是一个著名的 javascript 原生库，不需要引入其他第三方依赖。是一个意在提高开发者效率,提高 JS 原生方法性能的 JS 库。简单的说就是，很多方法 lodash 已经帮你写好了，直接调用就行，不用自己费尽心思去写了，而且可以统一方法的一致性。Lodash 使用了一个简单的 _ 符号，就像 Jquery 的 $ 一样，十分简洁。<br />类似的还有 Underscore.js 和 Lazy.js<br />\n\n<a name=\"262b0b07\"></a>\n## 支持\n\n<br />chrome 43 往上<br />Firefox 38 往上<br />IE 6-11<br />MS Edge<br />Safari 5 往上<br />（几乎涵盖现在市面上可以见到的大部分浏览器）<br />\n\n<a name=\"28e2c808\"></a>\n## 如何安装\n\n<br />浏览器<br />NPM<br />$ npm i -g npm$ npm i --save lodash 复制代码<br />先全局安装，在单独安装到项目中<br />node.js<br />var _ = require('lodash')<br />\n\n<a name=\"bd16146f\"></a>\n## 为什么使用 lodash\n\n<br />通过使用数组，数字，对象，字符串等方法，Lodash 使 JavaScript 变得更简单。<br />\n\n<a name=\"b870eaea\"></a>\n## 模块组成\n\n<br />Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：<br />\n<br />Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作<br />\n<br />Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作<br />\n<br />Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作<br />\n<br />Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换<br />\n<br />Math， 使用与数值类型，常用于执行数学运算<br />\n<br />Number， 适用于生成随机数，比较数值与数值区间的关系<br />\n<br />Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作<br />\n<br />Seq， 常用于创建链式调用，提高执行性能（惰性计算）<br />\n<br />String， 适用于字符串类型<br />\n<br />lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。<br />\n<br />Fixed Arity，固化参数个数，便于柯里化<br />\n<br />Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合<br />\n<br />Capped Iteratee Argument， 封装Iteratee参数<br />\n\n<a name=\"3397fe6c\"></a>\n## 1、N 次循环\n\n\n```\n<script type=\"text/javascript\">\n console.log('------- javascript -------')\n //js原生的循环方法\n for(var i = 0; i < 5; i++){\n  console.log(i);\n }\n console.log('------- lodash -------')\n //ladash的times方法\n _.times(5,function(a){\n  console.log(a)\n });</script>\n```\n\n<br />for 语句是执行循环的不二选择，但在上面代码的使用场景下，_.times()的解决方式更加简洁和易于理解。<br />\n\n<a name=\"51eea445\"></a>\n## 2、深层查找属性值\n\n\n```\n<script type=\"text/javascript\">\n    var ownerArr = [{\n        \"owner\": \"Colin\",\n        \"pets\": [{\"name\": \"dog1\"}, {\"name\": \"dog2\"}]\n    }, {\n        \"owner\": \"John\",\n        \"pets\": [{\"name\": \"dog3\"}, {\"name\": \"dog4\"}]\n    }];\n    var jsMap = ownerArr.map(function (owner) {\n        return owner.pets[0].name;\n    });\n    console.log('------- jsMap -------');\n    console.log(jsMap);\n\n    var lodashMap = _.map(ownerArr, 'pets[0].name');\n    console.log('------- lodashMap -------');\n    console.log(lodashMap);</script>\n```\n\n<br />Lodash 中的_.map 方法和 JavaScript 中原生的数组方法非常的像，但它还是有非常有用的升级。 你可以通过一个字符串而不是回调函数来浏览深度嵌套的对象属性。<br />\n\n<a name=\"edcab6f6\"></a>\n## 3、深克隆对象\n\n\n```\n<script type=\"text/javascript\">\n    var objA = {\n        \"name\": \"戈德斯文\"\n    };\n    var objB = _.cloneDeep(objA);\n    console.log(objA);\n    console.log(objB);\n    console.log(objA === objB);</script>\n```\n\n<br />深度克隆 JavaScript 对象是困难的，并且也没有什么简单的解决方案。你可以使用原生的解决方案:JSON.parse(JSON.stringify(objectToClone))  进行深度克隆。但是，这种方案仅在对象内部没有方法的时候才可行。<br />\n\n<a name=\"77726af0\"></a>\n## 4、在指定范围内获取一个随机值\n\n\n```\n<script type=\"text/javascript\">\n    function getRandomNumber(min, max){\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n    console.log(getRandomNumber(15, 20));\n\n    console.log(_.random(15, 20));\n</script>\n```\n\n<br />Lodash 中的  _.random  方法要比上面的原生方法更强大与灵活。你可以只传入一个参数作为最大值， 你也可以指定返回的结果为浮点数_.random(15,20,true)<br />\n\n<a name=\"8e39c7be\"></a>\n## 5、扩展对象\n\n\n```\n<script type=\"text/javascript\">\n    Object.prototype.extend = function(obj) {\n        for (var i in obj) {\n            if (obj.hasOwnProperty(i)) {    //判断被扩展的对象有没有某个属性，\n                this[i] = obj[i];\n            }\n        }\n    };\n\n    var objA = {\"name\": \"戈德斯文\", \"car\": \"宝马\"};\n    var objB = {\"name\": \"柴硕\", \"loveEat\": true};\n\n    objA.extend(objB);\n    console.log(objA);\n\n    console.log(_.assign(objA, objB));</script>\n```\n\n<br />_.assign  方法也可以接收多个参数对象进行扩展，都是往后面的对象上合并<br />\n\n<a name=\"878b86ae\"></a>\n## 6、从列表中随机的选择列表项\n\n\n```\n<script type=\"text/javascript\">\n    var smartTeam = [\"戈德斯文\", \"杨海月\", \"柴硕\", \"师贝贝\"];\n\n    function randomSmarter(smartTeam){\n        var index = Math.floor(Math.random() * smartTeam.length);\n        return smartTeam[index];\n    }\n\n    console.log(randomSmarter(smartTeam));\n\n    // Lodash\n    console.log(_.sample(smartTeam));\n    console.log(_.sampleSize(smartTeam,2));</script>\n```\n\n<br />此外，你也可以指定随机返回元素的个数_.sampleSize(smartTeam,n)，n 为需要返回的元素个数<br />\n\n<a name=\"ba6a97e3\"></a>\n## 7、判断对象中是否含有某元素\n\n\n```\n<script type=\"text/javascript\">\n    var smartPerson = {\n            'name': '戈德斯文',\n            'gender': 'male'\n        },\n        smartTeam = [\"戈德斯文\", \"杨海月\", \"柴硕\", \"师贝贝\"];\n\n\n    console.log(_.includes(smartPerson, '戈德斯文'));\n    console.log(_.includes(smartTeam, '杨海月'));\n    console.log(_.includes(smartTeam, '杨海月',2));</script>\n```\n\n<br />_.includes()第一个参数是需要查询的对象，第二个参数是需要查询的元素，第三个参数是开始查询的下标<br />\n\n<a name=\"7c6ff51e\"></a>\n## 8、遍历循环\n\n\n```\n<script type=\"text/javascript\">\n    _([1, 2]).forEach(function(value) {\n        console.log(value);\n    });\n    _.forEach([1, 3] , function(value, key) {\n        console.log(key,value);\n    });</script>\n```\n\n<br />这两种方法都会分别输出‘1’和‘2’，不仅是数组，对象也可以，数组的是后 key 是元素的下标，当传入的是对象的时候，key 是属性，value 是值<br />\n\n<a name=\"b0e332ed\"></a>\n## 9、遍历循环执行某个方法\n\n<br />_.map()<br />\n\n```\n<script type=\"text/javascript\">\n    function square(n) {\n        return n * n;\n    }\n\n    console.log(_.map([4, 8], square));\n    // => [16, 64]\n\n    console.log(_.map({ 'a': 4, 'b': 8 }, square));\n    // => [16, 64] (iteration order is not guaranteed)\n\n    var users = [\n        { 'user': 'barney' },\n        { 'user': 'fred' }\n    ];\n\n    // The `_.property` iteratee shorthand.\n    console.log(_.map(users, 'user'));\n    // => ['barney', 'fred']</script>\n```\n\n\n<a name=\"d0403165\"></a>\n## 10、检验值是否为空\n\n<br />_.isEmpty()<br />\n\n```\n<script type=\"text/javascript\">\n    _.isEmpty(null);\n    // => true\n\n    _.isEmpty(true);\n    // => true\n\n    _.isEmpty(1);\n    // => true\n\n    _.isEmpty([1, 2, 3]);\n    // => false\n\n    _.isEmpty({ 'a': 1 });\n    // => false</script>\n```\n\n\n<a name=\"56b0d4be\"></a>\n## 11、查找属性\n\n<br />_.find()、_.filter()、_.reject()<br />\n\n```javascript\n<script type=\"text/javascript\">\n    var users = [\n        {'user': 'barney', 'age': 36, 'active': true},\n        {'user': 'fred', 'age': 40, 'active': false},\n        {'user': 'pebbles', 'age': 1, 'active': true}\n    ];\n\n    console.log(_.find(users, function (o) {\n        return o.age < 40;\n    }));\n    console.log(_.find(users, {'age': 1, 'active': true}));\n    console.log(_.filter(users, {'age': 1, 'active': true}));\n    console.log(_.find(users, ['active', false]));\n    console.log(_.filter(users, ['active', false]));\n    console.log(_.find(users, 'active'));\n    console.log(_.filter(users, 'active'));\n</script>\n```\n\n<br />_.find()第一个返回真值的第一个元素。_.filter()返回真值的所有元素的数组。 _.reject()是_.filter 的反向方法，不返回真值的（集合）元素<br />\n\n<a name=\"8a0e603a\"></a>\n## 12、数组去重\n\n<br />_.uniq(array)创建一个去重后的 array 数组副本。参数  array (Array): 要检查的数组。<br />返回新的去重后的数组<br />\n\n```javascript\n<script type=\"text/javascript\">\n    var arr1 = [2, 1, 2];\n\n    var arr2 = _.uniq(arr1);\n\n\n    function unique(arr) {\n        var newArr = [];\n        for (var i = 0; i < arr.length; i++) {\n            if(newArr.indexOf(arr[i]) == -1){\n                newArr.push(arr[i]);\n            }\n        }\n        return newArr;\n    }\n\n    console.log(arr1);\n    console.log(arr2);\n    console.log(unique(arr1));</script>\n```\n\n<br />_.uniqBy(array,[iteratee=_.identity])这个方法类似  _.uniq，除了它接受一个  iteratee（迭代函数），调用每一个数组（array）的每个元素以产生唯一性计算的标准。iteratee 调用时会传入一个参数：(value)。<br />\n\n```\n<script type=\"text/javascript\">\n    console.log(_.uniqBy([2.1, 1.2, 2.3], Math.floor));\n    // => [2.1, 1.2]\n\n    console.log(_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x'));\n    // => [{ 'x': 1 }, { 'x': 2 }]</script>\n```\n\n<br />Math.floor 只是向下取整，去重，并没有改变原有的数组，所以还是 2.1 和 1.2，不是 2 和 1。<br />\n\n<a name=\"53d875bb\"></a>\n## 13、模板插入\n\n<br />_.template([string=''], [options={}])<br />\n\n```\n<div id=\"container\"></div>\n<script src=\"https://cdn.bootcss.com/lodash.js/4.17.4/lodash.min.js\"></script><script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script><script type=\"text/javascript\">\n    $(function () {\n        var data = [{name: '戈德斯文'}, {name: '柴硕'}, {name: '杨海月'}];\n        $('#container').html( _.template($('#tpl').html(), data) )\n    });</script><script type=\"text/template\" id=\"tpl\">\n    <% _.each(obj,function(e,i){ %>\n        <ul>\n            <li><%= e.name %><%= i %></li>\n        </ul>\n    <%})%></script>\n 注意，这个<script>标签的type是text/template，类似于react的JSX的写法，就是js和html可以混写，用<% %>括起来的就是js代码，可以执行，直接写的就是html的标签，并且有类似MVC框架的的数据绑定，在<%= %>中可以调用到数据呈现（纯属个人见解，不知道理解的对不对）\n```\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"e05dce83\"><span class=\"ne-text\">简介</span></h2><p id=\"u992ce38b\" class=\"ne-p\"><br></p><p id=\"u2ddfeb5c\" class=\"ne-p\"><span class=\"ne-text\">Lodash 是一个著名的 javascript 原生库，不需要引入其他第三方依赖。是一个意在提高开发者效率,提高 JS 原生方法性能的 JS 库。简单的说就是，很多方法 lodash 已经帮你写好了，直接调用就行，不用自己费尽心思去写了，而且可以统一方法的一致性。Lodash 使用了一个简单的 _ 符号，就像 Jquery 的 $ 一样，十分简洁。<br /></span><span class=\"ne-text\">类似的还有 Underscore.js 和 Lazy.js</span></p><p id=\"u35bed021\" class=\"ne-p\"><br></p><h2 id=\"262b0b07\"><span class=\"ne-text\">支持</span></h2><p id=\"u1d99b6fb\" class=\"ne-p\"><br></p><p id=\"u248ef659\" class=\"ne-p\"><span class=\"ne-text\">chrome 43 往上<br /></span><span class=\"ne-text\">Firefox 38 往上<br /></span><span class=\"ne-text\">IE 6-11<br /></span><span class=\"ne-text\">MS Edge<br /></span><span class=\"ne-text\">Safari 5 往上<br /></span><span class=\"ne-text\">（几乎涵盖现在市面上可以见到的大部分浏览器）</span></p><p id=\"u543afa82\" class=\"ne-p\"><br></p><h2 id=\"28e2c808\"><span class=\"ne-text\">如何安装</span></h2><p id=\"ue4e3b7fb\" class=\"ne-p\"><br></p><p id=\"u53f85268\" class=\"ne-p\"><span class=\"ne-text\">浏览器</span></p><p id=\"uf62412f8\" class=\"ne-p\"><span class=\"ne-text\">NPM<br /></span><span class=\"ne-text\">$ npm i -g npm$ npm i --save lodash 复制代码<br /></span><span class=\"ne-text\">先全局安装，在单独安装到项目中<br /></span><span class=\"ne-text\">node.js<br /></span><span class=\"ne-text\">var _ = require('lodash')</span></p><p id=\"uc3ed04f9\" class=\"ne-p\"><br></p><h2 id=\"bd16146f\"><span class=\"ne-text\">为什么使用 lodash</span></h2><p id=\"uca768c71\" class=\"ne-p\"><br></p><p id=\"ubfda2c9c\" class=\"ne-p\"><span class=\"ne-text\">通过使用数组，数字，对象，字符串等方法，Lodash 使 JavaScript 变得更简单。</span></p><p id=\"u94a9fdd0\" class=\"ne-p\"><br></p><h2 id=\"b870eaea\"><span class=\"ne-text\">模块组成</span></h2><p id=\"u8d1a777a\" class=\"ne-p\"><br></p><p id=\"u29084bbf\" class=\"ne-p\"><span class=\"ne-text\">Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：</span></p><p id=\"uf1705fb4\" class=\"ne-p\"><br></p><p id=\"u72b50735\" class=\"ne-p\"><span class=\"ne-text\">Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作</span></p><p id=\"uf8fb7336\" class=\"ne-p\"><br></p><p id=\"ue0addcb5\" class=\"ne-p\"><span class=\"ne-text\">Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作</span></p><p id=\"u3a3ea82d\" class=\"ne-p\"><br></p><p id=\"u289d17ba\" class=\"ne-p\"><span class=\"ne-text\">Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作</span></p><p id=\"u7da80de8\" class=\"ne-p\"><br></p><p id=\"uff5780c8\" class=\"ne-p\"><span class=\"ne-text\">Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换</span></p><p id=\"ub439490a\" class=\"ne-p\"><br></p><p id=\"u82cdc79d\" class=\"ne-p\"><span class=\"ne-text\">Math， 使用与数值类型，常用于执行数学运算</span></p><p id=\"ube836449\" class=\"ne-p\"><br></p><p id=\"u83703de5\" class=\"ne-p\"><span class=\"ne-text\">Number， 适用于生成随机数，比较数值与数值区间的关系</span></p><p id=\"u12ef461b\" class=\"ne-p\"><br></p><p id=\"u67d14cab\" class=\"ne-p\"><span class=\"ne-text\">Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作</span></p><p id=\"u4859c55e\" class=\"ne-p\"><br></p><p id=\"u47b14f51\" class=\"ne-p\"><span class=\"ne-text\">Seq， 常用于创建链式调用，提高执行性能（惰性计算）</span></p><p id=\"u59f479b1\" class=\"ne-p\"><br></p><p id=\"u7039ce54\" class=\"ne-p\"><span class=\"ne-text\">String， 适用于字符串类型</span></p><p id=\"ub08ac008\" class=\"ne-p\"><br></p><p id=\"u9aad8e31\" class=\"ne-p\"><span class=\"ne-text\">lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。</span></p><p id=\"uc11b2364\" class=\"ne-p\"><br></p><p id=\"ue5415297\" class=\"ne-p\"><span class=\"ne-text\">Fixed Arity，固化参数个数，便于柯里化</span></p><p id=\"u1f78d01f\" class=\"ne-p\"><br></p><p id=\"uf42a18c5\" class=\"ne-p\"><span class=\"ne-text\">Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合</span></p><p id=\"uf31208bc\" class=\"ne-p\"><br></p><p id=\"ubd002f7b\" class=\"ne-p\"><span class=\"ne-text\">Capped Iteratee Argument， 封装Iteratee参数</span></p><p id=\"u6732c499\" class=\"ne-p\"><br></p><h2 id=\"3397fe6c\"><span class=\"ne-text\">1、N 次循环</span></h2><p id=\"ufc31854f\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"43d8b8d9\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n console.log('------- javascript -------')\n //js原生的循环方法\n for(var i = 0; i &lt; 5; i++){\n  console.log(i);\n }\n console.log('------- lodash -------')\n //ladash的times方法\n _.times(5,function(a){\n  console.log(a)\n });&lt;/script&gt;</pre><p id=\"udaf7f10c\" class=\"ne-p\"><br></p><p id=\"u4c8dfa3e\" class=\"ne-p\"><span class=\"ne-text\">for 语句是执行循环的不二选择，但在上面代码的使用场景下，_.times()的解决方式更加简洁和易于理解。</span></p><p id=\"u3100cad8\" class=\"ne-p\"><br></p><h2 id=\"51eea445\"><span class=\"ne-text\">2、深层查找属性值</span></h2><p id=\"ua38073f5\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"bb1c4773\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    var ownerArr = [{\n        &quot;owner&quot;: &quot;Colin&quot;,\n        &quot;pets&quot;: [{&quot;name&quot;: &quot;dog1&quot;}, {&quot;name&quot;: &quot;dog2&quot;}]\n    }, {\n        &quot;owner&quot;: &quot;John&quot;,\n        &quot;pets&quot;: [{&quot;name&quot;: &quot;dog3&quot;}, {&quot;name&quot;: &quot;dog4&quot;}]\n    }];\n    var jsMap = ownerArr.map(function (owner) {\n        return owner.pets[0].name;\n    });\n    console.log('------- jsMap -------');\n    console.log(jsMap);\n\n    var lodashMap = _.map(ownerArr, 'pets[0].name');\n    console.log('------- lodashMap -------');\n    console.log(lodashMap);&lt;/script&gt;</pre><p id=\"u078a4d9c\" class=\"ne-p\"><br></p><p id=\"ub17c50d4\" class=\"ne-p\"><span class=\"ne-text\">Lodash 中的_.map 方法和 JavaScript 中原生的数组方法非常的像，但它还是有非常有用的升级。 你可以通过一个字符串而不是回调函数来浏览深度嵌套的对象属性。</span></p><p id=\"u644df982\" class=\"ne-p\"><br></p><h2 id=\"edcab6f6\"><span class=\"ne-text\">3、深克隆对象</span></h2><p id=\"u3a357769\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"95feab07\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    var objA = {\n        &quot;name&quot;: &quot;戈德斯文&quot;\n    };\n    var objB = _.cloneDeep(objA);\n    console.log(objA);\n    console.log(objB);\n    console.log(objA === objB);&lt;/script&gt;</pre><p id=\"u37dfca3e\" class=\"ne-p\"><br></p><p id=\"uab51efa3\" class=\"ne-p\"><span class=\"ne-text\">深度克隆 JavaScript 对象是困难的，并且也没有什么简单的解决方案。你可以使用原生的解决方案:JSON.parse(JSON.stringify(objectToClone))  进行深度克隆。但是，这种方案仅在对象内部没有方法的时候才可行。</span></p><p id=\"ud5652103\" class=\"ne-p\"><br></p><h2 id=\"77726af0\"><span class=\"ne-text\">4、在指定范围内获取一个随机值</span></h2><p id=\"u755855f2\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"a68a0269\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    function getRandomNumber(min, max){\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n    console.log(getRandomNumber(15, 20));\n\n    console.log(_.random(15, 20));\n&lt;/script&gt;</pre><p id=\"ueca74aac\" class=\"ne-p\"><br></p><p id=\"u60834a61\" class=\"ne-p\"><span class=\"ne-text\">Lodash 中的  </span><em><span class=\"ne-text\">.random  方法要比上面的原生方法更强大与灵活。你可以只传入一个参数作为最大值， 你也可以指定返回的结果为浮点数</span></em><span class=\"ne-text\">.random(15,20,true)</span></p><p id=\"u510b4597\" class=\"ne-p\"><br></p><h2 id=\"8e39c7be\"><span class=\"ne-text\">5、扩展对象</span></h2><p id=\"u13f7199c\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"832fdb9b\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    Object.prototype.extend = function(obj) {\n        for (var i in obj) {\n            if (obj.hasOwnProperty(i)) {    //判断被扩展的对象有没有某个属性，\n                this[i] = obj[i];\n            }\n        }\n    };\n\n    var objA = {&quot;name&quot;: &quot;戈德斯文&quot;, &quot;car&quot;: &quot;宝马&quot;};\n    var objB = {&quot;name&quot;: &quot;柴硕&quot;, &quot;loveEat&quot;: true};\n\n    objA.extend(objB);\n    console.log(objA);\n\n    console.log(_.assign(objA, objB));&lt;/script&gt;</pre><p id=\"u9b138622\" class=\"ne-p\"><br></p><p id=\"u029c726d\" class=\"ne-p\"><span class=\"ne-text\">_.assign  方法也可以接收多个参数对象进行扩展，都是往后面的对象上合并</span></p><p id=\"ufcfaa0bb\" class=\"ne-p\"><br></p><h2 id=\"878b86ae\"><span class=\"ne-text\">6、从列表中随机的选择列表项</span></h2><p id=\"u2c1f417d\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"b297124c\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    var smartTeam = [&quot;戈德斯文&quot;, &quot;杨海月&quot;, &quot;柴硕&quot;, &quot;师贝贝&quot;];\n\n    function randomSmarter(smartTeam){\n        var index = Math.floor(Math.random() * smartTeam.length);\n        return smartTeam[index];\n    }\n\n    console.log(randomSmarter(smartTeam));\n\n    // Lodash\n    console.log(_.sample(smartTeam));\n    console.log(_.sampleSize(smartTeam,2));&lt;/script&gt;</pre><p id=\"u8869a65c\" class=\"ne-p\"><br></p><p id=\"u89818037\" class=\"ne-p\"><span class=\"ne-text\">此外，你也可以指定随机返回元素的个数_.sampleSize(smartTeam,n)，n 为需要返回的元素个数</span></p><p id=\"u9cdbe146\" class=\"ne-p\"><br></p><h2 id=\"ba6a97e3\"><span class=\"ne-text\">7、判断对象中是否含有某元素</span></h2><p id=\"u7feeb56e\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"58e948e4\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    var smartPerson = {\n            'name': '戈德斯文',\n            'gender': 'male'\n        },\n        smartTeam = [&quot;戈德斯文&quot;, &quot;杨海月&quot;, &quot;柴硕&quot;, &quot;师贝贝&quot;];\n\n\n    console.log(_.includes(smartPerson, '戈德斯文'));\n    console.log(_.includes(smartTeam, '杨海月'));\n    console.log(_.includes(smartTeam, '杨海月',2));&lt;/script&gt;</pre><p id=\"u323d4175\" class=\"ne-p\"><br></p><p id=\"u63b29ec4\" class=\"ne-p\"><span class=\"ne-text\">_.includes()第一个参数是需要查询的对象，第二个参数是需要查询的元素，第三个参数是开始查询的下标</span></p><p id=\"u1037364f\" class=\"ne-p\"><br></p><h2 id=\"7c6ff51e\"><span class=\"ne-text\">8、遍历循环</span></h2><p id=\"u48af9145\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"88ae4a08\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    _([1, 2]).forEach(function(value) {\n        console.log(value);\n    });\n    _.forEach([1, 3] , function(value, key) {\n        console.log(key,value);\n    });&lt;/script&gt;</pre><p id=\"u4809374e\" class=\"ne-p\"><br></p><p id=\"ufc9fce84\" class=\"ne-p\"><span class=\"ne-text\">这两种方法都会分别输出‘1’和‘2’，不仅是数组，对象也可以，数组的是后 key 是元素的下标，当传入的是对象的时候，key 是属性，value 是值</span></p><p id=\"u8b9cd7ed\" class=\"ne-p\"><br></p><h2 id=\"b0e332ed\"><span class=\"ne-text\">9、遍历循环执行某个方法</span></h2><p id=\"u64b010b5\" class=\"ne-p\"><br></p><p id=\"u22f354fd\" class=\"ne-p\"><span class=\"ne-text\">_.map()</span></p><p id=\"u8283e02d\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"ae490277\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    function square(n) {\n        return n * n;\n    }\n\n    console.log(_.map([4, 8], square));\n    // =&gt; [16, 64]\n\n    console.log(_.map({ 'a': 4, 'b': 8 }, square));\n    // =&gt; [16, 64] (iteration order is not guaranteed)\n\n    var users = [\n        { 'user': 'barney' },\n        { 'user': 'fred' }\n    ];\n\n    // The `_.property` iteratee shorthand.\n    console.log(_.map(users, 'user'));\n    // =&gt; ['barney', 'fred']&lt;/script&gt;</pre><p id=\"u7d4ee24d\" class=\"ne-p\"><br></p><h2 id=\"d0403165\"><span class=\"ne-text\">10、检验值是否为空</span></h2><p id=\"u3113066d\" class=\"ne-p\"><br></p><p id=\"ue0042752\" class=\"ne-p\"><span class=\"ne-text\">_.isEmpty()</span></p><p id=\"u7813bd39\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"5577c6a6\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    _.isEmpty(null);\n    // =&gt; true\n\n    _.isEmpty(true);\n    // =&gt; true\n\n    _.isEmpty(1);\n    // =&gt; true\n\n    _.isEmpty([1, 2, 3]);\n    // =&gt; false\n\n    _.isEmpty({ 'a': 1 });\n    // =&gt; false&lt;/script&gt;</pre><p id=\"uc9df8a44\" class=\"ne-p\"><br></p><h2 id=\"56b0d4be\"><span class=\"ne-text\">11、查找属性</span></h2><p id=\"u4d89677c\" class=\"ne-p\"><br></p><p id=\"uce4dec73\" class=\"ne-p\"><em><span class=\"ne-text\">.find()、</span></em><span class=\"ne-text\">.filter()、_.reject()</span></p><p id=\"uf8bcd0c8\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"d082f092\" class=\"ne-codeblock language-javascript\">&lt;script type=&quot;text/javascript&quot;&gt;\n    var users = [\n        {'user': 'barney', 'age': 36, 'active': true},\n        {'user': 'fred', 'age': 40, 'active': false},\n        {'user': 'pebbles', 'age': 1, 'active': true}\n    ];\n\n    console.log(_.find(users, function (o) {\n        return o.age &lt; 40;\n    }));\n    console.log(_.find(users, {'age': 1, 'active': true}));\n    console.log(_.filter(users, {'age': 1, 'active': true}));\n    console.log(_.find(users, ['active', false]));\n    console.log(_.filter(users, ['active', false]));\n    console.log(_.find(users, 'active'));\n    console.log(_.filter(users, 'active'));\n&lt;/script&gt;</pre><p id=\"uaf62523b\" class=\"ne-p\"><br></p><p id=\"ud53e1d80\" class=\"ne-p\"><em><span class=\"ne-text\">.find()第一个返回真值的第一个元素。</span></em><span class=\"ne-text\">.filter()返回真值的所有元素的数组。 </span><em><span class=\"ne-text\">.reject()是</span></em><span class=\"ne-text\">.filter 的反向方法，不返回真值的（集合）元素</span></p><p id=\"u43c88e2c\" class=\"ne-p\"><br></p><h2 id=\"8a0e603a\"><span class=\"ne-text\">12、数组去重</span></h2><p id=\"ub0d931f9\" class=\"ne-p\"><br></p><p id=\"u79789160\" class=\"ne-p\"><span class=\"ne-text\">_.uniq(array)创建一个去重后的 array 数组副本。参数  array (Array): 要检查的数组。<br /></span><span class=\"ne-text\">返回新的去重后的数组</span></p><p id=\"ub6c9ca3d\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"8d5a4fe1\" class=\"ne-codeblock language-javascript\">&lt;script type=&quot;text/javascript&quot;&gt;\n    var arr1 = [2, 1, 2];\n\n    var arr2 = _.uniq(arr1);\n\n\n    function unique(arr) {\n        var newArr = [];\n        for (var i = 0; i &lt; arr.length; i++) {\n            if(newArr.indexOf(arr[i]) == -1){\n                newArr.push(arr[i]);\n            }\n        }\n        return newArr;\n    }\n\n    console.log(arr1);\n    console.log(arr2);\n    console.log(unique(arr1));&lt;/script&gt;</pre><p id=\"u798d5969\" class=\"ne-p\"><br></p><p id=\"uc714b681\" class=\"ne-p\"><em><span class=\"ne-text\">.uniqBy(array,[iteratee=</span></em><span class=\"ne-text\">.identity])这个方法类似  _.uniq，除了它接受一个  iteratee（迭代函数），调用每一个数组（array）的每个元素以产生唯一性计算的标准。iteratee 调用时会传入一个参数：(value)。</span></p><p id=\"udfb0c584\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"b84eba5f\" class=\"ne-codeblock language-plain\">&lt;script type=&quot;text/javascript&quot;&gt;\n    console.log(_.uniqBy([2.1, 1.2, 2.3], Math.floor));\n    // =&gt; [2.1, 1.2]\n\n    console.log(_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x'));\n    // =&gt; [{ 'x': 1 }, { 'x': 2 }]&lt;/script&gt;</pre><p id=\"u937f7fc6\" class=\"ne-p\"><br></p><p id=\"u7f0fa623\" class=\"ne-p\"><span class=\"ne-text\">Math.floor 只是向下取整，去重，并没有改变原有的数组，所以还是 2.1 和 1.2，不是 2 和 1。</span></p><p id=\"u4f6ba292\" class=\"ne-p\"><br></p><h2 id=\"53d875bb\"><span class=\"ne-text\">13、模板插入</span></h2><p id=\"ud2fd1992\" class=\"ne-p\"><br></p><p id=\"u6661fafc\" class=\"ne-p\"><span class=\"ne-text\">_.template([string=''], [options={}])</span></p><p id=\"ud1dea0e8\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"5731ca7d\" class=\"ne-codeblock language-plain\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;\n&lt;script src=&quot;https://cdn.bootcss.com/lodash.js/4.17.4/lodash.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\n    $(function () {\n        var data = [{name: '戈德斯文'}, {name: '柴硕'}, {name: '杨海月'}];\n        $('#container').html( _.template($('#tpl').html(), data) )\n    });&lt;/script&gt;&lt;script type=&quot;text/template&quot; id=&quot;tpl&quot;&gt;\n    &lt;% _.each(obj,function(e,i){ %&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;%= e.name %&gt;&lt;%= i %&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;%})%&gt;&lt;/script&gt;\n 注意，这个&lt;script&gt;标签的type是text/template，类似于react的JSX的写法，就是js和html可以混写，用&lt;% %&gt;括起来的就是js代码，可以执行，直接写的就是html的标签，并且有类似MVC框架的的数据绑定，在&lt;%= %&gt;中可以调用到数据呈现（纯属个人见解，不知道理解的对不对）</pre></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"e05dce83\" id=\"e05dce83\"><span data-lake-id=\"uf35cd593\" id=\"uf35cd593\">简介</span></h2><p data-lake-id=\"u992ce38b\" id=\"u992ce38b\"><br></p><p data-lake-id=\"u2ddfeb5c\" id=\"u2ddfeb5c\"><span data-lake-id=\"u93be9437\" id=\"u93be9437\">Lodash 是一个著名的 javascript 原生库，不需要引入其他第三方依赖。是一个意在提高开发者效率,提高 JS 原生方法性能的 JS 库。简单的说就是，很多方法 lodash 已经帮你写好了，直接调用就行，不用自己费尽心思去写了，而且可以统一方法的一致性。Lodash 使用了一个简单的 _ 符号，就像 Jquery 的 $ 一样，十分简洁。<br /></span><span data-lake-id=\"u2bab45bf\" id=\"u2bab45bf\">类似的还有 Underscore.js 和 Lazy.js</span></p><p data-lake-id=\"u35bed021\" id=\"u35bed021\"><br></p><h2 data-lake-id=\"262b0b07\" id=\"262b0b07\"><span data-lake-id=\"uc5f3874a\" id=\"uc5f3874a\">支持</span></h2><p data-lake-id=\"u1d99b6fb\" id=\"u1d99b6fb\"><br></p><p data-lake-id=\"u248ef659\" id=\"u248ef659\"><span data-lake-id=\"u7b010046\" id=\"u7b010046\">chrome 43 往上<br /></span><span data-lake-id=\"u2aa257f8\" id=\"u2aa257f8\">Firefox 38 往上<br /></span><span data-lake-id=\"ub72cee53\" id=\"ub72cee53\">IE 6-11<br /></span><span data-lake-id=\"uabcb989b\" id=\"uabcb989b\">MS Edge<br /></span><span data-lake-id=\"u5993dd06\" id=\"u5993dd06\">Safari 5 往上<br /></span><span data-lake-id=\"ua849d050\" id=\"ua849d050\">（几乎涵盖现在市面上可以见到的大部分浏览器）</span></p><p data-lake-id=\"u543afa82\" id=\"u543afa82\"><br></p><h2 data-lake-id=\"28e2c808\" id=\"28e2c808\"><span data-lake-id=\"ud5e2dd7d\" id=\"ud5e2dd7d\">如何安装</span></h2><p data-lake-id=\"ue4e3b7fb\" id=\"ue4e3b7fb\"><br></p><p data-lake-id=\"u53f85268\" id=\"u53f85268\"><span data-lake-id=\"uce3e5a15\" id=\"uce3e5a15\">浏览器</span></p><p data-lake-id=\"uf62412f8\" id=\"uf62412f8\"><span data-lake-id=\"u30072668\" id=\"u30072668\">NPM<br /></span><span data-lake-id=\"ub33014c8\" id=\"ub33014c8\">$ npm i -g npm$ npm i --save lodash 复制代码<br /></span><span data-lake-id=\"u70be66b6\" id=\"u70be66b6\">先全局安装，在单独安装到项目中<br /></span><span data-lake-id=\"ud58f6751\" id=\"ud58f6751\">node.js<br /></span><span data-lake-id=\"u9bbac5a4\" id=\"u9bbac5a4\">var _ = require('lodash')</span></p><p data-lake-id=\"uc3ed04f9\" id=\"uc3ed04f9\"><br></p><h2 data-lake-id=\"bd16146f\" id=\"bd16146f\"><span data-lake-id=\"u5f9ba8cd\" id=\"u5f9ba8cd\">为什么使用 lodash</span></h2><p data-lake-id=\"uca768c71\" id=\"uca768c71\"><br></p><p data-lake-id=\"ubfda2c9c\" id=\"ubfda2c9c\"><span data-lake-id=\"uf252907d\" id=\"uf252907d\">通过使用数组，数字，对象，字符串等方法，Lodash 使 JavaScript 变得更简单。</span></p><p data-lake-id=\"u94a9fdd0\" id=\"u94a9fdd0\"><br></p><h2 data-lake-id=\"b870eaea\" id=\"b870eaea\"><span data-lake-id=\"u60bca6c9\" id=\"u60bca6c9\">模块组成</span></h2><p data-lake-id=\"u8d1a777a\" id=\"u8d1a777a\"><br></p><p data-lake-id=\"u29084bbf\" id=\"u29084bbf\"><span data-lake-id=\"ub1c6cba1\" id=\"ub1c6cba1\">Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：</span></p><p data-lake-id=\"uf1705fb4\" id=\"uf1705fb4\"><br></p><p data-lake-id=\"u72b50735\" id=\"u72b50735\"><span data-lake-id=\"u5570609c\" id=\"u5570609c\">Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作</span></p><p data-lake-id=\"uf8fb7336\" id=\"uf8fb7336\"><br></p><p data-lake-id=\"ue0addcb5\" id=\"ue0addcb5\"><span data-lake-id=\"ub897833e\" id=\"ub897833e\">Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作</span></p><p data-lake-id=\"u3a3ea82d\" id=\"u3a3ea82d\"><br></p><p data-lake-id=\"u289d17ba\" id=\"u289d17ba\"><span data-lake-id=\"ue66546f0\" id=\"ue66546f0\">Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作</span></p><p data-lake-id=\"u7da80de8\" id=\"u7da80de8\"><br></p><p data-lake-id=\"uff5780c8\" id=\"uff5780c8\"><span data-lake-id=\"u362aa65c\" id=\"u362aa65c\">Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换</span></p><p data-lake-id=\"ub439490a\" id=\"ub439490a\"><br></p><p data-lake-id=\"u82cdc79d\" id=\"u82cdc79d\"><span data-lake-id=\"ubd1fac54\" id=\"ubd1fac54\">Math， 使用与数值类型，常用于执行数学运算</span></p><p data-lake-id=\"ube836449\" id=\"ube836449\"><br></p><p data-lake-id=\"u83703de5\" id=\"u83703de5\"><span data-lake-id=\"ub5462ea7\" id=\"ub5462ea7\">Number， 适用于生成随机数，比较数值与数值区间的关系</span></p><p data-lake-id=\"u12ef461b\" id=\"u12ef461b\"><br></p><p data-lake-id=\"u67d14cab\" id=\"u67d14cab\"><span data-lake-id=\"u89337794\" id=\"u89337794\">Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作</span></p><p data-lake-id=\"u4859c55e\" id=\"u4859c55e\"><br></p><p data-lake-id=\"u47b14f51\" id=\"u47b14f51\"><span data-lake-id=\"ueb775abd\" id=\"ueb775abd\">Seq， 常用于创建链式调用，提高执行性能（惰性计算）</span></p><p data-lake-id=\"u59f479b1\" id=\"u59f479b1\"><br></p><p data-lake-id=\"u7039ce54\" id=\"u7039ce54\"><span data-lake-id=\"uc0b95a04\" id=\"uc0b95a04\">String， 适用于字符串类型</span></p><p data-lake-id=\"ub08ac008\" id=\"ub08ac008\"><br></p><p data-lake-id=\"u9aad8e31\" id=\"u9aad8e31\"><span data-lake-id=\"u80e16817\" id=\"u80e16817\">lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。</span></p><p data-lake-id=\"uc11b2364\" id=\"uc11b2364\"><br></p><p data-lake-id=\"ue5415297\" id=\"ue5415297\"><span data-lake-id=\"u1ce26935\" id=\"u1ce26935\">Fixed Arity，固化参数个数，便于柯里化</span></p><p data-lake-id=\"u1f78d01f\" id=\"u1f78d01f\"><br></p><p data-lake-id=\"uf42a18c5\" id=\"uf42a18c5\"><span data-lake-id=\"u35578542\" id=\"u35578542\">Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合</span></p><p data-lake-id=\"uf31208bc\" id=\"uf31208bc\"><br></p><p data-lake-id=\"ubd002f7b\" id=\"ubd002f7b\"><span data-lake-id=\"u3d6a4507\" id=\"u3d6a4507\">Capped Iteratee Argument， 封装Iteratee参数</span></p><p data-lake-id=\"u6732c499\" id=\"u6732c499\"><br></p><h2 data-lake-id=\"3397fe6c\" id=\"3397fe6c\"><span data-lake-id=\"u087fb500\" id=\"u087fb500\">1、N 次循环</span></h2><p data-lake-id=\"ufc31854f\" id=\"ufc31854f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20console.log('-------%20javascript%20-------')%5Cn%20%2F%2Fjs%E5%8E%9F%E7%94%9F%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%96%B9%E6%B3%95%5Cn%20for(var%20i%20%3D%200%3B%20i%20%3C%205%3B%20i%2B%2B)%7B%5Cn%20%20console.log(i)%3B%5Cn%20%7D%5Cn%20console.log('-------%20lodash%20-------')%5Cn%20%2F%2Fladash%E7%9A%84times%E6%96%B9%E6%B3%95%5Cn%20_.times(5%2Cfunction(a)%7B%5Cn%20%20console.log(a)%5Cn%20%7D)%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2243d8b8d9%22%7D\"></card><p data-lake-id=\"udaf7f10c\" id=\"udaf7f10c\"><br></p><p data-lake-id=\"u4c8dfa3e\" id=\"u4c8dfa3e\"><span data-lake-id=\"u76cc8338\" id=\"u76cc8338\">for 语句是执行循环的不二选择，但在上面代码的使用场景下，_.times()的解决方式更加简洁和易于理解。</span></p><p data-lake-id=\"u3100cad8\" id=\"u3100cad8\"><br></p><h2 data-lake-id=\"51eea445\" id=\"51eea445\"><span data-lake-id=\"uaacf250b\" id=\"uaacf250b\">2、深层查找属性值</span></h2><p data-lake-id=\"ua38073f5\" id=\"ua38073f5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20ownerArr%20%3D%20%5B%7B%5Cn%20%20%20%20%20%20%20%20%5C%22owner%5C%22%3A%20%5C%22Colin%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22pets%5C%22%3A%20%5B%7B%5C%22name%5C%22%3A%20%5C%22dog1%5C%22%7D%2C%20%7B%5C%22name%5C%22%3A%20%5C%22dog2%5C%22%7D%5D%5Cn%20%20%20%20%7D%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22owner%5C%22%3A%20%5C%22John%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22pets%5C%22%3A%20%5B%7B%5C%22name%5C%22%3A%20%5C%22dog3%5C%22%7D%2C%20%7B%5C%22name%5C%22%3A%20%5C%22dog4%5C%22%7D%5D%5Cn%20%20%20%20%7D%5D%3B%5Cn%20%20%20%20var%20jsMap%20%3D%20ownerArr.map(function%20(owner)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20owner.pets%5B0%5D.name%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20console.log('-------%20jsMap%20-------')%3B%5Cn%20%20%20%20console.log(jsMap)%3B%5Cn%5Cn%20%20%20%20var%20lodashMap%20%3D%20_.map(ownerArr%2C%20'pets%5B0%5D.name')%3B%5Cn%20%20%20%20console.log('-------%20lodashMap%20-------')%3B%5Cn%20%20%20%20console.log(lodashMap)%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22bb1c4773%22%7D\"></card><p data-lake-id=\"u078a4d9c\" id=\"u078a4d9c\"><br></p><p data-lake-id=\"ub17c50d4\" id=\"ub17c50d4\"><span data-lake-id=\"u650c2b4c\" id=\"u650c2b4c\">Lodash 中的_.map 方法和 JavaScript 中原生的数组方法非常的像，但它还是有非常有用的升级。 你可以通过一个字符串而不是回调函数来浏览深度嵌套的对象属性。</span></p><p data-lake-id=\"u644df982\" id=\"u644df982\"><br></p><h2 data-lake-id=\"edcab6f6\" id=\"edcab6f6\"><span data-lake-id=\"u912f4d70\" id=\"u912f4d70\">3、深克隆对象</span></h2><p data-lake-id=\"u3a357769\" id=\"u3a357769\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20objA%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87%5C%22%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20var%20objB%20%3D%20_.cloneDeep(objA)%3B%5Cn%20%20%20%20console.log(objA)%3B%5Cn%20%20%20%20console.log(objB)%3B%5Cn%20%20%20%20console.log(objA%20%3D%3D%3D%20objB)%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2295feab07%22%7D\"></card><p data-lake-id=\"u37dfca3e\" id=\"u37dfca3e\"><br></p><p data-lake-id=\"uab51efa3\" id=\"uab51efa3\"><span data-lake-id=\"u5206a9b0\" id=\"u5206a9b0\">深度克隆 JavaScript 对象是困难的，并且也没有什么简单的解决方案。你可以使用原生的解决方案:JSON.parse(JSON.stringify(objectToClone))  进行深度克隆。但是，这种方案仅在对象内部没有方法的时候才可行。</span></p><p data-lake-id=\"ud5652103\" id=\"ud5652103\"><br></p><h2 data-lake-id=\"77726af0\" id=\"77726af0\"><span data-lake-id=\"u4683e56a\" id=\"u4683e56a\">4、在指定范围内获取一个随机值</span></h2><p data-lake-id=\"u755855f2\" id=\"u755855f2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20function%20getRandomNumber(min%2C%20max)%7B%5Cn%20%20%20%20%20%20%20%20return%20Math.floor(Math.random()%20*%20(max%20-%20min))%20%2B%20min%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20console.log(getRandomNumber(15%2C%2020))%3B%5Cn%5Cn%20%20%20%20console.log(_.random(15%2C%2020))%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a68a0269%22%7D\"></card><p data-lake-id=\"ueca74aac\" id=\"ueca74aac\"><br></p><p data-lake-id=\"u60834a61\" id=\"u60834a61\"><span data-lake-id=\"u3e7d4933\" id=\"u3e7d4933\">Lodash 中的  </span><em><span data-lake-id=\"u0aea1d7c\" id=\"u0aea1d7c\">.random  方法要比上面的原生方法更强大与灵活。你可以只传入一个参数作为最大值， 你也可以指定返回的结果为浮点数</span></em><span data-lake-id=\"ue034471c\" id=\"ue034471c\">.random(15,20,true)</span></p><p data-lake-id=\"u510b4597\" id=\"u510b4597\"><br></p><h2 data-lake-id=\"8e39c7be\" id=\"8e39c7be\"><span data-lake-id=\"ucbf2c762\" id=\"ucbf2c762\">5、扩展对象</span></h2><p data-lake-id=\"u13f7199c\" id=\"u13f7199c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20Object.prototype.extend%20%3D%20function(obj)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(var%20i%20in%20obj)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(obj.hasOwnProperty(i))%20%7B%20%20%20%20%2F%2F%E5%88%A4%E6%96%AD%E8%A2%AB%E6%89%A9%E5%B1%95%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E6%B2%A1%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%EF%BC%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this%5Bi%5D%20%3D%20obj%5Bi%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%3B%5Cn%5Cn%20%20%20%20var%20objA%20%3D%20%7B%5C%22name%5C%22%3A%20%5C%22%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87%5C%22%2C%20%5C%22car%5C%22%3A%20%5C%22%E5%AE%9D%E9%A9%AC%5C%22%7D%3B%5Cn%20%20%20%20var%20objB%20%3D%20%7B%5C%22name%5C%22%3A%20%5C%22%E6%9F%B4%E7%A1%95%5C%22%2C%20%5C%22loveEat%5C%22%3A%20true%7D%3B%5Cn%5Cn%20%20%20%20objA.extend(objB)%3B%5Cn%20%20%20%20console.log(objA)%3B%5Cn%5Cn%20%20%20%20console.log(_.assign(objA%2C%20objB))%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22832fdb9b%22%7D\"></card><p data-lake-id=\"u9b138622\" id=\"u9b138622\"><br></p><p data-lake-id=\"u029c726d\" id=\"u029c726d\"><span data-lake-id=\"u20088931\" id=\"u20088931\">_.assign  方法也可以接收多个参数对象进行扩展，都是往后面的对象上合并</span></p><p data-lake-id=\"ufcfaa0bb\" id=\"ufcfaa0bb\"><br></p><h2 data-lake-id=\"878b86ae\" id=\"878b86ae\"><span data-lake-id=\"u6aea2752\" id=\"u6aea2752\">6、从列表中随机的选择列表项</span></h2><p data-lake-id=\"u2c1f417d\" id=\"u2c1f417d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20smartTeam%20%3D%20%5B%5C%22%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87%5C%22%2C%20%5C%22%E6%9D%A8%E6%B5%B7%E6%9C%88%5C%22%2C%20%5C%22%E6%9F%B4%E7%A1%95%5C%22%2C%20%5C%22%E5%B8%88%E8%B4%9D%E8%B4%9D%5C%22%5D%3B%5Cn%5Cn%20%20%20%20function%20randomSmarter(smartTeam)%7B%5Cn%20%20%20%20%20%20%20%20var%20index%20%3D%20Math.floor(Math.random()%20*%20smartTeam.length)%3B%5Cn%20%20%20%20%20%20%20%20return%20smartTeam%5Bindex%5D%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20console.log(randomSmarter(smartTeam))%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Lodash%5Cn%20%20%20%20console.log(_.sample(smartTeam))%3B%5Cn%20%20%20%20console.log(_.sampleSize(smartTeam%2C2))%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b297124c%22%7D\"></card><p data-lake-id=\"u8869a65c\" id=\"u8869a65c\"><br></p><p data-lake-id=\"u89818037\" id=\"u89818037\"><span data-lake-id=\"u092a998b\" id=\"u092a998b\">此外，你也可以指定随机返回元素的个数_.sampleSize(smartTeam,n)，n 为需要返回的元素个数</span></p><p data-lake-id=\"u9cdbe146\" id=\"u9cdbe146\"><br></p><h2 data-lake-id=\"ba6a97e3\" id=\"ba6a97e3\"><span data-lake-id=\"u605239a9\" id=\"u605239a9\">7、判断对象中是否含有某元素</span></h2><p data-lake-id=\"u7feeb56e\" id=\"u7feeb56e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20smartPerson%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20'name'%3A%20'%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20'gender'%3A%20'male'%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20smartTeam%20%3D%20%5B%5C%22%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87%5C%22%2C%20%5C%22%E6%9D%A8%E6%B5%B7%E6%9C%88%5C%22%2C%20%5C%22%E6%9F%B4%E7%A1%95%5C%22%2C%20%5C%22%E5%B8%88%E8%B4%9D%E8%B4%9D%5C%22%5D%3B%5Cn%5Cn%5Cn%20%20%20%20console.log(_.includes(smartPerson%2C%20'%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87'))%3B%5Cn%20%20%20%20console.log(_.includes(smartTeam%2C%20'%E6%9D%A8%E6%B5%B7%E6%9C%88'))%3B%5Cn%20%20%20%20console.log(_.includes(smartTeam%2C%20'%E6%9D%A8%E6%B5%B7%E6%9C%88'%2C2))%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2258e948e4%22%7D\"></card><p data-lake-id=\"u323d4175\" id=\"u323d4175\"><br></p><p data-lake-id=\"u63b29ec4\" id=\"u63b29ec4\"><span data-lake-id=\"uccd261a2\" id=\"uccd261a2\">_.includes()第一个参数是需要查询的对象，第二个参数是需要查询的元素，第三个参数是开始查询的下标</span></p><p data-lake-id=\"u1037364f\" id=\"u1037364f\"><br></p><h2 data-lake-id=\"7c6ff51e\" id=\"7c6ff51e\"><span data-lake-id=\"ufcd9cdd9\" id=\"ufcd9cdd9\">8、遍历循环</span></h2><p data-lake-id=\"u48af9145\" id=\"u48af9145\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20_(%5B1%2C%202%5D).forEach(function(value)%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(value)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20_.forEach(%5B1%2C%203%5D%20%2C%20function(value%2C%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(key%2Cvalue)%3B%5Cn%20%20%20%20%7D)%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2288ae4a08%22%7D\"></card><p data-lake-id=\"u4809374e\" id=\"u4809374e\"><br></p><p data-lake-id=\"ufc9fce84\" id=\"ufc9fce84\"><span data-lake-id=\"uc7c0fa8b\" id=\"uc7c0fa8b\">这两种方法都会分别输出‘1’和‘2’，不仅是数组，对象也可以，数组的是后 key 是元素的下标，当传入的是对象的时候，key 是属性，value 是值</span></p><p data-lake-id=\"u8b9cd7ed\" id=\"u8b9cd7ed\"><br></p><h2 data-lake-id=\"b0e332ed\" id=\"b0e332ed\"><span data-lake-id=\"u88b88808\" id=\"u88b88808\">9、遍历循环执行某个方法</span></h2><p data-lake-id=\"u64b010b5\" id=\"u64b010b5\"><br></p><p data-lake-id=\"u22f354fd\" id=\"u22f354fd\"><span data-lake-id=\"ub4ecdd9d\" id=\"ub4ecdd9d\">_.map()</span></p><p data-lake-id=\"u8283e02d\" id=\"u8283e02d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20function%20square(n)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20n%20*%20n%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20console.log(_.map(%5B4%2C%208%5D%2C%20square))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B16%2C%2064%5D%5Cn%5Cn%20%20%20%20console.log(_.map(%7B%20'a'%3A%204%2C%20'b'%3A%208%20%7D%2C%20square))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B16%2C%2064%5D%20(iteration%20order%20is%20not%20guaranteed)%5Cn%5Cn%20%20%20%20var%20users%20%3D%20%5B%5Cn%20%20%20%20%20%20%20%20%7B%20'user'%3A%20'barney'%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%20'user'%3A%20'fred'%20%7D%5Cn%20%20%20%20%5D%3B%5Cn%5Cn%20%20%20%20%2F%2F%20The%20%60_.property%60%20iteratee%20shorthand.%5Cn%20%20%20%20console.log(_.map(users%2C%20'user'))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B'barney'%2C%20'fred'%5D%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ae490277%22%7D\"></card><p data-lake-id=\"u7d4ee24d\" id=\"u7d4ee24d\"><br></p><h2 data-lake-id=\"d0403165\" id=\"d0403165\"><span data-lake-id=\"uaee6d32a\" id=\"uaee6d32a\">10、检验值是否为空</span></h2><p data-lake-id=\"u3113066d\" id=\"u3113066d\"><br></p><p data-lake-id=\"ue0042752\" id=\"ue0042752\"><span data-lake-id=\"u82c35327\" id=\"u82c35327\">_.isEmpty()</span></p><p data-lake-id=\"u7813bd39\" id=\"u7813bd39\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20_.isEmpty(null)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20true%5Cn%5Cn%20%20%20%20_.isEmpty(true)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20true%5Cn%5Cn%20%20%20%20_.isEmpty(1)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20true%5Cn%5Cn%20%20%20%20_.isEmpty(%5B1%2C%202%2C%203%5D)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20false%5Cn%5Cn%20%20%20%20_.isEmpty(%7B%20'a'%3A%201%20%7D)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20false%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225577c6a6%22%7D\"></card><p data-lake-id=\"uc9df8a44\" id=\"uc9df8a44\"><br></p><h2 data-lake-id=\"56b0d4be\" id=\"56b0d4be\"><span data-lake-id=\"u58b09690\" id=\"u58b09690\">11、查找属性</span></h2><p data-lake-id=\"u4d89677c\" id=\"u4d89677c\"><br></p><p data-lake-id=\"uce4dec73\" id=\"uce4dec73\"><em><span data-lake-id=\"uc48e9842\" id=\"uc48e9842\">.find()、</span></em><span data-lake-id=\"u824cb235\" id=\"u824cb235\">.filter()、_.reject()</span></p><p data-lake-id=\"uf8bcd0c8\" id=\"uf8bcd0c8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20users%20%3D%20%5B%5Cn%20%20%20%20%20%20%20%20%7B'user'%3A%20'barney'%2C%20'age'%3A%2036%2C%20'active'%3A%20true%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B'user'%3A%20'fred'%2C%20'age'%3A%2040%2C%20'active'%3A%20false%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B'user'%3A%20'pebbles'%2C%20'age'%3A%201%2C%20'active'%3A%20true%7D%5Cn%20%20%20%20%5D%3B%5Cn%5Cn%20%20%20%20console.log(_.find(users%2C%20function%20(o)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20o.age%20%3C%2040%3B%5Cn%20%20%20%20%7D))%3B%5Cn%20%20%20%20console.log(_.find(users%2C%20%7B'age'%3A%201%2C%20'active'%3A%20true%7D))%3B%5Cn%20%20%20%20console.log(_.filter(users%2C%20%7B'age'%3A%201%2C%20'active'%3A%20true%7D))%3B%5Cn%20%20%20%20console.log(_.find(users%2C%20%5B'active'%2C%20false%5D))%3B%5Cn%20%20%20%20console.log(_.filter(users%2C%20%5B'active'%2C%20false%5D))%3B%5Cn%20%20%20%20console.log(_.find(users%2C%20'active'))%3B%5Cn%20%20%20%20console.log(_.filter(users%2C%20'active'))%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d082f092%22%7D\"></card><p data-lake-id=\"uaf62523b\" id=\"uaf62523b\"><br></p><p data-lake-id=\"ud53e1d80\" id=\"ud53e1d80\"><em><span data-lake-id=\"u308e6050\" id=\"u308e6050\">.find()第一个返回真值的第一个元素。</span></em><span data-lake-id=\"ua2fc14ec\" id=\"ua2fc14ec\">.filter()返回真值的所有元素的数组。 </span><em><span data-lake-id=\"u5435355b\" id=\"u5435355b\">.reject()是</span></em><span data-lake-id=\"u03eb013c\" id=\"u03eb013c\">.filter 的反向方法，不返回真值的（集合）元素</span></p><p data-lake-id=\"u43c88e2c\" id=\"u43c88e2c\"><br></p><h2 data-lake-id=\"8a0e603a\" id=\"8a0e603a\"><span data-lake-id=\"uf54215c1\" id=\"uf54215c1\">12、数组去重</span></h2><p data-lake-id=\"ub0d931f9\" id=\"ub0d931f9\"><br></p><p data-lake-id=\"u79789160\" id=\"u79789160\"><span data-lake-id=\"ua03aa6f6\" id=\"ua03aa6f6\">_.uniq(array)创建一个去重后的 array 数组副本。参数  array (Array): 要检查的数组。<br /></span><span data-lake-id=\"ucbcc9d90\" id=\"ucbcc9d90\">返回新的去重后的数组</span></p><p data-lake-id=\"ub6c9ca3d\" id=\"ub6c9ca3d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20arr1%20%3D%20%5B2%2C%201%2C%202%5D%3B%5Cn%5Cn%20%20%20%20var%20arr2%20%3D%20_.uniq(arr1)%3B%5Cn%5Cn%5Cn%20%20%20%20function%20unique(arr)%20%7B%5Cn%20%20%20%20%20%20%20%20var%20newArr%20%3D%20%5B%5D%3B%5Cn%20%20%20%20%20%20%20%20for%20(var%20i%20%3D%200%3B%20i%20%3C%20arr.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(newArr.indexOf(arr%5Bi%5D)%20%3D%3D%20-1)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20newArr.push(arr%5Bi%5D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20newArr%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20console.log(arr1)%3B%5Cn%20%20%20%20console.log(arr2)%3B%5Cn%20%20%20%20console.log(unique(arr1))%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%228d5a4fe1%22%7D\"></card><p data-lake-id=\"u798d5969\" id=\"u798d5969\"><br></p><p data-lake-id=\"uc714b681\" id=\"uc714b681\"><em><span data-lake-id=\"u86081abf\" id=\"u86081abf\">.uniqBy(array,[iteratee=</span></em><span data-lake-id=\"u00b84dc1\" id=\"u00b84dc1\">.identity])这个方法类似  _.uniq，除了它接受一个  iteratee（迭代函数），调用每一个数组（array）的每个元素以产生唯一性计算的标准。iteratee 调用时会传入一个参数：(value)。</span></p><p data-lake-id=\"udfb0c584\" id=\"udfb0c584\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20console.log(_.uniqBy(%5B2.1%2C%201.2%2C%202.3%5D%2C%20Math.floor))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B2.1%2C%201.2%5D%5Cn%5Cn%20%20%20%20console.log(_.uniqBy(%5B%7B%20'x'%3A%201%20%7D%2C%20%7B%20'x'%3A%202%20%7D%2C%20%7B%20'x'%3A%201%20%7D%5D%2C%20'x'))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B%7B%20'x'%3A%201%20%7D%2C%20%7B%20'x'%3A%202%20%7D%5D%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b84eba5f%22%7D\"></card><p data-lake-id=\"u937f7fc6\" id=\"u937f7fc6\"><br></p><p data-lake-id=\"u7f0fa623\" id=\"u7f0fa623\"><span data-lake-id=\"ue6cbb671\" id=\"ue6cbb671\">Math.floor 只是向下取整，去重，并没有改变原有的数组，所以还是 2.1 和 1.2，不是 2 和 1。</span></p><p data-lake-id=\"u4f6ba292\" id=\"u4f6ba292\"><br></p><h2 data-lake-id=\"53d875bb\" id=\"53d875bb\"><span data-lake-id=\"u441f6840\" id=\"u441f6840\">13、模板插入</span></h2><p data-lake-id=\"ud2fd1992\" id=\"ud2fd1992\"><br></p><p data-lake-id=\"u6661fafc\" id=\"u6661fafc\"><span data-lake-id=\"uef54de41\" id=\"uef54de41\">_.template([string=''], [options={}])</span></p><p data-lake-id=\"ud1dea0e8\" id=\"ud1dea0e8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cdiv%20id%3D%5C%22container%5C%22%3E%3C%2Fdiv%3E%5Cn%3Cscript%20src%3D%5C%22https%3A%2F%2Fcdn.bootcss.com%2Flodash.js%2F4.17.4%2Flodash.min.js%5C%22%3E%3C%2Fscript%3E%3Cscript%20src%3D%5C%22https%3A%2F%2Fcdn.bootcss.com%2Fjquery%2F3.2.1%2Fjquery.min.js%5C%22%3E%3C%2Fscript%3E%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20%24(function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20var%20data%20%3D%20%5B%7Bname%3A%20'%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87'%7D%2C%20%7Bname%3A%20'%E6%9F%B4%E7%A1%95'%7D%2C%20%7Bname%3A%20'%E6%9D%A8%E6%B5%B7%E6%9C%88'%7D%5D%3B%5Cn%20%20%20%20%20%20%20%20%24('%23container').html(%20_.template(%24('%23tpl').html()%2C%20data)%20)%5Cn%20%20%20%20%7D)%3B%3C%2Fscript%3E%3Cscript%20type%3D%5C%22text%2Ftemplate%5C%22%20id%3D%5C%22tpl%5C%22%3E%5Cn%20%20%20%20%3C%25%20_.each(obj%2Cfunction(e%2Ci)%7B%20%25%3E%5Cn%20%20%20%20%20%20%20%20%3Cul%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%3E%3C%25%3D%20e.name%20%25%3E%3C%25%3D%20i%20%25%3E%3C%2Fli%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Ful%3E%5Cn%20%20%20%20%3C%25%7D)%25%3E%3C%2Fscript%3E%5Cn%20%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E4%B8%AA%3Cscript%3E%E6%A0%87%E7%AD%BE%E7%9A%84type%E6%98%AFtext%2Ftemplate%EF%BC%8C%E7%B1%BB%E4%BC%BC%E4%BA%8Ereact%E7%9A%84JSX%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%8C%E5%B0%B1%E6%98%AFjs%E5%92%8Chtml%E5%8F%AF%E4%BB%A5%E6%B7%B7%E5%86%99%EF%BC%8C%E7%94%A8%3C%25%20%25%3E%E6%8B%AC%E8%B5%B7%E6%9D%A5%E7%9A%84%E5%B0%B1%E6%98%AFjs%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%86%99%E7%9A%84%E5%B0%B1%E6%98%AFhtml%E7%9A%84%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%9C%89%E7%B1%BB%E4%BC%BCMVC%E6%A1%86%E6%9E%B6%E7%9A%84%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%8C%E5%9C%A8%3C%25%3D%20%25%3E%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E5%88%B0%E6%95%B0%E6%8D%AE%E5%91%88%E7%8E%B0%EF%BC%88%E7%BA%AF%E5%B1%9E%E4%B8%AA%E4%BA%BA%E8%A7%81%E8%A7%A3%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E7%90%86%E8%A7%A3%E7%9A%84%E5%AF%B9%E4%B8%8D%E5%AF%B9%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225731ca7d%22%7D\"></card>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"e05dce83\" id=\"e05dce83\"><span data-lake-id=\"uf35cd593\" id=\"uf35cd593\">简介</span></h2><p data-lake-id=\"u992ce38b\" id=\"u992ce38b\"><br></p><p data-lake-id=\"u2ddfeb5c\" id=\"u2ddfeb5c\"><span data-lake-id=\"u93be9437\" id=\"u93be9437\">Lodash 是一个著名的 javascript 原生库，不需要引入其他第三方依赖。是一个意在提高开发者效率,提高 JS 原生方法性能的 JS 库。简单的说就是，很多方法 lodash 已经帮你写好了，直接调用就行，不用自己费尽心思去写了，而且可以统一方法的一致性。Lodash 使用了一个简单的 _ 符号，就像 Jquery 的 $ 一样，十分简洁。<br /></span><span data-lake-id=\"u2bab45bf\" id=\"u2bab45bf\">类似的还有 Underscore.js 和 Lazy.js</span></p><p data-lake-id=\"u35bed021\" id=\"u35bed021\"><br></p><h2 data-lake-id=\"262b0b07\" id=\"262b0b07\"><span data-lake-id=\"uc5f3874a\" id=\"uc5f3874a\">支持</span></h2><p data-lake-id=\"u1d99b6fb\" id=\"u1d99b6fb\"><br></p><p data-lake-id=\"u248ef659\" id=\"u248ef659\"><span data-lake-id=\"u7b010046\" id=\"u7b010046\">chrome 43 往上<br /></span><span data-lake-id=\"u2aa257f8\" id=\"u2aa257f8\">Firefox 38 往上<br /></span><span data-lake-id=\"ub72cee53\" id=\"ub72cee53\">IE 6-11<br /></span><span data-lake-id=\"uabcb989b\" id=\"uabcb989b\">MS Edge<br /></span><span data-lake-id=\"u5993dd06\" id=\"u5993dd06\">Safari 5 往上<br /></span><span data-lake-id=\"ua849d050\" id=\"ua849d050\">（几乎涵盖现在市面上可以见到的大部分浏览器）</span></p><p data-lake-id=\"u543afa82\" id=\"u543afa82\"><br></p><h2 data-lake-id=\"28e2c808\" id=\"28e2c808\"><span data-lake-id=\"ud5e2dd7d\" id=\"ud5e2dd7d\">如何安装</span></h2><p data-lake-id=\"ue4e3b7fb\" id=\"ue4e3b7fb\"><br></p><p data-lake-id=\"u53f85268\" id=\"u53f85268\"><span data-lake-id=\"uce3e5a15\" id=\"uce3e5a15\">浏览器</span></p><p data-lake-id=\"uf62412f8\" id=\"uf62412f8\"><span data-lake-id=\"u30072668\" id=\"u30072668\">NPM<br /></span><span data-lake-id=\"ub33014c8\" id=\"ub33014c8\">$ npm i -g npm$ npm i --save lodash 复制代码<br /></span><span data-lake-id=\"u70be66b6\" id=\"u70be66b6\">先全局安装，在单独安装到项目中<br /></span><span data-lake-id=\"ud58f6751\" id=\"ud58f6751\">node.js<br /></span><span data-lake-id=\"u9bbac5a4\" id=\"u9bbac5a4\">var _ = require('lodash')</span></p><p data-lake-id=\"uc3ed04f9\" id=\"uc3ed04f9\"><br></p><h2 data-lake-id=\"bd16146f\" id=\"bd16146f\"><span data-lake-id=\"u5f9ba8cd\" id=\"u5f9ba8cd\">为什么使用 lodash</span></h2><p data-lake-id=\"uca768c71\" id=\"uca768c71\"><br></p><p data-lake-id=\"ubfda2c9c\" id=\"ubfda2c9c\"><span data-lake-id=\"uf252907d\" id=\"uf252907d\">通过使用数组，数字，对象，字符串等方法，Lodash 使 JavaScript 变得更简单。</span></p><p data-lake-id=\"u94a9fdd0\" id=\"u94a9fdd0\"><br></p><h2 data-lake-id=\"b870eaea\" id=\"b870eaea\"><span data-lake-id=\"u60bca6c9\" id=\"u60bca6c9\">模块组成</span></h2><p data-lake-id=\"u8d1a777a\" id=\"u8d1a777a\"><br></p><p data-lake-id=\"u29084bbf\" id=\"u29084bbf\"><span data-lake-id=\"ub1c6cba1\" id=\"ub1c6cba1\">Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：</span></p><p data-lake-id=\"uf1705fb4\" id=\"uf1705fb4\"><br></p><p data-lake-id=\"u72b50735\" id=\"u72b50735\"><span data-lake-id=\"u5570609c\" id=\"u5570609c\">Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作</span></p><p data-lake-id=\"uf8fb7336\" id=\"uf8fb7336\"><br></p><p data-lake-id=\"ue0addcb5\" id=\"ue0addcb5\"><span data-lake-id=\"ub897833e\" id=\"ub897833e\">Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作</span></p><p data-lake-id=\"u3a3ea82d\" id=\"u3a3ea82d\"><br></p><p data-lake-id=\"u289d17ba\" id=\"u289d17ba\"><span data-lake-id=\"ue66546f0\" id=\"ue66546f0\">Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作</span></p><p data-lake-id=\"u7da80de8\" id=\"u7da80de8\"><br></p><p data-lake-id=\"uff5780c8\" id=\"uff5780c8\"><span data-lake-id=\"u362aa65c\" id=\"u362aa65c\">Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换</span></p><p data-lake-id=\"ub439490a\" id=\"ub439490a\"><br></p><p data-lake-id=\"u82cdc79d\" id=\"u82cdc79d\"><span data-lake-id=\"ubd1fac54\" id=\"ubd1fac54\">Math， 使用与数值类型，常用于执行数学运算</span></p><p data-lake-id=\"ube836449\" id=\"ube836449\"><br></p><p data-lake-id=\"u83703de5\" id=\"u83703de5\"><span data-lake-id=\"ub5462ea7\" id=\"ub5462ea7\">Number， 适用于生成随机数，比较数值与数值区间的关系</span></p><p data-lake-id=\"u12ef461b\" id=\"u12ef461b\"><br></p><p data-lake-id=\"u67d14cab\" id=\"u67d14cab\"><span data-lake-id=\"u89337794\" id=\"u89337794\">Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作</span></p><p data-lake-id=\"u4859c55e\" id=\"u4859c55e\"><br></p><p data-lake-id=\"u47b14f51\" id=\"u47b14f51\"><span data-lake-id=\"ueb775abd\" id=\"ueb775abd\">Seq， 常用于创建链式调用，提高执行性能（惰性计算）</span></p><p data-lake-id=\"u59f479b1\" id=\"u59f479b1\"><br></p><p data-lake-id=\"u7039ce54\" id=\"u7039ce54\"><span data-lake-id=\"uc0b95a04\" id=\"uc0b95a04\">String， 适用于字符串类型</span></p><p data-lake-id=\"ub08ac008\" id=\"ub08ac008\"><br></p><p data-lake-id=\"u9aad8e31\" id=\"u9aad8e31\"><span data-lake-id=\"u80e16817\" id=\"u80e16817\">lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。</span></p><p data-lake-id=\"uc11b2364\" id=\"uc11b2364\"><br></p><p data-lake-id=\"ue5415297\" id=\"ue5415297\"><span data-lake-id=\"u1ce26935\" id=\"u1ce26935\">Fixed Arity，固化参数个数，便于柯里化</span></p><p data-lake-id=\"u1f78d01f\" id=\"u1f78d01f\"><br></p><p data-lake-id=\"uf42a18c5\" id=\"uf42a18c5\"><span data-lake-id=\"u35578542\" id=\"u35578542\">Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合</span></p><p data-lake-id=\"uf31208bc\" id=\"uf31208bc\"><br></p><p data-lake-id=\"ubd002f7b\" id=\"ubd002f7b\"><span data-lake-id=\"u3d6a4507\" id=\"u3d6a4507\">Capped Iteratee Argument， 封装Iteratee参数</span></p><p data-lake-id=\"u6732c499\" id=\"u6732c499\"><br></p><h2 data-lake-id=\"3397fe6c\" id=\"3397fe6c\"><span data-lake-id=\"u087fb500\" id=\"u087fb500\">1、N 次循环</span></h2><p data-lake-id=\"ufc31854f\" id=\"ufc31854f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20console.log('-------%20javascript%20-------')%5Cn%20%2F%2Fjs%E5%8E%9F%E7%94%9F%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%96%B9%E6%B3%95%5Cn%20for(var%20i%20%3D%200%3B%20i%20%3C%205%3B%20i%2B%2B)%7B%5Cn%20%20console.log(i)%3B%5Cn%20%7D%5Cn%20console.log('-------%20lodash%20-------')%5Cn%20%2F%2Fladash%E7%9A%84times%E6%96%B9%E6%B3%95%5Cn%20_.times(5%2Cfunction(a)%7B%5Cn%20%20console.log(a)%5Cn%20%7D)%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2243d8b8d9%22%7D\"></card><p data-lake-id=\"udaf7f10c\" id=\"udaf7f10c\"><br></p><p data-lake-id=\"u4c8dfa3e\" id=\"u4c8dfa3e\"><span data-lake-id=\"u76cc8338\" id=\"u76cc8338\">for 语句是执行循环的不二选择，但在上面代码的使用场景下，_.times()的解决方式更加简洁和易于理解。</span></p><p data-lake-id=\"u3100cad8\" id=\"u3100cad8\"><br></p><h2 data-lake-id=\"51eea445\" id=\"51eea445\"><span data-lake-id=\"uaacf250b\" id=\"uaacf250b\">2、深层查找属性值</span></h2><p data-lake-id=\"ua38073f5\" id=\"ua38073f5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20ownerArr%20%3D%20%5B%7B%5Cn%20%20%20%20%20%20%20%20%5C%22owner%5C%22%3A%20%5C%22Colin%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22pets%5C%22%3A%20%5B%7B%5C%22name%5C%22%3A%20%5C%22dog1%5C%22%7D%2C%20%7B%5C%22name%5C%22%3A%20%5C%22dog2%5C%22%7D%5D%5Cn%20%20%20%20%7D%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22owner%5C%22%3A%20%5C%22John%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22pets%5C%22%3A%20%5B%7B%5C%22name%5C%22%3A%20%5C%22dog3%5C%22%7D%2C%20%7B%5C%22name%5C%22%3A%20%5C%22dog4%5C%22%7D%5D%5Cn%20%20%20%20%7D%5D%3B%5Cn%20%20%20%20var%20jsMap%20%3D%20ownerArr.map(function%20(owner)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20owner.pets%5B0%5D.name%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20console.log('-------%20jsMap%20-------')%3B%5Cn%20%20%20%20console.log(jsMap)%3B%5Cn%5Cn%20%20%20%20var%20lodashMap%20%3D%20_.map(ownerArr%2C%20'pets%5B0%5D.name')%3B%5Cn%20%20%20%20console.log('-------%20lodashMap%20-------')%3B%5Cn%20%20%20%20console.log(lodashMap)%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22bb1c4773%22%7D\"></card><p data-lake-id=\"u078a4d9c\" id=\"u078a4d9c\"><br></p><p data-lake-id=\"ub17c50d4\" id=\"ub17c50d4\"><span data-lake-id=\"u650c2b4c\" id=\"u650c2b4c\">Lodash 中的_.map 方法和 JavaScript 中原生的数组方法非常的像，但它还是有非常有用的升级。 你可以通过一个字符串而不是回调函数来浏览深度嵌套的对象属性。</span></p><p data-lake-id=\"u644df982\" id=\"u644df982\"><br></p><h2 data-lake-id=\"edcab6f6\" id=\"edcab6f6\"><span data-lake-id=\"u912f4d70\" id=\"u912f4d70\">3、深克隆对象</span></h2><p data-lake-id=\"u3a357769\" id=\"u3a357769\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20objA%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87%5C%22%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20var%20objB%20%3D%20_.cloneDeep(objA)%3B%5Cn%20%20%20%20console.log(objA)%3B%5Cn%20%20%20%20console.log(objB)%3B%5Cn%20%20%20%20console.log(objA%20%3D%3D%3D%20objB)%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2295feab07%22%7D\"></card><p data-lake-id=\"u37dfca3e\" id=\"u37dfca3e\"><br></p><p data-lake-id=\"uab51efa3\" id=\"uab51efa3\"><span data-lake-id=\"u5206a9b0\" id=\"u5206a9b0\">深度克隆 JavaScript 对象是困难的，并且也没有什么简单的解决方案。你可以使用原生的解决方案:JSON.parse(JSON.stringify(objectToClone))  进行深度克隆。但是，这种方案仅在对象内部没有方法的时候才可行。</span></p><p data-lake-id=\"ud5652103\" id=\"ud5652103\"><br></p><h2 data-lake-id=\"77726af0\" id=\"77726af0\"><span data-lake-id=\"u4683e56a\" id=\"u4683e56a\">4、在指定范围内获取一个随机值</span></h2><p data-lake-id=\"u755855f2\" id=\"u755855f2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20function%20getRandomNumber(min%2C%20max)%7B%5Cn%20%20%20%20%20%20%20%20return%20Math.floor(Math.random()%20*%20(max%20-%20min))%20%2B%20min%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20console.log(getRandomNumber(15%2C%2020))%3B%5Cn%5Cn%20%20%20%20console.log(_.random(15%2C%2020))%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a68a0269%22%7D\"></card><p data-lake-id=\"ueca74aac\" id=\"ueca74aac\"><br></p><p data-lake-id=\"u60834a61\" id=\"u60834a61\"><span data-lake-id=\"u3e7d4933\" id=\"u3e7d4933\">Lodash 中的  </span><em><span data-lake-id=\"u0aea1d7c\" id=\"u0aea1d7c\">.random  方法要比上面的原生方法更强大与灵活。你可以只传入一个参数作为最大值， 你也可以指定返回的结果为浮点数</span></em><span data-lake-id=\"ue034471c\" id=\"ue034471c\">.random(15,20,true)</span></p><p data-lake-id=\"u510b4597\" id=\"u510b4597\"><br></p><h2 data-lake-id=\"8e39c7be\" id=\"8e39c7be\"><span data-lake-id=\"ucbf2c762\" id=\"ucbf2c762\">5、扩展对象</span></h2><p data-lake-id=\"u13f7199c\" id=\"u13f7199c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20Object.prototype.extend%20%3D%20function(obj)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(var%20i%20in%20obj)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(obj.hasOwnProperty(i))%20%7B%20%20%20%20%2F%2F%E5%88%A4%E6%96%AD%E8%A2%AB%E6%89%A9%E5%B1%95%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E6%B2%A1%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%EF%BC%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this%5Bi%5D%20%3D%20obj%5Bi%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%3B%5Cn%5Cn%20%20%20%20var%20objA%20%3D%20%7B%5C%22name%5C%22%3A%20%5C%22%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87%5C%22%2C%20%5C%22car%5C%22%3A%20%5C%22%E5%AE%9D%E9%A9%AC%5C%22%7D%3B%5Cn%20%20%20%20var%20objB%20%3D%20%7B%5C%22name%5C%22%3A%20%5C%22%E6%9F%B4%E7%A1%95%5C%22%2C%20%5C%22loveEat%5C%22%3A%20true%7D%3B%5Cn%5Cn%20%20%20%20objA.extend(objB)%3B%5Cn%20%20%20%20console.log(objA)%3B%5Cn%5Cn%20%20%20%20console.log(_.assign(objA%2C%20objB))%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22832fdb9b%22%7D\"></card><p data-lake-id=\"u9b138622\" id=\"u9b138622\"><br></p><p data-lake-id=\"u029c726d\" id=\"u029c726d\"><span data-lake-id=\"u20088931\" id=\"u20088931\">_.assign  方法也可以接收多个参数对象进行扩展，都是往后面的对象上合并</span></p><p data-lake-id=\"ufcfaa0bb\" id=\"ufcfaa0bb\"><br></p><h2 data-lake-id=\"878b86ae\" id=\"878b86ae\"><span data-lake-id=\"u6aea2752\" id=\"u6aea2752\">6、从列表中随机的选择列表项</span></h2><p data-lake-id=\"u2c1f417d\" id=\"u2c1f417d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20smartTeam%20%3D%20%5B%5C%22%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87%5C%22%2C%20%5C%22%E6%9D%A8%E6%B5%B7%E6%9C%88%5C%22%2C%20%5C%22%E6%9F%B4%E7%A1%95%5C%22%2C%20%5C%22%E5%B8%88%E8%B4%9D%E8%B4%9D%5C%22%5D%3B%5Cn%5Cn%20%20%20%20function%20randomSmarter(smartTeam)%7B%5Cn%20%20%20%20%20%20%20%20var%20index%20%3D%20Math.floor(Math.random()%20*%20smartTeam.length)%3B%5Cn%20%20%20%20%20%20%20%20return%20smartTeam%5Bindex%5D%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20console.log(randomSmarter(smartTeam))%3B%5Cn%5Cn%20%20%20%20%2F%2F%20Lodash%5Cn%20%20%20%20console.log(_.sample(smartTeam))%3B%5Cn%20%20%20%20console.log(_.sampleSize(smartTeam%2C2))%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b297124c%22%7D\"></card><p data-lake-id=\"u8869a65c\" id=\"u8869a65c\"><br></p><p data-lake-id=\"u89818037\" id=\"u89818037\"><span data-lake-id=\"u092a998b\" id=\"u092a998b\">此外，你也可以指定随机返回元素的个数_.sampleSize(smartTeam,n)，n 为需要返回的元素个数</span></p><p data-lake-id=\"u9cdbe146\" id=\"u9cdbe146\"><br></p><h2 data-lake-id=\"ba6a97e3\" id=\"ba6a97e3\"><span data-lake-id=\"u605239a9\" id=\"u605239a9\">7、判断对象中是否含有某元素</span></h2><p data-lake-id=\"u7feeb56e\" id=\"u7feeb56e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20smartPerson%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20'name'%3A%20'%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20'gender'%3A%20'male'%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20smartTeam%20%3D%20%5B%5C%22%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87%5C%22%2C%20%5C%22%E6%9D%A8%E6%B5%B7%E6%9C%88%5C%22%2C%20%5C%22%E6%9F%B4%E7%A1%95%5C%22%2C%20%5C%22%E5%B8%88%E8%B4%9D%E8%B4%9D%5C%22%5D%3B%5Cn%5Cn%5Cn%20%20%20%20console.log(_.includes(smartPerson%2C%20'%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87'))%3B%5Cn%20%20%20%20console.log(_.includes(smartTeam%2C%20'%E6%9D%A8%E6%B5%B7%E6%9C%88'))%3B%5Cn%20%20%20%20console.log(_.includes(smartTeam%2C%20'%E6%9D%A8%E6%B5%B7%E6%9C%88'%2C2))%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2258e948e4%22%7D\"></card><p data-lake-id=\"u323d4175\" id=\"u323d4175\"><br></p><p data-lake-id=\"u63b29ec4\" id=\"u63b29ec4\"><span data-lake-id=\"uccd261a2\" id=\"uccd261a2\">_.includes()第一个参数是需要查询的对象，第二个参数是需要查询的元素，第三个参数是开始查询的下标</span></p><p data-lake-id=\"u1037364f\" id=\"u1037364f\"><br></p><h2 data-lake-id=\"7c6ff51e\" id=\"7c6ff51e\"><span data-lake-id=\"ufcd9cdd9\" id=\"ufcd9cdd9\">8、遍历循环</span></h2><p data-lake-id=\"u48af9145\" id=\"u48af9145\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20_(%5B1%2C%202%5D).forEach(function(value)%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(value)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20_.forEach(%5B1%2C%203%5D%20%2C%20function(value%2C%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(key%2Cvalue)%3B%5Cn%20%20%20%20%7D)%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2288ae4a08%22%7D\"></card><p data-lake-id=\"u4809374e\" id=\"u4809374e\"><br></p><p data-lake-id=\"ufc9fce84\" id=\"ufc9fce84\"><span data-lake-id=\"uc7c0fa8b\" id=\"uc7c0fa8b\">这两种方法都会分别输出‘1’和‘2’，不仅是数组，对象也可以，数组的是后 key 是元素的下标，当传入的是对象的时候，key 是属性，value 是值</span></p><p data-lake-id=\"u8b9cd7ed\" id=\"u8b9cd7ed\"><br></p><h2 data-lake-id=\"b0e332ed\" id=\"b0e332ed\"><span data-lake-id=\"u88b88808\" id=\"u88b88808\">9、遍历循环执行某个方法</span></h2><p data-lake-id=\"u64b010b5\" id=\"u64b010b5\"><br></p><p data-lake-id=\"u22f354fd\" id=\"u22f354fd\"><span data-lake-id=\"ub4ecdd9d\" id=\"ub4ecdd9d\">_.map()</span></p><p data-lake-id=\"u8283e02d\" id=\"u8283e02d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20function%20square(n)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20n%20*%20n%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20console.log(_.map(%5B4%2C%208%5D%2C%20square))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B16%2C%2064%5D%5Cn%5Cn%20%20%20%20console.log(_.map(%7B%20'a'%3A%204%2C%20'b'%3A%208%20%7D%2C%20square))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B16%2C%2064%5D%20(iteration%20order%20is%20not%20guaranteed)%5Cn%5Cn%20%20%20%20var%20users%20%3D%20%5B%5Cn%20%20%20%20%20%20%20%20%7B%20'user'%3A%20'barney'%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%20'user'%3A%20'fred'%20%7D%5Cn%20%20%20%20%5D%3B%5Cn%5Cn%20%20%20%20%2F%2F%20The%20%60_.property%60%20iteratee%20shorthand.%5Cn%20%20%20%20console.log(_.map(users%2C%20'user'))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B'barney'%2C%20'fred'%5D%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ae490277%22%7D\"></card><p data-lake-id=\"u7d4ee24d\" id=\"u7d4ee24d\"><br></p><h2 data-lake-id=\"d0403165\" id=\"d0403165\"><span data-lake-id=\"uaee6d32a\" id=\"uaee6d32a\">10、检验值是否为空</span></h2><p data-lake-id=\"u3113066d\" id=\"u3113066d\"><br></p><p data-lake-id=\"ue0042752\" id=\"ue0042752\"><span data-lake-id=\"u82c35327\" id=\"u82c35327\">_.isEmpty()</span></p><p data-lake-id=\"u7813bd39\" id=\"u7813bd39\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20_.isEmpty(null)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20true%5Cn%5Cn%20%20%20%20_.isEmpty(true)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20true%5Cn%5Cn%20%20%20%20_.isEmpty(1)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20true%5Cn%5Cn%20%20%20%20_.isEmpty(%5B1%2C%202%2C%203%5D)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20false%5Cn%5Cn%20%20%20%20_.isEmpty(%7B%20'a'%3A%201%20%7D)%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20false%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225577c6a6%22%7D\"></card><p data-lake-id=\"uc9df8a44\" id=\"uc9df8a44\"><br></p><h2 data-lake-id=\"56b0d4be\" id=\"56b0d4be\"><span data-lake-id=\"u58b09690\" id=\"u58b09690\">11、查找属性</span></h2><p data-lake-id=\"u4d89677c\" id=\"u4d89677c\"><br></p><p data-lake-id=\"uce4dec73\" id=\"uce4dec73\"><em><span data-lake-id=\"uc48e9842\" id=\"uc48e9842\">.find()、</span></em><span data-lake-id=\"u824cb235\" id=\"u824cb235\">.filter()、_.reject()</span></p><p data-lake-id=\"uf8bcd0c8\" id=\"uf8bcd0c8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20users%20%3D%20%5B%5Cn%20%20%20%20%20%20%20%20%7B'user'%3A%20'barney'%2C%20'age'%3A%2036%2C%20'active'%3A%20true%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B'user'%3A%20'fred'%2C%20'age'%3A%2040%2C%20'active'%3A%20false%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B'user'%3A%20'pebbles'%2C%20'age'%3A%201%2C%20'active'%3A%20true%7D%5Cn%20%20%20%20%5D%3B%5Cn%5Cn%20%20%20%20console.log(_.find(users%2C%20function%20(o)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20o.age%20%3C%2040%3B%5Cn%20%20%20%20%7D))%3B%5Cn%20%20%20%20console.log(_.find(users%2C%20%7B'age'%3A%201%2C%20'active'%3A%20true%7D))%3B%5Cn%20%20%20%20console.log(_.filter(users%2C%20%7B'age'%3A%201%2C%20'active'%3A%20true%7D))%3B%5Cn%20%20%20%20console.log(_.find(users%2C%20%5B'active'%2C%20false%5D))%3B%5Cn%20%20%20%20console.log(_.filter(users%2C%20%5B'active'%2C%20false%5D))%3B%5Cn%20%20%20%20console.log(_.find(users%2C%20'active'))%3B%5Cn%20%20%20%20console.log(_.filter(users%2C%20'active'))%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d082f092%22%7D\"></card><p data-lake-id=\"uaf62523b\" id=\"uaf62523b\"><br></p><p data-lake-id=\"ud53e1d80\" id=\"ud53e1d80\"><em><span data-lake-id=\"u308e6050\" id=\"u308e6050\">.find()第一个返回真值的第一个元素。</span></em><span data-lake-id=\"ua2fc14ec\" id=\"ua2fc14ec\">.filter()返回真值的所有元素的数组。 </span><em><span data-lake-id=\"u5435355b\" id=\"u5435355b\">.reject()是</span></em><span data-lake-id=\"u03eb013c\" id=\"u03eb013c\">.filter 的反向方法，不返回真值的（集合）元素</span></p><p data-lake-id=\"u43c88e2c\" id=\"u43c88e2c\"><br></p><h2 data-lake-id=\"8a0e603a\" id=\"8a0e603a\"><span data-lake-id=\"uf54215c1\" id=\"uf54215c1\">12、数组去重</span></h2><p data-lake-id=\"ub0d931f9\" id=\"ub0d931f9\"><br></p><p data-lake-id=\"u79789160\" id=\"u79789160\"><span data-lake-id=\"ua03aa6f6\" id=\"ua03aa6f6\">_.uniq(array)创建一个去重后的 array 数组副本。参数  array (Array): 要检查的数组。<br /></span><span data-lake-id=\"ucbcc9d90\" id=\"ucbcc9d90\">返回新的去重后的数组</span></p><p data-lake-id=\"ub6c9ca3d\" id=\"ub6c9ca3d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20var%20arr1%20%3D%20%5B2%2C%201%2C%202%5D%3B%5Cn%5Cn%20%20%20%20var%20arr2%20%3D%20_.uniq(arr1)%3B%5Cn%5Cn%5Cn%20%20%20%20function%20unique(arr)%20%7B%5Cn%20%20%20%20%20%20%20%20var%20newArr%20%3D%20%5B%5D%3B%5Cn%20%20%20%20%20%20%20%20for%20(var%20i%20%3D%200%3B%20i%20%3C%20arr.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(newArr.indexOf(arr%5Bi%5D)%20%3D%3D%20-1)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20newArr.push(arr%5Bi%5D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20newArr%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20console.log(arr1)%3B%5Cn%20%20%20%20console.log(arr2)%3B%5Cn%20%20%20%20console.log(unique(arr1))%3B%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%228d5a4fe1%22%7D\"></card><p data-lake-id=\"u798d5969\" id=\"u798d5969\"><br></p><p data-lake-id=\"uc714b681\" id=\"uc714b681\"><em><span data-lake-id=\"u86081abf\" id=\"u86081abf\">.uniqBy(array,[iteratee=</span></em><span data-lake-id=\"u00b84dc1\" id=\"u00b84dc1\">.identity])这个方法类似  _.uniq，除了它接受一个  iteratee（迭代函数），调用每一个数组（array）的每个元素以产生唯一性计算的标准。iteratee 调用时会传入一个参数：(value)。</span></p><p data-lake-id=\"udfb0c584\" id=\"udfb0c584\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20console.log(_.uniqBy(%5B2.1%2C%201.2%2C%202.3%5D%2C%20Math.floor))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B2.1%2C%201.2%5D%5Cn%5Cn%20%20%20%20console.log(_.uniqBy(%5B%7B%20'x'%3A%201%20%7D%2C%20%7B%20'x'%3A%202%20%7D%2C%20%7B%20'x'%3A%201%20%7D%5D%2C%20'x'))%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20%5B%7B%20'x'%3A%201%20%7D%2C%20%7B%20'x'%3A%202%20%7D%5D%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b84eba5f%22%7D\"></card><p data-lake-id=\"u937f7fc6\" id=\"u937f7fc6\"><br></p><p data-lake-id=\"u7f0fa623\" id=\"u7f0fa623\"><span data-lake-id=\"ue6cbb671\" id=\"ue6cbb671\">Math.floor 只是向下取整，去重，并没有改变原有的数组，所以还是 2.1 和 1.2，不是 2 和 1。</span></p><p data-lake-id=\"u4f6ba292\" id=\"u4f6ba292\"><br></p><h2 data-lake-id=\"53d875bb\" id=\"53d875bb\"><span data-lake-id=\"u441f6840\" id=\"u441f6840\">13、模板插入</span></h2><p data-lake-id=\"ud2fd1992\" id=\"ud2fd1992\"><br></p><p data-lake-id=\"u6661fafc\" id=\"u6661fafc\"><span data-lake-id=\"uef54de41\" id=\"uef54de41\">_.template([string=''], [options={}])</span></p><p data-lake-id=\"ud1dea0e8\" id=\"ud1dea0e8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Cdiv%20id%3D%5C%22container%5C%22%3E%3C%2Fdiv%3E%5Cn%3Cscript%20src%3D%5C%22https%3A%2F%2Fcdn.bootcss.com%2Flodash.js%2F4.17.4%2Flodash.min.js%5C%22%3E%3C%2Fscript%3E%3Cscript%20src%3D%5C%22https%3A%2F%2Fcdn.bootcss.com%2Fjquery%2F3.2.1%2Fjquery.min.js%5C%22%3E%3C%2Fscript%3E%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20%24(function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20var%20data%20%3D%20%5B%7Bname%3A%20'%E6%88%88%E5%BE%B7%E6%96%AF%E6%96%87'%7D%2C%20%7Bname%3A%20'%E6%9F%B4%E7%A1%95'%7D%2C%20%7Bname%3A%20'%E6%9D%A8%E6%B5%B7%E6%9C%88'%7D%5D%3B%5Cn%20%20%20%20%20%20%20%20%24('%23container').html(%20_.template(%24('%23tpl').html()%2C%20data)%20)%5Cn%20%20%20%20%7D)%3B%3C%2Fscript%3E%3Cscript%20type%3D%5C%22text%2Ftemplate%5C%22%20id%3D%5C%22tpl%5C%22%3E%5Cn%20%20%20%20%3C%25%20_.each(obj%2Cfunction(e%2Ci)%7B%20%25%3E%5Cn%20%20%20%20%20%20%20%20%3Cul%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%3E%3C%25%3D%20e.name%20%25%3E%3C%25%3D%20i%20%25%3E%3C%2Fli%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Ful%3E%5Cn%20%20%20%20%3C%25%7D)%25%3E%3C%2Fscript%3E%5Cn%20%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E4%B8%AA%3Cscript%3E%E6%A0%87%E7%AD%BE%E7%9A%84type%E6%98%AFtext%2Ftemplate%EF%BC%8C%E7%B1%BB%E4%BC%BC%E4%BA%8Ereact%E7%9A%84JSX%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%8C%E5%B0%B1%E6%98%AFjs%E5%92%8Chtml%E5%8F%AF%E4%BB%A5%E6%B7%B7%E5%86%99%EF%BC%8C%E7%94%A8%3C%25%20%25%3E%E6%8B%AC%E8%B5%B7%E6%9D%A5%E7%9A%84%E5%B0%B1%E6%98%AFjs%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%86%99%E7%9A%84%E5%B0%B1%E6%98%AFhtml%E7%9A%84%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%9C%89%E7%B1%BB%E4%BC%BCMVC%E6%A1%86%E6%9E%B6%E7%9A%84%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%8C%E5%9C%A8%3C%25%3D%20%25%3E%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E5%88%B0%E6%95%B0%E6%8D%AE%E5%91%88%E7%8E%B0%EF%BC%88%E7%BA%AF%E5%B1%9E%E4%B8%AA%E4%BA%BA%E8%A7%81%E8%A7%A3%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E7%90%86%E8%A7%A3%E7%9A%84%E5%AF%B9%E4%B8%8D%E5%AF%B9%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225731ca7d%22%7D\"></card>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-22T05:31:44.000Z",
    "deleted_at": null,
    "created_at": "2021-12-22T05:28:17.000Z",
    "updated_at": "2021-12-22T05:31:44.000Z",
    "published_at": "2021-12-22T05:31:44.000Z",
    "first_published_at": "2021-12-22T05:28:43.000Z",
    "word_count": 2004,
    "cover": null,
    "description": "简介Lodash 是一个著名的 javascript 原生库，不需要引入其他第三方依赖。是一个意在提高开发者效率,提高 JS 原生方法性能的 JS 库。简单的说就是，很多方法 lodash 已经帮你写好了，直接调用就行，不用自己费尽心思去写了，而且可以统一方法的一致性。Lodash 使用了一个...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 63204934,
    "slug": "ggxybc",
    "title": "Event Loop 事件循环",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-22T05:31:44.747Z",
      "updated_at": "2021-12-22T05:31:44.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-22T05:28:17.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-22T05:28:17.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"9fc3d304\"></a>\n# Event Loop\n\n\n<a name=\"98de9c71\"></a>\n## 单线程\n\n<br />JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。<br />\n<br />JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<br />\n<br />所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。<br />\n<br />为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。<br />\n\n<a name=\"0b387bc7\"></a>\n## 任务队列\n\n<br />单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br />\n<br />如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。<br />\n<br />JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。<br />\n<br />于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有\"任务队列\"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<br />\n<br />具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）<br />\n\n> （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n\n（2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n\n（3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n\n（4）主线程不断重复上面的第三步。\n\n\n\n<a name=\"1a07985f\"></a>\n## 事件和回调函数\n\n<br />\"任务队列\"是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在\"任务队列\"中添加一个事件，表示相关的异步任务可以进入\"执行栈\"了。主线程读取\"任务队列\"，就是读取里面有哪些事件。<br />\n<br />\"任务队列\"中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入\"任务队列\"，等待主线程读取。<br />\n<br />所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。<br />\n<br />\"任务队列\"是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，\"任务队列\"上第一位的事件就自动进入主线程。但是，由于存在后文提到的\"定时器\"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。<br />\n\n<a name=\"f56cc53b\"></a>\n## Event Loop是什么\n\n<br />**event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。**<br />\n\n- 浏览器的Event Loop是在[html5的规范](https://www.w3.org/TR/html5/webappapis.html#event-loops)中明确定义。\n- NodeJS的Event Loop是基于libuv实现的。可以参考Node的[官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)以及libuv的[官方文档](http://docs.libuv.org/en/v1.x/design.html)。\n- libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。\n\n\n\n<a name=\"f4c82775\"></a>\n## 宏队列和微队列\n\n<br />**宏队列，macrotask，也叫tasks。** 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：<br />\n\n- setTimeout\n- setInterval\n- setImmediate (Node独有)\n- requestAnimationFrame (浏览器独有)\n- I/O\n- UI rendering (浏览器独有)\n\n\n<br />**微队列，microtask，也叫jobs**。 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：<br />\n\n- process.nextTick (Node独有)\n- Promise\n- Object.observe\n- MutationObserver\n\n\n<br />（注：这里只针对浏览器和NodeJS）<br />\n\n<a name=\"7a9e61cd\"></a>\n## 浏览器的Event Loop\n\n<br />我们先来看一张图，再看完这篇文章后，请返回来再仔细看一下这张图，相信你会有更深的理解。<br />\n<br />![2021-03-24_Event Loop_1.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150802231-e69d822f-b5db-4e70-bda3-bb3b068cf0b2.png#clientId=u3788e183-4257-4&from=ui&id=u78e0afde&margin=%5Bobject%20Object%5D&name=2021-03-24_Event%20Loop_1.png&originHeight=732&originWidth=694&originalType=binary&ratio=1&size=48117&status=done&style=none&taskId=ue9a67d43-2d75-4de6-a370-a14f7caa447)<br />\n<br />这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：<br />\n\n1. 执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；\n1. 全局Script代码执行完毕后，调用栈Stack会清空；\n1. 从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；\n1. 继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。**注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；**\n1. microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；\n1. 取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；\n1. 执行完毕后，调用栈Stack为空；\n1. 重复第3-7个步骤；\n1. 重复第3-7个步骤；\n1. ...\n\n\n<br />**可以看到，这就是浏览器的事件循环Event Loop**<br />\n<br />这里归纳3个重点：<br />\n\n1. 宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；\n1. 微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；\n1. 图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。\n\n\n<br />好了，概念性的东西就这么多，来看几个示例代码，测试一下你是否掌握了:<br />\n\n```javascript\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\n\nsetTimeout(() => {\n  console.log(6);\n})\n\nconsole.log(7);\n```\n\n<br />这里结果会是什么呢？运用上面了解到的知识，先自己做一下试试看。<br />\n\n```html\n// 正确答案\n1\n4\n7\n5\n2\n3\n6\n```\n\n<br />你答对了吗？<br />\n<br />我们来分析一下整个流程：<br />\n\n- 执行全局Script代码\n\n\n\n<a name=\"6f4a225b\"></a>\n### Step 1\n\n\n```javascript\nconsole.log(1)\n```\n\n<br />Stack Queue: [console]<br />\n<br />Macrotask Queue: []<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1\n\n\n\n<a name=\"e31ad128\"></a>\n### Step 2\n\n\n```javascript\nsetTimeout(() => {\n  // 这个回调函数叫做callback1，setTimeout属于macrotask，所以放到macrotask queue中\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n```\n\n<br />Stack Queue: [setTimeout]<br />\n<br />Macrotask Queue: [callback1]<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1\n\n\n\n<a name=\"2d5ce426\"></a>\n### Step 3\n\n\n```javascript\nnew Promise((resolve, reject) => {\n  // 注意，这里是同步执行的\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  // 这个回调函数叫做callback2，promise属于microtask，所以放到microtask queue中\n  console.log(data);\n})\n```\n\n<br />Stack Queue: [promise]<br />\n<br />Macrotask Queue: [callback1]<br />\n<br />Microtask Queue: [callback2]<br />\n\n> 打印结果：<br />1 <br />4\n\n\n\n<a name=\"7882a4b5\"></a>\n### Step 4\n\n\n```javascript\nsetTimeout(() => {\n  // 这个回调函数叫做callback3，setTimeout属于macrotask，所以放到macrotask queue中\n  console.log(6);\n})\n```\n\n<br />Stack Queue: [setTimeout]<br />\n<br />Macrotask Queue: [callback1, callback3]<br />\n<br />Microtask Queue: [callback2]<br />\n\n> 打印结果：<br />1 <br />4\n\n\n\n<a name=\"0011237e\"></a>\n### Step 5\n\n\n```javascript\nconsole.log(7)\n```\n\n<br />Stack Queue: [console]<br />\n<br />Macrotask Queue: [callback1, callback3]<br />\n<br />Microtask Queue: [callback2]<br />\n\n> 打印结果：<br />1 <br />4 <br />7\n\n\n\n- 全局Script代码执行完了，进入下一个步骤，从microtask queue中依次取出任务执行，直到microtask queue队列为空。\n\n\n\n<a name=\"f5ce4d42\"></a>\n### Step 6\n\n\n```javascript\nconsole.log(data)       // 这里data是Promise的决议值5\n```\n\n<br />Stack Queue: [callback2]<br />\n<br />Macrotask Queue: [callback1, callback3]<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5\n\n\n\n- 这里microtask queue中只有一个任务，执行完后开始从宏任务队列macrotask queue中取位于队首的任务执行\n\n\n\n<a name=\"805e47ec\"></a>\n### Step 7\n\n\n```javascript\nconsole.log(2)\n```\n\n<br />Stack Queue: [callback1]<br />\n<br />Macrotask Queue: [callback3]<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5 <br />2\n\n\n<br />但是，执行callback1的时候又遇到了另一个Promise，Promise异步执行完后在microtask queue中又注册了一个callback4回调函数<br />\n\n<a name=\"d60d761a\"></a>\n### Step 8\n\n\n```javascript\nPromise.resolve().then(() => {\n  // 这个回调函数叫做callback4，promise属于microtask，所以放到microtask queue中\n  console.log(3)\n});\n```\n\n<br />Stack Queue: [promise]<br />\n<br />Macrotask v: [callback3]<br />\n<br />Microtask Queue: [callback4]<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5 <br />2\n\n\n\n- 取出一个宏任务macrotask执行完毕，然后再去微任务队列microtask queue中依次取出执行\n\n\n\n<a name=\"54c8107e\"></a>\n### Step 9\n\n\n```javascript\nconsole.log(3)\n```\n\n<br />Stack Queue: [callback4]<br />\n<br />Macrotask Queue: [callback3]<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5 <br />2  <br />3\n\n\n\n- 微任务队列全部执行完，再去宏任务队列中取第一个任务执行\n\n\n\n<a name=\"b9598260\"></a>\n### Step 10\n\n\n```javascript\nconsole.log(6)\n```\n\n<br />Stack Queue: [callback3]<br />\n<br />Macrotask Queue: []<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5 <br />2 <br />3 <br />6\n\n\n\n- 以上，全部执行完后，Stack Queue为空，Macrotask Queue为空，Micro Queue为空\n\n\n<br />Stack Queue: []<br />\n<br />Macrotask Queue: []<br />\n<br />Microtask Queue: []<br />\n<br />因为是第一个例子，所以这里分析的比较详细，大家仔细看一下，接下来我们再来一个例子：<br />\n\n```javascript\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n  \n  Promise.resolve().then(() => {\n    console.log(6)\n  }).then(() => {\n    console.log(7)\n    \n    setTimeout(() => {\n      console.log(8)\n    }, 0);\n  });\n})\n\nsetTimeout(() => {\n  console.log(9);\n})\n\nconsole.log(10);\n```\n\n<br />最终输出结果是什么呢？参考前面的例子，好好想一想......<br />\n\n```html\n// 正确答案\n1\n4\n10\n5\n6\n7\n2\n3\n9\n8\n```\n\n<br />相信大家都答对了，这里的关键在前面已经提过：<br />\n<br />**在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。**<br />\n<br />注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。<br />\n<br />浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。<br />\n\n<a name=\"475884cf\"></a>\n## NodeJS中的Event Loop\n\n\n<a name=\"libuv\"></a>\n### libuv\n\n<br />先来看一张libuv的结构图：<br />\n<br />![2021-03-24_Event Loop_2.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150869182-c542d656-f43b-4b7b-ab76-07395f20db36.png#clientId=u3788e183-4257-4&from=ui&id=uc3ec049c&margin=%5Bobject%20Object%5D&name=2021-03-24_Event%20Loop_2.png&originHeight=289&originWidth=732&originalType=binary&ratio=1&size=141080&status=done&style=none&taskId=uc5809e64-e5f8-47c8-bed4-c2612d7a9af)<br />\n\n<a name=\"87a7af42\"></a>\n### NodeJS中的宏队列和微队列\n\n<br />NodeJS的Event Loop中，执行宏队列的回调任务有**6个阶段**，如下图：<br />![2021-03-24_Event Loop_3.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150881821-daf37c3f-7f75-4b45-a655-133cf582187e.png#clientId=u3788e183-4257-4&from=ui&id=u712b2992&margin=%5Bobject%20Object%5D&name=2021-03-24_Event%20Loop_3.png&originHeight=339&originWidth=670&originalType=binary&ratio=1&size=8419&status=done&style=none&taskId=u9be5125f-53de-487d-84c8-cf78bb786fa)<br />\n<br />\n<br />各个阶段执行的任务如下：<br />\n\n- **timers阶段**：这个阶段执行setTimeout和setInterval预定的callback\n- **I/O callback阶段**：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks\n- **idle, prepare阶段**：仅node内部使用\n- **poll阶段**：获取新的I/O事件，适当的条件下node将阻塞在这里\n- **check阶段**：执行setImmediate()设定的callbacks\n- **close callbacks阶段**：执行socket.on('close', ....)这些callbacks\n\n\n\n<a name=\"6edfbed4\"></a>\n#### NodeJS中宏队列主要有4个\n\n<br />由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：<br />\n\n1. Timers Queue\n1. IO Callbacks Queue\n1. Check Queue\n1. Close Callbacks Queue\n\n\n<br />这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。<br />\n\n<a name=\"180fc5b8\"></a>\n#### NodeJS中微队列主要有2个\n\n\n1. Next Tick Queue：是放置process.nextTick(callback)的回调任务的\n1. Other Micro Queue：放置其他microtask，比如Promise等\n\n\n<br />在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。<br />\n<br />具体可以通过下图加深一下理解：<br />\n<br />![2021-03-24_Event Loop_4.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150892410-a170dd7d-c70b-42b6-bf90-5ac6f1a9fce8.png#clientId=u3788e183-4257-4&from=ui&id=u32cf3abc&margin=%5Bobject%20Object%5D&name=2021-03-24_Event%20Loop_4.png&originHeight=405&originWidth=732&originalType=binary&ratio=1&size=54689&status=done&style=none&taskId=u05d620c9-3659-46ae-b493-fe98d5ca38a)<br />\n<br />大体解释一下NodeJS的Event Loop过程：<br />\n\n1. 执行全局Script的同步代码\n1. 执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务\n1. 开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2\n1. Timers Queue -> 步骤2 -> I/O Queue -> 步骤2 -> Check Queue -> 步骤2 -> Close Callback Queue -> 步骤2 -> Timers Queue ......\n1. 这就是Node的Event Loop\n",
    "body_draft": "<a name=\"9fc3d304\"></a>\n# Event Loop\n\n\n<a name=\"98de9c71\"></a>\n## 单线程\n\n<br />JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。<br />\n<br />JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<br />\n<br />所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。<br />\n<br />为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。<br />\n\n<a name=\"0b387bc7\"></a>\n## 任务队列\n\n<br />单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br />\n<br />如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。<br />\n<br />JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。<br />\n<br />于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有\"任务队列\"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<br />\n<br />具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）<br />\n\n> （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n\n（2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n\n（3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n\n（4）主线程不断重复上面的第三步。\n\n\n\n<a name=\"1a07985f\"></a>\n## 事件和回调函数\n\n<br />\"任务队列\"是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在\"任务队列\"中添加一个事件，表示相关的异步任务可以进入\"执行栈\"了。主线程读取\"任务队列\"，就是读取里面有哪些事件。<br />\n<br />\"任务队列\"中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入\"任务队列\"，等待主线程读取。<br />\n<br />所谓\"回调函数\"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。<br />\n<br />\"任务队列\"是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，\"任务队列\"上第一位的事件就自动进入主线程。但是，由于存在后文提到的\"定时器\"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。<br />\n\n<a name=\"f56cc53b\"></a>\n## Event Loop是什么\n\n<br />**event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。**<br />\n\n- 浏览器的Event Loop是在[html5的规范](https://www.w3.org/TR/html5/webappapis.html#event-loops)中明确定义。\n- NodeJS的Event Loop是基于libuv实现的。可以参考Node的[官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)以及libuv的[官方文档](http://docs.libuv.org/en/v1.x/design.html)。\n- libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。\n\n\n\n<a name=\"f4c82775\"></a>\n## 宏队列和微队列\n\n<br />**宏队列，macrotask，也叫tasks。** 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：<br />\n\n- setTimeout\n- setInterval\n- setImmediate (Node独有)\n- requestAnimationFrame (浏览器独有)\n- I/O\n- UI rendering (浏览器独有)\n\n\n<br />**微队列，microtask，也叫jobs**。 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：<br />\n\n- process.nextTick (Node独有)\n- Promise\n- Object.observe\n- MutationObserver\n\n\n<br />（注：这里只针对浏览器和NodeJS）<br />\n\n<a name=\"7a9e61cd\"></a>\n## 浏览器的Event Loop\n\n<br />我们先来看一张图，再看完这篇文章后，请返回来再仔细看一下这张图，相信你会有更深的理解。<br />\n<br />![2021-03-24_Event Loop_1.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150802231-e69d822f-b5db-4e70-bda3-bb3b068cf0b2.png#clientId=u3788e183-4257-4&from=ui&id=u78e0afde&margin=%5Bobject%20Object%5D&name=2021-03-24_Event%20Loop_1.png&originHeight=732&originWidth=694&originalType=binary&ratio=1&size=48117&status=done&style=none&taskId=ue9a67d43-2d75-4de6-a370-a14f7caa447)<br />\n<br />这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：<br />\n\n1. 执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；\n1. 全局Script代码执行完毕后，调用栈Stack会清空；\n1. 从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；\n1. 继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。**注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；**\n1. microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；\n1. 取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；\n1. 执行完毕后，调用栈Stack为空；\n1. 重复第3-7个步骤；\n1. 重复第3-7个步骤；\n1. ...\n\n\n<br />**可以看到，这就是浏览器的事件循环Event Loop**<br />\n<br />这里归纳3个重点：<br />\n\n1. 宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；\n1. 微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；\n1. 图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。\n\n\n<br />好了，概念性的东西就这么多，来看几个示例代码，测试一下你是否掌握了:<br />\n\n```javascript\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\n\nsetTimeout(() => {\n  console.log(6);\n})\n\nconsole.log(7);\n```\n\n<br />这里结果会是什么呢？运用上面了解到的知识，先自己做一下试试看。<br />\n\n```html\n// 正确答案\n1\n4\n7\n5\n2\n3\n6\n```\n\n<br />你答对了吗？<br />\n<br />我们来分析一下整个流程：<br />\n\n- 执行全局Script代码\n\n\n\n<a name=\"6f4a225b\"></a>\n### Step 1\n\n\n```javascript\nconsole.log(1)\n```\n\n<br />Stack Queue: [console]<br />\n<br />Macrotask Queue: []<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1\n\n\n\n<a name=\"e31ad128\"></a>\n### Step 2\n\n\n```javascript\nsetTimeout(() => {\n  // 这个回调函数叫做callback1，setTimeout属于macrotask，所以放到macrotask queue中\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n```\n\n<br />Stack Queue: [setTimeout]<br />\n<br />Macrotask Queue: [callback1]<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1\n\n\n\n<a name=\"2d5ce426\"></a>\n### Step 3\n\n\n```javascript\nnew Promise((resolve, reject) => {\n  // 注意，这里是同步执行的\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  // 这个回调函数叫做callback2，promise属于microtask，所以放到microtask queue中\n  console.log(data);\n})\n```\n\n<br />Stack Queue: [promise]<br />\n<br />Macrotask Queue: [callback1]<br />\n<br />Microtask Queue: [callback2]<br />\n\n> 打印结果：<br />1 <br />4\n\n\n\n<a name=\"7882a4b5\"></a>\n### Step 4\n\n\n```javascript\nsetTimeout(() => {\n  // 这个回调函数叫做callback3，setTimeout属于macrotask，所以放到macrotask queue中\n  console.log(6);\n})\n```\n\n<br />Stack Queue: [setTimeout]<br />\n<br />Macrotask Queue: [callback1, callback3]<br />\n<br />Microtask Queue: [callback2]<br />\n\n> 打印结果：<br />1 <br />4\n\n\n\n<a name=\"0011237e\"></a>\n### Step 5\n\n\n```javascript\nconsole.log(7)\n```\n\n<br />Stack Queue: [console]<br />\n<br />Macrotask Queue: [callback1, callback3]<br />\n<br />Microtask Queue: [callback2]<br />\n\n> 打印结果：<br />1 <br />4 <br />7\n\n\n\n- 全局Script代码执行完了，进入下一个步骤，从microtask queue中依次取出任务执行，直到microtask queue队列为空。\n\n\n\n<a name=\"f5ce4d42\"></a>\n### Step 6\n\n\n```javascript\nconsole.log(data)       // 这里data是Promise的决议值5\n```\n\n<br />Stack Queue: [callback2]<br />\n<br />Macrotask Queue: [callback1, callback3]<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5\n\n\n\n- 这里microtask queue中只有一个任务，执行完后开始从宏任务队列macrotask queue中取位于队首的任务执行\n\n\n\n<a name=\"805e47ec\"></a>\n### Step 7\n\n\n```javascript\nconsole.log(2)\n```\n\n<br />Stack Queue: [callback1]<br />\n<br />Macrotask Queue: [callback3]<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5 <br />2\n\n\n<br />但是，执行callback1的时候又遇到了另一个Promise，Promise异步执行完后在microtask queue中又注册了一个callback4回调函数<br />\n\n<a name=\"d60d761a\"></a>\n### Step 8\n\n\n```javascript\nPromise.resolve().then(() => {\n  // 这个回调函数叫做callback4，promise属于microtask，所以放到microtask queue中\n  console.log(3)\n});\n```\n\n<br />Stack Queue: [promise]<br />\n<br />Macrotask v: [callback3]<br />\n<br />Microtask Queue: [callback4]<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5 <br />2\n\n\n\n- 取出一个宏任务macrotask执行完毕，然后再去微任务队列microtask queue中依次取出执行\n\n\n\n<a name=\"54c8107e\"></a>\n### Step 9\n\n\n```javascript\nconsole.log(3)\n```\n\n<br />Stack Queue: [callback4]<br />\n<br />Macrotask Queue: [callback3]<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5 <br />2  <br />3\n\n\n\n- 微任务队列全部执行完，再去宏任务队列中取第一个任务执行\n\n\n\n<a name=\"b9598260\"></a>\n### Step 10\n\n\n```javascript\nconsole.log(6)\n```\n\n<br />Stack Queue: [callback3]<br />\n<br />Macrotask Queue: []<br />\n<br />Microtask Queue: []<br />\n\n> 打印结果：<br />1 <br />4 <br />7 <br />5 <br />2 <br />3 <br />6\n\n\n\n- 以上，全部执行完后，Stack Queue为空，Macrotask Queue为空，Micro Queue为空\n\n\n<br />Stack Queue: []<br />\n<br />Macrotask Queue: []<br />\n<br />Microtask Queue: []<br />\n<br />因为是第一个例子，所以这里分析的比较详细，大家仔细看一下，接下来我们再来一个例子：<br />\n\n```javascript\nconsole.log(1);\n\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n  \n  Promise.resolve().then(() => {\n    console.log(6)\n  }).then(() => {\n    console.log(7)\n    \n    setTimeout(() => {\n      console.log(8)\n    }, 0);\n  });\n})\n\nsetTimeout(() => {\n  console.log(9);\n})\n\nconsole.log(10);\n```\n\n<br />最终输出结果是什么呢？参考前面的例子，好好想一想......<br />\n\n```html\n// 正确答案\n1\n4\n10\n5\n6\n7\n2\n3\n9\n8\n```\n\n<br />相信大家都答对了，这里的关键在前面已经提过：<br />\n<br />**在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。**<br />\n<br />注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。<br />\n<br />浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。<br />\n\n<a name=\"475884cf\"></a>\n## NodeJS中的Event Loop\n\n\n<a name=\"libuv\"></a>\n### libuv\n\n<br />先来看一张libuv的结构图：<br />\n<br />![2021-03-24_Event Loop_2.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150869182-c542d656-f43b-4b7b-ab76-07395f20db36.png#clientId=u3788e183-4257-4&from=ui&id=uc3ec049c&margin=%5Bobject%20Object%5D&name=2021-03-24_Event%20Loop_2.png&originHeight=289&originWidth=732&originalType=binary&ratio=1&size=141080&status=done&style=none&taskId=uc5809e64-e5f8-47c8-bed4-c2612d7a9af)<br />\n\n<a name=\"87a7af42\"></a>\n### NodeJS中的宏队列和微队列\n\n<br />NodeJS的Event Loop中，执行宏队列的回调任务有**6个阶段**，如下图：<br />![2021-03-24_Event Loop_3.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150881821-daf37c3f-7f75-4b45-a655-133cf582187e.png#clientId=u3788e183-4257-4&from=ui&id=u712b2992&margin=%5Bobject%20Object%5D&name=2021-03-24_Event%20Loop_3.png&originHeight=339&originWidth=670&originalType=binary&ratio=1&size=8419&status=done&style=none&taskId=u9be5125f-53de-487d-84c8-cf78bb786fa)<br />\n<br />\n<br />各个阶段执行的任务如下：<br />\n\n- **timers阶段**：这个阶段执行setTimeout和setInterval预定的callback\n- **I/O callback阶段**：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks\n- **idle, prepare阶段**：仅node内部使用\n- **poll阶段**：获取新的I/O事件，适当的条件下node将阻塞在这里\n- **check阶段**：执行setImmediate()设定的callbacks\n- **close callbacks阶段**：执行socket.on('close', ....)这些callbacks\n\n\n\n<a name=\"6edfbed4\"></a>\n#### NodeJS中宏队列主要有4个\n\n<br />由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：<br />\n\n1. Timers Queue\n1. IO Callbacks Queue\n1. Check Queue\n1. Close Callbacks Queue\n\n\n<br />这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。<br />\n\n<a name=\"180fc5b8\"></a>\n#### NodeJS中微队列主要有2个\n\n\n1. Next Tick Queue：是放置process.nextTick(callback)的回调任务的\n1. Other Micro Queue：放置其他microtask，比如Promise等\n\n\n<br />在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。<br />\n<br />具体可以通过下图加深一下理解：<br />\n<br />![2021-03-24_Event Loop_4.png](https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150892410-a170dd7d-c70b-42b6-bf90-5ac6f1a9fce8.png#clientId=u3788e183-4257-4&from=ui&id=u32cf3abc&margin=%5Bobject%20Object%5D&name=2021-03-24_Event%20Loop_4.png&originHeight=405&originWidth=732&originalType=binary&ratio=1&size=54689&status=done&style=none&taskId=u05d620c9-3659-46ae-b493-fe98d5ca38a)<br />\n<br />大体解释一下NodeJS的Event Loop过程：<br />\n\n1. 执行全局Script的同步代码\n1. 执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务\n1. 开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2\n1. Timers Queue -> 步骤2 -> I/O Queue -> 步骤2 -> Check Queue -> 步骤2 -> Close Callback Queue -> 步骤2 -> Timers Queue ......\n1. 这就是Node的Event Loop\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"9fc3d304\"><span class=\"ne-text\">Event Loop</span></h1><p id=\"ufb7b7e1f\" class=\"ne-p\"><br></p><h2 id=\"98de9c71\"><span class=\"ne-text\">单线程</span></h2><p id=\"u3dd03e90\" class=\"ne-p\"><br></p><p id=\"ucdf93a2e\" class=\"ne-p\"><span class=\"ne-text\">JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</span></p><p id=\"u84439f7f\" class=\"ne-p\"><br></p><p id=\"u3666f55d\" class=\"ne-p\"><span class=\"ne-text\">JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</span></p><p id=\"udd82394b\" class=\"ne-p\"><br></p><p id=\"uf9d3e2bc\" class=\"ne-p\"><span class=\"ne-text\">所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</span></p><p id=\"u7f8a7b47\" class=\"ne-p\"><br></p><p id=\"u6509faa9\" class=\"ne-p\"><span class=\"ne-text\">为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</span></p><p id=\"uc1567876\" class=\"ne-p\"><br></p><h2 id=\"0b387bc7\"><span class=\"ne-text\">任务队列</span></h2><p id=\"ub703e905\" class=\"ne-p\"><br></p><p id=\"uf1cf1018\" class=\"ne-p\"><span class=\"ne-text\">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</span></p><p id=\"u038e41df\" class=\"ne-p\"><br></p><p id=\"ue0468725\" class=\"ne-p\"><span class=\"ne-text\">如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</span></p><p id=\"u4c24131c\" class=\"ne-p\"><br></p><p id=\"ufa924d39\" class=\"ne-p\"><span class=\"ne-text\">JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</span></p><p id=\"ue2ee18e5\" class=\"ne-p\"><br></p><p id=\"ufa0b423e\" class=\"ne-p\"><span class=\"ne-text\">于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</span></p><p id=\"u78cdc237\" class=\"ne-p\"><br></p><p id=\"u663bf87f\" class=\"ne-p\"><span class=\"ne-text\">具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</span></p><p id=\"u25733ef0\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ufedb9dba\" class=\"ne-p\"><span class=\"ne-text\">（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br /><br /></span><span class=\"ne-text\">（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。<br /><br /></span><span class=\"ne-text\">（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br /><br /></span><span class=\"ne-text\">（4）主线程不断重复上面的第三步。</span></p></div><p id=\"u56c394ec\" class=\"ne-p\"><br></p><h2 id=\"1a07985f\"><span class=\"ne-text\">事件和回调函数</span></h2><p id=\"u46b3bab7\" class=\"ne-p\"><br></p><p id=\"u8a893b90\" class=\"ne-p\"><span class=\"ne-text\">&quot;任务队列&quot;是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在&quot;任务队列&quot;中添加一个事件，表示相关的异步任务可以进入&quot;执行栈&quot;了。主线程读取&quot;任务队列&quot;，就是读取里面有哪些事件。</span></p><p id=\"uf4a0de25\" class=\"ne-p\"><br></p><p id=\"u4d6c0626\" class=\"ne-p\"><span class=\"ne-text\">&quot;任务队列&quot;中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入&quot;任务队列&quot;，等待主线程读取。</span></p><p id=\"ud68ba3ee\" class=\"ne-p\"><br></p><p id=\"ufbb32559\" class=\"ne-p\"><span class=\"ne-text\">所谓&quot;回调函数&quot;（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</span></p><p id=\"ud7866bbf\" class=\"ne-p\"><br></p><p id=\"uf4b34dd3\" class=\"ne-p\"><span class=\"ne-text\">&quot;任务队列&quot;是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，&quot;任务队列&quot;上第一位的事件就自动进入主线程。但是，由于存在后文提到的&quot;定时器&quot;功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</span></p><p id=\"uf0694a21\" class=\"ne-p\"><br></p><h2 id=\"f56cc53b\"><span class=\"ne-text\">Event Loop是什么</span></h2><p id=\"ufe438088\" class=\"ne-p\"><br></p><p id=\"u83d0e376\" class=\"ne-p\"><strong><span class=\"ne-text\">event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</span></strong></p><p id=\"u8d23ed4c\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u649efdb9\"><span class=\"ne-text\">浏览器的Event Loop是在</span><a href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\" data-href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">html5的规范</span></a><span class=\"ne-text\">中明确定义。</span></li><li id=\"u776f1a5d\"><span class=\"ne-text\">NodeJS的Event Loop是基于libuv实现的。可以参考Node的</span><a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" data-href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">官方文档</span></a><span class=\"ne-text\">以及libuv的</span><a href=\"http://docs.libuv.org/en/v1.x/design.html\" data-href=\"http://docs.libuv.org/en/v1.x/design.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">官方文档</span></a><span class=\"ne-text\">。</span></li></ul><ul class=\"ne-ul\"><li id=\"uaa99a767\"><span class=\"ne-text\">libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。</span></li></ul><p id=\"uaf2bff4f\" class=\"ne-p\"><br></p><h2 id=\"f4c82775\"><span class=\"ne-text\">宏队列和微队列</span></h2><p id=\"u4999998d\" class=\"ne-p\"><br></p><p id=\"ud7045377\" class=\"ne-p\"><strong><span class=\"ne-text\">宏队列，macrotask，也叫tasks。</span></strong><span class=\"ne-text\"> 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</span></p><p id=\"u7d597de5\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u87b045c9\"><span class=\"ne-text\">setTimeout</span></li><li id=\"uac74fa17\"><span class=\"ne-text\">setInterval</span></li></ul><ul class=\"ne-ul\"><li id=\"uaba1043a\"><span class=\"ne-text\">setImmediate (Node独有)</span></li><li id=\"u3f2df8b5\"><span class=\"ne-text\">requestAnimationFrame (浏览器独有)</span></li></ul><ul class=\"ne-ul\"><li id=\"ubef351ab\"><span class=\"ne-text\">I/O</span></li><li id=\"uc1a2c1f9\"><span class=\"ne-text\">UI rendering (浏览器独有)</span></li></ul><p id=\"u8c331d87\" class=\"ne-p\"><br></p><p id=\"u3e3dec93\" class=\"ne-p\"><strong><span class=\"ne-text\">微队列，microtask，也叫jobs</span></strong><span class=\"ne-text\">。 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</span></p><p id=\"u463a6ec8\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u0cd238f0\"><span class=\"ne-text\">process.nextTick (Node独有)</span></li><li id=\"u97df37c3\"><span class=\"ne-text\">Promise</span></li></ul><ul class=\"ne-ul\"><li id=\"u29efe062\"><span class=\"ne-text\">Object.observe</span></li><li id=\"u2ba1a733\"><span class=\"ne-text\">MutationObserver</span></li></ul><p id=\"u7e94d504\" class=\"ne-p\"><br></p><p id=\"uf5f62c50\" class=\"ne-p\"><span class=\"ne-text\">（注：这里只针对浏览器和NodeJS）</span></p><p id=\"u4130e513\" class=\"ne-p\"><br></p><h2 id=\"7a9e61cd\"><span class=\"ne-text\">浏览器的Event Loop</span></h2><p id=\"ud6799545\" class=\"ne-p\"><br></p><p id=\"u8a5c0453\" class=\"ne-p\"><span class=\"ne-text\">我们先来看一张图，再看完这篇文章后，请返回来再仔细看一下这张图，相信你会有更深的理解。</span></p><p id=\"u2ee5c58e\" class=\"ne-p\"><br></p><p id=\"u9321f940\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150802231-e69d822f-b5db-4e70-bda3-bb3b068cf0b2.png\" width=\"694\" id=\"u78e0afde\" class=\"ne-image\"></p><p id=\"u00fbfb24\" class=\"ne-p\"><br></p><p id=\"uebf55ac2\" class=\"ne-p\"><span class=\"ne-text\">这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</span></p><p id=\"uab850bdf\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u077be6d9\"><span class=\"ne-text\">执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</span></li><li id=\"ub01cfb15\"><span class=\"ne-text\">全局Script代码执行完毕后，调用栈Stack会清空；</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u7d195e32\"><span class=\"ne-text\">从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</span></li><li id=\"uca89509a\"><span class=\"ne-text\">继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。</span><strong><span class=\"ne-text\">注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</span></strong></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"u8242fe3d\"><span class=\"ne-text\">microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</span></li><li id=\"u2b12a977\"><span class=\"ne-text\">取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</span></li></ol><ol start=\"7\" class=\"ne-ol\"><li id=\"u6fdd56fc\"><span class=\"ne-text\">执行完毕后，调用栈Stack为空；</span></li><li id=\"u72126cd4\"><span class=\"ne-text\">重复第3-7个步骤；</span></li></ol><ol start=\"9\" class=\"ne-ol\"><li id=\"u04f02632\"><span class=\"ne-text\">重复第3-7个步骤；</span></li><li id=\"u2fa101a1\"><span class=\"ne-text\">...</span></li></ol><p id=\"ua4c11597\" class=\"ne-p\"><br></p><p id=\"u65bc73cd\" class=\"ne-p\"><strong><span class=\"ne-text\">可以看到，这就是浏览器的事件循环Event Loop</span></strong></p><p id=\"uacfc225b\" class=\"ne-p\"><br></p><p id=\"u3583f2ee\" class=\"ne-p\"><span class=\"ne-text\">这里归纳3个重点：</span></p><p id=\"u5225cf5a\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u5b843834\"><span class=\"ne-text\">宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</span></li><li id=\"ua024ba54\"><span class=\"ne-text\">微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u0b62453c\"><span class=\"ne-text\">图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</span></li></ol><p id=\"u9621230d\" class=\"ne-p\"><br></p><p id=\"u126f6be1\" class=\"ne-p\"><span class=\"ne-text\">好了，概念性的东西就这么多，来看几个示例代码，测试一下你是否掌握了:</span></p><p id=\"ub7187d19\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"11737ba1\" class=\"ne-codeblock language-javascript\">console.log(1);\n\nsetTimeout(() =&gt; {\n  console.log(2);\n  Promise.resolve().then(() =&gt; {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) =&gt; {\n  console.log(4)\n  resolve(5)\n}).then((data) =&gt; {\n  console.log(data);\n})\n\nsetTimeout(() =&gt; {\n  console.log(6);\n})\n\nconsole.log(7);</pre><p id=\"u28517b18\" class=\"ne-p\"><br></p><p id=\"u940fe0f8\" class=\"ne-p\"><span class=\"ne-text\">这里结果会是什么呢？运用上面了解到的知识，先自己做一下试试看。</span></p><p id=\"uac67c07f\" class=\"ne-p\"><br></p><pre data-language=\"html\" id=\"b579127c\" class=\"ne-codeblock language-html\">// 正确答案\n1\n4\n7\n5\n2\n3\n6</pre><p id=\"uf43e7bb5\" class=\"ne-p\"><br></p><p id=\"ucf1b6176\" class=\"ne-p\"><span class=\"ne-text\">你答对了吗？</span></p><p id=\"u34aa63a0\" class=\"ne-p\"><br></p><p id=\"u1db00f31\" class=\"ne-p\"><span class=\"ne-text\">我们来分析一下整个流程：</span></p><p id=\"u4bc4b96c\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u1d5780c8\"><span class=\"ne-text\">执行全局Script代码</span></li></ul><p id=\"uf746e80c\" class=\"ne-p\"><br></p><h3 id=\"6f4a225b\"><span class=\"ne-text\">Step 1</span></h3><p id=\"u3a0ab365\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"075af52e\" class=\"ne-codeblock language-javascript\">console.log(1)</pre><p id=\"u0f143032\" class=\"ne-p\"><br></p><p id=\"uce28b27b\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [console]</span></p><p id=\"u1987e3c9\" class=\"ne-p\"><br></p><p id=\"u5c8d014b\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: []</span></p><p id=\"ubb8aa415\" class=\"ne-p\"><br></p><p id=\"u45b76d40\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: []</span></p><p id=\"u834997df\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u76ae2646\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1</span></p></div><p id=\"u4df27e37\" class=\"ne-p\"><br></p><h3 id=\"e31ad128\"><span class=\"ne-text\">Step 2</span></h3><p id=\"u93de09b2\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"041fe334\" class=\"ne-codeblock language-javascript\">setTimeout(() =&gt; {\n  // 这个回调函数叫做callback1，setTimeout属于macrotask，所以放到macrotask queue中\n  console.log(2);\n  Promise.resolve().then(() =&gt; {\n    console.log(3)\n  });\n});</pre><p id=\"u6d78e6f8\" class=\"ne-p\"><br></p><p id=\"u9f0705fc\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [setTimeout]</span></p><p id=\"ua5cd4be4\" class=\"ne-p\"><br></p><p id=\"u3cc64697\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: [callback1]</span></p><p id=\"u281fa5ea\" class=\"ne-p\"><br></p><p id=\"u2d723056\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: []</span></p><p id=\"u16e266d3\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ud5f81c17\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1</span></p></div><p id=\"u26d8a1fc\" class=\"ne-p\"><br></p><h3 id=\"2d5ce426\"><span class=\"ne-text\">Step 3</span></h3><p id=\"u498b3bc8\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"e4111c47\" class=\"ne-codeblock language-javascript\">new Promise((resolve, reject) =&gt; {\n  // 注意，这里是同步执行的\n  console.log(4)\n  resolve(5)\n}).then((data) =&gt; {\n  // 这个回调函数叫做callback2，promise属于microtask，所以放到microtask queue中\n  console.log(data);\n})</pre><p id=\"u8aa7d144\" class=\"ne-p\"><br></p><p id=\"u4bec793c\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [promise]</span></p><p id=\"u8205d634\" class=\"ne-p\"><br></p><p id=\"u391c6dab\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: [callback1]</span></p><p id=\"u4dd05c95\" class=\"ne-p\"><br></p><p id=\"u7f5087ff\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: [callback2]</span></p><p id=\"uca1f5226\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ua2d8153a\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1 <br /></span><span class=\"ne-text\">4</span></p></div><p id=\"u42426d81\" class=\"ne-p\"><br></p><h3 id=\"7882a4b5\"><span class=\"ne-text\">Step 4</span></h3><p id=\"u9902354c\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"f37e747d\" class=\"ne-codeblock language-javascript\">setTimeout(() =&gt; {\n  // 这个回调函数叫做callback3，setTimeout属于macrotask，所以放到macrotask queue中\n  console.log(6);\n})</pre><p id=\"u456258df\" class=\"ne-p\"><br></p><p id=\"ucf965ed8\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [setTimeout]</span></p><p id=\"u7c42d603\" class=\"ne-p\"><br></p><p id=\"u3a8fe0a8\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: [callback1, callback3]</span></p><p id=\"u2477e627\" class=\"ne-p\"><br></p><p id=\"u3af5ba45\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: [callback2]</span></p><p id=\"u6efacf10\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u1b7bd36c\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1 <br /></span><span class=\"ne-text\">4</span></p></div><p id=\"u7d23815d\" class=\"ne-p\"><br></p><h3 id=\"0011237e\"><span class=\"ne-text\">Step 5</span></h3><p id=\"ub7fa20da\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"aa853733\" class=\"ne-codeblock language-javascript\">console.log(7)</pre><p id=\"u9d0df1a5\" class=\"ne-p\"><br></p><p id=\"u9f08ee07\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [console]</span></p><p id=\"u84a5db62\" class=\"ne-p\"><br></p><p id=\"u54bb3ac3\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: [callback1, callback3]</span></p><p id=\"u5bebb97b\" class=\"ne-p\"><br></p><p id=\"u4c34c2f6\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: [callback2]</span></p><p id=\"uccab0c70\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u80a8fc92\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1 <br /></span><span class=\"ne-text\">4 <br /></span><span class=\"ne-text\">7</span></p></div><p id=\"ue33d2dcb\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u78f4a217\"><span class=\"ne-text\">全局Script代码执行完了，进入下一个步骤，从microtask queue中依次取出任务执行，直到microtask queue队列为空。</span></li></ul><p id=\"ueb2365d7\" class=\"ne-p\"><br></p><h3 id=\"f5ce4d42\"><span class=\"ne-text\">Step 6</span></h3><p id=\"u3331299d\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"9bfdc31f\" class=\"ne-codeblock language-javascript\">console.log(data)       // 这里data是Promise的决议值5</pre><p id=\"u27f1b32d\" class=\"ne-p\"><br></p><p id=\"u4ee6e1a4\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [callback2]</span></p><p id=\"ua17d8eef\" class=\"ne-p\"><br></p><p id=\"ua618287a\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: [callback1, callback3]</span></p><p id=\"uac7cc499\" class=\"ne-p\"><br></p><p id=\"u5ba2f412\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: []</span></p><p id=\"u2593824b\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u0a956a35\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1 <br /></span><span class=\"ne-text\">4 <br /></span><span class=\"ne-text\">7 <br /></span><span class=\"ne-text\">5</span></p></div><p id=\"u5ef7979b\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"udd734a03\"><span class=\"ne-text\">这里microtask queue中只有一个任务，执行完后开始从宏任务队列macrotask queue中取位于队首的任务执行</span></li></ul><p id=\"uef37bf12\" class=\"ne-p\"><br></p><h3 id=\"805e47ec\"><span class=\"ne-text\">Step 7</span></h3><p id=\"u0fbe131f\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"5ce0a61e\" class=\"ne-codeblock language-javascript\">console.log(2)</pre><p id=\"ud2420445\" class=\"ne-p\"><br></p><p id=\"u044299b9\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [callback1]</span></p><p id=\"u968186e9\" class=\"ne-p\"><br></p><p id=\"u3d2bc648\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: [callback3]</span></p><p id=\"u33076489\" class=\"ne-p\"><br></p><p id=\"u63aeb983\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: []</span></p><p id=\"ue32f5b46\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u423c3aad\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1 <br /></span><span class=\"ne-text\">4 <br /></span><span class=\"ne-text\">7 <br /></span><span class=\"ne-text\">5 <br /></span><span class=\"ne-text\">2</span></p></div><p id=\"u58707aef\" class=\"ne-p\"><br></p><p id=\"u8e9aad61\" class=\"ne-p\"><span class=\"ne-text\">但是，执行callback1的时候又遇到了另一个Promise，Promise异步执行完后在microtask queue中又注册了一个callback4回调函数</span></p><p id=\"uff1c04e3\" class=\"ne-p\"><br></p><h3 id=\"d60d761a\"><span class=\"ne-text\">Step 8</span></h3><p id=\"ud1d00c1f\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"7a832fb3\" class=\"ne-codeblock language-javascript\">Promise.resolve().then(() =&gt; {\n  // 这个回调函数叫做callback4，promise属于microtask，所以放到microtask queue中\n  console.log(3)\n});</pre><p id=\"u72abfa64\" class=\"ne-p\"><br></p><p id=\"u6f07ba5d\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [promise]</span></p><p id=\"u63e85d6b\" class=\"ne-p\"><br></p><p id=\"u94c30f3e\" class=\"ne-p\"><span class=\"ne-text\">Macrotask v: [callback3]</span></p><p id=\"ub9c2c97c\" class=\"ne-p\"><br></p><p id=\"u0b664c77\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: [callback4]</span></p><p id=\"ubb519e7c\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ueefe19b5\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1 <br /></span><span class=\"ne-text\">4 <br /></span><span class=\"ne-text\">7 <br /></span><span class=\"ne-text\">5 <br /></span><span class=\"ne-text\">2</span></p></div><p id=\"u645e6055\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ub30a8fd9\"><span class=\"ne-text\">取出一个宏任务macrotask执行完毕，然后再去微任务队列microtask queue中依次取出执行</span></li></ul><p id=\"u10e45cc6\" class=\"ne-p\"><br></p><h3 id=\"54c8107e\"><span class=\"ne-text\">Step 9</span></h3><p id=\"u0cc20d8b\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"b25cff72\" class=\"ne-codeblock language-javascript\">console.log(3)</pre><p id=\"u12b74fc6\" class=\"ne-p\"><br></p><p id=\"u4a500170\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [callback4]</span></p><p id=\"u1d2ff149\" class=\"ne-p\"><br></p><p id=\"ufe2b6978\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: [callback3]</span></p><p id=\"ue56f4561\" class=\"ne-p\"><br></p><p id=\"u14a39263\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: []</span></p><p id=\"u77bf1ca8\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u8256febe\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1 <br /></span><span class=\"ne-text\">4 <br /></span><span class=\"ne-text\">7 <br /></span><span class=\"ne-text\">5 <br /></span><span class=\"ne-text\">2  <br /></span><span class=\"ne-text\">3</span></p></div><p id=\"uaf73c7bd\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u8f83f3a1\"><span class=\"ne-text\">微任务队列全部执行完，再去宏任务队列中取第一个任务执行</span></li></ul><p id=\"u622bad3d\" class=\"ne-p\"><br></p><h3 id=\"b9598260\"><span class=\"ne-text\">Step 10</span></h3><p id=\"uddfe841d\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"4fab6c02\" class=\"ne-codeblock language-javascript\">console.log(6)</pre><p id=\"uad9eb50d\" class=\"ne-p\"><br></p><p id=\"u4011dd9f\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: [callback3]</span></p><p id=\"u6d1d7da2\" class=\"ne-p\"><br></p><p id=\"u4e900fa7\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: []</span></p><p id=\"uf6f936df\" class=\"ne-p\"><br></p><p id=\"u0bce5ad7\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: []</span></p><p id=\"ubbf413dd\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"uf37d7476\" class=\"ne-p\"><span class=\"ne-text\">打印结果：<br /></span><span class=\"ne-text\">1 <br /></span><span class=\"ne-text\">4 <br /></span><span class=\"ne-text\">7 <br /></span><span class=\"ne-text\">5 <br /></span><span class=\"ne-text\">2 <br /></span><span class=\"ne-text\">3 <br /></span><span class=\"ne-text\">6</span></p></div><p id=\"u243d5fc1\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u4fb3e0a4\"><span class=\"ne-text\">以上，全部执行完后，Stack Queue为空，Macrotask Queue为空，Micro Queue为空</span></li></ul><p id=\"u05d6ef27\" class=\"ne-p\"><br></p><p id=\"u8bd20b82\" class=\"ne-p\"><span class=\"ne-text\">Stack Queue: []</span></p><p id=\"uaecfe561\" class=\"ne-p\"><br></p><p id=\"u1a2109a8\" class=\"ne-p\"><span class=\"ne-text\">Macrotask Queue: []</span></p><p id=\"u9e1b71fb\" class=\"ne-p\"><br></p><p id=\"u3ce02ecf\" class=\"ne-p\"><span class=\"ne-text\">Microtask Queue: []</span></p><p id=\"u275b345f\" class=\"ne-p\"><br></p><p id=\"u901114a1\" class=\"ne-p\"><span class=\"ne-text\">因为是第一个例子，所以这里分析的比较详细，大家仔细看一下，接下来我们再来一个例子：</span></p><p id=\"ubf897624\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"02e6307c\" class=\"ne-codeblock language-javascript\">console.log(1);\n\nsetTimeout(() =&gt; {\n  console.log(2);\n  Promise.resolve().then(() =&gt; {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) =&gt; {\n  console.log(4)\n  resolve(5)\n}).then((data) =&gt; {\n  console.log(data);\n  \n  Promise.resolve().then(() =&gt; {\n    console.log(6)\n  }).then(() =&gt; {\n    console.log(7)\n    \n    setTimeout(() =&gt; {\n      console.log(8)\n    }, 0);\n  });\n})\n\nsetTimeout(() =&gt; {\n  console.log(9);\n})\n\nconsole.log(10);</pre><p id=\"u69cbcc6a\" class=\"ne-p\"><br></p><p id=\"u9165635c\" class=\"ne-p\"><span class=\"ne-text\">最终输出结果是什么呢？参考前面的例子，好好想一想......</span></p><p id=\"u197a3b85\" class=\"ne-p\"><br></p><pre data-language=\"html\" id=\"8649f45f\" class=\"ne-codeblock language-html\">// 正确答案\n1\n4\n10\n5\n6\n7\n2\n3\n9\n8</pre><p id=\"u66b2ce45\" class=\"ne-p\"><br></p><p id=\"u716f950a\" class=\"ne-p\"><span class=\"ne-text\">相信大家都答对了，这里的关键在前面已经提过：</span></p><p id=\"u6fdd2039\" class=\"ne-p\"><br></p><p id=\"uecd8735a\" class=\"ne-p\"><strong><span class=\"ne-text\">在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。</span></strong></p><p id=\"u7edfafea\" class=\"ne-p\"><br></p><p id=\"ua912177a\" class=\"ne-p\"><span class=\"ne-text\">注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。</span></p><p id=\"u57dafd75\" class=\"ne-p\"><br></p><p id=\"u056f08c9\" class=\"ne-p\"><span class=\"ne-text\">浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。</span></p><p id=\"u64b666d3\" class=\"ne-p\"><br></p><h2 id=\"475884cf\"><span class=\"ne-text\">NodeJS中的Event Loop</span></h2><p id=\"ub05aebee\" class=\"ne-p\"><br></p><h3 id=\"libuv\"><span class=\"ne-text\">libuv</span></h3><p id=\"u3d097fe5\" class=\"ne-p\"><br></p><p id=\"u486a4c00\" class=\"ne-p\"><span class=\"ne-text\">先来看一张libuv的结构图：</span></p><p id=\"ubb93fe7a\" class=\"ne-p\"><br></p><p id=\"uce0692bf\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150869182-c542d656-f43b-4b7b-ab76-07395f20db36.png\" width=\"732\" id=\"uc3ec049c\" class=\"ne-image\"></p><p id=\"u279702c9\" class=\"ne-p\"><br></p><h3 id=\"87a7af42\"><span class=\"ne-text\">NodeJS中的宏队列和微队列</span></h3><p id=\"ubf2c931c\" class=\"ne-p\"><br></p><p id=\"ue7f598ea\" class=\"ne-p\"><span class=\"ne-text\">NodeJS的Event Loop中，执行宏队列的回调任务有</span><strong><span class=\"ne-text\">6个阶段</span></strong><span class=\"ne-text\">，如下图：</span></p><p id=\"u949ec36a\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150881821-daf37c3f-7f75-4b45-a655-133cf582187e.png\" width=\"670\" id=\"u712b2992\" class=\"ne-image\"></p><p id=\"uac29d065\" class=\"ne-p\"><br></p><p id=\"u728ea648\" class=\"ne-p\"><br></p><p id=\"u333b59cd\" class=\"ne-p\"><span class=\"ne-text\">各个阶段执行的任务如下：</span></p><p id=\"u6750d792\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u07d04c61\"><strong><span class=\"ne-text\">timers阶段</span></strong><span class=\"ne-text\">：这个阶段执行setTimeout和setInterval预定的callback</span></li><li id=\"u06bedbe5\"><strong><span class=\"ne-text\">I/O callback阶段</span></strong><span class=\"ne-text\">：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks</span></li></ul><ul class=\"ne-ul\"><li id=\"u1b411149\"><strong><span class=\"ne-text\">idle, prepare阶段</span></strong><span class=\"ne-text\">：仅node内部使用</span></li><li id=\"u0193cd6e\"><strong><span class=\"ne-text\">poll阶段</span></strong><span class=\"ne-text\">：获取新的I/O事件，适当的条件下node将阻塞在这里</span></li></ul><ul class=\"ne-ul\"><li id=\"u6345d6f5\"><strong><span class=\"ne-text\">check阶段</span></strong><span class=\"ne-text\">：执行setImmediate()设定的callbacks</span></li><li id=\"u80e91950\"><strong><span class=\"ne-text\">close callbacks阶段</span></strong><span class=\"ne-text\">：执行socket.on('close', ....)这些callbacks</span></li></ul><p id=\"u25cbdb63\" class=\"ne-p\"><br></p><h4 id=\"6edfbed4\"><span class=\"ne-text\">NodeJS中宏队列主要有4个</span></h4><p id=\"u6a562006\" class=\"ne-p\"><br></p><p id=\"ud5066d40\" class=\"ne-p\"><span class=\"ne-text\">由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：</span></p><p id=\"u3348b0c3\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ucc8acd70\"><span class=\"ne-text\">Timers Queue</span></li><li id=\"u8b0779f0\"><span class=\"ne-text\">IO Callbacks Queue</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"ucfe44f4d\"><span class=\"ne-text\">Check Queue</span></li><li id=\"uedd05e38\"><span class=\"ne-text\">Close Callbacks Queue</span></li></ol><p id=\"u44264fcc\" class=\"ne-p\"><br></p><p id=\"u33b739ba\" class=\"ne-p\"><span class=\"ne-text\">这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。</span></p><p id=\"ufb93f60e\" class=\"ne-p\"><br></p><h4 id=\"180fc5b8\"><span class=\"ne-text\">NodeJS中微队列主要有2个</span></h4><p id=\"uf34afaf2\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"uf35dd7e7\"><span class=\"ne-text\">Next Tick Queue：是放置process.nextTick(callback)的回调任务的</span></li><li id=\"ua69ffb7c\"><span class=\"ne-text\">Other Micro Queue：放置其他microtask，比如Promise等</span></li></ol><p id=\"ue6bbc9d5\" class=\"ne-p\"><br></p><p id=\"ueef4dc01\" class=\"ne-p\"><span class=\"ne-text\">在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。</span></p><p id=\"u42ef0b13\" class=\"ne-p\"><br></p><p id=\"u656f8447\" class=\"ne-p\"><span class=\"ne-text\">具体可以通过下图加深一下理解：</span></p><p id=\"ub7ebfaf5\" class=\"ne-p\"><br></p><p id=\"uf5154fad\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150892410-a170dd7d-c70b-42b6-bf90-5ac6f1a9fce8.png\" width=\"732\" id=\"u32cf3abc\" class=\"ne-image\"></p><p id=\"u1d261fa5\" class=\"ne-p\"><br></p><p id=\"uad12c3d3\" class=\"ne-p\"><span class=\"ne-text\">大体解释一下NodeJS的Event Loop过程：</span></p><p id=\"u6288599d\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"uc2e1446d\"><span class=\"ne-text\">执行全局Script的同步代码</span></li><li id=\"u67cfffb2\"><span class=\"ne-text\">执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"ua8f68e8b\"><span class=\"ne-text\">开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2</span></li><li id=\"u81b9e990\"><span class=\"ne-text\">Timers Queue -&gt; 步骤2 -&gt; I/O Queue -&gt; 步骤2 -&gt; Check Queue -&gt; 步骤2 -&gt; Close Callback Queue -&gt; 步骤2 -&gt; Timers Queue ......</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"u61ac22d3\"><span class=\"ne-text\">这就是Node的Event Loop</span></li></ol></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"9fc3d304\" id=\"9fc3d304\"><span data-lake-id=\"u6f93a2e9\" id=\"u6f93a2e9\">Event Loop</span></h1><p data-lake-id=\"ufb7b7e1f\" id=\"ufb7b7e1f\"><br></p><h2 data-lake-id=\"98de9c71\" id=\"98de9c71\"><span data-lake-id=\"u229ed5e2\" id=\"u229ed5e2\">单线程</span></h2><p data-lake-id=\"u3dd03e90\" id=\"u3dd03e90\"><br></p><p data-lake-id=\"ucdf93a2e\" id=\"ucdf93a2e\"><span data-lake-id=\"u4117d029\" id=\"u4117d029\">JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</span></p><p data-lake-id=\"u84439f7f\" id=\"u84439f7f\"><br></p><p data-lake-id=\"u3666f55d\" id=\"u3666f55d\"><span data-lake-id=\"u04a669fb\" id=\"u04a669fb\">JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</span></p><p data-lake-id=\"udd82394b\" id=\"udd82394b\"><br></p><p data-lake-id=\"uf9d3e2bc\" id=\"uf9d3e2bc\"><span data-lake-id=\"u9270d655\" id=\"u9270d655\">所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</span></p><p data-lake-id=\"u7f8a7b47\" id=\"u7f8a7b47\"><br></p><p data-lake-id=\"u6509faa9\" id=\"u6509faa9\"><span data-lake-id=\"u74dded2e\" id=\"u74dded2e\">为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</span></p><p data-lake-id=\"uc1567876\" id=\"uc1567876\"><br></p><h2 data-lake-id=\"0b387bc7\" id=\"0b387bc7\"><span data-lake-id=\"u8571b26f\" id=\"u8571b26f\">任务队列</span></h2><p data-lake-id=\"ub703e905\" id=\"ub703e905\"><br></p><p data-lake-id=\"uf1cf1018\" id=\"uf1cf1018\"><span data-lake-id=\"u7511760b\" id=\"u7511760b\">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</span></p><p data-lake-id=\"u038e41df\" id=\"u038e41df\"><br></p><p data-lake-id=\"ue0468725\" id=\"ue0468725\"><span data-lake-id=\"u6185091b\" id=\"u6185091b\">如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</span></p><p data-lake-id=\"u4c24131c\" id=\"u4c24131c\"><br></p><p data-lake-id=\"ufa924d39\" id=\"ufa924d39\"><span data-lake-id=\"u6494d5a5\" id=\"u6494d5a5\">JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</span></p><p data-lake-id=\"ue2ee18e5\" id=\"ue2ee18e5\"><br></p><p data-lake-id=\"ufa0b423e\" id=\"ufa0b423e\"><span data-lake-id=\"u9f356c57\" id=\"u9f356c57\">于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</span></p><p data-lake-id=\"u78cdc237\" id=\"u78cdc237\"><br></p><p data-lake-id=\"u663bf87f\" id=\"u663bf87f\"><span data-lake-id=\"u954c760b\" id=\"u954c760b\">具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</span></p><p data-lake-id=\"u25733ef0\" id=\"u25733ef0\"><br></p><blockquote data-lake-id=\"ub0803929\" id=\"ub0803929\"><p data-lake-id=\"ufedb9dba\" id=\"ufedb9dba\"><span data-lake-id=\"u0dac6c67\" id=\"u0dac6c67\">（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br /><br /></span><span data-lake-id=\"ua2d954fa\" id=\"ua2d954fa\">（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。<br /><br /></span><span data-lake-id=\"ub362d9a7\" id=\"ub362d9a7\">（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br /><br /></span><span data-lake-id=\"u4d238d8e\" id=\"u4d238d8e\">（4）主线程不断重复上面的第三步。</span></p></blockquote><p data-lake-id=\"u56c394ec\" id=\"u56c394ec\"><br></p><h2 data-lake-id=\"1a07985f\" id=\"1a07985f\"><span data-lake-id=\"u54db2035\" id=\"u54db2035\">事件和回调函数</span></h2><p data-lake-id=\"u46b3bab7\" id=\"u46b3bab7\"><br></p><p data-lake-id=\"u8a893b90\" id=\"u8a893b90\"><span data-lake-id=\"u9d077b90\" id=\"u9d077b90\">&quot;任务队列&quot;是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在&quot;任务队列&quot;中添加一个事件，表示相关的异步任务可以进入&quot;执行栈&quot;了。主线程读取&quot;任务队列&quot;，就是读取里面有哪些事件。</span></p><p data-lake-id=\"uf4a0de25\" id=\"uf4a0de25\"><br></p><p data-lake-id=\"u4d6c0626\" id=\"u4d6c0626\"><span data-lake-id=\"ud1d68568\" id=\"ud1d68568\">&quot;任务队列&quot;中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入&quot;任务队列&quot;，等待主线程读取。</span></p><p data-lake-id=\"ud68ba3ee\" id=\"ud68ba3ee\"><br></p><p data-lake-id=\"ufbb32559\" id=\"ufbb32559\"><span data-lake-id=\"ue6578bd7\" id=\"ue6578bd7\">所谓&quot;回调函数&quot;（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</span></p><p data-lake-id=\"ud7866bbf\" id=\"ud7866bbf\"><br></p><p data-lake-id=\"uf4b34dd3\" id=\"uf4b34dd3\"><span data-lake-id=\"u4e3b4424\" id=\"u4e3b4424\">&quot;任务队列&quot;是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，&quot;任务队列&quot;上第一位的事件就自动进入主线程。但是，由于存在后文提到的&quot;定时器&quot;功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</span></p><p data-lake-id=\"uf0694a21\" id=\"uf0694a21\"><br></p><h2 data-lake-id=\"f56cc53b\" id=\"f56cc53b\"><span data-lake-id=\"u3f232c12\" id=\"u3f232c12\">Event Loop是什么</span></h2><p data-lake-id=\"ufe438088\" id=\"ufe438088\"><br></p><p data-lake-id=\"u83d0e376\" id=\"u83d0e376\"><strong><span data-lake-id=\"u120e09c2\" id=\"u120e09c2\">event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</span></strong></p><p data-lake-id=\"u8d23ed4c\" id=\"u8d23ed4c\"><br></p><ul list=\"ue812ad25\"><li fid=\"u16ea32d3\" data-lake-id=\"u649efdb9\" id=\"u649efdb9\"><span data-lake-id=\"u35761919\" id=\"u35761919\">浏览器的Event Loop是在</span><a href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\" target=\"_blank\" data-lake-id=\"u4c7275bc\" id=\"u4c7275bc\"><span data-lake-id=\"u283d9902\" id=\"u283d9902\">html5的规范</span></a><span data-lake-id=\"u08cc95cd\" id=\"u08cc95cd\">中明确定义。</span></li><li fid=\"u16ea32d3\" data-lake-id=\"u776f1a5d\" id=\"u776f1a5d\"><span data-lake-id=\"ud61bde0f\" id=\"ud61bde0f\">NodeJS的Event Loop是基于libuv实现的。可以参考Node的</span><a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" data-lake-id=\"u72becb4c\" id=\"u72becb4c\"><span data-lake-id=\"uffdce86b\" id=\"uffdce86b\">官方文档</span></a><span data-lake-id=\"ub808577d\" id=\"ub808577d\">以及libuv的</span><a href=\"http://docs.libuv.org/en/v1.x/design.html\" target=\"_blank\" data-lake-id=\"u79a3c876\" id=\"u79a3c876\"><span data-lake-id=\"u867f3b55\" id=\"u867f3b55\">官方文档</span></a><span data-lake-id=\"ub6e610f5\" id=\"ub6e610f5\">。</span></li><li fid=\"u16ea32d3\" data-lake-id=\"uaa99a767\" id=\"uaa99a767\"><span data-lake-id=\"u0f930aed\" id=\"u0f930aed\">libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。</span></li></ul><p data-lake-id=\"uaf2bff4f\" id=\"uaf2bff4f\"><br></p><h2 data-lake-id=\"f4c82775\" id=\"f4c82775\"><span data-lake-id=\"uca338d11\" id=\"uca338d11\">宏队列和微队列</span></h2><p data-lake-id=\"u4999998d\" id=\"u4999998d\"><br></p><p data-lake-id=\"ud7045377\" id=\"ud7045377\"><strong><span data-lake-id=\"u8a6dfb1e\" id=\"u8a6dfb1e\">宏队列，macrotask，也叫tasks。</span></strong><span data-lake-id=\"ucfef7fa9\" id=\"ucfef7fa9\"> 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</span></p><p data-lake-id=\"u7d597de5\" id=\"u7d597de5\"><br></p><ul list=\"u4082a386\"><li fid=\"u157fe237\" data-lake-id=\"u87b045c9\" id=\"u87b045c9\"><span data-lake-id=\"u7ef8312b\" id=\"u7ef8312b\">setTimeout</span></li><li fid=\"u157fe237\" data-lake-id=\"uac74fa17\" id=\"uac74fa17\"><span data-lake-id=\"u35343311\" id=\"u35343311\">setInterval</span></li><li fid=\"u157fe237\" data-lake-id=\"uaba1043a\" id=\"uaba1043a\"><span data-lake-id=\"u7e659064\" id=\"u7e659064\">setImmediate (Node独有)</span></li><li fid=\"u157fe237\" data-lake-id=\"u3f2df8b5\" id=\"u3f2df8b5\"><span data-lake-id=\"u7a33e38c\" id=\"u7a33e38c\">requestAnimationFrame (浏览器独有)</span></li><li fid=\"u157fe237\" data-lake-id=\"ubef351ab\" id=\"ubef351ab\"><span data-lake-id=\"u9d22d54b\" id=\"u9d22d54b\">I/O</span></li><li fid=\"u157fe237\" data-lake-id=\"uc1a2c1f9\" id=\"uc1a2c1f9\"><span data-lake-id=\"u4d13c989\" id=\"u4d13c989\">UI rendering (浏览器独有)</span></li></ul><p data-lake-id=\"u8c331d87\" id=\"u8c331d87\"><br></p><p data-lake-id=\"u3e3dec93\" id=\"u3e3dec93\"><strong><span data-lake-id=\"u6add5cc2\" id=\"u6add5cc2\">微队列，microtask，也叫jobs</span></strong><span data-lake-id=\"ud1675ba1\" id=\"ud1675ba1\">。 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</span></p><p data-lake-id=\"u463a6ec8\" id=\"u463a6ec8\"><br></p><ul list=\"ueccf3c00\"><li fid=\"ub508e38a\" data-lake-id=\"u0cd238f0\" id=\"u0cd238f0\"><span data-lake-id=\"u014c6669\" id=\"u014c6669\">process.nextTick (Node独有)</span></li><li fid=\"ub508e38a\" data-lake-id=\"u97df37c3\" id=\"u97df37c3\"><span data-lake-id=\"u5fb97949\" id=\"u5fb97949\">Promise</span></li><li fid=\"ub508e38a\" data-lake-id=\"u29efe062\" id=\"u29efe062\"><span data-lake-id=\"u8a659aa0\" id=\"u8a659aa0\">Object.observe</span></li><li fid=\"ub508e38a\" data-lake-id=\"u2ba1a733\" id=\"u2ba1a733\"><span data-lake-id=\"u1bee4aae\" id=\"u1bee4aae\">MutationObserver</span></li></ul><p data-lake-id=\"u7e94d504\" id=\"u7e94d504\"><br></p><p data-lake-id=\"uf5f62c50\" id=\"uf5f62c50\"><span data-lake-id=\"uf3a1ff74\" id=\"uf3a1ff74\">（注：这里只针对浏览器和NodeJS）</span></p><p data-lake-id=\"u4130e513\" id=\"u4130e513\"><br></p><h2 data-lake-id=\"7a9e61cd\" id=\"7a9e61cd\"><span data-lake-id=\"ua49e5c06\" id=\"ua49e5c06\">浏览器的Event Loop</span></h2><p data-lake-id=\"ud6799545\" id=\"ud6799545\"><br></p><p data-lake-id=\"u8a5c0453\" id=\"u8a5c0453\"><span data-lake-id=\"u21871da2\" id=\"u21871da2\">我们先来看一张图，再看完这篇文章后，请返回来再仔细看一下这张图，相信你会有更深的理解。</span></p><p data-lake-id=\"u2ee5c58e\" id=\"u2ee5c58e\"><br></p><p data-lake-id=\"u9321f940\" id=\"u9321f940\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1640150802231-e69d822f-b5db-4e70-bda3-bb3b068cf0b2.png%22%2C%22taskId%22%3A%22ue9a67d43-2d75-4de6-a370-a14f7caa447%22%2C%22clientId%22%3A%22u3788e183-4257-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%222021-03-24_Event%20Loop_1.png%22%2C%22size%22%3A48117%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A694%2C%22originHeight%22%3A732%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22BackgroundThreads%20Stack%20fs.readFile%20SetTimeout%20http.get%20setinterval%20function3%20function2%20http.get%20SetTimeout%20function1%20TaskQueue%20seTTImeOUT%20http.get%20setTimeOUt%20setInterval%20MicrotaskQueue%20Promise%20Promise%20process.nextTick%20processnextTick%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A436.8387%2C%22y%22%3A24.633575%2C%22width%22%3A111.50109999999995%2C%22height%22%3A11.999904999999998%2C%22text%22%3A%22BackgroundThreads%22%7D%2C%7B%22x%22%3A160.59471%2C%22y%22%3A25.626968%2C%22width%22%3A31.368070000000017%2C%22height%22%3A10.823727000000002%2C%22text%22%3A%22Stack%22%7D%2C%7B%22x%22%3A528.0257%2C%22y%22%3A93.29056%2C%22width%22%3A56.48140000000001%2C%22height%22%3A11.345460000000003%2C%22text%22%3A%22fs.readFile%22%7D%2C%7B%22x%22%3A399.85864%2C%22y%22%3A93.67212%2C%22width%22%3A60.769930000000045%2C%22height%22%3A10.437864999999988%2C%22text%22%3A%22SetTimeout%22%7D%2C%7B%22x%22%3A410.20493%2C%22y%22%3A171.82477%2C%22width%22%3A41.00445000000002%2C%22height%22%3A13.989299999999986%2C%22text%22%3A%22http.get%22%7D%2C%7B%22x%22%3A528.5124%2C%22y%22%3A172.60408%2C%22width%22%3A56.38570000000004%2C%22height%22%3A10.109829999999988%2C%22text%22%3A%22setinterval%22%7D%2C%7B%22x%22%3A151.32458%2C%22y%22%3A181.45323%2C%22width%22%3A49.22352000000001%2C%22height%22%3A11.258010000000013%2C%22text%22%3A%22function3%22%7D%2C%7B%22x%22%3A151.2696%2C%22y%22%3A240.3169%2C%22width%22%3A49.41301999999999%2C%22height%22%3A10.968130000000002%2C%22text%22%3A%22function2%22%7D%2C%7B%22x%22%3A408.91245%2C%22y%22%3A249.1848%2C%22width%22%3A43.123680000000036%2C%22height%22%3A13.254000000000019%2C%22text%22%3A%22http.get%22%7D%2C%7B%22x%22%3A527.34393%2C%22y%22%3A249.61946%2C%22width%22%3A60.09546999999998%2C%22height%22%3A11.29009000000002%2C%22text%22%3A%22SetTimeout%22%7D%2C%7B%22x%22%3A150.27924%2C%22y%22%3A297.58237%2C%22width%22%3A49.08979000000002%2C%22height%22%3A12.93347%2C%22text%22%3A%22function1%22%7D%2C%7B%22x%22%3A388.97427%2C%22y%22%3A433.79062%2C%22width%22%3A64.74412999999998%2C%22height%22%3A14.191880000000026%2C%22text%22%3A%22TaskQueue%22%7D%2C%7B%22x%22%3A430.99866%2C%22y%22%3A498.2805%2C%22width%22%3A60.199460000000045%2C%22height%22%3A12.381399999999985%2C%22text%22%3A%22seTTImeOUT%22%7D%2C%7B%22x%22%3A572.18866%2C%22y%22%3A499.1874%2C%22width%22%3A43.867309999999975%2C%22height%22%3A12.441399999999987%2C%22text%22%3A%22http.get%22%7D%2C%7B%22x%22%3A298.49255%2C%22y%22%3A499.2391%2C%22width%22%3A60.887249999999995%2C%22height%22%3A11.426760000000002%2C%22text%22%3A%22setTimeOUt%22%7D%2C%7B%22x%22%3A169.15077%2C%22y%22%3A499.67188%2C%22width%22%3A57.59593000000001%2C%22height%22%3A10.872320000000002%2C%22text%22%3A%22setInterval%22%7D%2C%7B%22x%22%3A218.47388%2C%22y%22%3A591.317%2C%22width%22%3A90.12169999999998%2C%22height%22%3A11.693599999999947%2C%22text%22%3A%22MicrotaskQueue%22%7D%2C%7B%22x%22%3A275.19543%2C%22y%22%3A640.5104%2C%22width%22%3A44.952120000000036%2C%22height%22%3A11.850559999999973%2C%22text%22%3A%22Promise%22%7D%2C%7B%22x%22%3A206.87138%2C%22y%22%3A640.5247%2C%22width%22%3A45.08057000000002%2C%22height%22%3A11.484759999999937%2C%22text%22%3A%22Promise%22%7D%2C%7B%22x%22%3A335.06427%2C%22y%22%3A640.6941%2C%22width%22%3A90.55095999999998%2C%22height%22%3A12.440849999999955%2C%22text%22%3A%22process.nextTick%22%7D%2C%7B%22x%22%3A101.35709%2C%22y%22%3A641.337%2C%22width%22%3A89.41910999999999%2C%22height%22%3A11.74045000000001%2C%22text%22%3A%22processnextTick%22%7D%5D%2C%22id%22%3A%22u78e0afde%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u00fbfb24\" id=\"u00fbfb24\"><br></p><p data-lake-id=\"uebf55ac2\" id=\"uebf55ac2\"><span data-lake-id=\"u4dcfd4ed\" id=\"u4dcfd4ed\">这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</span></p><p data-lake-id=\"uab850bdf\" id=\"uab850bdf\"><br></p><ol list=\"u502aca7e\"><li fid=\"ua07bd3f7\" data-lake-id=\"u077be6d9\" id=\"u077be6d9\"><span data-lake-id=\"u48a2b2ba\" id=\"u48a2b2ba\">执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"ub01cfb15\" id=\"ub01cfb15\"><span data-lake-id=\"u5d0c5795\" id=\"u5d0c5795\">全局Script代码执行完毕后，调用栈Stack会清空；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u7d195e32\" id=\"u7d195e32\"><span data-lake-id=\"ue902e29a\" id=\"ue902e29a\">从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"uca89509a\" id=\"uca89509a\"><span data-lake-id=\"u6be99911\" id=\"u6be99911\">继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。</span><strong><span data-lake-id=\"u1958e71c\" id=\"u1958e71c\">注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</span></strong></li><li fid=\"ua07bd3f7\" data-lake-id=\"u8242fe3d\" id=\"u8242fe3d\"><span data-lake-id=\"u76f08fa1\" id=\"u76f08fa1\">microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u2b12a977\" id=\"u2b12a977\"><span data-lake-id=\"ueef7c55f\" id=\"ueef7c55f\">取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u6fdd56fc\" id=\"u6fdd56fc\"><span data-lake-id=\"uc59d0262\" id=\"uc59d0262\">执行完毕后，调用栈Stack为空；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u72126cd4\" id=\"u72126cd4\"><span data-lake-id=\"ueb729816\" id=\"ueb729816\">重复第3-7个步骤；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u04f02632\" id=\"u04f02632\"><span data-lake-id=\"ud375a4a6\" id=\"ud375a4a6\">重复第3-7个步骤；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u2fa101a1\" id=\"u2fa101a1\"><span data-lake-id=\"udcaec2f8\" id=\"udcaec2f8\">...</span></li></ol><p data-lake-id=\"ua4c11597\" id=\"ua4c11597\"><br></p><p data-lake-id=\"u65bc73cd\" id=\"u65bc73cd\"><strong><span data-lake-id=\"u85decf6b\" id=\"u85decf6b\">可以看到，这就是浏览器的事件循环Event Loop</span></strong></p><p data-lake-id=\"uacfc225b\" id=\"uacfc225b\"><br></p><p data-lake-id=\"u3583f2ee\" id=\"u3583f2ee\"><span data-lake-id=\"u154ac0bf\" id=\"u154ac0bf\">这里归纳3个重点：</span></p><p data-lake-id=\"u5225cf5a\" id=\"u5225cf5a\"><br></p><ol list=\"u4b6571bc\"><li fid=\"u753a33c9\" data-lake-id=\"u5b843834\" id=\"u5b843834\"><span data-lake-id=\"u58370790\" id=\"u58370790\">宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</span></li><li fid=\"u753a33c9\" data-lake-id=\"ua024ba54\" id=\"ua024ba54\"><span data-lake-id=\"u39ef10e9\" id=\"u39ef10e9\">微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</span></li><li fid=\"u753a33c9\" data-lake-id=\"u0b62453c\" id=\"u0b62453c\"><span data-lake-id=\"ud1a84d95\" id=\"ud1a84d95\">图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</span></li></ol><p data-lake-id=\"u9621230d\" id=\"u9621230d\"><br></p><p data-lake-id=\"u126f6be1\" id=\"u126f6be1\"><span data-lake-id=\"u12b66b2b\" id=\"u12b66b2b\">好了，概念性的东西就这么多，来看几个示例代码，测试一下你是否掌握了:</span></p><p data-lake-id=\"ub7187d19\" id=\"ub7187d19\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(1)%3B%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log(2)%3B%5Cn%20%20Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(3)%5Cn%20%20%7D)%3B%5Cn%7D)%3B%5Cn%5Cnnew%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20console.log(4)%5Cn%20%20resolve(5)%5Cn%7D).then((data)%20%3D%3E%20%7B%5Cn%20%20console.log(data)%3B%5Cn%7D)%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log(6)%3B%5Cn%7D)%5Cn%5Cnconsole.log(7)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2211737ba1%22%7D\"></card><p data-lake-id=\"u28517b18\" id=\"u28517b18\"><br></p><p data-lake-id=\"u940fe0f8\" id=\"u940fe0f8\"><span data-lake-id=\"uce05bccf\" id=\"uce05bccf\">这里结果会是什么呢？运用上面了解到的知识，先自己做一下试试看。</span></p><p data-lake-id=\"uac67c07f\" id=\"uac67c07f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%2F%2F%20%E6%AD%A3%E7%A1%AE%E7%AD%94%E6%A1%88%5Cn1%5Cn4%5Cn7%5Cn5%5Cn2%5Cn3%5Cn6%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b579127c%22%7D\"></card><p data-lake-id=\"uf43e7bb5\" id=\"uf43e7bb5\"><br></p><p data-lake-id=\"ucf1b6176\" id=\"ucf1b6176\"><span data-lake-id=\"ud0f95ee8\" id=\"ud0f95ee8\">你答对了吗？</span></p><p data-lake-id=\"u34aa63a0\" id=\"u34aa63a0\"><br></p><p data-lake-id=\"u1db00f31\" id=\"u1db00f31\"><span data-lake-id=\"u46c7d9ba\" id=\"u46c7d9ba\">我们来分析一下整个流程：</span></p><p data-lake-id=\"u4bc4b96c\" id=\"u4bc4b96c\"><br></p><ul list=\"uea6f559e\"><li fid=\"u7a810cf9\" data-lake-id=\"u1d5780c8\" id=\"u1d5780c8\"><span data-lake-id=\"ubbd3ed59\" id=\"ubbd3ed59\">执行全局Script代码</span></li></ul><p data-lake-id=\"uf746e80c\" id=\"uf746e80c\"><br></p><h3 data-lake-id=\"6f4a225b\" id=\"6f4a225b\"><span data-lake-id=\"uafc76148\" id=\"uafc76148\">Step 1</span></h3><p data-lake-id=\"u3a0ab365\" id=\"u3a0ab365\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(1)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22075af52e%22%7D\"></card><p data-lake-id=\"u0f143032\" id=\"u0f143032\"><br></p><p data-lake-id=\"uce28b27b\" id=\"uce28b27b\"><span data-lake-id=\"ub78df7d5\" id=\"ub78df7d5\">Stack Queue: [console]</span></p><p data-lake-id=\"u1987e3c9\" id=\"u1987e3c9\"><br></p><p data-lake-id=\"u5c8d014b\" id=\"u5c8d014b\"><span data-lake-id=\"uc9a30145\" id=\"uc9a30145\">Macrotask Queue: []</span></p><p data-lake-id=\"ubb8aa415\" id=\"ubb8aa415\"><br></p><p data-lake-id=\"u45b76d40\" id=\"u45b76d40\"><span data-lake-id=\"uc952b60c\" id=\"uc952b60c\">Microtask Queue: []</span></p><p data-lake-id=\"u834997df\" id=\"u834997df\"><br></p><blockquote data-lake-id=\"u15c20769\" id=\"u15c20769\"><p data-lake-id=\"u76ae2646\" id=\"u76ae2646\"><span data-lake-id=\"uf1874e39\" id=\"uf1874e39\">打印结果：<br /></span><span data-lake-id=\"u58e7074c\" id=\"u58e7074c\">1</span></p></blockquote><p data-lake-id=\"u4df27e37\" id=\"u4df27e37\"><br></p><h3 data-lake-id=\"e31ad128\" id=\"e31ad128\"><span data-lake-id=\"u174082ac\" id=\"u174082ac\">Step 2</span></h3><p data-lake-id=\"u93de09b2\" id=\"u93de09b2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9Acallback1%EF%BC%8CsetTimeout%E5%B1%9E%E4%BA%8Emacrotask%EF%BC%8C%E6%89%80%E4%BB%A5%E6%94%BE%E5%88%B0macrotask%20queue%E4%B8%AD%5Cn%20%20console.log(2)%3B%5Cn%20%20Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(3)%5Cn%20%20%7D)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22041fe334%22%7D\"></card><p data-lake-id=\"u6d78e6f8\" id=\"u6d78e6f8\"><br></p><p data-lake-id=\"u9f0705fc\" id=\"u9f0705fc\"><span data-lake-id=\"u09a5bf42\" id=\"u09a5bf42\">Stack Queue: [setTimeout]</span></p><p data-lake-id=\"ua5cd4be4\" id=\"ua5cd4be4\"><br></p><p data-lake-id=\"u3cc64697\" id=\"u3cc64697\"><span data-lake-id=\"u2f5c0ff0\" id=\"u2f5c0ff0\">Macrotask Queue: [callback1]</span></p><p data-lake-id=\"u281fa5ea\" id=\"u281fa5ea\"><br></p><p data-lake-id=\"u2d723056\" id=\"u2d723056\"><span data-lake-id=\"u54f3beee\" id=\"u54f3beee\">Microtask Queue: []</span></p><p data-lake-id=\"u16e266d3\" id=\"u16e266d3\"><br></p><blockquote data-lake-id=\"uabd55650\" id=\"uabd55650\"><p data-lake-id=\"ud5f81c17\" id=\"ud5f81c17\"><span data-lake-id=\"uea380f99\" id=\"uea380f99\">打印结果：<br /></span><span data-lake-id=\"u518b9e3d\" id=\"u518b9e3d\">1</span></p></blockquote><p data-lake-id=\"u26d8a1fc\" id=\"u26d8a1fc\"><br></p><h3 data-lake-id=\"2d5ce426\" id=\"2d5ce426\"><span data-lake-id=\"u1b23c553\" id=\"u1b23c553\">Step 3</span></h3><p data-lake-id=\"u498b3bc8\" id=\"u498b3bc8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E9%87%8C%E6%98%AF%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C%E7%9A%84%5Cn%20%20console.log(4)%5Cn%20%20resolve(5)%5Cn%7D).then((data)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9Acallback2%EF%BC%8Cpromise%E5%B1%9E%E4%BA%8Emicrotask%EF%BC%8C%E6%89%80%E4%BB%A5%E6%94%BE%E5%88%B0microtask%20queue%E4%B8%AD%5Cn%20%20console.log(data)%3B%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e4111c47%22%7D\"></card><p data-lake-id=\"u8aa7d144\" id=\"u8aa7d144\"><br></p><p data-lake-id=\"u4bec793c\" id=\"u4bec793c\"><span data-lake-id=\"u056419a7\" id=\"u056419a7\">Stack Queue: [promise]</span></p><p data-lake-id=\"u8205d634\" id=\"u8205d634\"><br></p><p data-lake-id=\"u391c6dab\" id=\"u391c6dab\"><span data-lake-id=\"u2d152cf1\" id=\"u2d152cf1\">Macrotask Queue: [callback1]</span></p><p data-lake-id=\"u4dd05c95\" id=\"u4dd05c95\"><br></p><p data-lake-id=\"u7f5087ff\" id=\"u7f5087ff\"><span data-lake-id=\"uf311acd8\" id=\"uf311acd8\">Microtask Queue: [callback2]</span></p><p data-lake-id=\"uca1f5226\" id=\"uca1f5226\"><br></p><blockquote data-lake-id=\"u8d6eb3a1\" id=\"u8d6eb3a1\"><p data-lake-id=\"ua2d8153a\" id=\"ua2d8153a\"><span data-lake-id=\"ue46e4111\" id=\"ue46e4111\">打印结果：<br /></span><span data-lake-id=\"u625573f0\" id=\"u625573f0\">1 <br /></span><span data-lake-id=\"u71f57ad2\" id=\"u71f57ad2\">4</span></p></blockquote><p data-lake-id=\"u42426d81\" id=\"u42426d81\"><br></p><h3 data-lake-id=\"7882a4b5\" id=\"7882a4b5\"><span data-lake-id=\"u82c61c9f\" id=\"u82c61c9f\">Step 4</span></h3><p data-lake-id=\"u9902354c\" id=\"u9902354c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9Acallback3%EF%BC%8CsetTimeout%E5%B1%9E%E4%BA%8Emacrotask%EF%BC%8C%E6%89%80%E4%BB%A5%E6%94%BE%E5%88%B0macrotask%20queue%E4%B8%AD%5Cn%20%20console.log(6)%3B%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f37e747d%22%7D\"></card><p data-lake-id=\"u456258df\" id=\"u456258df\"><br></p><p data-lake-id=\"ucf965ed8\" id=\"ucf965ed8\"><span data-lake-id=\"u55d96b1c\" id=\"u55d96b1c\">Stack Queue: [setTimeout]</span></p><p data-lake-id=\"u7c42d603\" id=\"u7c42d603\"><br></p><p data-lake-id=\"u3a8fe0a8\" id=\"u3a8fe0a8\"><span data-lake-id=\"uc1b85d12\" id=\"uc1b85d12\">Macrotask Queue: [callback1, callback3]</span></p><p data-lake-id=\"u2477e627\" id=\"u2477e627\"><br></p><p data-lake-id=\"u3af5ba45\" id=\"u3af5ba45\"><span data-lake-id=\"u93ee1a32\" id=\"u93ee1a32\">Microtask Queue: [callback2]</span></p><p data-lake-id=\"u6efacf10\" id=\"u6efacf10\"><br></p><blockquote data-lake-id=\"uf97f3061\" id=\"uf97f3061\"><p data-lake-id=\"u1b7bd36c\" id=\"u1b7bd36c\"><span data-lake-id=\"ucb395856\" id=\"ucb395856\">打印结果：<br /></span><span data-lake-id=\"u5f5ef199\" id=\"u5f5ef199\">1 <br /></span><span data-lake-id=\"uf44bd33a\" id=\"uf44bd33a\">4</span></p></blockquote><p data-lake-id=\"u7d23815d\" id=\"u7d23815d\"><br></p><h3 data-lake-id=\"0011237e\" id=\"0011237e\"><span data-lake-id=\"u6876366d\" id=\"u6876366d\">Step 5</span></h3><p data-lake-id=\"ub7fa20da\" id=\"ub7fa20da\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(7)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22aa853733%22%7D\"></card><p data-lake-id=\"u9d0df1a5\" id=\"u9d0df1a5\"><br></p><p data-lake-id=\"u9f08ee07\" id=\"u9f08ee07\"><span data-lake-id=\"ubb80e4d5\" id=\"ubb80e4d5\">Stack Queue: [console]</span></p><p data-lake-id=\"u84a5db62\" id=\"u84a5db62\"><br></p><p data-lake-id=\"u54bb3ac3\" id=\"u54bb3ac3\"><span data-lake-id=\"udede778f\" id=\"udede778f\">Macrotask Queue: [callback1, callback3]</span></p><p data-lake-id=\"u5bebb97b\" id=\"u5bebb97b\"><br></p><p data-lake-id=\"u4c34c2f6\" id=\"u4c34c2f6\"><span data-lake-id=\"u58005f40\" id=\"u58005f40\">Microtask Queue: [callback2]</span></p><p data-lake-id=\"uccab0c70\" id=\"uccab0c70\"><br></p><blockquote data-lake-id=\"ubac9908d\" id=\"ubac9908d\"><p data-lake-id=\"u80a8fc92\" id=\"u80a8fc92\"><span data-lake-id=\"u00865e82\" id=\"u00865e82\">打印结果：<br /></span><span data-lake-id=\"u676048f5\" id=\"u676048f5\">1 <br /></span><span data-lake-id=\"ua3e5a938\" id=\"ua3e5a938\">4 <br /></span><span data-lake-id=\"u2c593f52\" id=\"u2c593f52\">7</span></p></blockquote><p data-lake-id=\"ue33d2dcb\" id=\"ue33d2dcb\"><br></p><ul list=\"u17fba2f4\"><li fid=\"u47583950\" data-lake-id=\"u78f4a217\" id=\"u78f4a217\"><span data-lake-id=\"ucce79799\" id=\"ucce79799\">全局Script代码执行完了，进入下一个步骤，从microtask queue中依次取出任务执行，直到microtask queue队列为空。</span></li></ul><p data-lake-id=\"ueb2365d7\" id=\"ueb2365d7\"><br></p><h3 data-lake-id=\"f5ce4d42\" id=\"f5ce4d42\"><span data-lake-id=\"u6e6f3d3d\" id=\"u6e6f3d3d\">Step 6</span></h3><p data-lake-id=\"u3331299d\" id=\"u3331299d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(data)%20%20%20%20%20%20%20%2F%2F%20%E8%BF%99%E9%87%8Cdata%E6%98%AFPromise%E7%9A%84%E5%86%B3%E8%AE%AE%E5%80%BC5%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%229bfdc31f%22%7D\"></card><p data-lake-id=\"u27f1b32d\" id=\"u27f1b32d\"><br></p><p data-lake-id=\"u4ee6e1a4\" id=\"u4ee6e1a4\"><span data-lake-id=\"u83368c4e\" id=\"u83368c4e\">Stack Queue: [callback2]</span></p><p data-lake-id=\"ua17d8eef\" id=\"ua17d8eef\"><br></p><p data-lake-id=\"ua618287a\" id=\"ua618287a\"><span data-lake-id=\"uefbf47bb\" id=\"uefbf47bb\">Macrotask Queue: [callback1, callback3]</span></p><p data-lake-id=\"uac7cc499\" id=\"uac7cc499\"><br></p><p data-lake-id=\"u5ba2f412\" id=\"u5ba2f412\"><span data-lake-id=\"u1a247f01\" id=\"u1a247f01\">Microtask Queue: []</span></p><p data-lake-id=\"u2593824b\" id=\"u2593824b\"><br></p><blockquote data-lake-id=\"ubc44356a\" id=\"ubc44356a\"><p data-lake-id=\"u0a956a35\" id=\"u0a956a35\"><span data-lake-id=\"ube0ed979\" id=\"ube0ed979\">打印结果：<br /></span><span data-lake-id=\"u13bd3249\" id=\"u13bd3249\">1 <br /></span><span data-lake-id=\"u5f845126\" id=\"u5f845126\">4 <br /></span><span data-lake-id=\"u69016fb7\" id=\"u69016fb7\">7 <br /></span><span data-lake-id=\"uca352ff8\" id=\"uca352ff8\">5</span></p></blockquote><p data-lake-id=\"u5ef7979b\" id=\"u5ef7979b\"><br></p><ul list=\"uf9a86163\"><li fid=\"uc0ccc5f3\" data-lake-id=\"udd734a03\" id=\"udd734a03\"><span data-lake-id=\"u43e8d695\" id=\"u43e8d695\">这里microtask queue中只有一个任务，执行完后开始从宏任务队列macrotask queue中取位于队首的任务执行</span></li></ul><p data-lake-id=\"uef37bf12\" id=\"uef37bf12\"><br></p><h3 data-lake-id=\"805e47ec\" id=\"805e47ec\"><span data-lake-id=\"uefdbe66d\" id=\"uefdbe66d\">Step 7</span></h3><p data-lake-id=\"u0fbe131f\" id=\"u0fbe131f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(2)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225ce0a61e%22%7D\"></card><p data-lake-id=\"ud2420445\" id=\"ud2420445\"><br></p><p data-lake-id=\"u044299b9\" id=\"u044299b9\"><span data-lake-id=\"u2e192d96\" id=\"u2e192d96\">Stack Queue: [callback1]</span></p><p data-lake-id=\"u968186e9\" id=\"u968186e9\"><br></p><p data-lake-id=\"u3d2bc648\" id=\"u3d2bc648\"><span data-lake-id=\"ue002f86b\" id=\"ue002f86b\">Macrotask Queue: [callback3]</span></p><p data-lake-id=\"u33076489\" id=\"u33076489\"><br></p><p data-lake-id=\"u63aeb983\" id=\"u63aeb983\"><span data-lake-id=\"udcc83d66\" id=\"udcc83d66\">Microtask Queue: []</span></p><p data-lake-id=\"ue32f5b46\" id=\"ue32f5b46\"><br></p><blockquote data-lake-id=\"u933d1736\" id=\"u933d1736\"><p data-lake-id=\"u423c3aad\" id=\"u423c3aad\"><span data-lake-id=\"uebe974ee\" id=\"uebe974ee\">打印结果：<br /></span><span data-lake-id=\"u0dd42b0d\" id=\"u0dd42b0d\">1 <br /></span><span data-lake-id=\"u46277301\" id=\"u46277301\">4 <br /></span><span data-lake-id=\"u553fffa2\" id=\"u553fffa2\">7 <br /></span><span data-lake-id=\"uaeab8c55\" id=\"uaeab8c55\">5 <br /></span><span data-lake-id=\"ua7141e64\" id=\"ua7141e64\">2</span></p></blockquote><p data-lake-id=\"u58707aef\" id=\"u58707aef\"><br></p><p data-lake-id=\"u8e9aad61\" id=\"u8e9aad61\"><span data-lake-id=\"u3fc9af54\" id=\"u3fc9af54\">但是，执行callback1的时候又遇到了另一个Promise，Promise异步执行完后在microtask queue中又注册了一个callback4回调函数</span></p><p data-lake-id=\"uff1c04e3\" id=\"uff1c04e3\"><br></p><h3 data-lake-id=\"d60d761a\" id=\"d60d761a\"><span data-lake-id=\"u3ef4d55f\" id=\"u3ef4d55f\">Step 8</span></h3><p data-lake-id=\"ud1d00c1f\" id=\"ud1d00c1f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9Acallback4%EF%BC%8Cpromise%E5%B1%9E%E4%BA%8Emicrotask%EF%BC%8C%E6%89%80%E4%BB%A5%E6%94%BE%E5%88%B0microtask%20queue%E4%B8%AD%5Cn%20%20console.log(3)%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%227a832fb3%22%7D\"></card><p data-lake-id=\"u72abfa64\" id=\"u72abfa64\"><br></p><p data-lake-id=\"u6f07ba5d\" id=\"u6f07ba5d\"><span data-lake-id=\"u418fcd68\" id=\"u418fcd68\">Stack Queue: [promise]</span></p><p data-lake-id=\"u63e85d6b\" id=\"u63e85d6b\"><br></p><p data-lake-id=\"u94c30f3e\" id=\"u94c30f3e\"><span data-lake-id=\"ua5ef96ce\" id=\"ua5ef96ce\">Macrotask v: [callback3]</span></p><p data-lake-id=\"ub9c2c97c\" id=\"ub9c2c97c\"><br></p><p data-lake-id=\"u0b664c77\" id=\"u0b664c77\"><span data-lake-id=\"u27b5ecf0\" id=\"u27b5ecf0\">Microtask Queue: [callback4]</span></p><p data-lake-id=\"ubb519e7c\" id=\"ubb519e7c\"><br></p><blockquote data-lake-id=\"u4b3a6024\" id=\"u4b3a6024\"><p data-lake-id=\"ueefe19b5\" id=\"ueefe19b5\"><span data-lake-id=\"u3a693118\" id=\"u3a693118\">打印结果：<br /></span><span data-lake-id=\"u7618edf8\" id=\"u7618edf8\">1 <br /></span><span data-lake-id=\"u166fd867\" id=\"u166fd867\">4 <br /></span><span data-lake-id=\"u56b21c13\" id=\"u56b21c13\">7 <br /></span><span data-lake-id=\"u010fd7ab\" id=\"u010fd7ab\">5 <br /></span><span data-lake-id=\"u9a49e433\" id=\"u9a49e433\">2</span></p></blockquote><p data-lake-id=\"u645e6055\" id=\"u645e6055\"><br></p><ul list=\"uab39aca3\"><li fid=\"u9e792693\" data-lake-id=\"ub30a8fd9\" id=\"ub30a8fd9\"><span data-lake-id=\"u8ab009e1\" id=\"u8ab009e1\">取出一个宏任务macrotask执行完毕，然后再去微任务队列microtask queue中依次取出执行</span></li></ul><p data-lake-id=\"u10e45cc6\" id=\"u10e45cc6\"><br></p><h3 data-lake-id=\"54c8107e\" id=\"54c8107e\"><span data-lake-id=\"u6f42bd50\" id=\"u6f42bd50\">Step 9</span></h3><p data-lake-id=\"u0cc20d8b\" id=\"u0cc20d8b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(3)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b25cff72%22%7D\"></card><p data-lake-id=\"u12b74fc6\" id=\"u12b74fc6\"><br></p><p data-lake-id=\"u4a500170\" id=\"u4a500170\"><span data-lake-id=\"u511d8e31\" id=\"u511d8e31\">Stack Queue: [callback4]</span></p><p data-lake-id=\"u1d2ff149\" id=\"u1d2ff149\"><br></p><p data-lake-id=\"ufe2b6978\" id=\"ufe2b6978\"><span data-lake-id=\"u1cea9b33\" id=\"u1cea9b33\">Macrotask Queue: [callback3]</span></p><p data-lake-id=\"ue56f4561\" id=\"ue56f4561\"><br></p><p data-lake-id=\"u14a39263\" id=\"u14a39263\"><span data-lake-id=\"ue16e8fea\" id=\"ue16e8fea\">Microtask Queue: []</span></p><p data-lake-id=\"u77bf1ca8\" id=\"u77bf1ca8\"><br></p><blockquote data-lake-id=\"u2b985ea7\" id=\"u2b985ea7\"><p data-lake-id=\"u8256febe\" id=\"u8256febe\"><span data-lake-id=\"u960b55d4\" id=\"u960b55d4\">打印结果：<br /></span><span data-lake-id=\"u77f2607c\" id=\"u77f2607c\">1 <br /></span><span data-lake-id=\"u46ffb826\" id=\"u46ffb826\">4 <br /></span><span data-lake-id=\"ud33e58f6\" id=\"ud33e58f6\">7 <br /></span><span data-lake-id=\"u3c5b8769\" id=\"u3c5b8769\">5 <br /></span><span data-lake-id=\"u4396a828\" id=\"u4396a828\">2  <br /></span><span data-lake-id=\"uc7c43b6b\" id=\"uc7c43b6b\">3</span></p></blockquote><p data-lake-id=\"uaf73c7bd\" id=\"uaf73c7bd\"><br></p><ul list=\"u38fd326f\"><li fid=\"u3fdf773f\" data-lake-id=\"u8f83f3a1\" id=\"u8f83f3a1\"><span data-lake-id=\"u65f1c8ed\" id=\"u65f1c8ed\">微任务队列全部执行完，再去宏任务队列中取第一个任务执行</span></li></ul><p data-lake-id=\"u622bad3d\" id=\"u622bad3d\"><br></p><h3 data-lake-id=\"b9598260\" id=\"b9598260\"><span data-lake-id=\"u2ce7c0df\" id=\"u2ce7c0df\">Step 10</span></h3><p data-lake-id=\"uddfe841d\" id=\"uddfe841d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(6)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%224fab6c02%22%7D\"></card><p data-lake-id=\"uad9eb50d\" id=\"uad9eb50d\"><br></p><p data-lake-id=\"u4011dd9f\" id=\"u4011dd9f\"><span data-lake-id=\"u0d7dd6b7\" id=\"u0d7dd6b7\">Stack Queue: [callback3]</span></p><p data-lake-id=\"u6d1d7da2\" id=\"u6d1d7da2\"><br></p><p data-lake-id=\"u4e900fa7\" id=\"u4e900fa7\"><span data-lake-id=\"uab9c0120\" id=\"uab9c0120\">Macrotask Queue: []</span></p><p data-lake-id=\"uf6f936df\" id=\"uf6f936df\"><br></p><p data-lake-id=\"u0bce5ad7\" id=\"u0bce5ad7\"><span data-lake-id=\"u2ee24917\" id=\"u2ee24917\">Microtask Queue: []</span></p><p data-lake-id=\"ubbf413dd\" id=\"ubbf413dd\"><br></p><blockquote data-lake-id=\"u1a2f1815\" id=\"u1a2f1815\"><p data-lake-id=\"uf37d7476\" id=\"uf37d7476\"><span data-lake-id=\"u842ebb9d\" id=\"u842ebb9d\">打印结果：<br /></span><span data-lake-id=\"u96c84259\" id=\"u96c84259\">1 <br /></span><span data-lake-id=\"u2c572974\" id=\"u2c572974\">4 <br /></span><span data-lake-id=\"ub8c04884\" id=\"ub8c04884\">7 <br /></span><span data-lake-id=\"u2be4e786\" id=\"u2be4e786\">5 <br /></span><span data-lake-id=\"u02fcd671\" id=\"u02fcd671\">2 <br /></span><span data-lake-id=\"uc1c87dea\" id=\"uc1c87dea\">3 <br /></span><span data-lake-id=\"uc5a00754\" id=\"uc5a00754\">6</span></p></blockquote><p data-lake-id=\"u243d5fc1\" id=\"u243d5fc1\"><br></p><ul list=\"u361edba4\"><li fid=\"u63f5cc89\" data-lake-id=\"u4fb3e0a4\" id=\"u4fb3e0a4\"><span data-lake-id=\"u1d78110b\" id=\"u1d78110b\">以上，全部执行完后，Stack Queue为空，Macrotask Queue为空，Micro Queue为空</span></li></ul><p data-lake-id=\"u05d6ef27\" id=\"u05d6ef27\"><br></p><p data-lake-id=\"u8bd20b82\" id=\"u8bd20b82\"><span data-lake-id=\"u5ba76e11\" id=\"u5ba76e11\">Stack Queue: []</span></p><p data-lake-id=\"uaecfe561\" id=\"uaecfe561\"><br></p><p data-lake-id=\"u1a2109a8\" id=\"u1a2109a8\"><span data-lake-id=\"u4faeec9a\" id=\"u4faeec9a\">Macrotask Queue: []</span></p><p data-lake-id=\"u9e1b71fb\" id=\"u9e1b71fb\"><br></p><p data-lake-id=\"u3ce02ecf\" id=\"u3ce02ecf\"><span data-lake-id=\"u325adaea\" id=\"u325adaea\">Microtask Queue: []</span></p><p data-lake-id=\"u275b345f\" id=\"u275b345f\"><br></p><p data-lake-id=\"u901114a1\" id=\"u901114a1\"><span data-lake-id=\"ue33136b7\" id=\"ue33136b7\">因为是第一个例子，所以这里分析的比较详细，大家仔细看一下，接下来我们再来一个例子：</span></p><p data-lake-id=\"ubf897624\" id=\"ubf897624\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(1)%3B%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log(2)%3B%5Cn%20%20Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(3)%5Cn%20%20%7D)%3B%5Cn%7D)%3B%5Cn%5Cnnew%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20console.log(4)%5Cn%20%20resolve(5)%5Cn%7D).then((data)%20%3D%3E%20%7B%5Cn%20%20console.log(data)%3B%5Cn%20%20%5Cn%20%20Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(6)%5Cn%20%20%7D).then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(7)%5Cn%20%20%20%20%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20console.log(8)%5Cn%20%20%20%20%7D%2C%200)%3B%5Cn%20%20%7D)%3B%5Cn%7D)%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log(9)%3B%5Cn%7D)%5Cn%5Cnconsole.log(10)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2202e6307c%22%7D\"></card><p data-lake-id=\"u69cbcc6a\" id=\"u69cbcc6a\"><br></p><p data-lake-id=\"u9165635c\" id=\"u9165635c\"><span data-lake-id=\"udc3f760a\" id=\"udc3f760a\">最终输出结果是什么呢？参考前面的例子，好好想一想......</span></p><p data-lake-id=\"u197a3b85\" id=\"u197a3b85\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%2F%2F%20%E6%AD%A3%E7%A1%AE%E7%AD%94%E6%A1%88%5Cn1%5Cn4%5Cn10%5Cn5%5Cn6%5Cn7%5Cn2%5Cn3%5Cn9%5Cn8%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%228649f45f%22%7D\"></card><p data-lake-id=\"u66b2ce45\" id=\"u66b2ce45\"><br></p><p data-lake-id=\"u716f950a\" id=\"u716f950a\"><span data-lake-id=\"uee5cfcea\" id=\"uee5cfcea\">相信大家都答对了，这里的关键在前面已经提过：</span></p><p data-lake-id=\"u6fdd2039\" id=\"u6fdd2039\"><br></p><p data-lake-id=\"uecd8735a\" id=\"uecd8735a\"><strong><span data-lake-id=\"uac3a9588\" id=\"uac3a9588\">在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。</span></strong></p><p data-lake-id=\"u7edfafea\" id=\"u7edfafea\"><br></p><p data-lake-id=\"ua912177a\" id=\"ua912177a\"><span data-lake-id=\"u88ed9217\" id=\"u88ed9217\">注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。</span></p><p data-lake-id=\"u57dafd75\" id=\"u57dafd75\"><br></p><p data-lake-id=\"u056f08c9\" id=\"u056f08c9\"><span data-lake-id=\"u83bb3192\" id=\"u83bb3192\">浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。</span></p><p data-lake-id=\"u64b666d3\" id=\"u64b666d3\"><br></p><h2 data-lake-id=\"475884cf\" id=\"475884cf\"><span data-lake-id=\"uf7c7dea7\" id=\"uf7c7dea7\">NodeJS中的Event Loop</span></h2><p data-lake-id=\"ub05aebee\" id=\"ub05aebee\"><br></p><h3 data-lake-id=\"libuv\" id=\"libuv\"><span data-lake-id=\"u36c8b3f7\" id=\"u36c8b3f7\">libuv</span></h3><p data-lake-id=\"u3d097fe5\" id=\"u3d097fe5\"><br></p><p data-lake-id=\"u486a4c00\" id=\"u486a4c00\"><span data-lake-id=\"u0053184b\" id=\"u0053184b\">先来看一张libuv的结构图：</span></p><p data-lake-id=\"ubb93fe7a\" id=\"ubb93fe7a\"><br></p><p data-lake-id=\"uce0692bf\" id=\"uce0692bf\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1640150869182-c542d656-f43b-4b7b-ab76-07395f20db36.png%22%2C%22taskId%22%3A%22uc5809e64-e5f8-47c8-bed4-c2612d7a9af%22%2C%22clientId%22%3A%22u3788e183-4257-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%222021-03-24_Event%20Loop_2.png%22%2C%22size%22%3A141080%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A732%2C%22originHeight%22%3A289%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22THENODE.JSSYSTEM%20NODE.JS%20LIBUV%20APPLICATION%20BINDINGS%20(ASYNCHRONOUSVO)%20WORKER%20EVENT%20(NODEAPI)%20QUEUE%20THREADS%20BLOCKING%20JAVASCRIPT%20OPERATION%20FILESTSTEH%20NETWORK%20FkoaSS%200S%20EVENT%20OPERATION%20LOOP%20V8%20(UJAVASCRIPTENGINE%20EXECUTE%20CALLBACK%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A234.74463%2C%22y%22%3A6.369619%2C%22width%22%3A267.45947%2C%22height%22%3A23.465489%2C%22text%22%3A%22THENODE.JSSYSTEM%22%7D%2C%7B%22x%22%3A192.18306%2C%22y%22%3A50.312916%2C%22width%22%3A84.68401%2C%22height%22%3A17.141924000000003%2C%22text%22%3A%22NODE.JS%22%7D%2C%7B%22x%22%3A481.2479%2C%22y%22%3A52.43511%2C%22width%22%3A56.99079999999998%2C%22height%22%3A17.29184%2C%22text%22%3A%22LIBUV%22%7D%2C%7B%22x%22%3A26.143595%2C%22y%22%3A56.5062%2C%22width%22%3A128.397225%2C%22height%22%3A21.305895999999997%2C%22text%22%3A%22APPLICATION%22%7D%2C%7B%22x%22%3A186.98999%2C%22y%22%3A69.22335%2C%22width%22%3A94.43253000000001%2C%22height%22%3A16.998170000000002%2C%22text%22%3A%22BINDINGS%22%7D%2C%7B%22x%22%3A454.36533%2C%22y%22%3A69.53857%2C%22width%22%3A110.76913000000002%2C%22height%22%3A12.466999999999999%2C%22text%22%3A%22(ASYNCHRONOUSVO)%22%7D%2C%7B%22x%22%3A647.38007%2C%22y%22%3A85.87839%2C%22width%22%3A58.83312999999998%2C%22height%22%3A11.925110000000004%2C%22text%22%3A%22WORKER%22%7D%2C%7B%22x%22%3A323.85934%2C%22y%22%3A85.45696%2C%22width%22%3A42.34742%2C%22height%22%3A12.433310000000006%2C%22text%22%3A%22EVENT%22%7D%2C%7B%22x%22%3A204.91492%2C%22y%22%3A87.994835%2C%22width%22%3A56.136720000000025%2C%22height%22%3A10.591431%2C%22text%22%3A%22(NODEAPI)%22%7D%2C%7B%22x%22%3A321.8503%2C%22y%22%3A98.149956%2C%22width%22%3A46.49234999999999%2C%22height%22%3A12.81092799999999%2C%22text%22%3A%22QUEUE%22%7D%2C%7B%22x%22%3A647.132%2C%22y%22%3A98.811485%2C%22width%22%3A60.2731%2C%22height%22%3A12.110694999999993%2C%22text%22%3A%22THREADS%22%7D%2C%7B%22x%22%3A557.25323%2C%22y%22%3A103.452515%2C%22width%22%3A68.95696999999996%2C%22height%22%3A12.800494999999998%2C%22text%22%3A%22BLOCKING%22%7D%2C%7B%22x%22%3A44.6394%2C%22y%22%3A110.34055%2C%22width%22%3A88.36837%2C%22height%22%3A13.738285000000005%2C%22text%22%3A%22JAVASCRIPT%22%7D%2C%7B%22x%22%3A552.5213%2C%22y%22%3A116.64923%2C%22width%22%3A73.96686%2C%22height%22%3A13.482479999999995%2C%22text%22%3A%22OPERATION%22%7D%2C%7B%22x%22%3A651.7221%2C%22y%22%3A119.53144%2C%22width%22%3A50.05790000000002%2C%22height%22%3A7.174545999999992%2C%22text%22%3A%22FILESTSTEH%22%7D%2C%7B%22x%22%3A657.13745%2C%22y%22%3A141.74681%2C%22width%22%3A40.15545000000009%2C%22height%22%3A8.068119999999993%2C%22text%22%3A%22NETWORK%22%7D%2C%7B%22x%22%3A658.5683%2C%22y%22%3A163.80725%2C%22width%22%3A36.302099999999996%2C%22height%22%3A7.7928%2C%22text%22%3A%22FkoaSS%22%7D%2C%7B%22x%22%3A226.07039%2C%22y%22%3A176.4008%2C%22width%22%3A18.654629999999997%2C%22height%22%3A11.773879999999991%2C%22text%22%3A%220S%22%7D%2C%7B%22x%22%3A456.16113%2C%22y%22%3A177.47755%2C%22width%22%3A40.409519999999986%2C%22height%22%3A12.144090000000006%2C%22text%22%3A%22EVENT%22%7D%2C%7B%22x%22%3A196.78746%2C%22y%22%3A186.78809%2C%22width%22%3A75.4615%2C%22height%22%3A16.108589999999992%2C%22text%22%3A%22OPERATION%22%7D%2C%7B%22x%22%3A457.19055%2C%22y%22%3A188.8579%2C%22width%22%3A37.271150000000034%2C%22height%22%3A12.66176999999999%2C%22text%22%3A%22LOOP%22%7D%2C%7B%22x%22%3A74.93811%2C%22y%22%3A189.917%2C%22width%22%3A29.122190000000003%2C%22height%22%3A15.981210000000004%2C%22text%22%3A%22V8%22%7D%2C%7B%22x%22%3A28.23417%2C%22y%22%3A207.17737%2C%22width%22%3A121.50065000000001%2C%22height%22%3A12.18370999999999%2C%22text%22%3A%22(UJAVASCRIPTENGINE%22%7D%2C%7B%22x%22%3A553.8889%2C%22y%22%3A216.21967%2C%22width%22%3A57.52170000000001%2C%22height%22%3A11.205359999999985%2C%22text%22%3A%22EXECUTE%22%7D%2C%7B%22x%22%3A553.4129%2C%22y%22%3A228.6482%2C%22width%22%3A70.44129999999996%2C%22height%22%3A13.121039999999994%2C%22text%22%3A%22CALLBACK%22%7D%5D%2C%22id%22%3A%22uc3ec049c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u279702c9\" id=\"u279702c9\"><br></p><h3 data-lake-id=\"87a7af42\" id=\"87a7af42\"><span data-lake-id=\"u05b08cc2\" id=\"u05b08cc2\">NodeJS中的宏队列和微队列</span></h3><p data-lake-id=\"ubf2c931c\" id=\"ubf2c931c\"><br></p><p data-lake-id=\"ue7f598ea\" id=\"ue7f598ea\"><span data-lake-id=\"u3eb5ebc2\" id=\"u3eb5ebc2\">NodeJS的Event Loop中，执行宏队列的回调任务有</span><strong><span data-lake-id=\"ufafcfd78\" id=\"ufafcfd78\">6个阶段</span></strong><span data-lake-id=\"u1166ffb9\" id=\"u1166ffb9\">，如下图：</span></p><p data-lake-id=\"u949ec36a\" id=\"u949ec36a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1640150881821-daf37c3f-7f75-4b45-a655-133cf582187e.png%22%2C%22taskId%22%3A%22u9be5125f-53de-487d-84c8-cf78bb786fa%22%2C%22clientId%22%3A%22u3788e183-4257-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%222021-03-24_Event%20Loop_3.png%22%2C%22size%22%3A8419%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A670%2C%22originHeight%22%3A339%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22timers%20I%2FOca1ibacks%20idle%2Cprepare%20incoming%3A%20connections%2C%20po11%20dataetc.%20check%20closecalibacks%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A95.15844%2C%22y%22%3A36.03269%2C%22width%22%3A39.72167%2C%22height%22%3A11.185865%2C%22text%22%3A%22timers%22%7D%2C%7B%22x%22%3A74.79347%2C%22y%22%3A86.84933%2C%22width%22%3A87.03322999999999%2C%22height%22%3A11.817050000000009%2C%22text%22%3A%22I%2FOca1ibacks%22%7D%2C%7B%22x%22%3A74.580605%2C%22y%22%3A137.3858%2C%22width%22%3A87.58376499999999%2C%22height%22%3A12.063950000000006%2C%22text%22%3A%22idle%2Cprepare%22%7D%2C%7B%22x%22%3A266.01608%2C%22y%22%3A172.2334%2C%22width%22%3A57.19762000000003%2C%22height%22%3A12.28203000000002%2C%22text%22%3A%22incoming%3A%22%7D%2C%7B%22x%22%3A259.44012%2C%22y%22%3A189.66467%2C%22width%22%3A79.09470000000005%2C%22height%22%3A11.815390000000008%2C%22text%22%3A%22connections%2C%22%7D%2C%7B%22x%22%3A100.75973%2C%22y%22%3A190.0224%2C%22width%22%3A26.287819999999996%2C%22height%22%3A10.795410000000004%2C%22text%22%3A%22po11%22%7D%2C%7B%22x%22%3A266.6329%2C%22y%22%3A208.2204%2C%22width%22%3A63.33924000000002%2C%22height%22%3A10.415109999999999%2C%22text%22%3A%22dataetc.%22%7D%2C%7B%22x%22%3A94.469444%2C%22y%22%3A241.34612%2C%22width%22%3A35.273786000000015%2C%22height%22%3A10.073149999999998%2C%22text%22%3A%22check%22%7D%2C%7B%22x%22%3A69.52526%2C%22y%22%3A291.70505%2C%22width%22%3A99.37664000000001%2C%22height%22%3A10.949279999999987%2C%22text%22%3A%22closecalibacks%22%7D%5D%2C%22id%22%3A%22u712b2992%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uac29d065\" id=\"uac29d065\"><br></p><p data-lake-id=\"u728ea648\" id=\"u728ea648\"><br></p><p data-lake-id=\"u333b59cd\" id=\"u333b59cd\"><span data-lake-id=\"u9d9e8145\" id=\"u9d9e8145\">各个阶段执行的任务如下：</span></p><p data-lake-id=\"u6750d792\" id=\"u6750d792\"><br></p><ul list=\"uf652f087\"><li fid=\"u16dffe19\" data-lake-id=\"u07d04c61\" id=\"u07d04c61\"><strong><span data-lake-id=\"u6ed19570\" id=\"u6ed19570\">timers阶段</span></strong><span data-lake-id=\"u8396250a\" id=\"u8396250a\">：这个阶段执行setTimeout和setInterval预定的callback</span></li><li fid=\"u16dffe19\" data-lake-id=\"u06bedbe5\" id=\"u06bedbe5\"><strong><span data-lake-id=\"u1eaa9c71\" id=\"u1eaa9c71\">I/O callback阶段</span></strong><span data-lake-id=\"uc5c87c0c\" id=\"uc5c87c0c\">：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks</span></li><li fid=\"u16dffe19\" data-lake-id=\"u1b411149\" id=\"u1b411149\"><strong><span data-lake-id=\"u101a4a8b\" id=\"u101a4a8b\">idle, prepare阶段</span></strong><span data-lake-id=\"ub95f800a\" id=\"ub95f800a\">：仅node内部使用</span></li><li fid=\"u16dffe19\" data-lake-id=\"u0193cd6e\" id=\"u0193cd6e\"><strong><span data-lake-id=\"u6680b8b1\" id=\"u6680b8b1\">poll阶段</span></strong><span data-lake-id=\"u7331453f\" id=\"u7331453f\">：获取新的I/O事件，适当的条件下node将阻塞在这里</span></li><li fid=\"u16dffe19\" data-lake-id=\"u6345d6f5\" id=\"u6345d6f5\"><strong><span data-lake-id=\"ue47ea42a\" id=\"ue47ea42a\">check阶段</span></strong><span data-lake-id=\"uf085c62e\" id=\"uf085c62e\">：执行setImmediate()设定的callbacks</span></li><li fid=\"u16dffe19\" data-lake-id=\"u80e91950\" id=\"u80e91950\"><strong><span data-lake-id=\"u56a0cc55\" id=\"u56a0cc55\">close callbacks阶段</span></strong><span data-lake-id=\"u1548359e\" id=\"u1548359e\">：执行socket.on('close', ....)这些callbacks</span></li></ul><p data-lake-id=\"u25cbdb63\" id=\"u25cbdb63\"><br></p><h4 data-lake-id=\"6edfbed4\" id=\"6edfbed4\"><span data-lake-id=\"u1156e32e\" id=\"u1156e32e\">NodeJS中宏队列主要有4个</span></h4><p data-lake-id=\"u6a562006\" id=\"u6a562006\"><br></p><p data-lake-id=\"ud5066d40\" id=\"ud5066d40\"><span data-lake-id=\"u78e436af\" id=\"u78e436af\">由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：</span></p><p data-lake-id=\"u3348b0c3\" id=\"u3348b0c3\"><br></p><ol list=\"u0d0b07fa\"><li fid=\"ucce59845\" data-lake-id=\"ucc8acd70\" id=\"ucc8acd70\"><span data-lake-id=\"uf43ec5fd\" id=\"uf43ec5fd\">Timers Queue</span></li><li fid=\"ucce59845\" data-lake-id=\"u8b0779f0\" id=\"u8b0779f0\"><span data-lake-id=\"u43eed850\" id=\"u43eed850\">IO Callbacks Queue</span></li><li fid=\"ucce59845\" data-lake-id=\"ucfe44f4d\" id=\"ucfe44f4d\"><span data-lake-id=\"u0a034543\" id=\"u0a034543\">Check Queue</span></li><li fid=\"ucce59845\" data-lake-id=\"uedd05e38\" id=\"uedd05e38\"><span data-lake-id=\"u7d70ace8\" id=\"u7d70ace8\">Close Callbacks Queue</span></li></ol><p data-lake-id=\"u44264fcc\" id=\"u44264fcc\"><br></p><p data-lake-id=\"u33b739ba\" id=\"u33b739ba\"><span data-lake-id=\"u4a201fc0\" id=\"u4a201fc0\">这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。</span></p><p data-lake-id=\"ufb93f60e\" id=\"ufb93f60e\"><br></p><h4 data-lake-id=\"180fc5b8\" id=\"180fc5b8\"><span data-lake-id=\"u3145d192\" id=\"u3145d192\">NodeJS中微队列主要有2个</span></h4><p data-lake-id=\"uf34afaf2\" id=\"uf34afaf2\"><br></p><ol list=\"u932ccb38\"><li fid=\"u6ae2e125\" data-lake-id=\"uf35dd7e7\" id=\"uf35dd7e7\"><span data-lake-id=\"ueac80f75\" id=\"ueac80f75\">Next Tick Queue：是放置process.nextTick(callback)的回调任务的</span></li><li fid=\"u6ae2e125\" data-lake-id=\"ua69ffb7c\" id=\"ua69ffb7c\"><span data-lake-id=\"uf2fa7740\" id=\"uf2fa7740\">Other Micro Queue：放置其他microtask，比如Promise等</span></li></ol><p data-lake-id=\"ue6bbc9d5\" id=\"ue6bbc9d5\"><br></p><p data-lake-id=\"ueef4dc01\" id=\"ueef4dc01\"><span data-lake-id=\"u17abcd08\" id=\"u17abcd08\">在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。</span></p><p data-lake-id=\"u42ef0b13\" id=\"u42ef0b13\"><br></p><p data-lake-id=\"u656f8447\" id=\"u656f8447\"><span data-lake-id=\"u878cef08\" id=\"u878cef08\">具体可以通过下图加深一下理解：</span></p><p data-lake-id=\"ub7ebfaf5\" id=\"ub7ebfaf5\"><br></p><p data-lake-id=\"uf5154fad\" id=\"uf5154fad\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1640150892410-a170dd7d-c70b-42b6-bf90-5ac6f1a9fce8.png%22%2C%22taskId%22%3A%22u05d620c9-3659-46ae-b493-fe98d5ca38a%22%2C%22clientId%22%3A%22u3788e183-4257-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%222021-03-24_Event%20Loop_4.png%22%2C%22size%22%3A54689%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A732%2C%22originHeight%22%3A405%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22expiredtimers%2Fintervalsqueue%20StantolEventLOOp%20(setTimeouVsetlnterval)%20Exitoftheloop%20nexttickqueue%20IOeventsqueue%20closehandlersgueue%20OtherMicrotasksqueue%20(resolvedpromisesetc)%20immediatesqueue%20(setlmmediate)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A283.4436%2C%22y%22%3A12.432851%2C%22width%22%3A146.7767%2C%22height%22%3A10.982615%2C%22text%22%3A%22expiredtimers%2Fintervalsqueue%22%7D%2C%7B%22x%22%3A127.566505%2C%22y%22%3A18.212257%2C%22width%22%3A90.09095499999998%2C%22height%22%3A12.709055%2C%22text%22%3A%22StantolEventLOOp%22%7D%2C%7B%22x%22%3A301.78305%2C%22y%22%3A25.275545%2C%22width%22%3A114.77627999999999%2C%22height%22%3A10.823782000000001%2C%22text%22%3A%22(setTimeouVsetlnterval)%22%7D%2C%7B%22x%22%3A57.318237%2C%22y%22%3A100.626015%2C%22width%22%3A69.15114299999999%2C%22height%22%3A12.209961000000007%2C%22text%22%3A%22Exitoftheloop%22%7D%2C%7B%22x%22%3A332.8754%2C%22y%22%3A170.01964%2C%22width%22%3A74.19695999999999%2C%22height%22%3A11.642849999999981%2C%22text%22%3A%22nexttickqueue%22%7D%2C%7B%22x%22%3A600.3851%2C%22y%22%3A187.35272%2C%22width%22%3A79.54780000000005%2C%22height%22%3A11.317219999999992%2C%22text%22%3A%22IOeventsqueue%22%7D%2C%7B%22x%22%3A40.425602%2C%22y%22%3A188.59137%2C%22width%22%3A104.235028%2C%22height%22%3A10.22826999999998%2C%22text%22%3A%22closehandlersgueue%22%7D%2C%7B%22x%22%3A314.42493%2C%22y%22%3A213.21907%2C%22width%22%3A111.30726999999996%2C%22height%22%3A10.384160000000008%2C%22text%22%3A%22OtherMicrotasksqueue%22%7D%2C%7B%22x%22%3A315.79523%2C%22y%22%3A225.69176%2C%22width%22%3A108.9017%2C%22height%22%3A10.380320000000012%2C%22text%22%3A%22(resolvedpromisesetc)%22%7D%2C%7B%22x%22%3A322.48877%2C%22y%22%3A358.96335%2C%22width%22%3A90.99625000000003%2C%22height%22%3A11.16333000000003%2C%22text%22%3A%22immediatesqueue%22%7D%2C%7B%22x%22%3A332.7316%2C%22y%22%3A371.20215%2C%22width%22%3A74.23625999999996%2C%22height%22%3A10.97542999999996%2C%22text%22%3A%22(setlmmediate)%22%7D%5D%2C%22id%22%3A%22u32cf3abc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1d261fa5\" id=\"u1d261fa5\"><br></p><p data-lake-id=\"uad12c3d3\" id=\"uad12c3d3\"><span data-lake-id=\"u5ee3c6f7\" id=\"u5ee3c6f7\">大体解释一下NodeJS的Event Loop过程：</span></p><p data-lake-id=\"u6288599d\" id=\"u6288599d\"><br></p><ol list=\"u8faac41f\"><li fid=\"u8f299ec8\" data-lake-id=\"uc2e1446d\" id=\"uc2e1446d\"><span data-lake-id=\"u4749fc04\" id=\"u4749fc04\">执行全局Script的同步代码</span></li><li fid=\"u8f299ec8\" data-lake-id=\"u67cfffb2\" id=\"u67cfffb2\"><span data-lake-id=\"u3a46458c\" id=\"u3a46458c\">执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务</span></li><li fid=\"u8f299ec8\" data-lake-id=\"ua8f68e8b\" id=\"ua8f68e8b\"><span data-lake-id=\"ud8b838a1\" id=\"ud8b838a1\">开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2</span></li><li fid=\"u8f299ec8\" data-lake-id=\"u81b9e990\" id=\"u81b9e990\"><span data-lake-id=\"u7e85defe\" id=\"u7e85defe\">Timers Queue -&gt; 步骤2 -&gt; I/O Queue -&gt; 步骤2 -&gt; Check Queue -&gt; 步骤2 -&gt; Close Callback Queue -&gt; 步骤2 -&gt; Timers Queue ......</span></li><li fid=\"u8f299ec8\" data-lake-id=\"u61ac22d3\" id=\"u61ac22d3\"><span data-lake-id=\"ucd8dee0e\" id=\"ucd8dee0e\">这就是Node的Event Loop</span></li></ol>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"9fc3d304\" id=\"9fc3d304\"><span data-lake-id=\"u6f93a2e9\" id=\"u6f93a2e9\">Event Loop</span></h1><p data-lake-id=\"ufb7b7e1f\" id=\"ufb7b7e1f\"><br></p><h2 data-lake-id=\"98de9c71\" id=\"98de9c71\"><span data-lake-id=\"u229ed5e2\" id=\"u229ed5e2\">单线程</span></h2><p data-lake-id=\"u3dd03e90\" id=\"u3dd03e90\"><br></p><p data-lake-id=\"ucdf93a2e\" id=\"ucdf93a2e\"><span data-lake-id=\"u4117d029\" id=\"u4117d029\">JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</span></p><p data-lake-id=\"u84439f7f\" id=\"u84439f7f\"><br></p><p data-lake-id=\"u3666f55d\" id=\"u3666f55d\"><span data-lake-id=\"u04a669fb\" id=\"u04a669fb\">JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</span></p><p data-lake-id=\"udd82394b\" id=\"udd82394b\"><br></p><p data-lake-id=\"uf9d3e2bc\" id=\"uf9d3e2bc\"><span data-lake-id=\"u9270d655\" id=\"u9270d655\">所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</span></p><p data-lake-id=\"u7f8a7b47\" id=\"u7f8a7b47\"><br></p><p data-lake-id=\"u6509faa9\" id=\"u6509faa9\"><span data-lake-id=\"u74dded2e\" id=\"u74dded2e\">为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</span></p><p data-lake-id=\"uc1567876\" id=\"uc1567876\"><br></p><h2 data-lake-id=\"0b387bc7\" id=\"0b387bc7\"><span data-lake-id=\"u8571b26f\" id=\"u8571b26f\">任务队列</span></h2><p data-lake-id=\"ub703e905\" id=\"ub703e905\"><br></p><p data-lake-id=\"uf1cf1018\" id=\"uf1cf1018\"><span data-lake-id=\"u7511760b\" id=\"u7511760b\">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</span></p><p data-lake-id=\"u038e41df\" id=\"u038e41df\"><br></p><p data-lake-id=\"ue0468725\" id=\"ue0468725\"><span data-lake-id=\"u6185091b\" id=\"u6185091b\">如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</span></p><p data-lake-id=\"u4c24131c\" id=\"u4c24131c\"><br></p><p data-lake-id=\"ufa924d39\" id=\"ufa924d39\"><span data-lake-id=\"u6494d5a5\" id=\"u6494d5a5\">JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</span></p><p data-lake-id=\"ue2ee18e5\" id=\"ue2ee18e5\"><br></p><p data-lake-id=\"ufa0b423e\" id=\"ufa0b423e\"><span data-lake-id=\"u9f356c57\" id=\"u9f356c57\">于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</span></p><p data-lake-id=\"u78cdc237\" id=\"u78cdc237\"><br></p><p data-lake-id=\"u663bf87f\" id=\"u663bf87f\"><span data-lake-id=\"u954c760b\" id=\"u954c760b\">具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</span></p><p data-lake-id=\"u25733ef0\" id=\"u25733ef0\"><br></p><blockquote data-lake-id=\"ub0803929\" id=\"ub0803929\"><p data-lake-id=\"ufedb9dba\" id=\"ufedb9dba\"><span data-lake-id=\"u0dac6c67\" id=\"u0dac6c67\">（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br /><br /></span><span data-lake-id=\"ua2d954fa\" id=\"ua2d954fa\">（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。<br /><br /></span><span data-lake-id=\"ub362d9a7\" id=\"ub362d9a7\">（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br /><br /></span><span data-lake-id=\"u4d238d8e\" id=\"u4d238d8e\">（4）主线程不断重复上面的第三步。</span></p></blockquote><p data-lake-id=\"u56c394ec\" id=\"u56c394ec\"><br></p><h2 data-lake-id=\"1a07985f\" id=\"1a07985f\"><span data-lake-id=\"u54db2035\" id=\"u54db2035\">事件和回调函数</span></h2><p data-lake-id=\"u46b3bab7\" id=\"u46b3bab7\"><br></p><p data-lake-id=\"u8a893b90\" id=\"u8a893b90\"><span data-lake-id=\"u9d077b90\" id=\"u9d077b90\">&quot;任务队列&quot;是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在&quot;任务队列&quot;中添加一个事件，表示相关的异步任务可以进入&quot;执行栈&quot;了。主线程读取&quot;任务队列&quot;，就是读取里面有哪些事件。</span></p><p data-lake-id=\"uf4a0de25\" id=\"uf4a0de25\"><br></p><p data-lake-id=\"u4d6c0626\" id=\"u4d6c0626\"><span data-lake-id=\"ud1d68568\" id=\"ud1d68568\">&quot;任务队列&quot;中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入&quot;任务队列&quot;，等待主线程读取。</span></p><p data-lake-id=\"ud68ba3ee\" id=\"ud68ba3ee\"><br></p><p data-lake-id=\"ufbb32559\" id=\"ufbb32559\"><span data-lake-id=\"ue6578bd7\" id=\"ue6578bd7\">所谓&quot;回调函数&quot;（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</span></p><p data-lake-id=\"ud7866bbf\" id=\"ud7866bbf\"><br></p><p data-lake-id=\"uf4b34dd3\" id=\"uf4b34dd3\"><span data-lake-id=\"u4e3b4424\" id=\"u4e3b4424\">&quot;任务队列&quot;是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，&quot;任务队列&quot;上第一位的事件就自动进入主线程。但是，由于存在后文提到的&quot;定时器&quot;功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</span></p><p data-lake-id=\"uf0694a21\" id=\"uf0694a21\"><br></p><h2 data-lake-id=\"f56cc53b\" id=\"f56cc53b\"><span data-lake-id=\"u3f232c12\" id=\"u3f232c12\">Event Loop是什么</span></h2><p data-lake-id=\"ufe438088\" id=\"ufe438088\"><br></p><p data-lake-id=\"u83d0e376\" id=\"u83d0e376\"><strong><span data-lake-id=\"u120e09c2\" id=\"u120e09c2\">event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</span></strong></p><p data-lake-id=\"u8d23ed4c\" id=\"u8d23ed4c\"><br></p><ul list=\"ue812ad25\"><li fid=\"u16ea32d3\" data-lake-id=\"u649efdb9\" id=\"u649efdb9\"><span data-lake-id=\"u35761919\" id=\"u35761919\">浏览器的Event Loop是在</span><a href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\" target=\"_blank\" data-lake-id=\"u4c7275bc\" id=\"u4c7275bc\"><span data-lake-id=\"u283d9902\" id=\"u283d9902\">html5的规范</span></a><span data-lake-id=\"u08cc95cd\" id=\"u08cc95cd\">中明确定义。</span></li><li fid=\"u16ea32d3\" data-lake-id=\"u776f1a5d\" id=\"u776f1a5d\"><span data-lake-id=\"ud61bde0f\" id=\"ud61bde0f\">NodeJS的Event Loop是基于libuv实现的。可以参考Node的</span><a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" data-lake-id=\"u72becb4c\" id=\"u72becb4c\"><span data-lake-id=\"uffdce86b\" id=\"uffdce86b\">官方文档</span></a><span data-lake-id=\"ub808577d\" id=\"ub808577d\">以及libuv的</span><a href=\"http://docs.libuv.org/en/v1.x/design.html\" target=\"_blank\" data-lake-id=\"u79a3c876\" id=\"u79a3c876\"><span data-lake-id=\"u867f3b55\" id=\"u867f3b55\">官方文档</span></a><span data-lake-id=\"ub6e610f5\" id=\"ub6e610f5\">。</span></li><li fid=\"u16ea32d3\" data-lake-id=\"uaa99a767\" id=\"uaa99a767\"><span data-lake-id=\"u0f930aed\" id=\"u0f930aed\">libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。</span></li></ul><p data-lake-id=\"uaf2bff4f\" id=\"uaf2bff4f\"><br></p><h2 data-lake-id=\"f4c82775\" id=\"f4c82775\"><span data-lake-id=\"uca338d11\" id=\"uca338d11\">宏队列和微队列</span></h2><p data-lake-id=\"u4999998d\" id=\"u4999998d\"><br></p><p data-lake-id=\"ud7045377\" id=\"ud7045377\"><strong><span data-lake-id=\"u8a6dfb1e\" id=\"u8a6dfb1e\">宏队列，macrotask，也叫tasks。</span></strong><span data-lake-id=\"ucfef7fa9\" id=\"ucfef7fa9\"> 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</span></p><p data-lake-id=\"u7d597de5\" id=\"u7d597de5\"><br></p><ul list=\"u4082a386\"><li fid=\"u157fe237\" data-lake-id=\"u87b045c9\" id=\"u87b045c9\"><span data-lake-id=\"u7ef8312b\" id=\"u7ef8312b\">setTimeout</span></li><li fid=\"u157fe237\" data-lake-id=\"uac74fa17\" id=\"uac74fa17\"><span data-lake-id=\"u35343311\" id=\"u35343311\">setInterval</span></li><li fid=\"u157fe237\" data-lake-id=\"uaba1043a\" id=\"uaba1043a\"><span data-lake-id=\"u7e659064\" id=\"u7e659064\">setImmediate (Node独有)</span></li><li fid=\"u157fe237\" data-lake-id=\"u3f2df8b5\" id=\"u3f2df8b5\"><span data-lake-id=\"u7a33e38c\" id=\"u7a33e38c\">requestAnimationFrame (浏览器独有)</span></li><li fid=\"u157fe237\" data-lake-id=\"ubef351ab\" id=\"ubef351ab\"><span data-lake-id=\"u9d22d54b\" id=\"u9d22d54b\">I/O</span></li><li fid=\"u157fe237\" data-lake-id=\"uc1a2c1f9\" id=\"uc1a2c1f9\"><span data-lake-id=\"u4d13c989\" id=\"u4d13c989\">UI rendering (浏览器独有)</span></li></ul><p data-lake-id=\"u8c331d87\" id=\"u8c331d87\"><br></p><p data-lake-id=\"u3e3dec93\" id=\"u3e3dec93\"><strong><span data-lake-id=\"u6add5cc2\" id=\"u6add5cc2\">微队列，microtask，也叫jobs</span></strong><span data-lake-id=\"ud1675ba1\" id=\"ud1675ba1\">。 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</span></p><p data-lake-id=\"u463a6ec8\" id=\"u463a6ec8\"><br></p><ul list=\"ueccf3c00\"><li fid=\"ub508e38a\" data-lake-id=\"u0cd238f0\" id=\"u0cd238f0\"><span data-lake-id=\"u014c6669\" id=\"u014c6669\">process.nextTick (Node独有)</span></li><li fid=\"ub508e38a\" data-lake-id=\"u97df37c3\" id=\"u97df37c3\"><span data-lake-id=\"u5fb97949\" id=\"u5fb97949\">Promise</span></li><li fid=\"ub508e38a\" data-lake-id=\"u29efe062\" id=\"u29efe062\"><span data-lake-id=\"u8a659aa0\" id=\"u8a659aa0\">Object.observe</span></li><li fid=\"ub508e38a\" data-lake-id=\"u2ba1a733\" id=\"u2ba1a733\"><span data-lake-id=\"u1bee4aae\" id=\"u1bee4aae\">MutationObserver</span></li></ul><p data-lake-id=\"u7e94d504\" id=\"u7e94d504\"><br></p><p data-lake-id=\"uf5f62c50\" id=\"uf5f62c50\"><span data-lake-id=\"uf3a1ff74\" id=\"uf3a1ff74\">（注：这里只针对浏览器和NodeJS）</span></p><p data-lake-id=\"u4130e513\" id=\"u4130e513\"><br></p><h2 data-lake-id=\"7a9e61cd\" id=\"7a9e61cd\"><span data-lake-id=\"ua49e5c06\" id=\"ua49e5c06\">浏览器的Event Loop</span></h2><p data-lake-id=\"ud6799545\" id=\"ud6799545\"><br></p><p data-lake-id=\"u8a5c0453\" id=\"u8a5c0453\"><span data-lake-id=\"u21871da2\" id=\"u21871da2\">我们先来看一张图，再看完这篇文章后，请返回来再仔细看一下这张图，相信你会有更深的理解。</span></p><p data-lake-id=\"u2ee5c58e\" id=\"u2ee5c58e\"><br></p><p data-lake-id=\"u9321f940\" id=\"u9321f940\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1640150802231-e69d822f-b5db-4e70-bda3-bb3b068cf0b2.png%22%2C%22taskId%22%3A%22ue9a67d43-2d75-4de6-a370-a14f7caa447%22%2C%22clientId%22%3A%22u3788e183-4257-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%222021-03-24_Event%20Loop_1.png%22%2C%22size%22%3A48117%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A694%2C%22originHeight%22%3A732%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22BackgroundThreads%20Stack%20fs.readFile%20SetTimeout%20http.get%20setinterval%20function3%20function2%20http.get%20SetTimeout%20function1%20TaskQueue%20seTTImeOUT%20http.get%20setTimeOUt%20setInterval%20MicrotaskQueue%20Promise%20Promise%20process.nextTick%20processnextTick%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A436.8387%2C%22y%22%3A24.633575%2C%22width%22%3A111.50109999999995%2C%22height%22%3A11.999904999999998%2C%22text%22%3A%22BackgroundThreads%22%7D%2C%7B%22x%22%3A160.59471%2C%22y%22%3A25.626968%2C%22width%22%3A31.368070000000017%2C%22height%22%3A10.823727000000002%2C%22text%22%3A%22Stack%22%7D%2C%7B%22x%22%3A528.0257%2C%22y%22%3A93.29056%2C%22width%22%3A56.48140000000001%2C%22height%22%3A11.345460000000003%2C%22text%22%3A%22fs.readFile%22%7D%2C%7B%22x%22%3A399.85864%2C%22y%22%3A93.67212%2C%22width%22%3A60.769930000000045%2C%22height%22%3A10.437864999999988%2C%22text%22%3A%22SetTimeout%22%7D%2C%7B%22x%22%3A410.20493%2C%22y%22%3A171.82477%2C%22width%22%3A41.00445000000002%2C%22height%22%3A13.989299999999986%2C%22text%22%3A%22http.get%22%7D%2C%7B%22x%22%3A528.5124%2C%22y%22%3A172.60408%2C%22width%22%3A56.38570000000004%2C%22height%22%3A10.109829999999988%2C%22text%22%3A%22setinterval%22%7D%2C%7B%22x%22%3A151.32458%2C%22y%22%3A181.45323%2C%22width%22%3A49.22352000000001%2C%22height%22%3A11.258010000000013%2C%22text%22%3A%22function3%22%7D%2C%7B%22x%22%3A151.2696%2C%22y%22%3A240.3169%2C%22width%22%3A49.41301999999999%2C%22height%22%3A10.968130000000002%2C%22text%22%3A%22function2%22%7D%2C%7B%22x%22%3A408.91245%2C%22y%22%3A249.1848%2C%22width%22%3A43.123680000000036%2C%22height%22%3A13.254000000000019%2C%22text%22%3A%22http.get%22%7D%2C%7B%22x%22%3A527.34393%2C%22y%22%3A249.61946%2C%22width%22%3A60.09546999999998%2C%22height%22%3A11.29009000000002%2C%22text%22%3A%22SetTimeout%22%7D%2C%7B%22x%22%3A150.27924%2C%22y%22%3A297.58237%2C%22width%22%3A49.08979000000002%2C%22height%22%3A12.93347%2C%22text%22%3A%22function1%22%7D%2C%7B%22x%22%3A388.97427%2C%22y%22%3A433.79062%2C%22width%22%3A64.74412999999998%2C%22height%22%3A14.191880000000026%2C%22text%22%3A%22TaskQueue%22%7D%2C%7B%22x%22%3A430.99866%2C%22y%22%3A498.2805%2C%22width%22%3A60.199460000000045%2C%22height%22%3A12.381399999999985%2C%22text%22%3A%22seTTImeOUT%22%7D%2C%7B%22x%22%3A572.18866%2C%22y%22%3A499.1874%2C%22width%22%3A43.867309999999975%2C%22height%22%3A12.441399999999987%2C%22text%22%3A%22http.get%22%7D%2C%7B%22x%22%3A298.49255%2C%22y%22%3A499.2391%2C%22width%22%3A60.887249999999995%2C%22height%22%3A11.426760000000002%2C%22text%22%3A%22setTimeOUt%22%7D%2C%7B%22x%22%3A169.15077%2C%22y%22%3A499.67188%2C%22width%22%3A57.59593000000001%2C%22height%22%3A10.872320000000002%2C%22text%22%3A%22setInterval%22%7D%2C%7B%22x%22%3A218.47388%2C%22y%22%3A591.317%2C%22width%22%3A90.12169999999998%2C%22height%22%3A11.693599999999947%2C%22text%22%3A%22MicrotaskQueue%22%7D%2C%7B%22x%22%3A275.19543%2C%22y%22%3A640.5104%2C%22width%22%3A44.952120000000036%2C%22height%22%3A11.850559999999973%2C%22text%22%3A%22Promise%22%7D%2C%7B%22x%22%3A206.87138%2C%22y%22%3A640.5247%2C%22width%22%3A45.08057000000002%2C%22height%22%3A11.484759999999937%2C%22text%22%3A%22Promise%22%7D%2C%7B%22x%22%3A335.06427%2C%22y%22%3A640.6941%2C%22width%22%3A90.55095999999998%2C%22height%22%3A12.440849999999955%2C%22text%22%3A%22process.nextTick%22%7D%2C%7B%22x%22%3A101.35709%2C%22y%22%3A641.337%2C%22width%22%3A89.41910999999999%2C%22height%22%3A11.74045000000001%2C%22text%22%3A%22processnextTick%22%7D%5D%2C%22id%22%3A%22u78e0afde%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u00fbfb24\" id=\"u00fbfb24\"><br></p><p data-lake-id=\"uebf55ac2\" id=\"uebf55ac2\"><span data-lake-id=\"u4dcfd4ed\" id=\"u4dcfd4ed\">这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</span></p><p data-lake-id=\"uab850bdf\" id=\"uab850bdf\"><br></p><ol list=\"u502aca7e\"><li fid=\"ua07bd3f7\" data-lake-id=\"u077be6d9\" id=\"u077be6d9\"><span data-lake-id=\"u48a2b2ba\" id=\"u48a2b2ba\">执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"ub01cfb15\" id=\"ub01cfb15\"><span data-lake-id=\"u5d0c5795\" id=\"u5d0c5795\">全局Script代码执行完毕后，调用栈Stack会清空；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u7d195e32\" id=\"u7d195e32\"><span data-lake-id=\"ue902e29a\" id=\"ue902e29a\">从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"uca89509a\" id=\"uca89509a\"><span data-lake-id=\"u6be99911\" id=\"u6be99911\">继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。</span><strong><span data-lake-id=\"u1958e71c\" id=\"u1958e71c\">注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</span></strong></li><li fid=\"ua07bd3f7\" data-lake-id=\"u8242fe3d\" id=\"u8242fe3d\"><span data-lake-id=\"u76f08fa1\" id=\"u76f08fa1\">microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u2b12a977\" id=\"u2b12a977\"><span data-lake-id=\"ueef7c55f\" id=\"ueef7c55f\">取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u6fdd56fc\" id=\"u6fdd56fc\"><span data-lake-id=\"uc59d0262\" id=\"uc59d0262\">执行完毕后，调用栈Stack为空；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u72126cd4\" id=\"u72126cd4\"><span data-lake-id=\"ueb729816\" id=\"ueb729816\">重复第3-7个步骤；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u04f02632\" id=\"u04f02632\"><span data-lake-id=\"ud375a4a6\" id=\"ud375a4a6\">重复第3-7个步骤；</span></li><li fid=\"ua07bd3f7\" data-lake-id=\"u2fa101a1\" id=\"u2fa101a1\"><span data-lake-id=\"udcaec2f8\" id=\"udcaec2f8\">...</span></li></ol><p data-lake-id=\"ua4c11597\" id=\"ua4c11597\"><br></p><p data-lake-id=\"u65bc73cd\" id=\"u65bc73cd\"><strong><span data-lake-id=\"u85decf6b\" id=\"u85decf6b\">可以看到，这就是浏览器的事件循环Event Loop</span></strong></p><p data-lake-id=\"uacfc225b\" id=\"uacfc225b\"><br></p><p data-lake-id=\"u3583f2ee\" id=\"u3583f2ee\"><span data-lake-id=\"u154ac0bf\" id=\"u154ac0bf\">这里归纳3个重点：</span></p><p data-lake-id=\"u5225cf5a\" id=\"u5225cf5a\"><br></p><ol list=\"u4b6571bc\"><li fid=\"u753a33c9\" data-lake-id=\"u5b843834\" id=\"u5b843834\"><span data-lake-id=\"u58370790\" id=\"u58370790\">宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</span></li><li fid=\"u753a33c9\" data-lake-id=\"ua024ba54\" id=\"ua024ba54\"><span data-lake-id=\"u39ef10e9\" id=\"u39ef10e9\">微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</span></li><li fid=\"u753a33c9\" data-lake-id=\"u0b62453c\" id=\"u0b62453c\"><span data-lake-id=\"ud1a84d95\" id=\"ud1a84d95\">图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</span></li></ol><p data-lake-id=\"u9621230d\" id=\"u9621230d\"><br></p><p data-lake-id=\"u126f6be1\" id=\"u126f6be1\"><span data-lake-id=\"u12b66b2b\" id=\"u12b66b2b\">好了，概念性的东西就这么多，来看几个示例代码，测试一下你是否掌握了:</span></p><p data-lake-id=\"ub7187d19\" id=\"ub7187d19\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(1)%3B%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log(2)%3B%5Cn%20%20Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(3)%5Cn%20%20%7D)%3B%5Cn%7D)%3B%5Cn%5Cnnew%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20console.log(4)%5Cn%20%20resolve(5)%5Cn%7D).then((data)%20%3D%3E%20%7B%5Cn%20%20console.log(data)%3B%5Cn%7D)%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log(6)%3B%5Cn%7D)%5Cn%5Cnconsole.log(7)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2211737ba1%22%7D\"></card><p data-lake-id=\"u28517b18\" id=\"u28517b18\"><br></p><p data-lake-id=\"u940fe0f8\" id=\"u940fe0f8\"><span data-lake-id=\"uce05bccf\" id=\"uce05bccf\">这里结果会是什么呢？运用上面了解到的知识，先自己做一下试试看。</span></p><p data-lake-id=\"uac67c07f\" id=\"uac67c07f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%2F%2F%20%E6%AD%A3%E7%A1%AE%E7%AD%94%E6%A1%88%5Cn1%5Cn4%5Cn7%5Cn5%5Cn2%5Cn3%5Cn6%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b579127c%22%7D\"></card><p data-lake-id=\"uf43e7bb5\" id=\"uf43e7bb5\"><br></p><p data-lake-id=\"ucf1b6176\" id=\"ucf1b6176\"><span data-lake-id=\"ud0f95ee8\" id=\"ud0f95ee8\">你答对了吗？</span></p><p data-lake-id=\"u34aa63a0\" id=\"u34aa63a0\"><br></p><p data-lake-id=\"u1db00f31\" id=\"u1db00f31\"><span data-lake-id=\"u46c7d9ba\" id=\"u46c7d9ba\">我们来分析一下整个流程：</span></p><p data-lake-id=\"u4bc4b96c\" id=\"u4bc4b96c\"><br></p><ul list=\"uea6f559e\"><li fid=\"u7a810cf9\" data-lake-id=\"u1d5780c8\" id=\"u1d5780c8\"><span data-lake-id=\"ubbd3ed59\" id=\"ubbd3ed59\">执行全局Script代码</span></li></ul><p data-lake-id=\"uf746e80c\" id=\"uf746e80c\"><br></p><h3 data-lake-id=\"6f4a225b\" id=\"6f4a225b\"><span data-lake-id=\"uafc76148\" id=\"uafc76148\">Step 1</span></h3><p data-lake-id=\"u3a0ab365\" id=\"u3a0ab365\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(1)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22075af52e%22%7D\"></card><p data-lake-id=\"u0f143032\" id=\"u0f143032\"><br></p><p data-lake-id=\"uce28b27b\" id=\"uce28b27b\"><span data-lake-id=\"ub78df7d5\" id=\"ub78df7d5\">Stack Queue: [console]</span></p><p data-lake-id=\"u1987e3c9\" id=\"u1987e3c9\"><br></p><p data-lake-id=\"u5c8d014b\" id=\"u5c8d014b\"><span data-lake-id=\"uc9a30145\" id=\"uc9a30145\">Macrotask Queue: []</span></p><p data-lake-id=\"ubb8aa415\" id=\"ubb8aa415\"><br></p><p data-lake-id=\"u45b76d40\" id=\"u45b76d40\"><span data-lake-id=\"uc952b60c\" id=\"uc952b60c\">Microtask Queue: []</span></p><p data-lake-id=\"u834997df\" id=\"u834997df\"><br></p><blockquote data-lake-id=\"u15c20769\" id=\"u15c20769\"><p data-lake-id=\"u76ae2646\" id=\"u76ae2646\"><span data-lake-id=\"uf1874e39\" id=\"uf1874e39\">打印结果：<br /></span><span data-lake-id=\"u58e7074c\" id=\"u58e7074c\">1</span></p></blockquote><p data-lake-id=\"u4df27e37\" id=\"u4df27e37\"><br></p><h3 data-lake-id=\"e31ad128\" id=\"e31ad128\"><span data-lake-id=\"u174082ac\" id=\"u174082ac\">Step 2</span></h3><p data-lake-id=\"u93de09b2\" id=\"u93de09b2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9Acallback1%EF%BC%8CsetTimeout%E5%B1%9E%E4%BA%8Emacrotask%EF%BC%8C%E6%89%80%E4%BB%A5%E6%94%BE%E5%88%B0macrotask%20queue%E4%B8%AD%5Cn%20%20console.log(2)%3B%5Cn%20%20Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(3)%5Cn%20%20%7D)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22041fe334%22%7D\"></card><p data-lake-id=\"u6d78e6f8\" id=\"u6d78e6f8\"><br></p><p data-lake-id=\"u9f0705fc\" id=\"u9f0705fc\"><span data-lake-id=\"u09a5bf42\" id=\"u09a5bf42\">Stack Queue: [setTimeout]</span></p><p data-lake-id=\"ua5cd4be4\" id=\"ua5cd4be4\"><br></p><p data-lake-id=\"u3cc64697\" id=\"u3cc64697\"><span data-lake-id=\"u2f5c0ff0\" id=\"u2f5c0ff0\">Macrotask Queue: [callback1]</span></p><p data-lake-id=\"u281fa5ea\" id=\"u281fa5ea\"><br></p><p data-lake-id=\"u2d723056\" id=\"u2d723056\"><span data-lake-id=\"u54f3beee\" id=\"u54f3beee\">Microtask Queue: []</span></p><p data-lake-id=\"u16e266d3\" id=\"u16e266d3\"><br></p><blockquote data-lake-id=\"uabd55650\" id=\"uabd55650\"><p data-lake-id=\"ud5f81c17\" id=\"ud5f81c17\"><span data-lake-id=\"uea380f99\" id=\"uea380f99\">打印结果：<br /></span><span data-lake-id=\"u518b9e3d\" id=\"u518b9e3d\">1</span></p></blockquote><p data-lake-id=\"u26d8a1fc\" id=\"u26d8a1fc\"><br></p><h3 data-lake-id=\"2d5ce426\" id=\"2d5ce426\"><span data-lake-id=\"u1b23c553\" id=\"u1b23c553\">Step 3</span></h3><p data-lake-id=\"u498b3bc8\" id=\"u498b3bc8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E9%87%8C%E6%98%AF%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C%E7%9A%84%5Cn%20%20console.log(4)%5Cn%20%20resolve(5)%5Cn%7D).then((data)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9Acallback2%EF%BC%8Cpromise%E5%B1%9E%E4%BA%8Emicrotask%EF%BC%8C%E6%89%80%E4%BB%A5%E6%94%BE%E5%88%B0microtask%20queue%E4%B8%AD%5Cn%20%20console.log(data)%3B%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e4111c47%22%7D\"></card><p data-lake-id=\"u8aa7d144\" id=\"u8aa7d144\"><br></p><p data-lake-id=\"u4bec793c\" id=\"u4bec793c\"><span data-lake-id=\"u056419a7\" id=\"u056419a7\">Stack Queue: [promise]</span></p><p data-lake-id=\"u8205d634\" id=\"u8205d634\"><br></p><p data-lake-id=\"u391c6dab\" id=\"u391c6dab\"><span data-lake-id=\"u2d152cf1\" id=\"u2d152cf1\">Macrotask Queue: [callback1]</span></p><p data-lake-id=\"u4dd05c95\" id=\"u4dd05c95\"><br></p><p data-lake-id=\"u7f5087ff\" id=\"u7f5087ff\"><span data-lake-id=\"uf311acd8\" id=\"uf311acd8\">Microtask Queue: [callback2]</span></p><p data-lake-id=\"uca1f5226\" id=\"uca1f5226\"><br></p><blockquote data-lake-id=\"u8d6eb3a1\" id=\"u8d6eb3a1\"><p data-lake-id=\"ua2d8153a\" id=\"ua2d8153a\"><span data-lake-id=\"ue46e4111\" id=\"ue46e4111\">打印结果：<br /></span><span data-lake-id=\"u625573f0\" id=\"u625573f0\">1 <br /></span><span data-lake-id=\"u71f57ad2\" id=\"u71f57ad2\">4</span></p></blockquote><p data-lake-id=\"u42426d81\" id=\"u42426d81\"><br></p><h3 data-lake-id=\"7882a4b5\" id=\"7882a4b5\"><span data-lake-id=\"u82c61c9f\" id=\"u82c61c9f\">Step 4</span></h3><p data-lake-id=\"u9902354c\" id=\"u9902354c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9Acallback3%EF%BC%8CsetTimeout%E5%B1%9E%E4%BA%8Emacrotask%EF%BC%8C%E6%89%80%E4%BB%A5%E6%94%BE%E5%88%B0macrotask%20queue%E4%B8%AD%5Cn%20%20console.log(6)%3B%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f37e747d%22%7D\"></card><p data-lake-id=\"u456258df\" id=\"u456258df\"><br></p><p data-lake-id=\"ucf965ed8\" id=\"ucf965ed8\"><span data-lake-id=\"u55d96b1c\" id=\"u55d96b1c\">Stack Queue: [setTimeout]</span></p><p data-lake-id=\"u7c42d603\" id=\"u7c42d603\"><br></p><p data-lake-id=\"u3a8fe0a8\" id=\"u3a8fe0a8\"><span data-lake-id=\"uc1b85d12\" id=\"uc1b85d12\">Macrotask Queue: [callback1, callback3]</span></p><p data-lake-id=\"u2477e627\" id=\"u2477e627\"><br></p><p data-lake-id=\"u3af5ba45\" id=\"u3af5ba45\"><span data-lake-id=\"u93ee1a32\" id=\"u93ee1a32\">Microtask Queue: [callback2]</span></p><p data-lake-id=\"u6efacf10\" id=\"u6efacf10\"><br></p><blockquote data-lake-id=\"uf97f3061\" id=\"uf97f3061\"><p data-lake-id=\"u1b7bd36c\" id=\"u1b7bd36c\"><span data-lake-id=\"ucb395856\" id=\"ucb395856\">打印结果：<br /></span><span data-lake-id=\"u5f5ef199\" id=\"u5f5ef199\">1 <br /></span><span data-lake-id=\"uf44bd33a\" id=\"uf44bd33a\">4</span></p></blockquote><p data-lake-id=\"u7d23815d\" id=\"u7d23815d\"><br></p><h3 data-lake-id=\"0011237e\" id=\"0011237e\"><span data-lake-id=\"u6876366d\" id=\"u6876366d\">Step 5</span></h3><p data-lake-id=\"ub7fa20da\" id=\"ub7fa20da\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(7)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22aa853733%22%7D\"></card><p data-lake-id=\"u9d0df1a5\" id=\"u9d0df1a5\"><br></p><p data-lake-id=\"u9f08ee07\" id=\"u9f08ee07\"><span data-lake-id=\"ubb80e4d5\" id=\"ubb80e4d5\">Stack Queue: [console]</span></p><p data-lake-id=\"u84a5db62\" id=\"u84a5db62\"><br></p><p data-lake-id=\"u54bb3ac3\" id=\"u54bb3ac3\"><span data-lake-id=\"udede778f\" id=\"udede778f\">Macrotask Queue: [callback1, callback3]</span></p><p data-lake-id=\"u5bebb97b\" id=\"u5bebb97b\"><br></p><p data-lake-id=\"u4c34c2f6\" id=\"u4c34c2f6\"><span data-lake-id=\"u58005f40\" id=\"u58005f40\">Microtask Queue: [callback2]</span></p><p data-lake-id=\"uccab0c70\" id=\"uccab0c70\"><br></p><blockquote data-lake-id=\"ubac9908d\" id=\"ubac9908d\"><p data-lake-id=\"u80a8fc92\" id=\"u80a8fc92\"><span data-lake-id=\"u00865e82\" id=\"u00865e82\">打印结果：<br /></span><span data-lake-id=\"u676048f5\" id=\"u676048f5\">1 <br /></span><span data-lake-id=\"ua3e5a938\" id=\"ua3e5a938\">4 <br /></span><span data-lake-id=\"u2c593f52\" id=\"u2c593f52\">7</span></p></blockquote><p data-lake-id=\"ue33d2dcb\" id=\"ue33d2dcb\"><br></p><ul list=\"u17fba2f4\"><li fid=\"u47583950\" data-lake-id=\"u78f4a217\" id=\"u78f4a217\"><span data-lake-id=\"ucce79799\" id=\"ucce79799\">全局Script代码执行完了，进入下一个步骤，从microtask queue中依次取出任务执行，直到microtask queue队列为空。</span></li></ul><p data-lake-id=\"ueb2365d7\" id=\"ueb2365d7\"><br></p><h3 data-lake-id=\"f5ce4d42\" id=\"f5ce4d42\"><span data-lake-id=\"u6e6f3d3d\" id=\"u6e6f3d3d\">Step 6</span></h3><p data-lake-id=\"u3331299d\" id=\"u3331299d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(data)%20%20%20%20%20%20%20%2F%2F%20%E8%BF%99%E9%87%8Cdata%E6%98%AFPromise%E7%9A%84%E5%86%B3%E8%AE%AE%E5%80%BC5%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%229bfdc31f%22%7D\"></card><p data-lake-id=\"u27f1b32d\" id=\"u27f1b32d\"><br></p><p data-lake-id=\"u4ee6e1a4\" id=\"u4ee6e1a4\"><span data-lake-id=\"u83368c4e\" id=\"u83368c4e\">Stack Queue: [callback2]</span></p><p data-lake-id=\"ua17d8eef\" id=\"ua17d8eef\"><br></p><p data-lake-id=\"ua618287a\" id=\"ua618287a\"><span data-lake-id=\"uefbf47bb\" id=\"uefbf47bb\">Macrotask Queue: [callback1, callback3]</span></p><p data-lake-id=\"uac7cc499\" id=\"uac7cc499\"><br></p><p data-lake-id=\"u5ba2f412\" id=\"u5ba2f412\"><span data-lake-id=\"u1a247f01\" id=\"u1a247f01\">Microtask Queue: []</span></p><p data-lake-id=\"u2593824b\" id=\"u2593824b\"><br></p><blockquote data-lake-id=\"ubc44356a\" id=\"ubc44356a\"><p data-lake-id=\"u0a956a35\" id=\"u0a956a35\"><span data-lake-id=\"ube0ed979\" id=\"ube0ed979\">打印结果：<br /></span><span data-lake-id=\"u13bd3249\" id=\"u13bd3249\">1 <br /></span><span data-lake-id=\"u5f845126\" id=\"u5f845126\">4 <br /></span><span data-lake-id=\"u69016fb7\" id=\"u69016fb7\">7 <br /></span><span data-lake-id=\"uca352ff8\" id=\"uca352ff8\">5</span></p></blockquote><p data-lake-id=\"u5ef7979b\" id=\"u5ef7979b\"><br></p><ul list=\"uf9a86163\"><li fid=\"uc0ccc5f3\" data-lake-id=\"udd734a03\" id=\"udd734a03\"><span data-lake-id=\"u43e8d695\" id=\"u43e8d695\">这里microtask queue中只有一个任务，执行完后开始从宏任务队列macrotask queue中取位于队首的任务执行</span></li></ul><p data-lake-id=\"uef37bf12\" id=\"uef37bf12\"><br></p><h3 data-lake-id=\"805e47ec\" id=\"805e47ec\"><span data-lake-id=\"uefdbe66d\" id=\"uefdbe66d\">Step 7</span></h3><p data-lake-id=\"u0fbe131f\" id=\"u0fbe131f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(2)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225ce0a61e%22%7D\"></card><p data-lake-id=\"ud2420445\" id=\"ud2420445\"><br></p><p data-lake-id=\"u044299b9\" id=\"u044299b9\"><span data-lake-id=\"u2e192d96\" id=\"u2e192d96\">Stack Queue: [callback1]</span></p><p data-lake-id=\"u968186e9\" id=\"u968186e9\"><br></p><p data-lake-id=\"u3d2bc648\" id=\"u3d2bc648\"><span data-lake-id=\"ue002f86b\" id=\"ue002f86b\">Macrotask Queue: [callback3]</span></p><p data-lake-id=\"u33076489\" id=\"u33076489\"><br></p><p data-lake-id=\"u63aeb983\" id=\"u63aeb983\"><span data-lake-id=\"udcc83d66\" id=\"udcc83d66\">Microtask Queue: []</span></p><p data-lake-id=\"ue32f5b46\" id=\"ue32f5b46\"><br></p><blockquote data-lake-id=\"u933d1736\" id=\"u933d1736\"><p data-lake-id=\"u423c3aad\" id=\"u423c3aad\"><span data-lake-id=\"uebe974ee\" id=\"uebe974ee\">打印结果：<br /></span><span data-lake-id=\"u0dd42b0d\" id=\"u0dd42b0d\">1 <br /></span><span data-lake-id=\"u46277301\" id=\"u46277301\">4 <br /></span><span data-lake-id=\"u553fffa2\" id=\"u553fffa2\">7 <br /></span><span data-lake-id=\"uaeab8c55\" id=\"uaeab8c55\">5 <br /></span><span data-lake-id=\"ua7141e64\" id=\"ua7141e64\">2</span></p></blockquote><p data-lake-id=\"u58707aef\" id=\"u58707aef\"><br></p><p data-lake-id=\"u8e9aad61\" id=\"u8e9aad61\"><span data-lake-id=\"u3fc9af54\" id=\"u3fc9af54\">但是，执行callback1的时候又遇到了另一个Promise，Promise异步执行完后在microtask queue中又注册了一个callback4回调函数</span></p><p data-lake-id=\"uff1c04e3\" id=\"uff1c04e3\"><br></p><h3 data-lake-id=\"d60d761a\" id=\"d60d761a\"><span data-lake-id=\"u3ef4d55f\" id=\"u3ef4d55f\">Step 8</span></h3><p data-lake-id=\"ud1d00c1f\" id=\"ud1d00c1f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9Acallback4%EF%BC%8Cpromise%E5%B1%9E%E4%BA%8Emicrotask%EF%BC%8C%E6%89%80%E4%BB%A5%E6%94%BE%E5%88%B0microtask%20queue%E4%B8%AD%5Cn%20%20console.log(3)%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%227a832fb3%22%7D\"></card><p data-lake-id=\"u72abfa64\" id=\"u72abfa64\"><br></p><p data-lake-id=\"u6f07ba5d\" id=\"u6f07ba5d\"><span data-lake-id=\"u418fcd68\" id=\"u418fcd68\">Stack Queue: [promise]</span></p><p data-lake-id=\"u63e85d6b\" id=\"u63e85d6b\"><br></p><p data-lake-id=\"u94c30f3e\" id=\"u94c30f3e\"><span data-lake-id=\"ua5ef96ce\" id=\"ua5ef96ce\">Macrotask v: [callback3]</span></p><p data-lake-id=\"ub9c2c97c\" id=\"ub9c2c97c\"><br></p><p data-lake-id=\"u0b664c77\" id=\"u0b664c77\"><span data-lake-id=\"u27b5ecf0\" id=\"u27b5ecf0\">Microtask Queue: [callback4]</span></p><p data-lake-id=\"ubb519e7c\" id=\"ubb519e7c\"><br></p><blockquote data-lake-id=\"u4b3a6024\" id=\"u4b3a6024\"><p data-lake-id=\"ueefe19b5\" id=\"ueefe19b5\"><span data-lake-id=\"u3a693118\" id=\"u3a693118\">打印结果：<br /></span><span data-lake-id=\"u7618edf8\" id=\"u7618edf8\">1 <br /></span><span data-lake-id=\"u166fd867\" id=\"u166fd867\">4 <br /></span><span data-lake-id=\"u56b21c13\" id=\"u56b21c13\">7 <br /></span><span data-lake-id=\"u010fd7ab\" id=\"u010fd7ab\">5 <br /></span><span data-lake-id=\"u9a49e433\" id=\"u9a49e433\">2</span></p></blockquote><p data-lake-id=\"u645e6055\" id=\"u645e6055\"><br></p><ul list=\"uab39aca3\"><li fid=\"u9e792693\" data-lake-id=\"ub30a8fd9\" id=\"ub30a8fd9\"><span data-lake-id=\"u8ab009e1\" id=\"u8ab009e1\">取出一个宏任务macrotask执行完毕，然后再去微任务队列microtask queue中依次取出执行</span></li></ul><p data-lake-id=\"u10e45cc6\" id=\"u10e45cc6\"><br></p><h3 data-lake-id=\"54c8107e\" id=\"54c8107e\"><span data-lake-id=\"u6f42bd50\" id=\"u6f42bd50\">Step 9</span></h3><p data-lake-id=\"u0cc20d8b\" id=\"u0cc20d8b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(3)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b25cff72%22%7D\"></card><p data-lake-id=\"u12b74fc6\" id=\"u12b74fc6\"><br></p><p data-lake-id=\"u4a500170\" id=\"u4a500170\"><span data-lake-id=\"u511d8e31\" id=\"u511d8e31\">Stack Queue: [callback4]</span></p><p data-lake-id=\"u1d2ff149\" id=\"u1d2ff149\"><br></p><p data-lake-id=\"ufe2b6978\" id=\"ufe2b6978\"><span data-lake-id=\"u1cea9b33\" id=\"u1cea9b33\">Macrotask Queue: [callback3]</span></p><p data-lake-id=\"ue56f4561\" id=\"ue56f4561\"><br></p><p data-lake-id=\"u14a39263\" id=\"u14a39263\"><span data-lake-id=\"ue16e8fea\" id=\"ue16e8fea\">Microtask Queue: []</span></p><p data-lake-id=\"u77bf1ca8\" id=\"u77bf1ca8\"><br></p><blockquote data-lake-id=\"u2b985ea7\" id=\"u2b985ea7\"><p data-lake-id=\"u8256febe\" id=\"u8256febe\"><span data-lake-id=\"u960b55d4\" id=\"u960b55d4\">打印结果：<br /></span><span data-lake-id=\"u77f2607c\" id=\"u77f2607c\">1 <br /></span><span data-lake-id=\"u46ffb826\" id=\"u46ffb826\">4 <br /></span><span data-lake-id=\"ud33e58f6\" id=\"ud33e58f6\">7 <br /></span><span data-lake-id=\"u3c5b8769\" id=\"u3c5b8769\">5 <br /></span><span data-lake-id=\"u4396a828\" id=\"u4396a828\">2  <br /></span><span data-lake-id=\"uc7c43b6b\" id=\"uc7c43b6b\">3</span></p></blockquote><p data-lake-id=\"uaf73c7bd\" id=\"uaf73c7bd\"><br></p><ul list=\"u38fd326f\"><li fid=\"u3fdf773f\" data-lake-id=\"u8f83f3a1\" id=\"u8f83f3a1\"><span data-lake-id=\"u65f1c8ed\" id=\"u65f1c8ed\">微任务队列全部执行完，再去宏任务队列中取第一个任务执行</span></li></ul><p data-lake-id=\"u622bad3d\" id=\"u622bad3d\"><br></p><h3 data-lake-id=\"b9598260\" id=\"b9598260\"><span data-lake-id=\"u2ce7c0df\" id=\"u2ce7c0df\">Step 10</span></h3><p data-lake-id=\"uddfe841d\" id=\"uddfe841d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(6)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%224fab6c02%22%7D\"></card><p data-lake-id=\"uad9eb50d\" id=\"uad9eb50d\"><br></p><p data-lake-id=\"u4011dd9f\" id=\"u4011dd9f\"><span data-lake-id=\"u0d7dd6b7\" id=\"u0d7dd6b7\">Stack Queue: [callback3]</span></p><p data-lake-id=\"u6d1d7da2\" id=\"u6d1d7da2\"><br></p><p data-lake-id=\"u4e900fa7\" id=\"u4e900fa7\"><span data-lake-id=\"uab9c0120\" id=\"uab9c0120\">Macrotask Queue: []</span></p><p data-lake-id=\"uf6f936df\" id=\"uf6f936df\"><br></p><p data-lake-id=\"u0bce5ad7\" id=\"u0bce5ad7\"><span data-lake-id=\"u2ee24917\" id=\"u2ee24917\">Microtask Queue: []</span></p><p data-lake-id=\"ubbf413dd\" id=\"ubbf413dd\"><br></p><blockquote data-lake-id=\"u1a2f1815\" id=\"u1a2f1815\"><p data-lake-id=\"uf37d7476\" id=\"uf37d7476\"><span data-lake-id=\"u842ebb9d\" id=\"u842ebb9d\">打印结果：<br /></span><span data-lake-id=\"u96c84259\" id=\"u96c84259\">1 <br /></span><span data-lake-id=\"u2c572974\" id=\"u2c572974\">4 <br /></span><span data-lake-id=\"ub8c04884\" id=\"ub8c04884\">7 <br /></span><span data-lake-id=\"u2be4e786\" id=\"u2be4e786\">5 <br /></span><span data-lake-id=\"u02fcd671\" id=\"u02fcd671\">2 <br /></span><span data-lake-id=\"uc1c87dea\" id=\"uc1c87dea\">3 <br /></span><span data-lake-id=\"uc5a00754\" id=\"uc5a00754\">6</span></p></blockquote><p data-lake-id=\"u243d5fc1\" id=\"u243d5fc1\"><br></p><ul list=\"u361edba4\"><li fid=\"u63f5cc89\" data-lake-id=\"u4fb3e0a4\" id=\"u4fb3e0a4\"><span data-lake-id=\"u1d78110b\" id=\"u1d78110b\">以上，全部执行完后，Stack Queue为空，Macrotask Queue为空，Micro Queue为空</span></li></ul><p data-lake-id=\"u05d6ef27\" id=\"u05d6ef27\"><br></p><p data-lake-id=\"u8bd20b82\" id=\"u8bd20b82\"><span data-lake-id=\"u5ba76e11\" id=\"u5ba76e11\">Stack Queue: []</span></p><p data-lake-id=\"uaecfe561\" id=\"uaecfe561\"><br></p><p data-lake-id=\"u1a2109a8\" id=\"u1a2109a8\"><span data-lake-id=\"u4faeec9a\" id=\"u4faeec9a\">Macrotask Queue: []</span></p><p data-lake-id=\"u9e1b71fb\" id=\"u9e1b71fb\"><br></p><p data-lake-id=\"u3ce02ecf\" id=\"u3ce02ecf\"><span data-lake-id=\"u325adaea\" id=\"u325adaea\">Microtask Queue: []</span></p><p data-lake-id=\"u275b345f\" id=\"u275b345f\"><br></p><p data-lake-id=\"u901114a1\" id=\"u901114a1\"><span data-lake-id=\"ue33136b7\" id=\"ue33136b7\">因为是第一个例子，所以这里分析的比较详细，大家仔细看一下，接下来我们再来一个例子：</span></p><p data-lake-id=\"ubf897624\" id=\"ubf897624\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(1)%3B%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log(2)%3B%5Cn%20%20Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(3)%5Cn%20%20%7D)%3B%5Cn%7D)%3B%5Cn%5Cnnew%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20console.log(4)%5Cn%20%20resolve(5)%5Cn%7D).then((data)%20%3D%3E%20%7B%5Cn%20%20console.log(data)%3B%5Cn%20%20%5Cn%20%20Promise.resolve().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(6)%5Cn%20%20%7D).then(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(7)%5Cn%20%20%20%20%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20console.log(8)%5Cn%20%20%20%20%7D%2C%200)%3B%5Cn%20%20%7D)%3B%5Cn%7D)%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log(9)%3B%5Cn%7D)%5Cn%5Cnconsole.log(10)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2202e6307c%22%7D\"></card><p data-lake-id=\"u69cbcc6a\" id=\"u69cbcc6a\"><br></p><p data-lake-id=\"u9165635c\" id=\"u9165635c\"><span data-lake-id=\"udc3f760a\" id=\"udc3f760a\">最终输出结果是什么呢？参考前面的例子，好好想一想......</span></p><p data-lake-id=\"u197a3b85\" id=\"u197a3b85\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%2F%2F%20%E6%AD%A3%E7%A1%AE%E7%AD%94%E6%A1%88%5Cn1%5Cn4%5Cn10%5Cn5%5Cn6%5Cn7%5Cn2%5Cn3%5Cn9%5Cn8%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%228649f45f%22%7D\"></card><p data-lake-id=\"u66b2ce45\" id=\"u66b2ce45\"><br></p><p data-lake-id=\"u716f950a\" id=\"u716f950a\"><span data-lake-id=\"uee5cfcea\" id=\"uee5cfcea\">相信大家都答对了，这里的关键在前面已经提过：</span></p><p data-lake-id=\"u6fdd2039\" id=\"u6fdd2039\"><br></p><p data-lake-id=\"uecd8735a\" id=\"uecd8735a\"><strong><span data-lake-id=\"uac3a9588\" id=\"uac3a9588\">在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。</span></strong></p><p data-lake-id=\"u7edfafea\" id=\"u7edfafea\"><br></p><p data-lake-id=\"ua912177a\" id=\"ua912177a\"><span data-lake-id=\"u88ed9217\" id=\"u88ed9217\">注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的，拿NodeJS中的微任务process.nextTick()来说，它的上限是1000个，后面我们会讲到。</span></p><p data-lake-id=\"u57dafd75\" id=\"u57dafd75\"><br></p><p data-lake-id=\"u056f08c9\" id=\"u056f08c9\"><span data-lake-id=\"u83bb3192\" id=\"u83bb3192\">浏览器的Event Loop就说到这里，下面我们看一下NodeJS中的Event Loop，它更复杂一些，机制也不太一样。</span></p><p data-lake-id=\"u64b666d3\" id=\"u64b666d3\"><br></p><h2 data-lake-id=\"475884cf\" id=\"475884cf\"><span data-lake-id=\"uf7c7dea7\" id=\"uf7c7dea7\">NodeJS中的Event Loop</span></h2><p data-lake-id=\"ub05aebee\" id=\"ub05aebee\"><br></p><h3 data-lake-id=\"libuv\" id=\"libuv\"><span data-lake-id=\"u36c8b3f7\" id=\"u36c8b3f7\">libuv</span></h3><p data-lake-id=\"u3d097fe5\" id=\"u3d097fe5\"><br></p><p data-lake-id=\"u486a4c00\" id=\"u486a4c00\"><span data-lake-id=\"u0053184b\" id=\"u0053184b\">先来看一张libuv的结构图：</span></p><p data-lake-id=\"ubb93fe7a\" id=\"ubb93fe7a\"><br></p><p data-lake-id=\"uce0692bf\" id=\"uce0692bf\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1640150869182-c542d656-f43b-4b7b-ab76-07395f20db36.png%22%2C%22taskId%22%3A%22uc5809e64-e5f8-47c8-bed4-c2612d7a9af%22%2C%22clientId%22%3A%22u3788e183-4257-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%222021-03-24_Event%20Loop_2.png%22%2C%22size%22%3A141080%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A732%2C%22originHeight%22%3A289%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22THENODE.JSSYSTEM%20NODE.JS%20LIBUV%20APPLICATION%20BINDINGS%20(ASYNCHRONOUSVO)%20WORKER%20EVENT%20(NODEAPI)%20QUEUE%20THREADS%20BLOCKING%20JAVASCRIPT%20OPERATION%20FILESTSTEH%20NETWORK%20FkoaSS%200S%20EVENT%20OPERATION%20LOOP%20V8%20(UJAVASCRIPTENGINE%20EXECUTE%20CALLBACK%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A234.74463%2C%22y%22%3A6.369619%2C%22width%22%3A267.45947%2C%22height%22%3A23.465489%2C%22text%22%3A%22THENODE.JSSYSTEM%22%7D%2C%7B%22x%22%3A192.18306%2C%22y%22%3A50.312916%2C%22width%22%3A84.68401%2C%22height%22%3A17.141924000000003%2C%22text%22%3A%22NODE.JS%22%7D%2C%7B%22x%22%3A481.2479%2C%22y%22%3A52.43511%2C%22width%22%3A56.99079999999998%2C%22height%22%3A17.29184%2C%22text%22%3A%22LIBUV%22%7D%2C%7B%22x%22%3A26.143595%2C%22y%22%3A56.5062%2C%22width%22%3A128.397225%2C%22height%22%3A21.305895999999997%2C%22text%22%3A%22APPLICATION%22%7D%2C%7B%22x%22%3A186.98999%2C%22y%22%3A69.22335%2C%22width%22%3A94.43253000000001%2C%22height%22%3A16.998170000000002%2C%22text%22%3A%22BINDINGS%22%7D%2C%7B%22x%22%3A454.36533%2C%22y%22%3A69.53857%2C%22width%22%3A110.76913000000002%2C%22height%22%3A12.466999999999999%2C%22text%22%3A%22(ASYNCHRONOUSVO)%22%7D%2C%7B%22x%22%3A647.38007%2C%22y%22%3A85.87839%2C%22width%22%3A58.83312999999998%2C%22height%22%3A11.925110000000004%2C%22text%22%3A%22WORKER%22%7D%2C%7B%22x%22%3A323.85934%2C%22y%22%3A85.45696%2C%22width%22%3A42.34742%2C%22height%22%3A12.433310000000006%2C%22text%22%3A%22EVENT%22%7D%2C%7B%22x%22%3A204.91492%2C%22y%22%3A87.994835%2C%22width%22%3A56.136720000000025%2C%22height%22%3A10.591431%2C%22text%22%3A%22(NODEAPI)%22%7D%2C%7B%22x%22%3A321.8503%2C%22y%22%3A98.149956%2C%22width%22%3A46.49234999999999%2C%22height%22%3A12.81092799999999%2C%22text%22%3A%22QUEUE%22%7D%2C%7B%22x%22%3A647.132%2C%22y%22%3A98.811485%2C%22width%22%3A60.2731%2C%22height%22%3A12.110694999999993%2C%22text%22%3A%22THREADS%22%7D%2C%7B%22x%22%3A557.25323%2C%22y%22%3A103.452515%2C%22width%22%3A68.95696999999996%2C%22height%22%3A12.800494999999998%2C%22text%22%3A%22BLOCKING%22%7D%2C%7B%22x%22%3A44.6394%2C%22y%22%3A110.34055%2C%22width%22%3A88.36837%2C%22height%22%3A13.738285000000005%2C%22text%22%3A%22JAVASCRIPT%22%7D%2C%7B%22x%22%3A552.5213%2C%22y%22%3A116.64923%2C%22width%22%3A73.96686%2C%22height%22%3A13.482479999999995%2C%22text%22%3A%22OPERATION%22%7D%2C%7B%22x%22%3A651.7221%2C%22y%22%3A119.53144%2C%22width%22%3A50.05790000000002%2C%22height%22%3A7.174545999999992%2C%22text%22%3A%22FILESTSTEH%22%7D%2C%7B%22x%22%3A657.13745%2C%22y%22%3A141.74681%2C%22width%22%3A40.15545000000009%2C%22height%22%3A8.068119999999993%2C%22text%22%3A%22NETWORK%22%7D%2C%7B%22x%22%3A658.5683%2C%22y%22%3A163.80725%2C%22width%22%3A36.302099999999996%2C%22height%22%3A7.7928%2C%22text%22%3A%22FkoaSS%22%7D%2C%7B%22x%22%3A226.07039%2C%22y%22%3A176.4008%2C%22width%22%3A18.654629999999997%2C%22height%22%3A11.773879999999991%2C%22text%22%3A%220S%22%7D%2C%7B%22x%22%3A456.16113%2C%22y%22%3A177.47755%2C%22width%22%3A40.409519999999986%2C%22height%22%3A12.144090000000006%2C%22text%22%3A%22EVENT%22%7D%2C%7B%22x%22%3A196.78746%2C%22y%22%3A186.78809%2C%22width%22%3A75.4615%2C%22height%22%3A16.108589999999992%2C%22text%22%3A%22OPERATION%22%7D%2C%7B%22x%22%3A457.19055%2C%22y%22%3A188.8579%2C%22width%22%3A37.271150000000034%2C%22height%22%3A12.66176999999999%2C%22text%22%3A%22LOOP%22%7D%2C%7B%22x%22%3A74.93811%2C%22y%22%3A189.917%2C%22width%22%3A29.122190000000003%2C%22height%22%3A15.981210000000004%2C%22text%22%3A%22V8%22%7D%2C%7B%22x%22%3A28.23417%2C%22y%22%3A207.17737%2C%22width%22%3A121.50065000000001%2C%22height%22%3A12.18370999999999%2C%22text%22%3A%22(UJAVASCRIPTENGINE%22%7D%2C%7B%22x%22%3A553.8889%2C%22y%22%3A216.21967%2C%22width%22%3A57.52170000000001%2C%22height%22%3A11.205359999999985%2C%22text%22%3A%22EXECUTE%22%7D%2C%7B%22x%22%3A553.4129%2C%22y%22%3A228.6482%2C%22width%22%3A70.44129999999996%2C%22height%22%3A13.121039999999994%2C%22text%22%3A%22CALLBACK%22%7D%5D%2C%22id%22%3A%22uc3ec049c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u279702c9\" id=\"u279702c9\"><br></p><h3 data-lake-id=\"87a7af42\" id=\"87a7af42\"><span data-lake-id=\"u05b08cc2\" id=\"u05b08cc2\">NodeJS中的宏队列和微队列</span></h3><p data-lake-id=\"ubf2c931c\" id=\"ubf2c931c\"><br></p><p data-lake-id=\"ue7f598ea\" id=\"ue7f598ea\"><span data-lake-id=\"u3eb5ebc2\" id=\"u3eb5ebc2\">NodeJS的Event Loop中，执行宏队列的回调任务有</span><strong><span data-lake-id=\"ufafcfd78\" id=\"ufafcfd78\">6个阶段</span></strong><span data-lake-id=\"u1166ffb9\" id=\"u1166ffb9\">，如下图：</span></p><p data-lake-id=\"u949ec36a\" id=\"u949ec36a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1640150881821-daf37c3f-7f75-4b45-a655-133cf582187e.png%22%2C%22taskId%22%3A%22u9be5125f-53de-487d-84c8-cf78bb786fa%22%2C%22clientId%22%3A%22u3788e183-4257-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%222021-03-24_Event%20Loop_3.png%22%2C%22size%22%3A8419%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A670%2C%22originHeight%22%3A339%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22timers%20I%2FOca1ibacks%20idle%2Cprepare%20incoming%3A%20connections%2C%20po11%20dataetc.%20check%20closecalibacks%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A95.15844%2C%22y%22%3A36.03269%2C%22width%22%3A39.72167%2C%22height%22%3A11.185865%2C%22text%22%3A%22timers%22%7D%2C%7B%22x%22%3A74.79347%2C%22y%22%3A86.84933%2C%22width%22%3A87.03322999999999%2C%22height%22%3A11.817050000000009%2C%22text%22%3A%22I%2FOca1ibacks%22%7D%2C%7B%22x%22%3A74.580605%2C%22y%22%3A137.3858%2C%22width%22%3A87.58376499999999%2C%22height%22%3A12.063950000000006%2C%22text%22%3A%22idle%2Cprepare%22%7D%2C%7B%22x%22%3A266.01608%2C%22y%22%3A172.2334%2C%22width%22%3A57.19762000000003%2C%22height%22%3A12.28203000000002%2C%22text%22%3A%22incoming%3A%22%7D%2C%7B%22x%22%3A259.44012%2C%22y%22%3A189.66467%2C%22width%22%3A79.09470000000005%2C%22height%22%3A11.815390000000008%2C%22text%22%3A%22connections%2C%22%7D%2C%7B%22x%22%3A100.75973%2C%22y%22%3A190.0224%2C%22width%22%3A26.287819999999996%2C%22height%22%3A10.795410000000004%2C%22text%22%3A%22po11%22%7D%2C%7B%22x%22%3A266.6329%2C%22y%22%3A208.2204%2C%22width%22%3A63.33924000000002%2C%22height%22%3A10.415109999999999%2C%22text%22%3A%22dataetc.%22%7D%2C%7B%22x%22%3A94.469444%2C%22y%22%3A241.34612%2C%22width%22%3A35.273786000000015%2C%22height%22%3A10.073149999999998%2C%22text%22%3A%22check%22%7D%2C%7B%22x%22%3A69.52526%2C%22y%22%3A291.70505%2C%22width%22%3A99.37664000000001%2C%22height%22%3A10.949279999999987%2C%22text%22%3A%22closecalibacks%22%7D%5D%2C%22id%22%3A%22u712b2992%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uac29d065\" id=\"uac29d065\"><br></p><p data-lake-id=\"u728ea648\" id=\"u728ea648\"><br></p><p data-lake-id=\"u333b59cd\" id=\"u333b59cd\"><span data-lake-id=\"u9d9e8145\" id=\"u9d9e8145\">各个阶段执行的任务如下：</span></p><p data-lake-id=\"u6750d792\" id=\"u6750d792\"><br></p><ul list=\"uf652f087\"><li fid=\"u16dffe19\" data-lake-id=\"u07d04c61\" id=\"u07d04c61\"><strong><span data-lake-id=\"u6ed19570\" id=\"u6ed19570\">timers阶段</span></strong><span data-lake-id=\"u8396250a\" id=\"u8396250a\">：这个阶段执行setTimeout和setInterval预定的callback</span></li><li fid=\"u16dffe19\" data-lake-id=\"u06bedbe5\" id=\"u06bedbe5\"><strong><span data-lake-id=\"u1eaa9c71\" id=\"u1eaa9c71\">I/O callback阶段</span></strong><span data-lake-id=\"uc5c87c0c\" id=\"uc5c87c0c\">：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks</span></li><li fid=\"u16dffe19\" data-lake-id=\"u1b411149\" id=\"u1b411149\"><strong><span data-lake-id=\"u101a4a8b\" id=\"u101a4a8b\">idle, prepare阶段</span></strong><span data-lake-id=\"ub95f800a\" id=\"ub95f800a\">：仅node内部使用</span></li><li fid=\"u16dffe19\" data-lake-id=\"u0193cd6e\" id=\"u0193cd6e\"><strong><span data-lake-id=\"u6680b8b1\" id=\"u6680b8b1\">poll阶段</span></strong><span data-lake-id=\"u7331453f\" id=\"u7331453f\">：获取新的I/O事件，适当的条件下node将阻塞在这里</span></li><li fid=\"u16dffe19\" data-lake-id=\"u6345d6f5\" id=\"u6345d6f5\"><strong><span data-lake-id=\"ue47ea42a\" id=\"ue47ea42a\">check阶段</span></strong><span data-lake-id=\"uf085c62e\" id=\"uf085c62e\">：执行setImmediate()设定的callbacks</span></li><li fid=\"u16dffe19\" data-lake-id=\"u80e91950\" id=\"u80e91950\"><strong><span data-lake-id=\"u56a0cc55\" id=\"u56a0cc55\">close callbacks阶段</span></strong><span data-lake-id=\"u1548359e\" id=\"u1548359e\">：执行socket.on('close', ....)这些callbacks</span></li></ul><p data-lake-id=\"u25cbdb63\" id=\"u25cbdb63\"><br></p><h4 data-lake-id=\"6edfbed4\" id=\"6edfbed4\"><span data-lake-id=\"u1156e32e\" id=\"u1156e32e\">NodeJS中宏队列主要有4个</span></h4><p data-lake-id=\"u6a562006\" id=\"u6a562006\"><br></p><p data-lake-id=\"ud5066d40\" id=\"ud5066d40\"><span data-lake-id=\"u78e436af\" id=\"u78e436af\">由上面的介绍可以看到，回调事件主要位于4个macrotask queue中：</span></p><p data-lake-id=\"u3348b0c3\" id=\"u3348b0c3\"><br></p><ol list=\"u0d0b07fa\"><li fid=\"ucce59845\" data-lake-id=\"ucc8acd70\" id=\"ucc8acd70\"><span data-lake-id=\"uf43ec5fd\" id=\"uf43ec5fd\">Timers Queue</span></li><li fid=\"ucce59845\" data-lake-id=\"u8b0779f0\" id=\"u8b0779f0\"><span data-lake-id=\"u43eed850\" id=\"u43eed850\">IO Callbacks Queue</span></li><li fid=\"ucce59845\" data-lake-id=\"ucfe44f4d\" id=\"ucfe44f4d\"><span data-lake-id=\"u0a034543\" id=\"u0a034543\">Check Queue</span></li><li fid=\"ucce59845\" data-lake-id=\"uedd05e38\" id=\"uedd05e38\"><span data-lake-id=\"u7d70ace8\" id=\"u7d70ace8\">Close Callbacks Queue</span></li></ol><p data-lake-id=\"u44264fcc\" id=\"u44264fcc\"><br></p><p data-lake-id=\"u33b739ba\" id=\"u33b739ba\"><span data-lake-id=\"u4a201fc0\" id=\"u4a201fc0\">这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。</span></p><p data-lake-id=\"ufb93f60e\" id=\"ufb93f60e\"><br></p><h4 data-lake-id=\"180fc5b8\" id=\"180fc5b8\"><span data-lake-id=\"u3145d192\" id=\"u3145d192\">NodeJS中微队列主要有2个</span></h4><p data-lake-id=\"uf34afaf2\" id=\"uf34afaf2\"><br></p><ol list=\"u932ccb38\"><li fid=\"u6ae2e125\" data-lake-id=\"uf35dd7e7\" id=\"uf35dd7e7\"><span data-lake-id=\"ueac80f75\" id=\"ueac80f75\">Next Tick Queue：是放置process.nextTick(callback)的回调任务的</span></li><li fid=\"u6ae2e125\" data-lake-id=\"ua69ffb7c\" id=\"ua69ffb7c\"><span data-lake-id=\"uf2fa7740\" id=\"uf2fa7740\">Other Micro Queue：放置其他microtask，比如Promise等</span></li></ol><p data-lake-id=\"ue6bbc9d5\" id=\"ue6bbc9d5\"><br></p><p data-lake-id=\"ueef4dc01\" id=\"ueef4dc01\"><span data-lake-id=\"u17abcd08\" id=\"u17abcd08\">在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。</span></p><p data-lake-id=\"u42ef0b13\" id=\"u42ef0b13\"><br></p><p data-lake-id=\"u656f8447\" id=\"u656f8447\"><span data-lake-id=\"u878cef08\" id=\"u878cef08\">具体可以通过下图加深一下理解：</span></p><p data-lake-id=\"ub7ebfaf5\" id=\"ub7ebfaf5\"><br></p><p data-lake-id=\"uf5154fad\" id=\"uf5154fad\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F12838787%2F1640150892410-a170dd7d-c70b-42b6-bf90-5ac6f1a9fce8.png%22%2C%22taskId%22%3A%22u05d620c9-3659-46ae-b493-fe98d5ca38a%22%2C%22clientId%22%3A%22u3788e183-4257-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%222021-03-24_Event%20Loop_4.png%22%2C%22size%22%3A54689%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A732%2C%22originHeight%22%3A405%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22expiredtimers%2Fintervalsqueue%20StantolEventLOOp%20(setTimeouVsetlnterval)%20Exitoftheloop%20nexttickqueue%20IOeventsqueue%20closehandlersgueue%20OtherMicrotasksqueue%20(resolvedpromisesetc)%20immediatesqueue%20(setlmmediate)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A283.4436%2C%22y%22%3A12.432851%2C%22width%22%3A146.7767%2C%22height%22%3A10.982615%2C%22text%22%3A%22expiredtimers%2Fintervalsqueue%22%7D%2C%7B%22x%22%3A127.566505%2C%22y%22%3A18.212257%2C%22width%22%3A90.09095499999998%2C%22height%22%3A12.709055%2C%22text%22%3A%22StantolEventLOOp%22%7D%2C%7B%22x%22%3A301.78305%2C%22y%22%3A25.275545%2C%22width%22%3A114.77627999999999%2C%22height%22%3A10.823782000000001%2C%22text%22%3A%22(setTimeouVsetlnterval)%22%7D%2C%7B%22x%22%3A57.318237%2C%22y%22%3A100.626015%2C%22width%22%3A69.15114299999999%2C%22height%22%3A12.209961000000007%2C%22text%22%3A%22Exitoftheloop%22%7D%2C%7B%22x%22%3A332.8754%2C%22y%22%3A170.01964%2C%22width%22%3A74.19695999999999%2C%22height%22%3A11.642849999999981%2C%22text%22%3A%22nexttickqueue%22%7D%2C%7B%22x%22%3A600.3851%2C%22y%22%3A187.35272%2C%22width%22%3A79.54780000000005%2C%22height%22%3A11.317219999999992%2C%22text%22%3A%22IOeventsqueue%22%7D%2C%7B%22x%22%3A40.425602%2C%22y%22%3A188.59137%2C%22width%22%3A104.235028%2C%22height%22%3A10.22826999999998%2C%22text%22%3A%22closehandlersgueue%22%7D%2C%7B%22x%22%3A314.42493%2C%22y%22%3A213.21907%2C%22width%22%3A111.30726999999996%2C%22height%22%3A10.384160000000008%2C%22text%22%3A%22OtherMicrotasksqueue%22%7D%2C%7B%22x%22%3A315.79523%2C%22y%22%3A225.69176%2C%22width%22%3A108.9017%2C%22height%22%3A10.380320000000012%2C%22text%22%3A%22(resolvedpromisesetc)%22%7D%2C%7B%22x%22%3A322.48877%2C%22y%22%3A358.96335%2C%22width%22%3A90.99625000000003%2C%22height%22%3A11.16333000000003%2C%22text%22%3A%22immediatesqueue%22%7D%2C%7B%22x%22%3A332.7316%2C%22y%22%3A371.20215%2C%22width%22%3A74.23625999999996%2C%22height%22%3A10.97542999999996%2C%22text%22%3A%22(setlmmediate)%22%7D%5D%2C%22id%22%3A%22u32cf3abc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1d261fa5\" id=\"u1d261fa5\"><br></p><p data-lake-id=\"uad12c3d3\" id=\"uad12c3d3\"><span data-lake-id=\"u5ee3c6f7\" id=\"u5ee3c6f7\">大体解释一下NodeJS的Event Loop过程：</span></p><p data-lake-id=\"u6288599d\" id=\"u6288599d\"><br></p><ol list=\"u8faac41f\"><li fid=\"u8f299ec8\" data-lake-id=\"uc2e1446d\" id=\"uc2e1446d\"><span data-lake-id=\"u4749fc04\" id=\"u4749fc04\">执行全局Script的同步代码</span></li><li fid=\"u8f299ec8\" data-lake-id=\"u67cfffb2\" id=\"u67cfffb2\"><span data-lake-id=\"u3a46458c\" id=\"u3a46458c\">执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务</span></li><li fid=\"u8f299ec8\" data-lake-id=\"ua8f68e8b\" id=\"ua8f68e8b\"><span data-lake-id=\"ud8b838a1\" id=\"ud8b838a1\">开始执行macrotask宏任务，共6个阶段，从第1个阶段开始执行相应每一个阶段macrotask中的所有任务，注意，这里是所有每个阶段宏任务队列的所有任务，在浏览器的Event Loop中是只取宏队列的第一个任务出来执行，每一个阶段的macrotask任务执行完毕后，开始执行微任务，也就是步骤2</span></li><li fid=\"u8f299ec8\" data-lake-id=\"u81b9e990\" id=\"u81b9e990\"><span data-lake-id=\"u7e85defe\" id=\"u7e85defe\">Timers Queue -&gt; 步骤2 -&gt; I/O Queue -&gt; 步骤2 -&gt; Check Queue -&gt; 步骤2 -&gt; Close Callback Queue -&gt; 步骤2 -&gt; Timers Queue ......</span></li><li fid=\"u8f299ec8\" data-lake-id=\"u61ac22d3\" id=\"u61ac22d3\"><span data-lake-id=\"ucd8dee0e\" id=\"ucd8dee0e\">这就是Node的Event Loop</span></li></ol>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-22T05:28:17.000Z",
    "deleted_at": null,
    "created_at": "2021-12-22T05:25:48.000Z",
    "updated_at": "2021-12-22T05:28:17.000Z",
    "published_at": "2021-12-22T05:28:17.000Z",
    "first_published_at": "2021-12-22T05:26:22.000Z",
    "word_count": 3735,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/12838787/1640150802231-e69d822f-b5db-4e70-bda3-bb3b068cf0b2.png",
    "description": "Event Loop单线程JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作D...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 63204582,
    "slug": "glbqxu",
    "title": "详解 cookie、session、storage、token",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-22T05:31:44.747Z",
      "updated_at": "2021-12-22T05:31:44.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-22T05:28:17.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-22T05:28:17.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"965491cf\"></a>\n### 参考文档：\n\n<br />[https://blog.csdn.net/zhangquan_zone/article/details/77627899](https://blog.csdn.net/zhangquan_zone/article/details/77627899)<br />[https://www.sohu.com/a/207801015_114819](https://www.sohu.com/a/207801015_114819)<br />[https://www.cnblogs.com/lufeiludaima/p/pz20190203.html](https://www.cnblogs.com/lufeiludaima/p/pz20190203.html)<br />[https://segmentfault.com/a/1190000019457890](https://segmentfault.com/a/1190000019457890)<br />[https://www.cnblogs.com/andy-zhou/p/5360107.html](https://www.cnblogs.com/andy-zhou/p/5360107.html)<br />[https://www.zhihu.com/question/359508734/answer/1591403693](https://www.zhihu.com/question/359508734/answer/1591403693)\n\n---\n\n<a name=\"26a1ee86\"></a>\n## **cookie**\n\n\n> cookie是由服务器端生成，发送给User-Agent（一般是浏览器），（服务器告诉浏览器设置一下cookie）,浏览器会将cookie的key/value保存到某个目录下的文本文件。\n\n\n\n<a name=\"81a4c79b\"></a>\n### **cookie的诞生**\n\n<br />由于HTTP协议是无状态的，而服务器端的业务必须是要有状态的。cookie诞生的最初目的是为了存储web中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。目前最新的规范是RFC 6265，它是一个由浏览器服务器共同协作实现的规范。<br />\n\n<a name=\"b6366037\"></a>\n### **如何设置cookie**\n\n\n<a name=\"2cb96fdc\"></a>\n#### 客户端设置\n\n\n```javascript\ndocument.cookie=\"name=value; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/\";\n```\n\n\n>  \n> - [x] **name**:一个唯一确定的cookie名称。通常来讲cookie的名称是不区分大小写的。\n> \n \n\n\n\n- [x] **value**:存储在cookie中的字符串值。最好为cookie的name和value进行url编码\n- [x] **path**: 表示这个cookie影响到的路径，浏览器跟会根据这项配置，像指定域中匹配的路径发送cookie。\n- [x] **expires**:失效时间，表示cookie何时应该被删除的时间戳(也就是，何时应该停止向服务器发送这个cookie)。如果不设置这个时间戳，浏览器会在页面关闭时即将删除所有cookie；不过也可以自己设置删除时间。这个值是GMT时间格式，如果客户端和服务器端时间不一致，使用expires就会存在偏差。\n- [ ] **domain**: 属性定义可访问该cookie的域名，对一些大的网站，如果希望cookie可以在子网站中共享，可以使用该属性。例如设置Domain为 .bigsite.com ,则sub1.bigsite.com和sub2.bigsite.com都可以访问已保存在客户端的cookie，这时还需要将Path设置为/。\n- [ ] **max-age**: 属性定义cookie的有效时间，用秒计数，当超过有效期后，cookie的信息不会从客户端附加在HTTP消息头中发送到服务端。\n- [ ] **secure**:属性值定义cookie的安全性，当该值为true时必须是HTTPS状态下cookie才从客户端附加在HTTP消息中发送到服务端，在HTTP时cookie是不发送的；Secure为false时则可在HTTP状态下传递cookie，Secure缺省为false。\n\n\n\n<a name=\"001e1d17\"></a>\n#### 服务端设置\n\n\n> 不管你是请求一个资源文件(如html/js/css/图片), 还是发送一个ajax请求, 服务端都会返回response.而response header中有一项叫**set-cookie**, 是服务端专门用来设置cookie的; 一个set-cookie只能设置一个cookie,当你想设置多个, 需要添加同样多的set-cookie 服务端可以设置cookie的所有选项: expires, domain, path,secure, HttpOnly\n\n\n\n<a name=\"78378966\"></a>\n### **cookie的处理分为：**\n\n\n-  服务器向客户端发送cookie \n   -  服务器端向客户端发送cookie是通过HTTP响应报文实现的，在set-cookie中设置需要向客户端发送的cookie，cookie格式如下：  \n> set-cookie: \"name=value;domain=.domain.com;path=/;expires=Sat, 11 Jun 2016 11:29:42     GMT;HttpOnly;secure\"\n\n-  浏览器将cookie保存 \n   - 浏览器将后台传递过来的cookie进行管理，并且允许开发者在javaScript中使用document.cookie来存取cookie。但是这个接口使用起来非常蹩脚。它会因为使用它的方式不同而表现出不同的行为。\n-  当用来获取属性值时，document.cookie返回当前页面可用的（根据cookie的域、路径、失效时间和安全设置）所有的字符串，字符串的格式如下： \n\n\n\n```javascript\n   \"name1=value1;name2=value2;name3=value3\"\n```\n\n\n- 当用来设置值的时候，document.cookie属性可设置为一个新的cookie字符串。这个字符串会被解释并添加到现有的cookie集合中。如：\n\n\n\n```javascript\n document.cookie=\"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/\";\n```\n\n\n- 之后每次http请求浏览器都会将cookie发送给服务器端 \n   - cookie可以设置不同的域与路径，所以对于同一个name value，在不同域不同路径下是可以重复的，浏览器会按照与当前请求url或页面地址最佳匹配的顺序来排定先后顺序\n- 所以当前端传递到服务器端的cookie有多个重复name value时，我们只需要最匹配的那个，也就是第一个。\n\n\n\n<a name=\"ee269b7e\"></a>\n## **session**\n\n<br />session是另一种记录客户状态的机制，不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。**session相当于程序在服务器上建立的一份用户的档案，用户来访的时候只需要查询用户档案表就可以了。**<br />\n\n>  \n> 1. 用户向服务器发送用户名和密码\n> 1. 服务器验证通过后,在当前对话(session)里面保存相关数据,比如用户角色, 登陆时间等;\n> 1. 服务器向用户返回一个session_id, 写入用户的cookie\n> 1. 用户随后的每一次请求, 都会通过cookie, 将session_id传回服务器\n> 1. 服务端收到 session_id, 找到前期保存的数据, 由此得知用户的身份\n> \n \n\n\n\n<a name=\"4c5adb13\"></a>\n### **session的生命周期与有效期**\n\n\n-  为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。**session的使用虽然比cookie方便，但是过多的session存储在服务器内存中，会对服务器造成压力。因此，session里的信息应该尽量精简。** \n-  session在用户第一次访问服务器的时候自动创建。session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。 \n-  由于有越来越多的用户访问服务器，因此session也会越来越多。为防止内存溢出，服务器会把长时间内没有活跃的session从内存中删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了 \n\n\n\n<a name=\"461d630d\"></a>\n### **session与cookie**\n\n\n-  **由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是session。**典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的session，用用于标识这个用户，并且**跟踪用户**，这样才知道购物车里面有几本书。这个session是保存在服务端的，有一个唯一标识。在服务端保存session的方法很多，内存、数据库、文件都有。 \n-  **思考一下服务端如何识别特定的客户？**这个时候cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的cookie信息到服务端。实际上大多数的应用都是用 cookie 来实现session跟踪的，<br />第一次创建session的时候，服务端会在HTTP协议中告诉客户端，需要在 cookie 里面记录一个session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。 \n-  **cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？**这个信息可以写到cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是cookie名称的由来，给用户的一点甜头。 \n-  总结一下：session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现session的一种方式。 \n\n\n\n>  \n> 1. **安全性**：sesson比cookie安全，sesson是存储在服务器端的，cookie是存储在客户端\n> 1. **储存的类型不同**：cookie只支持字符串数据。想要设置其他类型的数据需要转成字符串sesson可以储存任意类型\n> 1. **有效期不同**：cookie可以设置长时间保存比如长使用的默认登陆功能，sesson一般失效时间较短，客户端关闭或者sesoon超时都会失效\n> 1. **储存大小不同**：单个cookie储存的数据不能超过4k，sesson可储存的数据远高于cookie，但是访问量过多，会占用过多的服务器资源\n> 1. cookie和session都会有时间限制，即都会过期。\n> \n \n\n\n\n<a name=\"01011a57\"></a>\n## **cookie, sessionstorage,localstorage**\n\n\n>  \n> - HTML5 提供了两种在客户端存储数据的新方法：localstorage和sessionstorage，挂载在window对象下。\n> \n \n\n\n\n- webStorage是本地存储，数据不是由服务器请求传递的。从而它可以存储大量的数据，而不影响网站的性能。\n- webStorage的目的是为了克服由cookie带来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。比如客户端需要保存的一些用户行为或数据，或从接口获取的一些短期内不会更新的数据，我们就可以利用Web Storage来存储。\n| 分类 | 生命周期 | 储存 | 储存位置 |\n| --- | --- | --- | --- |\n| cookie | 默认保存在内存中，随浏览器关闭失效，如设置过期时间，在时间过期后失效 | 4kb | 保存在客户端每次请求都会带上 |\n| localstorage | 理论上永久有效，除非手动清除 | 4.98mb | 存在客户端不与服务器交互节省网络流量 |\n| sessionstorage | 仅在当前页面有效，关闭页面后浏览器失效 | 4.98mb部分浏览器没限制 | 存在客户端不与服务器交互节省网络流量 |\n\n\n\n<a name=\"ef229611\"></a>\n## **token**\n\n\n> 我们关于如上的几个概念已经说了很多，但是都没有涉及到安全性。如果每次cookie和session互相传递的都是明文数据（比如每次发送的密码都是未经加密的），就会非常不安全。我们可以考虑在服务端对客户端第一次登陆传递过来的用户名和密码进行一次加密，之后再把结果当做cookie传递给客户端。\n\n\n\n<a name=\"2d7bdafe\"></a>\n### 如何使用Token？\n\n\n>  \n> - 使用设备号/设备mac地址作为token\n> \n \n\n\n\n- 客户端：客户端在登录的时候获取设备的设备号/mac地址，并将其作为参数传递到服务器端\n- 服务器：服务器接收到该参数之后，使用一个变量接收同时将其作为token保存数据库，并将该token设置在session中，客户端每次请求的时候都要统一拦截，并将客户端传递的token和服务器session中的token对比，如果相同则放下，不同则拒绝\n\n\n\n> 优点：客户端不需要重新登录，只要登录一次后就能一直使用<br />缺点：客户端需要带设备号/mac地址作为参数传递\n\n\n\n- 用session值作为token\n- 客户端：客户端只需要携带用户名和密码即可登录\n- 服务端：客户端接收到用户名和密码后并判断，如果正确就将本地获取sessionId作为token返回给客户端，客户端以后只需要带上请求数据即可\n",
    "body_draft": "<a name=\"965491cf\"></a>\n### 参考文档：\n\n<br />[https://blog.csdn.net/zhangquan_zone/article/details/77627899](https://blog.csdn.net/zhangquan_zone/article/details/77627899)<br />[https://www.sohu.com/a/207801015_114819](https://www.sohu.com/a/207801015_114819)<br />[https://www.cnblogs.com/lufeiludaima/p/pz20190203.html](https://www.cnblogs.com/lufeiludaima/p/pz20190203.html)<br />[https://segmentfault.com/a/1190000019457890](https://segmentfault.com/a/1190000019457890)<br />[https://www.cnblogs.com/andy-zhou/p/5360107.html](https://www.cnblogs.com/andy-zhou/p/5360107.html)<br />[https://www.zhihu.com/question/359508734/answer/1591403693](https://www.zhihu.com/question/359508734/answer/1591403693)\n\n---\n\n<a name=\"26a1ee86\"></a>\n## **cookie**\n\n\n> cookie是由服务器端生成，发送给User-Agent（一般是浏览器），（服务器告诉浏览器设置一下cookie）,浏览器会将cookie的key/value保存到某个目录下的文本文件。\n\n\n\n<a name=\"81a4c79b\"></a>\n### **cookie的诞生**\n\n<br />由于HTTP协议是无状态的，而服务器端的业务必须是要有状态的。cookie诞生的最初目的是为了存储web中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。目前最新的规范是RFC 6265，它是一个由浏览器服务器共同协作实现的规范。<br />\n\n<a name=\"b6366037\"></a>\n### **如何设置cookie**\n\n\n<a name=\"2cb96fdc\"></a>\n#### 客户端设置\n\n\n```javascript\ndocument.cookie=\"name=value; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/\";\n```\n\n\n>  \n> - [x] **name**:一个唯一确定的cookie名称。通常来讲cookie的名称是不区分大小写的。\n> \n \n\n\n\n- [x] **value**:存储在cookie中的字符串值。最好为cookie的name和value进行url编码\n- [x] **path**: 表示这个cookie影响到的路径，浏览器跟会根据这项配置，像指定域中匹配的路径发送cookie。\n- [x] **expires**:失效时间，表示cookie何时应该被删除的时间戳(也就是，何时应该停止向服务器发送这个cookie)。如果不设置这个时间戳，浏览器会在页面关闭时即将删除所有cookie；不过也可以自己设置删除时间。这个值是GMT时间格式，如果客户端和服务器端时间不一致，使用expires就会存在偏差。\n- [ ] **domain**: 属性定义可访问该cookie的域名，对一些大的网站，如果希望cookie可以在子网站中共享，可以使用该属性。例如设置Domain为 .bigsite.com ,则sub1.bigsite.com和sub2.bigsite.com都可以访问已保存在客户端的cookie，这时还需要将Path设置为/。\n- [ ] **max-age**: 属性定义cookie的有效时间，用秒计数，当超过有效期后，cookie的信息不会从客户端附加在HTTP消息头中发送到服务端。\n- [ ] **secure**:属性值定义cookie的安全性，当该值为true时必须是HTTPS状态下cookie才从客户端附加在HTTP消息中发送到服务端，在HTTP时cookie是不发送的；Secure为false时则可在HTTP状态下传递cookie，Secure缺省为false。\n\n\n\n<a name=\"001e1d17\"></a>\n#### 服务端设置\n\n\n> 不管你是请求一个资源文件(如html/js/css/图片), 还是发送一个ajax请求, 服务端都会返回response.而response header中有一项叫**set-cookie**, 是服务端专门用来设置cookie的; 一个set-cookie只能设置一个cookie,当你想设置多个, 需要添加同样多的set-cookie 服务端可以设置cookie的所有选项: expires, domain, path,secure, HttpOnly\n\n\n\n<a name=\"78378966\"></a>\n### **cookie的处理分为：**\n\n\n-  服务器向客户端发送cookie \n   -  服务器端向客户端发送cookie是通过HTTP响应报文实现的，在set-cookie中设置需要向客户端发送的cookie，cookie格式如下：  \n> set-cookie: \"name=value;domain=.domain.com;path=/;expires=Sat, 11 Jun 2016 11:29:42     GMT;HttpOnly;secure\"\n\n-  浏览器将cookie保存 \n   - 浏览器将后台传递过来的cookie进行管理，并且允许开发者在javaScript中使用document.cookie来存取cookie。但是这个接口使用起来非常蹩脚。它会因为使用它的方式不同而表现出不同的行为。\n-  当用来获取属性值时，document.cookie返回当前页面可用的（根据cookie的域、路径、失效时间和安全设置）所有的字符串，字符串的格式如下： \n\n\n\n```javascript\n   \"name1=value1;name2=value2;name3=value3\"\n```\n\n\n- 当用来设置值的时候，document.cookie属性可设置为一个新的cookie字符串。这个字符串会被解释并添加到现有的cookie集合中。如：\n\n\n\n```javascript\n document.cookie=\"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/\";\n```\n\n\n- 之后每次http请求浏览器都会将cookie发送给服务器端 \n   - cookie可以设置不同的域与路径，所以对于同一个name value，在不同域不同路径下是可以重复的，浏览器会按照与当前请求url或页面地址最佳匹配的顺序来排定先后顺序\n- 所以当前端传递到服务器端的cookie有多个重复name value时，我们只需要最匹配的那个，也就是第一个。\n\n\n\n<a name=\"ee269b7e\"></a>\n## **session**\n\n<br />session是另一种记录客户状态的机制，不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。**session相当于程序在服务器上建立的一份用户的档案，用户来访的时候只需要查询用户档案表就可以了。**<br />\n\n>  \n> 1. 用户向服务器发送用户名和密码\n> 1. 服务器验证通过后,在当前对话(session)里面保存相关数据,比如用户角色, 登陆时间等;\n> 1. 服务器向用户返回一个session_id, 写入用户的cookie\n> 1. 用户随后的每一次请求, 都会通过cookie, 将session_id传回服务器\n> 1. 服务端收到 session_id, 找到前期保存的数据, 由此得知用户的身份\n> \n \n\n\n\n<a name=\"4c5adb13\"></a>\n### **session的生命周期与有效期**\n\n\n-  为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。**session的使用虽然比cookie方便，但是过多的session存储在服务器内存中，会对服务器造成压力。因此，session里的信息应该尽量精简。** \n-  session在用户第一次访问服务器的时候自动创建。session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。 \n-  由于有越来越多的用户访问服务器，因此session也会越来越多。为防止内存溢出，服务器会把长时间内没有活跃的session从内存中删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了 \n\n\n\n<a name=\"461d630d\"></a>\n### **session与cookie**\n\n\n-  **由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是session。**典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的session，用用于标识这个用户，并且**跟踪用户**，这样才知道购物车里面有几本书。这个session是保存在服务端的，有一个唯一标识。在服务端保存session的方法很多，内存、数据库、文件都有。 \n-  **思考一下服务端如何识别特定的客户？**这个时候cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的cookie信息到服务端。实际上大多数的应用都是用 cookie 来实现session跟踪的，<br />第一次创建session的时候，服务端会在HTTP协议中告诉客户端，需要在 cookie 里面记录一个session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。 \n-  **cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？**这个信息可以写到cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是cookie名称的由来，给用户的一点甜头。 \n-  总结一下：session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现session的一种方式。 \n\n\n\n>  \n> 1. **安全性**：sesson比cookie安全，sesson是存储在服务器端的，cookie是存储在客户端\n> 1. **储存的类型不同**：cookie只支持字符串数据。想要设置其他类型的数据需要转成字符串sesson可以储存任意类型\n> 1. **有效期不同**：cookie可以设置长时间保存比如长使用的默认登陆功能，sesson一般失效时间较短，客户端关闭或者sesoon超时都会失效\n> 1. **储存大小不同**：单个cookie储存的数据不能超过4k，sesson可储存的数据远高于cookie，但是访问量过多，会占用过多的服务器资源\n> 1. cookie和session都会有时间限制，即都会过期。\n> \n \n\n\n\n<a name=\"01011a57\"></a>\n## **cookie, sessionstorage,localstorage**\n\n\n>  \n> - HTML5 提供了两种在客户端存储数据的新方法：localstorage和sessionstorage，挂载在window对象下。\n> \n \n\n\n\n- webStorage是本地存储，数据不是由服务器请求传递的。从而它可以存储大量的数据，而不影响网站的性能。\n- webStorage的目的是为了克服由cookie带来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。比如客户端需要保存的一些用户行为或数据，或从接口获取的一些短期内不会更新的数据，我们就可以利用Web Storage来存储。\n| 分类 | 生命周期 | 储存 | 储存位置 |\n| --- | --- | --- | --- |\n| cookie | 默认保存在内存中，随浏览器关闭失效，如设置过期时间，在时间过期后失效 | 4kb | 保存在客户端每次请求都会带上 |\n| localstorage | 理论上永久有效，除非手动清除 | 4.98mb | 存在客户端不与服务器交互节省网络流量 |\n| sessionstorage | 仅在当前页面有效，关闭页面后浏览器失效 | 4.98mb部分浏览器没限制 | 存在客户端不与服务器交互节省网络流量 |\n\n\n\n<a name=\"ef229611\"></a>\n## **token**\n\n\n> 我们关于如上的几个概念已经说了很多，但是都没有涉及到安全性。如果每次cookie和session互相传递的都是明文数据（比如每次发送的密码都是未经加密的），就会非常不安全。我们可以考虑在服务端对客户端第一次登陆传递过来的用户名和密码进行一次加密，之后再把结果当做cookie传递给客户端。\n\n\n\n<a name=\"2d7bdafe\"></a>\n### 如何使用Token？\n\n\n>  \n> - 使用设备号/设备mac地址作为token\n> \n \n\n\n\n- 客户端：客户端在登录的时候获取设备的设备号/mac地址，并将其作为参数传递到服务器端\n- 服务器：服务器接收到该参数之后，使用一个变量接收同时将其作为token保存数据库，并将该token设置在session中，客户端每次请求的时候都要统一拦截，并将客户端传递的token和服务器session中的token对比，如果相同则放下，不同则拒绝\n\n\n\n> 优点：客户端不需要重新登录，只要登录一次后就能一直使用<br />缺点：客户端需要带设备号/mac地址作为参数传递\n\n\n\n- 用session值作为token\n- 客户端：客户端只需要携带用户名和密码即可登录\n- 服务端：客户端接收到用户名和密码后并判断，如果正确就将本地获取sessionId作为token返回给客户端，客户端以后只需要带上请求数据即可\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h3 id=\"965491cf\"><span class=\"ne-text\">参考文档：</span></h3><p id=\"ufecd39ea\" class=\"ne-p\"><br></p><p id=\"ufcd0d9cc\" class=\"ne-p\"><a href=\"https://blog.csdn.net/zhangquan_zone/article/details/77627899\" data-href=\"https://blog.csdn.net/zhangquan_zone/article/details/77627899\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://blog.csdn.net/zhangquan_zone/article/details/77627899</span></a><span class=\"ne-text\"><br /></span><a href=\"https://www.sohu.com/a/207801015_114819\" data-href=\"https://www.sohu.com/a/207801015_114819\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://www.sohu.com/a/207801015_114819</span></a><span class=\"ne-text\"><br /></span><a href=\"https://www.cnblogs.com/lufeiludaima/p/pz20190203.html\" data-href=\"https://www.cnblogs.com/lufeiludaima/p/pz20190203.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://www.cnblogs.com/lufeiludaima/p/pz20190203.html</span></a><span class=\"ne-text\"><br /></span><a href=\"https://segmentfault.com/a/1190000019457890\" data-href=\"https://segmentfault.com/a/1190000019457890\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://segmentfault.com/a/1190000019457890</span></a><span class=\"ne-text\"><br /></span><a href=\"https://www.cnblogs.com/andy-zhou/p/5360107.html\" data-href=\"https://www.cnblogs.com/andy-zhou/p/5360107.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://www.cnblogs.com/andy-zhou/p/5360107.html</span></a><span class=\"ne-text\"><br /></span><a href=\"https://www.zhihu.com/question/359508734/answer/1591403693\" data-href=\"https://www.zhihu.com/question/359508734/answer/1591403693\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://www.zhihu.com/question/359508734/answer/1591403693</span></a></p><hr id=\"PGPmm\" class=\"ne-hr\"><h2 id=\"26a1ee86\"><strong><span class=\"ne-text\">cookie</span></strong></h2><p id=\"u18571f00\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u5db0e44c\" class=\"ne-p\"><span class=\"ne-text\">cookie是由服务器端生成，发送给User-Agent（一般是浏览器），（服务器告诉浏览器设置一下cookie）,浏览器会将cookie的key/value保存到某个目录下的文本文件。</span></p></div><p id=\"uc1ef1413\" class=\"ne-p\"><br></p><h3 id=\"81a4c79b\"><strong><span class=\"ne-text\">cookie的诞生</span></strong></h3><p id=\"u1e8fe130\" class=\"ne-p\"><br></p><p id=\"u8d3753a9\" class=\"ne-p\"><span class=\"ne-text\">由于HTTP协议是无状态的，而服务器端的业务必须是要有状态的。cookie诞生的最初目的是为了存储web中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。目前最新的规范是RFC 6265，它是一个由浏览器服务器共同协作实现的规范。</span></p><p id=\"u9d9a4a36\" class=\"ne-p\"><br></p><h3 id=\"b6366037\"><strong><span class=\"ne-text\">如何设置cookie</span></strong></h3><p id=\"u2c5e483e\" class=\"ne-p\"><br></p><h4 id=\"2cb96fdc\"><span class=\"ne-text\">客户端设置</span></h4><p id=\"uf3f67ff2\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"3e0e42c7\" class=\"ne-codeblock language-javascript\">document.cookie=&quot;name=value; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;</pre><p id=\"u92766b6e\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u83d1f1ac\" class=\"ne-p\"><span class=\"ne-text\"> </span></p><ul class=\"ne-tl\"><li id=\"u718fbf2f\"><span class=\"ne-tli-symbol\" style=\"margin: 3px 0.5ex; vertical-align: middle\">✅</span><strong><span class=\"ne-text\">name</span></strong><span class=\"ne-text\">:一个唯一确定的cookie名称。通常来讲cookie的名称是不区分大小写的。</span></li></ul><p id=\"udfa3df94\" class=\"ne-p\"><span class=\"ne-text\"> </span></p></div><p id=\"ucc469951\" class=\"ne-p\"><br></p><ul class=\"ne-tl\"><li id=\"u5d1c63d7\"><span class=\"ne-tli-symbol\" style=\"margin: 3px 0.5ex; vertical-align: middle\">✅</span><strong><span class=\"ne-text\">value</span></strong><span class=\"ne-text\">:存储在cookie中的字符串值。最好为cookie的name和value进行url编码</span></li><li id=\"ue2e2b37b\"><span class=\"ne-tli-symbol\" style=\"margin: 3px 0.5ex; vertical-align: middle\">✅</span><strong><span class=\"ne-text\">path</span></strong><span class=\"ne-text\">: 表示这个cookie影响到的路径，浏览器跟会根据这项配置，像指定域中匹配的路径发送cookie。</span></li></ul><ul class=\"ne-tl\"><li id=\"u9f58927f\"><span class=\"ne-tli-symbol\" style=\"margin: 3px 0.5ex; vertical-align: middle\">✅</span><strong><span class=\"ne-text\">expires</span></strong><span class=\"ne-text\">:失效时间，表示cookie何时应该被删除的时间戳(也就是，何时应该停止向服务器发送这个cookie)。如果不设置这个时间戳，浏览器会在页面关闭时即将删除所有cookie；不过也可以自己设置删除时间。这个值是GMT时间格式，如果客户端和服务器端时间不一致，使用expires就会存在偏差。</span></li><li id=\"u23347c2c\"><span class=\"ne-tli-symbol\" style=\"margin: 3px 0.5ex; vertical-align: middle\">🔲</span><strong><span class=\"ne-text\">domain</span></strong><span class=\"ne-text\">: 属性定义可访问该cookie的域名，对一些大的网站，如果希望cookie可以在子网站中共享，可以使用该属性。例如设置Domain为 .bigsite.com ,则sub1.bigsite.com和sub2.bigsite.com都可以访问已保存在客户端的cookie，这时还需要将Path设置为/。</span></li></ul><ul class=\"ne-tl\"><li id=\"ufe02c23a\"><span class=\"ne-tli-symbol\" style=\"margin: 3px 0.5ex; vertical-align: middle\">🔲</span><strong><span class=\"ne-text\">max-age</span></strong><span class=\"ne-text\">: 属性定义cookie的有效时间，用秒计数，当超过有效期后，cookie的信息不会从客户端附加在HTTP消息头中发送到服务端。</span></li><li id=\"uddca99aa\"><span class=\"ne-tli-symbol\" style=\"margin: 3px 0.5ex; vertical-align: middle\">🔲</span><strong><span class=\"ne-text\">secure</span></strong><span class=\"ne-text\">:属性值定义cookie的安全性，当该值为true时必须是HTTPS状态下cookie才从客户端附加在HTTP消息中发送到服务端，在HTTP时cookie是不发送的；Secure为false时则可在HTTP状态下传递cookie，Secure缺省为false。</span></li></ul><p id=\"u1a233a27\" class=\"ne-p\"><br></p><h4 id=\"001e1d17\"><span class=\"ne-text\">服务端设置</span></h4><p id=\"u30e78910\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u320fe428\" class=\"ne-p\"><span class=\"ne-text\">不管你是请求一个资源文件(如html/js/css/图片), 还是发送一个ajax请求, 服务端都会返回response.而response header中有一项叫</span><strong><span class=\"ne-text\">set-cookie</span></strong><span class=\"ne-text\">, 是服务端专门用来设置cookie的; 一个set-cookie只能设置一个cookie,当你想设置多个, 需要添加同样多的set-cookie 服务端可以设置cookie的所有选项: expires, domain, path,secure, HttpOnly</span></p></div><p id=\"u55613f95\" class=\"ne-p\"><br></p><h3 id=\"78378966\"><strong><span class=\"ne-text\">cookie的处理分为：</span></strong></h3><p id=\"u24468d59\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u5a2e1fae\"><span class=\"ne-text\"> 服务器向客户端发送cookie </span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u234e87a0\"><span class=\"ne-text\"> 服务器端向客户端发送cookie是通过HTTP响应报文实现的，在set-cookie中设置需要向客户端发送的cookie，cookie格式如下： </span><span class=\"ne-text\"> </span></li></ul></ul><div class=\"ne-quote\"><p id=\"u777ce180\" class=\"ne-p\"><span class=\"ne-text\">set-cookie: &quot;name=value;domain=.domain.com;path=/;expires=Sat, 11 Jun 2016 11:29:42     GMT;HttpOnly;secure&quot;</span></p></div><ul class=\"ne-ul\"><li id=\"u36401398\"><span class=\"ne-text\"> 浏览器将cookie保存 </span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ueb46ed4a\"><span class=\"ne-text\">浏览器将后台传递过来的cookie进行管理，并且允许开发者在javaScript中使用document.cookie来存取cookie。但是这个接口使用起来非常蹩脚。它会因为使用它的方式不同而表现出不同的行为。</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ua06ffd79\"><span class=\"ne-text\"> 当用来获取属性值时，document.cookie返回当前页面可用的（根据cookie的域、路径、失效时间和安全设置）所有的字符串，字符串的格式如下： </span></li></ul><p id=\"ue1a15c1b\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"adb315c1\" class=\"ne-codeblock language-javascript\">   &quot;name1=value1;name2=value2;name3=value3&quot;</pre><p id=\"u0d46baa5\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u3f093f3f\"><span class=\"ne-text\">当用来设置值的时候，document.cookie属性可设置为一个新的cookie字符串。这个字符串会被解释并添加到现有的cookie集合中。如：</span></li></ul><p id=\"u0293db14\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"63593534\" class=\"ne-codeblock language-javascript\"> document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;</pre><p id=\"u167b9cf7\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u70daf874\"><span class=\"ne-text\">之后每次http请求浏览器都会将cookie发送给服务器端 </span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u6cce37a7\"><span class=\"ne-text\">cookie可以设置不同的域与路径，所以对于同一个name value，在不同域不同路径下是可以重复的，浏览器会按照与当前请求url或页面地址最佳匹配的顺序来排定先后顺序</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u52396ce0\"><span class=\"ne-text\">所以当前端传递到服务器端的cookie有多个重复name value时，我们只需要最匹配的那个，也就是第一个。</span></li></ul><p id=\"u6a3bd5a7\" class=\"ne-p\"><br></p><h2 id=\"ee269b7e\"><strong><span class=\"ne-text\">session</span></strong></h2><p id=\"u3f534ad1\" class=\"ne-p\"><br></p><p id=\"u1ab37a1d\" class=\"ne-p\"><span class=\"ne-text\">session是另一种记录客户状态的机制，不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。</span><strong><span class=\"ne-text\">session相当于程序在服务器上建立的一份用户的档案，用户来访的时候只需要查询用户档案表就可以了。</span></strong></p><p id=\"u470a7d5d\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ue4d10a39\" class=\"ne-p\"><span class=\"ne-text\"> </span></p><ol class=\"ne-ol\"><li id=\"ucc905c7e\"><span class=\"ne-text\">用户向服务器发送用户名和密码</span></li><li id=\"u094b5c45\"><span class=\"ne-text\">服务器验证通过后,在当前对话(session)里面保存相关数据,比如用户角色, 登陆时间等;</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u95cbfef0\"><span class=\"ne-text\">服务器向用户返回一个session_id, 写入用户的cookie</span></li><li id=\"u5f44f050\"><span class=\"ne-text\">用户随后的每一次请求, 都会通过cookie, 将session_id传回服务器</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"ub5633c9a\"><span class=\"ne-text\">服务端收到 session_id, 找到前期保存的数据, 由此得知用户的身份</span></li></ol><p id=\"u47b866fd\" class=\"ne-p\"><span class=\"ne-text\"> </span></p></div><p id=\"u0d36de73\" class=\"ne-p\"><br></p><h3 id=\"4c5adb13\"><strong><span class=\"ne-text\">session的生命周期与有效期</span></strong></h3><p id=\"ucf7887e4\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"uf01d4ba6\"><span class=\"ne-text\"> 为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。</span><strong><span class=\"ne-text\">session的使用虽然比cookie方便，但是过多的session存储在服务器内存中，会对服务器造成压力。因此，session里的信息应该尽量精简。</span></strong><span class=\"ne-text\"> </span></li><li id=\"uf5bf1596\"><span class=\"ne-text\"> session在用户第一次访问服务器的时候自动创建。session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。 </span></li></ul><ul class=\"ne-ul\"><li id=\"u7e333656\"><span class=\"ne-text\"> 由于有越来越多的用户访问服务器，因此session也会越来越多。为防止内存溢出，服务器会把长时间内没有活跃的session从内存中删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了 </span></li></ul><p id=\"ua998f7f4\" class=\"ne-p\"><br></p><h3 id=\"461d630d\"><strong><span class=\"ne-text\">session与cookie</span></strong></h3><p id=\"uba35b4f0\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u682ebf69\"><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是session。</span></strong><span class=\"ne-text\">典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的session，用用于标识这个用户，并且</span><strong><span class=\"ne-text\">跟踪用户</span></strong><span class=\"ne-text\">，这样才知道购物车里面有几本书。这个session是保存在服务端的，有一个唯一标识。在服务端保存session的方法很多，内存、数据库、文件都有。 </span></li><li id=\"u057d5635\"><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">思考一下服务端如何识别特定的客户？</span></strong><span class=\"ne-text\">这个时候cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的cookie信息到服务端。实际上大多数的应用都是用 cookie 来实现session跟踪的，<br /></span><span class=\"ne-text\">第一次创建session的时候，服务端会在HTTP协议中告诉客户端，需要在 cookie 里面记录一个session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。 </span></li></ul><ul class=\"ne-ul\"><li id=\"u7563bb44\"><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？</span></strong><span class=\"ne-text\">这个信息可以写到cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是cookie名称的由来，给用户的一点甜头。 </span></li><li id=\"u8a305935\"><span class=\"ne-text\"> 总结一下：session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现session的一种方式。 </span></li></ul><p id=\"u145eed8c\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u5bd96105\" class=\"ne-p\"><span class=\"ne-text\"> </span></p><ol class=\"ne-ol\"><li id=\"u74eb83bf\"><strong><span class=\"ne-text\">安全性</span></strong><span class=\"ne-text\">：sesson比cookie安全，sesson是存储在服务器端的，cookie是存储在客户端</span></li><li id=\"u29dc9ac2\"><strong><span class=\"ne-text\">储存的类型不同</span></strong><span class=\"ne-text\">：cookie只支持字符串数据。想要设置其他类型的数据需要转成字符串sesson可以储存任意类型</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u1aca6187\"><strong><span class=\"ne-text\">有效期不同</span></strong><span class=\"ne-text\">：cookie可以设置长时间保存比如长使用的默认登陆功能，sesson一般失效时间较短，客户端关闭或者sesoon超时都会失效</span></li><li id=\"u5507539d\"><strong><span class=\"ne-text\">储存大小不同</span></strong><span class=\"ne-text\">：单个cookie储存的数据不能超过4k，sesson可储存的数据远高于cookie，但是访问量过多，会占用过多的服务器资源</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"u7a006ca3\"><span class=\"ne-text\">cookie和session都会有时间限制，即都会过期。</span></li></ol><p id=\"u49548d3a\" class=\"ne-p\"><span class=\"ne-text\"> </span></p></div><p id=\"ueb4d4852\" class=\"ne-p\"><br></p><h2 id=\"01011a57\"><strong><span class=\"ne-text\">cookie, sessionstorage,localstorage</span></strong></h2><p id=\"ua100ee30\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ufffe59b2\" class=\"ne-p\"><span class=\"ne-text\"> </span></p><ul class=\"ne-ul\"><li id=\"ud1ca7b16\"><span class=\"ne-text\">HTML5 提供了两种在客户端存储数据的新方法：localstorage和sessionstorage，挂载在window对象下。</span></li></ul><p id=\"ua42e79d2\" class=\"ne-p\"><span class=\"ne-text\"> </span></p></div><p id=\"u9d9f8f59\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u263fd2a7\"><span class=\"ne-text\">webStorage是本地存储，数据不是由服务器请求传递的。从而它可以存储大量的数据，而不影响网站的性能。</span></li><li id=\"u0bb4bde7\"><span class=\"ne-text\">webStorage的目的是为了克服由cookie带来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。比如客户端需要保存的一些用户行为或数据，或从接口获取的一些短期内不会更新的数据，我们就可以利用Web Storage来存储。</span></li></ul><table id=\"7df0c2af\" class=\"ne-table\" style=\"width: 748px\"><tbody><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u07383bed\" class=\"ne-p\"><span class=\"ne-text\">分类</span></p></td><td width=\"187\"><p id=\"u3965851d\" class=\"ne-p\"><span class=\"ne-text\">生命周期</span></p></td><td width=\"187\"><p id=\"uf4495c08\" class=\"ne-p\"><span class=\"ne-text\">储存</span></p></td><td width=\"187\"><p id=\"u21382ec0\" class=\"ne-p\"><span class=\"ne-text\">储存位置</span></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u294b0414\" class=\"ne-p\"><span class=\"ne-text\">cookie</span></p></td><td width=\"187\"><p id=\"u9f3f8e56\" class=\"ne-p\"><span class=\"ne-text\">默认保存在内存中，随浏览器关闭失效，如设置过期时间，在时间过期后失效</span></p></td><td width=\"187\"><p id=\"uadf2d501\" class=\"ne-p\"><span class=\"ne-text\">4kb</span></p></td><td width=\"187\"><p id=\"ua8fd654a\" class=\"ne-p\"><span class=\"ne-text\">保存在客户端每次请求都会带上</span></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u4acac274\" class=\"ne-p\"><span class=\"ne-text\">localstorage</span></p></td><td width=\"187\"><p id=\"u44b6dc03\" class=\"ne-p\"><span class=\"ne-text\">理论上永久有效，除非手动清除</span></p></td><td width=\"187\"><p id=\"uf76cdbf4\" class=\"ne-p\"><span class=\"ne-text\">4.98mb</span></p></td><td width=\"187\"><p id=\"ue41f3fc5\" class=\"ne-p\"><span class=\"ne-text\">存在客户端不与服务器交互节省网络流量</span></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u68a81526\" class=\"ne-p\"><span class=\"ne-text\">sessionstorage</span></p></td><td width=\"187\"><p id=\"ua54fe2b6\" class=\"ne-p\"><span class=\"ne-text\">仅在当前页面有效，关闭页面后浏览器失效</span></p></td><td width=\"187\"><p id=\"u88dbfa1a\" class=\"ne-p\"><span class=\"ne-text\">4.98mb部分浏览器没限制</span></p></td><td width=\"187\"><p id=\"u988f10b6\" class=\"ne-p\"><span class=\"ne-text\">存在客户端不与服务器交互节省网络流量</span></p></td></tr></tbody></table><p id=\"u1bf8aee7\" class=\"ne-p\"><br></p><h2 id=\"ef229611\"><strong><span class=\"ne-text\">token</span></strong></h2><p id=\"u883c1ecd\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"uf0f2202b\" class=\"ne-p\"><span class=\"ne-text\">我们关于如上的几个概念已经说了很多，但是都没有涉及到安全性。如果每次cookie和session互相传递的都是明文数据（比如每次发送的密码都是未经加密的），就会非常不安全。我们可以考虑在服务端对客户端第一次登陆传递过来的用户名和密码进行一次加密，之后再把结果当做cookie传递给客户端。</span></p></div><p id=\"udb6d9f3b\" class=\"ne-p\"><br></p><h3 id=\"2d7bdafe\"><span class=\"ne-text\">如何使用Token？</span></h3><p id=\"u40a4d140\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u0b1c9a6f\" class=\"ne-p\"><span class=\"ne-text\"> </span></p><ul class=\"ne-ul\"><li id=\"u23b9e530\"><span class=\"ne-text\">使用设备号/设备mac地址作为token</span></li></ul><p id=\"u48c35fa0\" class=\"ne-p\"><span class=\"ne-text\"> </span></p></div><p id=\"u13a82e32\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u19629509\"><span class=\"ne-text\">客户端：客户端在登录的时候获取设备的设备号/mac地址，并将其作为参数传递到服务器端</span></li><li id=\"u9885718d\"><span class=\"ne-text\">服务器：服务器接收到该参数之后，使用一个变量接收同时将其作为token保存数据库，并将该token设置在session中，客户端每次请求的时候都要统一拦截，并将客户端传递的token和服务器session中的token对比，如果相同则放下，不同则拒绝</span></li></ul><p id=\"u1cab3a48\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u6146a051\" class=\"ne-p\"><span class=\"ne-text\">优点：客户端不需要重新登录，只要登录一次后就能一直使用<br /></span><span class=\"ne-text\">缺点：客户端需要带设备号/mac地址作为参数传递</span></p></div><p id=\"uc82fe724\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u02f60de7\"><span class=\"ne-text\">用session值作为token</span></li><li id=\"u1f72ec8a\"><span class=\"ne-text\">客户端：客户端只需要携带用户名和密码即可登录</span></li></ul><ul class=\"ne-ul\"><li id=\"ue5a9f084\"><span class=\"ne-text\">服务端：客户端接收到用户名和密码后并判断，如果正确就将本地获取sessionId作为token返回给客户端，客户端以后只需要带上请求数据即可</span></li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h3 data-lake-id=\"965491cf\" id=\"965491cf\"><span data-lake-id=\"u8d9794cc\" id=\"u8d9794cc\">参考文档：</span></h3><p data-lake-id=\"ufecd39ea\" id=\"ufecd39ea\"><br></p><p data-lake-id=\"ufcd0d9cc\" id=\"ufcd0d9cc\"><a href=\"https://blog.csdn.net/zhangquan_zone/article/details/77627899\" target=\"_blank\" data-lake-id=\"u4eabd35c\" id=\"u4eabd35c\"><span data-lake-id=\"ub4016a29\" id=\"ub4016a29\">https://blog.csdn.net/zhangquan_zone/article/details/77627899</span></a><span data-lake-id=\"ueb085376\" id=\"ueb085376\"><br /></span><a href=\"https://www.sohu.com/a/207801015_114819\" target=\"_blank\" data-lake-id=\"u1bfb6b9d\" id=\"u1bfb6b9d\"><span data-lake-id=\"u310cee51\" id=\"u310cee51\">https://www.sohu.com/a/207801015_114819</span></a><span data-lake-id=\"u2c707e94\" id=\"u2c707e94\"><br /></span><a href=\"https://www.cnblogs.com/lufeiludaima/p/pz20190203.html\" target=\"_blank\" data-lake-id=\"u19b38384\" id=\"u19b38384\"><span data-lake-id=\"uceb74bbb\" id=\"uceb74bbb\">https://www.cnblogs.com/lufeiludaima/p/pz20190203.html</span></a><span data-lake-id=\"u4575d716\" id=\"u4575d716\"><br /></span><a href=\"https://segmentfault.com/a/1190000019457890\" target=\"_blank\" data-lake-id=\"u5abbe793\" id=\"u5abbe793\"><span data-lake-id=\"u8e1eaf95\" id=\"u8e1eaf95\">https://segmentfault.com/a/1190000019457890</span></a><span data-lake-id=\"u0de8f04c\" id=\"u0de8f04c\"><br /></span><a href=\"https://www.cnblogs.com/andy-zhou/p/5360107.html\" target=\"_blank\" data-lake-id=\"uc43371e4\" id=\"uc43371e4\"><span data-lake-id=\"u98aa86b3\" id=\"u98aa86b3\">https://www.cnblogs.com/andy-zhou/p/5360107.html</span></a><span data-lake-id=\"u077df85b\" id=\"u077df85b\"><br /></span><a href=\"https://www.zhihu.com/question/359508734/answer/1591403693\" target=\"_blank\" data-lake-id=\"ud6959e07\" id=\"ud6959e07\"><span data-lake-id=\"uf998489d\" id=\"uf998489d\">https://www.zhihu.com/question/359508734/answer/1591403693</span></a></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22PGPmm%22%7D\"></card><h2 data-lake-id=\"26a1ee86\" id=\"26a1ee86\"><strong><span data-lake-id=\"ue3dd04d8\" id=\"ue3dd04d8\">cookie</span></strong></h2><p data-lake-id=\"u18571f00\" id=\"u18571f00\"><br></p><blockquote data-lake-id=\"u62eaf1fd\" id=\"u62eaf1fd\"><p data-lake-id=\"u5db0e44c\" id=\"u5db0e44c\"><span data-lake-id=\"ufb4e5c84\" id=\"ufb4e5c84\">cookie是由服务器端生成，发送给User-Agent（一般是浏览器），（服务器告诉浏览器设置一下cookie）,浏览器会将cookie的key/value保存到某个目录下的文本文件。</span></p></blockquote><p data-lake-id=\"uc1ef1413\" id=\"uc1ef1413\"><br></p><h3 data-lake-id=\"81a4c79b\" id=\"81a4c79b\"><strong><span data-lake-id=\"ueba0f5c6\" id=\"ueba0f5c6\">cookie的诞生</span></strong></h3><p data-lake-id=\"u1e8fe130\" id=\"u1e8fe130\"><br></p><p data-lake-id=\"u8d3753a9\" id=\"u8d3753a9\"><span data-lake-id=\"u028901a2\" id=\"u028901a2\">由于HTTP协议是无状态的，而服务器端的业务必须是要有状态的。cookie诞生的最初目的是为了存储web中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。目前最新的规范是RFC 6265，它是一个由浏览器服务器共同协作实现的规范。</span></p><p data-lake-id=\"u9d9a4a36\" id=\"u9d9a4a36\"><br></p><h3 data-lake-id=\"b6366037\" id=\"b6366037\"><strong><span data-lake-id=\"u6eb62dc4\" id=\"u6eb62dc4\">如何设置cookie</span></strong></h3><p data-lake-id=\"u2c5e483e\" id=\"u2c5e483e\"><br></p><h4 data-lake-id=\"2cb96fdc\" id=\"2cb96fdc\"><span data-lake-id=\"uc788faf9\" id=\"uc788faf9\">客户端设置</span></h4><p data-lake-id=\"uf3f67ff2\" id=\"uf3f67ff2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22document.cookie%3D%5C%22name%3Dvalue%3B%20expires%3DThu%2C%2018%20Dec%202043%2012%3A00%3A00%20GMT%3B%20path%3D%2F%5C%22%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%223e0e42c7%22%7D\"></card><p data-lake-id=\"u92766b6e\" id=\"u92766b6e\"><br></p><blockquote data-lake-id=\"u44f84e58\" id=\"u44f84e58\"><p data-lake-id=\"u83d1f1ac\" id=\"u83d1f1ac\"><span data-lake-id=\"u63cc62a7\" id=\"u63cc62a7\"> </span></p><ul list=\"u4d71bd42\" class=\"lake-list\"><li fid=\"u92b34d6f\" data-lake-id=\"u718fbf2f\" id=\"u718fbf2f\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><strong><span data-lake-id=\"u67209d58\" id=\"u67209d58\">name</span></strong><span data-lake-id=\"u9efcac00\" id=\"u9efcac00\">:一个唯一确定的cookie名称。通常来讲cookie的名称是不区分大小写的。</span></li></ul><p data-lake-id=\"udfa3df94\" id=\"udfa3df94\"><span data-lake-id=\"u9a35e2f5\" id=\"u9a35e2f5\"> </span></p></blockquote><p data-lake-id=\"ucc469951\" id=\"ucc469951\"><br></p><ul list=\"u080f837e\" class=\"lake-list\"><li fid=\"ufa5dbcd9\" data-lake-id=\"u5d1c63d7\" id=\"u5d1c63d7\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><strong><span data-lake-id=\"ufda95c66\" id=\"ufda95c66\">value</span></strong><span data-lake-id=\"u79bb1d11\" id=\"u79bb1d11\">:存储在cookie中的字符串值。最好为cookie的name和value进行url编码</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"ue2e2b37b\" id=\"ue2e2b37b\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><strong><span data-lake-id=\"uf3aaeff9\" id=\"uf3aaeff9\">path</span></strong><span data-lake-id=\"ua135287b\" id=\"ua135287b\">: 表示这个cookie影响到的路径，浏览器跟会根据这项配置，像指定域中匹配的路径发送cookie。</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"u9f58927f\" id=\"u9f58927f\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><strong><span data-lake-id=\"u9ec8596d\" id=\"u9ec8596d\">expires</span></strong><span data-lake-id=\"u02301190\" id=\"u02301190\">:失效时间，表示cookie何时应该被删除的时间戳(也就是，何时应该停止向服务器发送这个cookie)。如果不设置这个时间戳，浏览器会在页面关闭时即将删除所有cookie；不过也可以自己设置删除时间。这个值是GMT时间格式，如果客户端和服务器端时间不一致，使用expires就会存在偏差。</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"u23347c2c\" id=\"u23347c2c\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><strong><span data-lake-id=\"u8a7a103a\" id=\"u8a7a103a\">domain</span></strong><span data-lake-id=\"ue05f1045\" id=\"ue05f1045\">: 属性定义可访问该cookie的域名，对一些大的网站，如果希望cookie可以在子网站中共享，可以使用该属性。例如设置Domain为 .bigsite.com ,则sub1.bigsite.com和sub2.bigsite.com都可以访问已保存在客户端的cookie，这时还需要将Path设置为/。</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"ufe02c23a\" id=\"ufe02c23a\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><strong><span data-lake-id=\"ub2959bad\" id=\"ub2959bad\">max-age</span></strong><span data-lake-id=\"u3121d054\" id=\"u3121d054\">: 属性定义cookie的有效时间，用秒计数，当超过有效期后，cookie的信息不会从客户端附加在HTTP消息头中发送到服务端。</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"uddca99aa\" id=\"uddca99aa\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><strong><span data-lake-id=\"u42fd420e\" id=\"u42fd420e\">secure</span></strong><span data-lake-id=\"u1b164b2c\" id=\"u1b164b2c\">:属性值定义cookie的安全性，当该值为true时必须是HTTPS状态下cookie才从客户端附加在HTTP消息中发送到服务端，在HTTP时cookie是不发送的；Secure为false时则可在HTTP状态下传递cookie，Secure缺省为false。</span></li></ul><p data-lake-id=\"u1a233a27\" id=\"u1a233a27\"><br></p><h4 data-lake-id=\"001e1d17\" id=\"001e1d17\"><span data-lake-id=\"u2e3c7047\" id=\"u2e3c7047\">服务端设置</span></h4><p data-lake-id=\"u30e78910\" id=\"u30e78910\"><br></p><blockquote data-lake-id=\"uc996584a\" id=\"uc996584a\"><p data-lake-id=\"u320fe428\" id=\"u320fe428\"><span data-lake-id=\"u1117daf1\" id=\"u1117daf1\">不管你是请求一个资源文件(如html/js/css/图片), 还是发送一个ajax请求, 服务端都会返回response.而response header中有一项叫</span><strong><span data-lake-id=\"u361e42dc\" id=\"u361e42dc\">set-cookie</span></strong><span data-lake-id=\"u3eb49b43\" id=\"u3eb49b43\">, 是服务端专门用来设置cookie的; 一个set-cookie只能设置一个cookie,当你想设置多个, 需要添加同样多的set-cookie 服务端可以设置cookie的所有选项: expires, domain, path,secure, HttpOnly</span></p></blockquote><p data-lake-id=\"u55613f95\" id=\"u55613f95\"><br></p><h3 data-lake-id=\"78378966\" id=\"78378966\"><strong><span data-lake-id=\"ud131f480\" id=\"ud131f480\">cookie的处理分为：</span></strong></h3><p data-lake-id=\"u24468d59\" id=\"u24468d59\"><br></p><ul list=\"u6dacd046\"><li fid=\"u71a90375\" data-lake-id=\"u5a2e1fae\" id=\"u5a2e1fae\"><span data-lake-id=\"uc4eb8680\" id=\"uc4eb8680\"> 服务器向客户端发送cookie </span></li></ul><ul list=\"u6dacd046\" data-lake-indent=\"1\"><li fid=\"u54896419\" data-lake-id=\"u234e87a0\" id=\"u234e87a0\"><span data-lake-id=\"uf1eebbbd\" id=\"uf1eebbbd\"> 服务器端向客户端发送cookie是通过HTTP响应报文实现的，在set-cookie中设置需要向客户端发送的cookie，cookie格式如下： </span><span data-lake-id=\"uc1daa837\" id=\"uc1daa837\"> </span></li></ul><blockquote data-lake-id=\"u53647f72\" id=\"u53647f72\"><p data-lake-id=\"u777ce180\" id=\"u777ce180\"><span data-lake-id=\"uc52ecc09\" id=\"uc52ecc09\">set-cookie: &quot;name=value;domain=.domain.com;path=/;expires=Sat, 11 Jun 2016 11:29:42     GMT;HttpOnly;secure&quot;</span></p></blockquote><ul list=\"u345c81a0\"><li fid=\"u79a9e9a9\" data-lake-id=\"u36401398\" id=\"u36401398\"><span data-lake-id=\"ue1d1ed37\" id=\"ue1d1ed37\"> 浏览器将cookie保存 </span></li></ul><ul list=\"u345c81a0\" data-lake-indent=\"1\"><li fid=\"ua45308ea\" data-lake-id=\"ueb46ed4a\" id=\"ueb46ed4a\"><span data-lake-id=\"u8b221138\" id=\"u8b221138\">浏览器将后台传递过来的cookie进行管理，并且允许开发者在javaScript中使用document.cookie来存取cookie。但是这个接口使用起来非常蹩脚。它会因为使用它的方式不同而表现出不同的行为。</span></li></ul><ul list=\"u345c81a0\" start=\"2\"><li fid=\"u79a9e9a9\" data-lake-id=\"ua06ffd79\" id=\"ua06ffd79\"><span data-lake-id=\"u2c12b3d7\" id=\"u2c12b3d7\"> 当用来获取属性值时，document.cookie返回当前页面可用的（根据cookie的域、路径、失效时间和安全设置）所有的字符串，字符串的格式如下： </span></li></ul><p data-lake-id=\"ue1a15c1b\" id=\"ue1a15c1b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%20%5C%22name1%3Dvalue1%3Bname2%3Dvalue2%3Bname3%3Dvalue3%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22adb315c1%22%7D\"></card><p data-lake-id=\"u0d46baa5\" id=\"u0d46baa5\"><br></p><ul list=\"u19b94a37\"><li fid=\"ueae2a6c3\" data-lake-id=\"u3f093f3f\" id=\"u3f093f3f\"><span data-lake-id=\"u7d8bfbf4\" id=\"u7d8bfbf4\">当用来设置值的时候，document.cookie属性可设置为一个新的cookie字符串。这个字符串会被解释并添加到现有的cookie集合中。如：</span></li></ul><p data-lake-id=\"u0293db14\" id=\"u0293db14\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20document.cookie%3D%5C%22username%3DJohn%20Doe%3B%20expires%3DThu%2C%2018%20Dec%202043%2012%3A00%3A00%20GMT%3B%20path%3D%2F%5C%22%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2263593534%22%7D\"></card><p data-lake-id=\"u167b9cf7\" id=\"u167b9cf7\"><br></p><ul list=\"ub1cbc099\"><li fid=\"u5c239a51\" data-lake-id=\"u70daf874\" id=\"u70daf874\"><span data-lake-id=\"u6521cd7c\" id=\"u6521cd7c\">之后每次http请求浏览器都会将cookie发送给服务器端 </span></li></ul><ul list=\"ub1cbc099\" data-lake-indent=\"1\"><li fid=\"u66ae4127\" data-lake-id=\"u6cce37a7\" id=\"u6cce37a7\"><span data-lake-id=\"u20c57e3a\" id=\"u20c57e3a\">cookie可以设置不同的域与路径，所以对于同一个name value，在不同域不同路径下是可以重复的，浏览器会按照与当前请求url或页面地址最佳匹配的顺序来排定先后顺序</span></li></ul><ul list=\"ub1cbc099\" start=\"2\"><li fid=\"u5c239a51\" data-lake-id=\"u52396ce0\" id=\"u52396ce0\"><span data-lake-id=\"u548c97a2\" id=\"u548c97a2\">所以当前端传递到服务器端的cookie有多个重复name value时，我们只需要最匹配的那个，也就是第一个。</span></li></ul><p data-lake-id=\"u6a3bd5a7\" id=\"u6a3bd5a7\"><br></p><h2 data-lake-id=\"ee269b7e\" id=\"ee269b7e\"><strong><span data-lake-id=\"ue167e96f\" id=\"ue167e96f\">session</span></strong></h2><p data-lake-id=\"u3f534ad1\" id=\"u3f534ad1\"><br></p><p data-lake-id=\"u1ab37a1d\" id=\"u1ab37a1d\"><span data-lake-id=\"u0f8b6bcf\" id=\"u0f8b6bcf\">session是另一种记录客户状态的机制，不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。</span><strong><span data-lake-id=\"u9bbe1d69\" id=\"u9bbe1d69\">session相当于程序在服务器上建立的一份用户的档案，用户来访的时候只需要查询用户档案表就可以了。</span></strong></p><p data-lake-id=\"u470a7d5d\" id=\"u470a7d5d\"><br></p><blockquote data-lake-id=\"u093a7821\" id=\"u093a7821\"><p data-lake-id=\"ue4d10a39\" id=\"ue4d10a39\"><span data-lake-id=\"ub3c6e241\" id=\"ub3c6e241\"> </span></p><ol list=\"ue5a31ed5\"><li fid=\"u336066d8\" data-lake-id=\"ucc905c7e\" id=\"ucc905c7e\"><span data-lake-id=\"u3de29f45\" id=\"u3de29f45\">用户向服务器发送用户名和密码</span></li><li fid=\"u336066d8\" data-lake-id=\"u094b5c45\" id=\"u094b5c45\"><span data-lake-id=\"u4075aaf6\" id=\"u4075aaf6\">服务器验证通过后,在当前对话(session)里面保存相关数据,比如用户角色, 登陆时间等;</span></li><li fid=\"u336066d8\" data-lake-id=\"u95cbfef0\" id=\"u95cbfef0\"><span data-lake-id=\"u8d53549b\" id=\"u8d53549b\">服务器向用户返回一个session_id, 写入用户的cookie</span></li><li fid=\"u336066d8\" data-lake-id=\"u5f44f050\" id=\"u5f44f050\"><span data-lake-id=\"ua6434bfd\" id=\"ua6434bfd\">用户随后的每一次请求, 都会通过cookie, 将session_id传回服务器</span></li><li fid=\"u336066d8\" data-lake-id=\"ub5633c9a\" id=\"ub5633c9a\"><span data-lake-id=\"u1441e889\" id=\"u1441e889\">服务端收到 session_id, 找到前期保存的数据, 由此得知用户的身份</span></li></ol><p data-lake-id=\"u47b866fd\" id=\"u47b866fd\"><span data-lake-id=\"udc15287d\" id=\"udc15287d\"> </span></p></blockquote><p data-lake-id=\"u0d36de73\" id=\"u0d36de73\"><br></p><h3 data-lake-id=\"4c5adb13\" id=\"4c5adb13\"><strong><span data-lake-id=\"u737e0df1\" id=\"u737e0df1\">session的生命周期与有效期</span></strong></h3><p data-lake-id=\"ucf7887e4\" id=\"ucf7887e4\"><br></p><ul list=\"u192b83fe\"><li fid=\"u08fb941a\" data-lake-id=\"uf01d4ba6\" id=\"uf01d4ba6\"><span data-lake-id=\"u989129c8\" id=\"u989129c8\"> 为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。</span><strong><span data-lake-id=\"u2f681c80\" id=\"u2f681c80\">session的使用虽然比cookie方便，但是过多的session存储在服务器内存中，会对服务器造成压力。因此，session里的信息应该尽量精简。</span></strong><span data-lake-id=\"ua369ce1e\" id=\"ua369ce1e\"> </span></li><li fid=\"u08fb941a\" data-lake-id=\"uf5bf1596\" id=\"uf5bf1596\"><span data-lake-id=\"u5227dd17\" id=\"u5227dd17\"> session在用户第一次访问服务器的时候自动创建。session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。 </span></li><li fid=\"u08fb941a\" data-lake-id=\"u7e333656\" id=\"u7e333656\"><span data-lake-id=\"u69e0e10a\" id=\"u69e0e10a\"> 由于有越来越多的用户访问服务器，因此session也会越来越多。为防止内存溢出，服务器会把长时间内没有活跃的session从内存中删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了 </span></li></ul><p data-lake-id=\"ua998f7f4\" id=\"ua998f7f4\"><br></p><h3 data-lake-id=\"461d630d\" id=\"461d630d\"><strong><span data-lake-id=\"u60d64af0\" id=\"u60d64af0\">session与cookie</span></strong></h3><p data-lake-id=\"uba35b4f0\" id=\"uba35b4f0\"><br></p><ul list=\"u15f2bd0d\"><li fid=\"u20195e92\" data-lake-id=\"u682ebf69\" id=\"u682ebf69\"><span data-lake-id=\"ue8df8336\" id=\"ue8df8336\"> </span><strong><span data-lake-id=\"u3d7dc20c\" id=\"u3d7dc20c\">由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是session。</span></strong><span data-lake-id=\"u348625b8\" id=\"u348625b8\">典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的session，用用于标识这个用户，并且</span><strong><span data-lake-id=\"u87e493c9\" id=\"u87e493c9\">跟踪用户</span></strong><span data-lake-id=\"u73179af3\" id=\"u73179af3\">，这样才知道购物车里面有几本书。这个session是保存在服务端的，有一个唯一标识。在服务端保存session的方法很多，内存、数据库、文件都有。 </span></li><li fid=\"u20195e92\" data-lake-id=\"u057d5635\" id=\"u057d5635\"><span data-lake-id=\"ub69a9be1\" id=\"ub69a9be1\"> </span><strong><span data-lake-id=\"udf54eeb2\" id=\"udf54eeb2\">思考一下服务端如何识别特定的客户？</span></strong><span data-lake-id=\"u60eb7e52\" id=\"u60eb7e52\">这个时候cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的cookie信息到服务端。实际上大多数的应用都是用 cookie 来实现session跟踪的，<br /></span><span data-lake-id=\"ub32ab9f4\" id=\"ub32ab9f4\">第一次创建session的时候，服务端会在HTTP协议中告诉客户端，需要在 cookie 里面记录一个session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。 </span></li><li fid=\"u20195e92\" data-lake-id=\"u7563bb44\" id=\"u7563bb44\"><span data-lake-id=\"u7d0d7e3c\" id=\"u7d0d7e3c\"> </span><strong><span data-lake-id=\"u2ff4278c\" id=\"u2ff4278c\">cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？</span></strong><span data-lake-id=\"uef21cf92\" id=\"uef21cf92\">这个信息可以写到cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是cookie名称的由来，给用户的一点甜头。 </span></li><li fid=\"u20195e92\" data-lake-id=\"u8a305935\" id=\"u8a305935\"><span data-lake-id=\"u73919684\" id=\"u73919684\"> 总结一下：session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现session的一种方式。 </span></li></ul><p data-lake-id=\"u145eed8c\" id=\"u145eed8c\"><br></p><blockquote data-lake-id=\"uc736968f\" id=\"uc736968f\"><p data-lake-id=\"u5bd96105\" id=\"u5bd96105\"><span data-lake-id=\"ud223414b\" id=\"ud223414b\"> </span></p><ol list=\"uecdf3623\"><li fid=\"u42f3bd86\" data-lake-id=\"u74eb83bf\" id=\"u74eb83bf\"><strong><span data-lake-id=\"u95d5749e\" id=\"u95d5749e\">安全性</span></strong><span data-lake-id=\"ue9d9995e\" id=\"ue9d9995e\">：sesson比cookie安全，sesson是存储在服务器端的，cookie是存储在客户端</span></li><li fid=\"u42f3bd86\" data-lake-id=\"u29dc9ac2\" id=\"u29dc9ac2\"><strong><span data-lake-id=\"u75e8557a\" id=\"u75e8557a\">储存的类型不同</span></strong><span data-lake-id=\"u75eec096\" id=\"u75eec096\">：cookie只支持字符串数据。想要设置其他类型的数据需要转成字符串sesson可以储存任意类型</span></li><li fid=\"u42f3bd86\" data-lake-id=\"u1aca6187\" id=\"u1aca6187\"><strong><span data-lake-id=\"uc25f22bf\" id=\"uc25f22bf\">有效期不同</span></strong><span data-lake-id=\"u42292fae\" id=\"u42292fae\">：cookie可以设置长时间保存比如长使用的默认登陆功能，sesson一般失效时间较短，客户端关闭或者sesoon超时都会失效</span></li><li fid=\"u42f3bd86\" data-lake-id=\"u5507539d\" id=\"u5507539d\"><strong><span data-lake-id=\"u9c912db9\" id=\"u9c912db9\">储存大小不同</span></strong><span data-lake-id=\"ubab26d9c\" id=\"ubab26d9c\">：单个cookie储存的数据不能超过4k，sesson可储存的数据远高于cookie，但是访问量过多，会占用过多的服务器资源</span></li><li fid=\"u42f3bd86\" data-lake-id=\"u7a006ca3\" id=\"u7a006ca3\"><span data-lake-id=\"u53649659\" id=\"u53649659\">cookie和session都会有时间限制，即都会过期。</span></li></ol><p data-lake-id=\"u49548d3a\" id=\"u49548d3a\"><span data-lake-id=\"ude53f86a\" id=\"ude53f86a\"> </span></p></blockquote><p data-lake-id=\"ueb4d4852\" id=\"ueb4d4852\"><br></p><h2 data-lake-id=\"01011a57\" id=\"01011a57\"><strong><span data-lake-id=\"u82ff2421\" id=\"u82ff2421\">cookie, sessionstorage,localstorage</span></strong></h2><p data-lake-id=\"ua100ee30\" id=\"ua100ee30\"><br></p><blockquote data-lake-id=\"u7df415fd\" id=\"u7df415fd\"><p data-lake-id=\"ufffe59b2\" id=\"ufffe59b2\"><span data-lake-id=\"u0a67b511\" id=\"u0a67b511\"> </span></p><ul list=\"u4f18ac95\"><li fid=\"u555d3380\" data-lake-id=\"ud1ca7b16\" id=\"ud1ca7b16\"><span data-lake-id=\"u4699ef3a\" id=\"u4699ef3a\">HTML5 提供了两种在客户端存储数据的新方法：localstorage和sessionstorage，挂载在window对象下。</span></li></ul><p data-lake-id=\"ua42e79d2\" id=\"ua42e79d2\"><span data-lake-id=\"u5ee081a7\" id=\"u5ee081a7\"> </span></p></blockquote><p data-lake-id=\"u9d9f8f59\" id=\"u9d9f8f59\"><br></p><ul list=\"udb48c3fa\"><li fid=\"ua4e3b67f\" data-lake-id=\"u263fd2a7\" id=\"u263fd2a7\"><span data-lake-id=\"u8990e748\" id=\"u8990e748\">webStorage是本地存储，数据不是由服务器请求传递的。从而它可以存储大量的数据，而不影响网站的性能。</span></li><li fid=\"ua4e3b67f\" data-lake-id=\"u0bb4bde7\" id=\"u0bb4bde7\"><span data-lake-id=\"u9f0a033f\" id=\"u9f0a033f\">webStorage的目的是为了克服由cookie带来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。比如客户端需要保存的一些用户行为或数据，或从接口获取的一些短期内不会更新的数据，我们就可以利用Web Storage来存储。</span></li></ul><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%227df0c2af%22%2C%22rows%22%3A4%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20data-lake-id%3D%5C%227df0c2af%5C%22%20id%3D%5C%227df0c2af%5C%22%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20748px%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20data-lake-id%3D%5C%22ud19fc7d6%5C%22%20id%3D%5C%22ud19fc7d6%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u25c80db8%5C%22%20id%3D%5C%22u25c80db8%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u07383bed%5C%22%20id%3D%5C%22u07383bed%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uf993ee63%5C%22%20id%3D%5C%22uf993ee63%5C%22%3E%E5%88%86%E7%B1%BB%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22uc7ffa28f%5C%22%20id%3D%5C%22uc7ffa28f%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u3965851d%5C%22%20id%3D%5C%22u3965851d%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u084fd5a8%5C%22%20id%3D%5C%22u084fd5a8%5C%22%3E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u7921a081%5C%22%20id%3D%5C%22u7921a081%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uf4495c08%5C%22%20id%3D%5C%22uf4495c08%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ua856a866%5C%22%20id%3D%5C%22ua856a866%5C%22%3E%E5%82%A8%E5%AD%98%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u267e4bc9%5C%22%20id%3D%5C%22u267e4bc9%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u21382ec0%5C%22%20id%3D%5C%22u21382ec0%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u3f68bed7%5C%22%20id%3D%5C%22u3f68bed7%5C%22%3E%E5%82%A8%E5%AD%98%E4%BD%8D%E7%BD%AE%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u734cfca4%5C%22%20id%3D%5C%22u734cfca4%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u3799a467%5C%22%20id%3D%5C%22u3799a467%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u294b0414%5C%22%20id%3D%5C%22u294b0414%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u9ce7d6f1%5C%22%20id%3D%5C%22u9ce7d6f1%5C%22%3Ecookie%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u6a4de540%5C%22%20id%3D%5C%22u6a4de540%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u9f3f8e56%5C%22%20id%3D%5C%22u9f3f8e56%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u8454797c%5C%22%20id%3D%5C%22u8454797c%5C%22%3E%E9%BB%98%E8%AE%A4%E4%BF%9D%E5%AD%98%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%8C%E9%9A%8F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%AD%E5%A4%B1%E6%95%88%EF%BC%8C%E5%A6%82%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%EF%BC%8C%E5%9C%A8%E6%97%B6%E9%97%B4%E8%BF%87%E6%9C%9F%E5%90%8E%E5%A4%B1%E6%95%88%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22udb35b7de%5C%22%20id%3D%5C%22udb35b7de%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uadf2d501%5C%22%20id%3D%5C%22uadf2d501%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u57dde39b%5C%22%20id%3D%5C%22u57dde39b%5C%22%3E4kb%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u24eedd5e%5C%22%20id%3D%5C%22u24eedd5e%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ua8fd654a%5C%22%20id%3D%5C%22ua8fd654a%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u9e705ed2%5C%22%20id%3D%5C%22u9e705ed2%5C%22%3E%E4%BF%9D%E5%AD%98%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%AF%8F%E6%AC%A1%E8%AF%B7%E6%B1%82%E9%83%BD%E4%BC%9A%E5%B8%A6%E4%B8%8A%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u95fd55d8%5C%22%20id%3D%5C%22u95fd55d8%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22ub4480f8c%5C%22%20id%3D%5C%22ub4480f8c%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u4acac274%5C%22%20id%3D%5C%22u4acac274%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u577a3b69%5C%22%20id%3D%5C%22u577a3b69%5C%22%3Elocalstorage%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u78a30a2e%5C%22%20id%3D%5C%22u78a30a2e%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u44b6dc03%5C%22%20id%3D%5C%22u44b6dc03%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u0b7ba408%5C%22%20id%3D%5C%22u0b7ba408%5C%22%3E%E7%90%86%E8%AE%BA%E4%B8%8A%E6%B0%B8%E4%B9%85%E6%9C%89%E6%95%88%EF%BC%8C%E9%99%A4%E9%9D%9E%E6%89%8B%E5%8A%A8%E6%B8%85%E9%99%A4%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u0a7a4964%5C%22%20id%3D%5C%22u0a7a4964%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uf76cdbf4%5C%22%20id%3D%5C%22uf76cdbf4%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uf956ec86%5C%22%20id%3D%5C%22uf956ec86%5C%22%3E4.98mb%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22ua9b6daa9%5C%22%20id%3D%5C%22ua9b6daa9%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ue41f3fc5%5C%22%20id%3D%5C%22ue41f3fc5%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ubf2d7e2f%5C%22%20id%3D%5C%22ubf2d7e2f%5C%22%3E%E5%AD%98%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8D%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%A4%E4%BA%92%E8%8A%82%E7%9C%81%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u720421b0%5C%22%20id%3D%5C%22u720421b0%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u85cee330%5C%22%20id%3D%5C%22u85cee330%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u68a81526%5C%22%20id%3D%5C%22u68a81526%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u5894beb9%5C%22%20id%3D%5C%22u5894beb9%5C%22%3Esessionstorage%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u64745515%5C%22%20id%3D%5C%22u64745515%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ua54fe2b6%5C%22%20id%3D%5C%22ua54fe2b6%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u9cf79a98%5C%22%20id%3D%5C%22u9cf79a98%5C%22%3E%E4%BB%85%E5%9C%A8%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E6%9C%89%E6%95%88%EF%BC%8C%E5%85%B3%E9%97%AD%E9%A1%B5%E9%9D%A2%E5%90%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%B1%E6%95%88%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u4833f9f0%5C%22%20id%3D%5C%22u4833f9f0%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u88dbfa1a%5C%22%20id%3D%5C%22u88dbfa1a%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u1ffe6948%5C%22%20id%3D%5C%22u1ffe6948%5C%22%3E4.98mb%E9%83%A8%E5%88%86%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B2%A1%E9%99%90%E5%88%B6%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u878578da%5C%22%20id%3D%5C%22u878578da%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u988f10b6%5C%22%20id%3D%5C%22u988f10b6%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uab4a0b68%5C%22%20id%3D%5C%22uab4a0b68%5C%22%3E%E5%AD%98%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8D%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%A4%E4%BA%92%E8%8A%82%E7%9C%81%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%7D\"></card><p data-lake-id=\"u1bf8aee7\" id=\"u1bf8aee7\"><br></p><h2 data-lake-id=\"ef229611\" id=\"ef229611\"><strong><span data-lake-id=\"u43812c0f\" id=\"u43812c0f\">token</span></strong></h2><p data-lake-id=\"u883c1ecd\" id=\"u883c1ecd\"><br></p><blockquote data-lake-id=\"u521afe91\" id=\"u521afe91\"><p data-lake-id=\"uf0f2202b\" id=\"uf0f2202b\"><span data-lake-id=\"u0c3aafa9\" id=\"u0c3aafa9\">我们关于如上的几个概念已经说了很多，但是都没有涉及到安全性。如果每次cookie和session互相传递的都是明文数据（比如每次发送的密码都是未经加密的），就会非常不安全。我们可以考虑在服务端对客户端第一次登陆传递过来的用户名和密码进行一次加密，之后再把结果当做cookie传递给客户端。</span></p></blockquote><p data-lake-id=\"udb6d9f3b\" id=\"udb6d9f3b\"><br></p><h3 data-lake-id=\"2d7bdafe\" id=\"2d7bdafe\"><span data-lake-id=\"u1441f73f\" id=\"u1441f73f\">如何使用Token？</span></h3><p data-lake-id=\"u40a4d140\" id=\"u40a4d140\"><br></p><blockquote data-lake-id=\"u8506d3d1\" id=\"u8506d3d1\"><p data-lake-id=\"u0b1c9a6f\" id=\"u0b1c9a6f\"><span data-lake-id=\"u81dcf1f1\" id=\"u81dcf1f1\"> </span></p><ul list=\"u38c6fc63\"><li fid=\"u8d30b4d5\" data-lake-id=\"u23b9e530\" id=\"u23b9e530\"><span data-lake-id=\"u3119fbd8\" id=\"u3119fbd8\">使用设备号/设备mac地址作为token</span></li></ul><p data-lake-id=\"u48c35fa0\" id=\"u48c35fa0\"><span data-lake-id=\"uff2604fc\" id=\"uff2604fc\"> </span></p></blockquote><p data-lake-id=\"u13a82e32\" id=\"u13a82e32\"><br></p><ul list=\"u80fe11ef\"><li fid=\"u0e335d76\" data-lake-id=\"u19629509\" id=\"u19629509\"><span data-lake-id=\"u06cf556d\" id=\"u06cf556d\">客户端：客户端在登录的时候获取设备的设备号/mac地址，并将其作为参数传递到服务器端</span></li><li fid=\"u0e335d76\" data-lake-id=\"u9885718d\" id=\"u9885718d\"><span data-lake-id=\"u10c18fc2\" id=\"u10c18fc2\">服务器：服务器接收到该参数之后，使用一个变量接收同时将其作为token保存数据库，并将该token设置在session中，客户端每次请求的时候都要统一拦截，并将客户端传递的token和服务器session中的token对比，如果相同则放下，不同则拒绝</span></li></ul><p data-lake-id=\"u1cab3a48\" id=\"u1cab3a48\"><br></p><blockquote data-lake-id=\"u0d7ba7cb\" id=\"u0d7ba7cb\"><p data-lake-id=\"u6146a051\" id=\"u6146a051\"><span data-lake-id=\"u38d57ee9\" id=\"u38d57ee9\">优点：客户端不需要重新登录，只要登录一次后就能一直使用<br /></span><span data-lake-id=\"u1afce82c\" id=\"u1afce82c\">缺点：客户端需要带设备号/mac地址作为参数传递</span></p></blockquote><p data-lake-id=\"uc82fe724\" id=\"uc82fe724\"><br></p><ul list=\"uab0ea87c\"><li fid=\"u788722ee\" data-lake-id=\"u02f60de7\" id=\"u02f60de7\"><span data-lake-id=\"u43f1f3f9\" id=\"u43f1f3f9\">用session值作为token</span></li><li fid=\"u788722ee\" data-lake-id=\"u1f72ec8a\" id=\"u1f72ec8a\"><span data-lake-id=\"ud37ea437\" id=\"ud37ea437\">客户端：客户端只需要携带用户名和密码即可登录</span></li><li fid=\"u788722ee\" data-lake-id=\"ue5a9f084\" id=\"ue5a9f084\"><span data-lake-id=\"u868c437a\" id=\"u868c437a\">服务端：客户端接收到用户名和密码后并判断，如果正确就将本地获取sessionId作为token返回给客户端，客户端以后只需要带上请求数据即可</span></li></ul>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h3 data-lake-id=\"965491cf\" id=\"965491cf\"><span data-lake-id=\"u8d9794cc\" id=\"u8d9794cc\">参考文档：</span></h3><p data-lake-id=\"ufecd39ea\" id=\"ufecd39ea\"><br></p><p data-lake-id=\"ufcd0d9cc\" id=\"ufcd0d9cc\"><a href=\"https://blog.csdn.net/zhangquan_zone/article/details/77627899\" target=\"_blank\" data-lake-id=\"u4eabd35c\" id=\"u4eabd35c\"><span data-lake-id=\"ub4016a29\" id=\"ub4016a29\">https://blog.csdn.net/zhangquan_zone/article/details/77627899</span></a><span data-lake-id=\"ueb085376\" id=\"ueb085376\"><br /></span><a href=\"https://www.sohu.com/a/207801015_114819\" target=\"_blank\" data-lake-id=\"u1bfb6b9d\" id=\"u1bfb6b9d\"><span data-lake-id=\"u310cee51\" id=\"u310cee51\">https://www.sohu.com/a/207801015_114819</span></a><span data-lake-id=\"u2c707e94\" id=\"u2c707e94\"><br /></span><a href=\"https://www.cnblogs.com/lufeiludaima/p/pz20190203.html\" target=\"_blank\" data-lake-id=\"u19b38384\" id=\"u19b38384\"><span data-lake-id=\"uceb74bbb\" id=\"uceb74bbb\">https://www.cnblogs.com/lufeiludaima/p/pz20190203.html</span></a><span data-lake-id=\"u4575d716\" id=\"u4575d716\"><br /></span><a href=\"https://segmentfault.com/a/1190000019457890\" target=\"_blank\" data-lake-id=\"u5abbe793\" id=\"u5abbe793\"><span data-lake-id=\"u8e1eaf95\" id=\"u8e1eaf95\">https://segmentfault.com/a/1190000019457890</span></a><span data-lake-id=\"u0de8f04c\" id=\"u0de8f04c\"><br /></span><a href=\"https://www.cnblogs.com/andy-zhou/p/5360107.html\" target=\"_blank\" data-lake-id=\"uc43371e4\" id=\"uc43371e4\"><span data-lake-id=\"u98aa86b3\" id=\"u98aa86b3\">https://www.cnblogs.com/andy-zhou/p/5360107.html</span></a><span data-lake-id=\"u077df85b\" id=\"u077df85b\"><br /></span><a href=\"https://www.zhihu.com/question/359508734/answer/1591403693\" target=\"_blank\" data-lake-id=\"ud6959e07\" id=\"ud6959e07\"><span data-lake-id=\"uf998489d\" id=\"uf998489d\">https://www.zhihu.com/question/359508734/answer/1591403693</span></a></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22PGPmm%22%7D\"></card><h2 data-lake-id=\"26a1ee86\" id=\"26a1ee86\"><strong><span data-lake-id=\"ue3dd04d8\" id=\"ue3dd04d8\">cookie</span></strong></h2><p data-lake-id=\"u18571f00\" id=\"u18571f00\"><br></p><blockquote data-lake-id=\"u62eaf1fd\" id=\"u62eaf1fd\"><p data-lake-id=\"u5db0e44c\" id=\"u5db0e44c\"><span data-lake-id=\"ufb4e5c84\" id=\"ufb4e5c84\">cookie是由服务器端生成，发送给User-Agent（一般是浏览器），（服务器告诉浏览器设置一下cookie）,浏览器会将cookie的key/value保存到某个目录下的文本文件。</span></p></blockquote><p data-lake-id=\"uc1ef1413\" id=\"uc1ef1413\"><br></p><h3 data-lake-id=\"81a4c79b\" id=\"81a4c79b\"><strong><span data-lake-id=\"ueba0f5c6\" id=\"ueba0f5c6\">cookie的诞生</span></strong></h3><p data-lake-id=\"u1e8fe130\" id=\"u1e8fe130\"><br></p><p data-lake-id=\"u8d3753a9\" id=\"u8d3753a9\"><span data-lake-id=\"u028901a2\" id=\"u028901a2\">由于HTTP协议是无状态的，而服务器端的业务必须是要有状态的。cookie诞生的最初目的是为了存储web中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。目前最新的规范是RFC 6265，它是一个由浏览器服务器共同协作实现的规范。</span></p><p data-lake-id=\"u9d9a4a36\" id=\"u9d9a4a36\"><br></p><h3 data-lake-id=\"b6366037\" id=\"b6366037\"><strong><span data-lake-id=\"u6eb62dc4\" id=\"u6eb62dc4\">如何设置cookie</span></strong></h3><p data-lake-id=\"u2c5e483e\" id=\"u2c5e483e\"><br></p><h4 data-lake-id=\"2cb96fdc\" id=\"2cb96fdc\"><span data-lake-id=\"uc788faf9\" id=\"uc788faf9\">客户端设置</span></h4><p data-lake-id=\"uf3f67ff2\" id=\"uf3f67ff2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22document.cookie%3D%5C%22name%3Dvalue%3B%20expires%3DThu%2C%2018%20Dec%202043%2012%3A00%3A00%20GMT%3B%20path%3D%2F%5C%22%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%223e0e42c7%22%7D\"></card><p data-lake-id=\"u92766b6e\" id=\"u92766b6e\"><br></p><blockquote data-lake-id=\"u44f84e58\" id=\"u44f84e58\"><p data-lake-id=\"u83d1f1ac\" id=\"u83d1f1ac\"><span data-lake-id=\"u63cc62a7\" id=\"u63cc62a7\"> </span></p><ul list=\"u4d71bd42\" class=\"lake-list\"><li fid=\"u92b34d6f\" data-lake-id=\"u718fbf2f\" id=\"u718fbf2f\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><strong><span data-lake-id=\"u67209d58\" id=\"u67209d58\">name</span></strong><span data-lake-id=\"u9efcac00\" id=\"u9efcac00\">:一个唯一确定的cookie名称。通常来讲cookie的名称是不区分大小写的。</span></li></ul><p data-lake-id=\"udfa3df94\" id=\"udfa3df94\"><span data-lake-id=\"u9a35e2f5\" id=\"u9a35e2f5\"> </span></p></blockquote><p data-lake-id=\"ucc469951\" id=\"ucc469951\"><br></p><ul list=\"u080f837e\" class=\"lake-list\"><li fid=\"ufa5dbcd9\" data-lake-id=\"u5d1c63d7\" id=\"u5d1c63d7\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><strong><span data-lake-id=\"ufda95c66\" id=\"ufda95c66\">value</span></strong><span data-lake-id=\"u79bb1d11\" id=\"u79bb1d11\">:存储在cookie中的字符串值。最好为cookie的name和value进行url编码</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"ue2e2b37b\" id=\"ue2e2b37b\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><strong><span data-lake-id=\"uf3aaeff9\" id=\"uf3aaeff9\">path</span></strong><span data-lake-id=\"ua135287b\" id=\"ua135287b\">: 表示这个cookie影响到的路径，浏览器跟会根据这项配置，像指定域中匹配的路径发送cookie。</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"u9f58927f\" id=\"u9f58927f\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><strong><span data-lake-id=\"u9ec8596d\" id=\"u9ec8596d\">expires</span></strong><span data-lake-id=\"u02301190\" id=\"u02301190\">:失效时间，表示cookie何时应该被删除的时间戳(也就是，何时应该停止向服务器发送这个cookie)。如果不设置这个时间戳，浏览器会在页面关闭时即将删除所有cookie；不过也可以自己设置删除时间。这个值是GMT时间格式，如果客户端和服务器端时间不一致，使用expires就会存在偏差。</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"u23347c2c\" id=\"u23347c2c\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><strong><span data-lake-id=\"u8a7a103a\" id=\"u8a7a103a\">domain</span></strong><span data-lake-id=\"ue05f1045\" id=\"ue05f1045\">: 属性定义可访问该cookie的域名，对一些大的网站，如果希望cookie可以在子网站中共享，可以使用该属性。例如设置Domain为 .bigsite.com ,则sub1.bigsite.com和sub2.bigsite.com都可以访问已保存在客户端的cookie，这时还需要将Path设置为/。</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"ufe02c23a\" id=\"ufe02c23a\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><strong><span data-lake-id=\"ub2959bad\" id=\"ub2959bad\">max-age</span></strong><span data-lake-id=\"u3121d054\" id=\"u3121d054\">: 属性定义cookie的有效时间，用秒计数，当超过有效期后，cookie的信息不会从客户端附加在HTTP消息头中发送到服务端。</span></li><li fid=\"ufa5dbcd9\" data-lake-id=\"uddca99aa\" id=\"uddca99aa\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><strong><span data-lake-id=\"u42fd420e\" id=\"u42fd420e\">secure</span></strong><span data-lake-id=\"u1b164b2c\" id=\"u1b164b2c\">:属性值定义cookie的安全性，当该值为true时必须是HTTPS状态下cookie才从客户端附加在HTTP消息中发送到服务端，在HTTP时cookie是不发送的；Secure为false时则可在HTTP状态下传递cookie，Secure缺省为false。</span></li></ul><p data-lake-id=\"u1a233a27\" id=\"u1a233a27\"><br></p><h4 data-lake-id=\"001e1d17\" id=\"001e1d17\"><span data-lake-id=\"u2e3c7047\" id=\"u2e3c7047\">服务端设置</span></h4><p data-lake-id=\"u30e78910\" id=\"u30e78910\"><br></p><blockquote data-lake-id=\"uc996584a\" id=\"uc996584a\"><p data-lake-id=\"u320fe428\" id=\"u320fe428\"><span data-lake-id=\"u1117daf1\" id=\"u1117daf1\">不管你是请求一个资源文件(如html/js/css/图片), 还是发送一个ajax请求, 服务端都会返回response.而response header中有一项叫</span><strong><span data-lake-id=\"u361e42dc\" id=\"u361e42dc\">set-cookie</span></strong><span data-lake-id=\"u3eb49b43\" id=\"u3eb49b43\">, 是服务端专门用来设置cookie的; 一个set-cookie只能设置一个cookie,当你想设置多个, 需要添加同样多的set-cookie 服务端可以设置cookie的所有选项: expires, domain, path,secure, HttpOnly</span></p></blockquote><p data-lake-id=\"u55613f95\" id=\"u55613f95\"><br></p><h3 data-lake-id=\"78378966\" id=\"78378966\"><strong><span data-lake-id=\"ud131f480\" id=\"ud131f480\">cookie的处理分为：</span></strong></h3><p data-lake-id=\"u24468d59\" id=\"u24468d59\"><br></p><ul list=\"u6dacd046\"><li fid=\"u71a90375\" data-lake-id=\"u5a2e1fae\" id=\"u5a2e1fae\"><span data-lake-id=\"uc4eb8680\" id=\"uc4eb8680\"> 服务器向客户端发送cookie </span></li></ul><ul list=\"u6dacd046\" data-lake-indent=\"1\"><li fid=\"u54896419\" data-lake-id=\"u234e87a0\" id=\"u234e87a0\"><span data-lake-id=\"uf1eebbbd\" id=\"uf1eebbbd\"> 服务器端向客户端发送cookie是通过HTTP响应报文实现的，在set-cookie中设置需要向客户端发送的cookie，cookie格式如下： </span><span data-lake-id=\"uc1daa837\" id=\"uc1daa837\"> </span></li></ul><blockquote data-lake-id=\"u53647f72\" id=\"u53647f72\"><p data-lake-id=\"u777ce180\" id=\"u777ce180\"><span data-lake-id=\"uc52ecc09\" id=\"uc52ecc09\">set-cookie: &quot;name=value;domain=.domain.com;path=/;expires=Sat, 11 Jun 2016 11:29:42     GMT;HttpOnly;secure&quot;</span></p></blockquote><ul list=\"u345c81a0\"><li fid=\"u79a9e9a9\" data-lake-id=\"u36401398\" id=\"u36401398\"><span data-lake-id=\"ue1d1ed37\" id=\"ue1d1ed37\"> 浏览器将cookie保存 </span></li></ul><ul list=\"u345c81a0\" data-lake-indent=\"1\"><li fid=\"ua45308ea\" data-lake-id=\"ueb46ed4a\" id=\"ueb46ed4a\"><span data-lake-id=\"u8b221138\" id=\"u8b221138\">浏览器将后台传递过来的cookie进行管理，并且允许开发者在javaScript中使用document.cookie来存取cookie。但是这个接口使用起来非常蹩脚。它会因为使用它的方式不同而表现出不同的行为。</span></li></ul><ul list=\"u345c81a0\" start=\"2\"><li fid=\"u79a9e9a9\" data-lake-id=\"ua06ffd79\" id=\"ua06ffd79\"><span data-lake-id=\"u2c12b3d7\" id=\"u2c12b3d7\"> 当用来获取属性值时，document.cookie返回当前页面可用的（根据cookie的域、路径、失效时间和安全设置）所有的字符串，字符串的格式如下： </span></li></ul><p data-lake-id=\"ue1a15c1b\" id=\"ue1a15c1b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%20%5C%22name1%3Dvalue1%3Bname2%3Dvalue2%3Bname3%3Dvalue3%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22adb315c1%22%7D\"></card><p data-lake-id=\"u0d46baa5\" id=\"u0d46baa5\"><br></p><ul list=\"u19b94a37\"><li fid=\"ueae2a6c3\" data-lake-id=\"u3f093f3f\" id=\"u3f093f3f\"><span data-lake-id=\"u7d8bfbf4\" id=\"u7d8bfbf4\">当用来设置值的时候，document.cookie属性可设置为一个新的cookie字符串。这个字符串会被解释并添加到现有的cookie集合中。如：</span></li></ul><p data-lake-id=\"u0293db14\" id=\"u0293db14\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20document.cookie%3D%5C%22username%3DJohn%20Doe%3B%20expires%3DThu%2C%2018%20Dec%202043%2012%3A00%3A00%20GMT%3B%20path%3D%2F%5C%22%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2263593534%22%7D\"></card><p data-lake-id=\"u167b9cf7\" id=\"u167b9cf7\"><br></p><ul list=\"ub1cbc099\"><li fid=\"u5c239a51\" data-lake-id=\"u70daf874\" id=\"u70daf874\"><span data-lake-id=\"u6521cd7c\" id=\"u6521cd7c\">之后每次http请求浏览器都会将cookie发送给服务器端 </span></li></ul><ul list=\"ub1cbc099\" data-lake-indent=\"1\"><li fid=\"u66ae4127\" data-lake-id=\"u6cce37a7\" id=\"u6cce37a7\"><span data-lake-id=\"u20c57e3a\" id=\"u20c57e3a\">cookie可以设置不同的域与路径，所以对于同一个name value，在不同域不同路径下是可以重复的，浏览器会按照与当前请求url或页面地址最佳匹配的顺序来排定先后顺序</span></li></ul><ul list=\"ub1cbc099\" start=\"2\"><li fid=\"u5c239a51\" data-lake-id=\"u52396ce0\" id=\"u52396ce0\"><span data-lake-id=\"u548c97a2\" id=\"u548c97a2\">所以当前端传递到服务器端的cookie有多个重复name value时，我们只需要最匹配的那个，也就是第一个。</span></li></ul><p data-lake-id=\"u6a3bd5a7\" id=\"u6a3bd5a7\"><br></p><h2 data-lake-id=\"ee269b7e\" id=\"ee269b7e\"><strong><span data-lake-id=\"ue167e96f\" id=\"ue167e96f\">session</span></strong></h2><p data-lake-id=\"u3f534ad1\" id=\"u3f534ad1\"><br></p><p data-lake-id=\"u1ab37a1d\" id=\"u1ab37a1d\"><span data-lake-id=\"u0f8b6bcf\" id=\"u0f8b6bcf\">session是另一种记录客户状态的机制，不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。</span><strong><span data-lake-id=\"u9bbe1d69\" id=\"u9bbe1d69\">session相当于程序在服务器上建立的一份用户的档案，用户来访的时候只需要查询用户档案表就可以了。</span></strong></p><p data-lake-id=\"u470a7d5d\" id=\"u470a7d5d\"><br></p><blockquote data-lake-id=\"u093a7821\" id=\"u093a7821\"><p data-lake-id=\"ue4d10a39\" id=\"ue4d10a39\"><span data-lake-id=\"ub3c6e241\" id=\"ub3c6e241\"> </span></p><ol list=\"ue5a31ed5\"><li fid=\"u336066d8\" data-lake-id=\"ucc905c7e\" id=\"ucc905c7e\"><span data-lake-id=\"u3de29f45\" id=\"u3de29f45\">用户向服务器发送用户名和密码</span></li><li fid=\"u336066d8\" data-lake-id=\"u094b5c45\" id=\"u094b5c45\"><span data-lake-id=\"u4075aaf6\" id=\"u4075aaf6\">服务器验证通过后,在当前对话(session)里面保存相关数据,比如用户角色, 登陆时间等;</span></li><li fid=\"u336066d8\" data-lake-id=\"u95cbfef0\" id=\"u95cbfef0\"><span data-lake-id=\"u8d53549b\" id=\"u8d53549b\">服务器向用户返回一个session_id, 写入用户的cookie</span></li><li fid=\"u336066d8\" data-lake-id=\"u5f44f050\" id=\"u5f44f050\"><span data-lake-id=\"ua6434bfd\" id=\"ua6434bfd\">用户随后的每一次请求, 都会通过cookie, 将session_id传回服务器</span></li><li fid=\"u336066d8\" data-lake-id=\"ub5633c9a\" id=\"ub5633c9a\"><span data-lake-id=\"u1441e889\" id=\"u1441e889\">服务端收到 session_id, 找到前期保存的数据, 由此得知用户的身份</span></li></ol><p data-lake-id=\"u47b866fd\" id=\"u47b866fd\"><span data-lake-id=\"udc15287d\" id=\"udc15287d\"> </span></p></blockquote><p data-lake-id=\"u0d36de73\" id=\"u0d36de73\"><br></p><h3 data-lake-id=\"4c5adb13\" id=\"4c5adb13\"><strong><span data-lake-id=\"u737e0df1\" id=\"u737e0df1\">session的生命周期与有效期</span></strong></h3><p data-lake-id=\"ucf7887e4\" id=\"ucf7887e4\"><br></p><ul list=\"u192b83fe\"><li fid=\"u08fb941a\" data-lake-id=\"uf01d4ba6\" id=\"uf01d4ba6\"><span data-lake-id=\"u989129c8\" id=\"u989129c8\"> 为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。</span><strong><span data-lake-id=\"u2f681c80\" id=\"u2f681c80\">session的使用虽然比cookie方便，但是过多的session存储在服务器内存中，会对服务器造成压力。因此，session里的信息应该尽量精简。</span></strong><span data-lake-id=\"ua369ce1e\" id=\"ua369ce1e\"> </span></li><li fid=\"u08fb941a\" data-lake-id=\"uf5bf1596\" id=\"uf5bf1596\"><span data-lake-id=\"u5227dd17\" id=\"u5227dd17\"> session在用户第一次访问服务器的时候自动创建。session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。 </span></li><li fid=\"u08fb941a\" data-lake-id=\"u7e333656\" id=\"u7e333656\"><span data-lake-id=\"u69e0e10a\" id=\"u69e0e10a\"> 由于有越来越多的用户访问服务器，因此session也会越来越多。为防止内存溢出，服务器会把长时间内没有活跃的session从内存中删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了 </span></li></ul><p data-lake-id=\"ua998f7f4\" id=\"ua998f7f4\"><br></p><h3 data-lake-id=\"461d630d\" id=\"461d630d\"><strong><span data-lake-id=\"u60d64af0\" id=\"u60d64af0\">session与cookie</span></strong></h3><p data-lake-id=\"uba35b4f0\" id=\"uba35b4f0\"><br></p><ul list=\"u15f2bd0d\"><li fid=\"u20195e92\" data-lake-id=\"u682ebf69\" id=\"u682ebf69\"><span data-lake-id=\"ue8df8336\" id=\"ue8df8336\"> </span><strong><span data-lake-id=\"u3d7dc20c\" id=\"u3d7dc20c\">由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是session。</span></strong><span data-lake-id=\"u348625b8\" id=\"u348625b8\">典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的session，用用于标识这个用户，并且</span><strong><span data-lake-id=\"u87e493c9\" id=\"u87e493c9\">跟踪用户</span></strong><span data-lake-id=\"u73179af3\" id=\"u73179af3\">，这样才知道购物车里面有几本书。这个session是保存在服务端的，有一个唯一标识。在服务端保存session的方法很多，内存、数据库、文件都有。 </span></li><li fid=\"u20195e92\" data-lake-id=\"u057d5635\" id=\"u057d5635\"><span data-lake-id=\"ub69a9be1\" id=\"ub69a9be1\"> </span><strong><span data-lake-id=\"udf54eeb2\" id=\"udf54eeb2\">思考一下服务端如何识别特定的客户？</span></strong><span data-lake-id=\"u60eb7e52\" id=\"u60eb7e52\">这个时候cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的cookie信息到服务端。实际上大多数的应用都是用 cookie 来实现session跟踪的，<br /></span><span data-lake-id=\"ub32ab9f4\" id=\"ub32ab9f4\">第一次创建session的时候，服务端会在HTTP协议中告诉客户端，需要在 cookie 里面记录一个session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。 </span></li><li fid=\"u20195e92\" data-lake-id=\"u7563bb44\" id=\"u7563bb44\"><span data-lake-id=\"u7d0d7e3c\" id=\"u7d0d7e3c\"> </span><strong><span data-lake-id=\"u2ff4278c\" id=\"u2ff4278c\">cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？</span></strong><span data-lake-id=\"uef21cf92\" id=\"uef21cf92\">这个信息可以写到cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是cookie名称的由来，给用户的一点甜头。 </span></li><li fid=\"u20195e92\" data-lake-id=\"u8a305935\" id=\"u8a305935\"><span data-lake-id=\"u73919684\" id=\"u73919684\"> 总结一下：session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现session的一种方式。 </span></li></ul><p data-lake-id=\"u145eed8c\" id=\"u145eed8c\"><br></p><blockquote data-lake-id=\"uc736968f\" id=\"uc736968f\"><p data-lake-id=\"u5bd96105\" id=\"u5bd96105\"><span data-lake-id=\"ud223414b\" id=\"ud223414b\"> </span></p><ol list=\"uecdf3623\"><li fid=\"u42f3bd86\" data-lake-id=\"u74eb83bf\" id=\"u74eb83bf\"><strong><span data-lake-id=\"u95d5749e\" id=\"u95d5749e\">安全性</span></strong><span data-lake-id=\"ue9d9995e\" id=\"ue9d9995e\">：sesson比cookie安全，sesson是存储在服务器端的，cookie是存储在客户端</span></li><li fid=\"u42f3bd86\" data-lake-id=\"u29dc9ac2\" id=\"u29dc9ac2\"><strong><span data-lake-id=\"u75e8557a\" id=\"u75e8557a\">储存的类型不同</span></strong><span data-lake-id=\"u75eec096\" id=\"u75eec096\">：cookie只支持字符串数据。想要设置其他类型的数据需要转成字符串sesson可以储存任意类型</span></li><li fid=\"u42f3bd86\" data-lake-id=\"u1aca6187\" id=\"u1aca6187\"><strong><span data-lake-id=\"uc25f22bf\" id=\"uc25f22bf\">有效期不同</span></strong><span data-lake-id=\"u42292fae\" id=\"u42292fae\">：cookie可以设置长时间保存比如长使用的默认登陆功能，sesson一般失效时间较短，客户端关闭或者sesoon超时都会失效</span></li><li fid=\"u42f3bd86\" data-lake-id=\"u5507539d\" id=\"u5507539d\"><strong><span data-lake-id=\"u9c912db9\" id=\"u9c912db9\">储存大小不同</span></strong><span data-lake-id=\"ubab26d9c\" id=\"ubab26d9c\">：单个cookie储存的数据不能超过4k，sesson可储存的数据远高于cookie，但是访问量过多，会占用过多的服务器资源</span></li><li fid=\"u42f3bd86\" data-lake-id=\"u7a006ca3\" id=\"u7a006ca3\"><span data-lake-id=\"u53649659\" id=\"u53649659\">cookie和session都会有时间限制，即都会过期。</span></li></ol><p data-lake-id=\"u49548d3a\" id=\"u49548d3a\"><span data-lake-id=\"ude53f86a\" id=\"ude53f86a\"> </span></p></blockquote><p data-lake-id=\"ueb4d4852\" id=\"ueb4d4852\"><br></p><h2 data-lake-id=\"01011a57\" id=\"01011a57\"><strong><span data-lake-id=\"u82ff2421\" id=\"u82ff2421\">cookie, sessionstorage,localstorage</span></strong></h2><p data-lake-id=\"ua100ee30\" id=\"ua100ee30\"><br></p><blockquote data-lake-id=\"u7df415fd\" id=\"u7df415fd\"><p data-lake-id=\"ufffe59b2\" id=\"ufffe59b2\"><span data-lake-id=\"u0a67b511\" id=\"u0a67b511\"> </span></p><ul list=\"u4f18ac95\"><li fid=\"u555d3380\" data-lake-id=\"ud1ca7b16\" id=\"ud1ca7b16\"><span data-lake-id=\"u4699ef3a\" id=\"u4699ef3a\">HTML5 提供了两种在客户端存储数据的新方法：localstorage和sessionstorage，挂载在window对象下。</span></li></ul><p data-lake-id=\"ua42e79d2\" id=\"ua42e79d2\"><span data-lake-id=\"u5ee081a7\" id=\"u5ee081a7\"> </span></p></blockquote><p data-lake-id=\"u9d9f8f59\" id=\"u9d9f8f59\"><br></p><ul list=\"udb48c3fa\"><li fid=\"ua4e3b67f\" data-lake-id=\"u263fd2a7\" id=\"u263fd2a7\"><span data-lake-id=\"u8990e748\" id=\"u8990e748\">webStorage是本地存储，数据不是由服务器请求传递的。从而它可以存储大量的数据，而不影响网站的性能。</span></li><li fid=\"ua4e3b67f\" data-lake-id=\"u0bb4bde7\" id=\"u0bb4bde7\"><span data-lake-id=\"u9f0a033f\" id=\"u9f0a033f\">webStorage的目的是为了克服由cookie带来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。比如客户端需要保存的一些用户行为或数据，或从接口获取的一些短期内不会更新的数据，我们就可以利用Web Storage来存储。</span></li></ul><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%227df0c2af%22%2C%22rows%22%3A4%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20data-lake-id%3D%5C%227df0c2af%5C%22%20id%3D%5C%227df0c2af%5C%22%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20748px%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20data-lake-id%3D%5C%22ud19fc7d6%5C%22%20id%3D%5C%22ud19fc7d6%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u25c80db8%5C%22%20id%3D%5C%22u25c80db8%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u07383bed%5C%22%20id%3D%5C%22u07383bed%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uf993ee63%5C%22%20id%3D%5C%22uf993ee63%5C%22%3E%E5%88%86%E7%B1%BB%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22uc7ffa28f%5C%22%20id%3D%5C%22uc7ffa28f%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u3965851d%5C%22%20id%3D%5C%22u3965851d%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u084fd5a8%5C%22%20id%3D%5C%22u084fd5a8%5C%22%3E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u7921a081%5C%22%20id%3D%5C%22u7921a081%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uf4495c08%5C%22%20id%3D%5C%22uf4495c08%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ua856a866%5C%22%20id%3D%5C%22ua856a866%5C%22%3E%E5%82%A8%E5%AD%98%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u267e4bc9%5C%22%20id%3D%5C%22u267e4bc9%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u21382ec0%5C%22%20id%3D%5C%22u21382ec0%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u3f68bed7%5C%22%20id%3D%5C%22u3f68bed7%5C%22%3E%E5%82%A8%E5%AD%98%E4%BD%8D%E7%BD%AE%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u734cfca4%5C%22%20id%3D%5C%22u734cfca4%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u3799a467%5C%22%20id%3D%5C%22u3799a467%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u294b0414%5C%22%20id%3D%5C%22u294b0414%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u9ce7d6f1%5C%22%20id%3D%5C%22u9ce7d6f1%5C%22%3Ecookie%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u6a4de540%5C%22%20id%3D%5C%22u6a4de540%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u9f3f8e56%5C%22%20id%3D%5C%22u9f3f8e56%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u8454797c%5C%22%20id%3D%5C%22u8454797c%5C%22%3E%E9%BB%98%E8%AE%A4%E4%BF%9D%E5%AD%98%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%8C%E9%9A%8F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%AD%E5%A4%B1%E6%95%88%EF%BC%8C%E5%A6%82%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%EF%BC%8C%E5%9C%A8%E6%97%B6%E9%97%B4%E8%BF%87%E6%9C%9F%E5%90%8E%E5%A4%B1%E6%95%88%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22udb35b7de%5C%22%20id%3D%5C%22udb35b7de%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uadf2d501%5C%22%20id%3D%5C%22uadf2d501%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u57dde39b%5C%22%20id%3D%5C%22u57dde39b%5C%22%3E4kb%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u24eedd5e%5C%22%20id%3D%5C%22u24eedd5e%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ua8fd654a%5C%22%20id%3D%5C%22ua8fd654a%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u9e705ed2%5C%22%20id%3D%5C%22u9e705ed2%5C%22%3E%E4%BF%9D%E5%AD%98%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%AF%8F%E6%AC%A1%E8%AF%B7%E6%B1%82%E9%83%BD%E4%BC%9A%E5%B8%A6%E4%B8%8A%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u95fd55d8%5C%22%20id%3D%5C%22u95fd55d8%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22ub4480f8c%5C%22%20id%3D%5C%22ub4480f8c%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u4acac274%5C%22%20id%3D%5C%22u4acac274%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u577a3b69%5C%22%20id%3D%5C%22u577a3b69%5C%22%3Elocalstorage%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u78a30a2e%5C%22%20id%3D%5C%22u78a30a2e%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u44b6dc03%5C%22%20id%3D%5C%22u44b6dc03%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u0b7ba408%5C%22%20id%3D%5C%22u0b7ba408%5C%22%3E%E7%90%86%E8%AE%BA%E4%B8%8A%E6%B0%B8%E4%B9%85%E6%9C%89%E6%95%88%EF%BC%8C%E9%99%A4%E9%9D%9E%E6%89%8B%E5%8A%A8%E6%B8%85%E9%99%A4%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u0a7a4964%5C%22%20id%3D%5C%22u0a7a4964%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uf76cdbf4%5C%22%20id%3D%5C%22uf76cdbf4%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uf956ec86%5C%22%20id%3D%5C%22uf956ec86%5C%22%3E4.98mb%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22ua9b6daa9%5C%22%20id%3D%5C%22ua9b6daa9%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ue41f3fc5%5C%22%20id%3D%5C%22ue41f3fc5%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ubf2d7e2f%5C%22%20id%3D%5C%22ubf2d7e2f%5C%22%3E%E5%AD%98%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8D%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%A4%E4%BA%92%E8%8A%82%E7%9C%81%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u720421b0%5C%22%20id%3D%5C%22u720421b0%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u85cee330%5C%22%20id%3D%5C%22u85cee330%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u68a81526%5C%22%20id%3D%5C%22u68a81526%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u5894beb9%5C%22%20id%3D%5C%22u5894beb9%5C%22%3Esessionstorage%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u64745515%5C%22%20id%3D%5C%22u64745515%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ua54fe2b6%5C%22%20id%3D%5C%22ua54fe2b6%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u9cf79a98%5C%22%20id%3D%5C%22u9cf79a98%5C%22%3E%E4%BB%85%E5%9C%A8%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E6%9C%89%E6%95%88%EF%BC%8C%E5%85%B3%E9%97%AD%E9%A1%B5%E9%9D%A2%E5%90%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%B1%E6%95%88%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u4833f9f0%5C%22%20id%3D%5C%22u4833f9f0%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u88dbfa1a%5C%22%20id%3D%5C%22u88dbfa1a%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u1ffe6948%5C%22%20id%3D%5C%22u1ffe6948%5C%22%3E4.98mb%E9%83%A8%E5%88%86%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B2%A1%E9%99%90%E5%88%B6%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u878578da%5C%22%20id%3D%5C%22u878578da%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u988f10b6%5C%22%20id%3D%5C%22u988f10b6%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uab4a0b68%5C%22%20id%3D%5C%22uab4a0b68%5C%22%3E%E5%AD%98%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8D%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%A4%E4%BA%92%E8%8A%82%E7%9C%81%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%7D\"></card><p data-lake-id=\"u1bf8aee7\" id=\"u1bf8aee7\"><br></p><h2 data-lake-id=\"ef229611\" id=\"ef229611\"><strong><span data-lake-id=\"u43812c0f\" id=\"u43812c0f\">token</span></strong></h2><p data-lake-id=\"u883c1ecd\" id=\"u883c1ecd\"><br></p><blockquote data-lake-id=\"u521afe91\" id=\"u521afe91\"><p data-lake-id=\"uf0f2202b\" id=\"uf0f2202b\"><span data-lake-id=\"u0c3aafa9\" id=\"u0c3aafa9\">我们关于如上的几个概念已经说了很多，但是都没有涉及到安全性。如果每次cookie和session互相传递的都是明文数据（比如每次发送的密码都是未经加密的），就会非常不安全。我们可以考虑在服务端对客户端第一次登陆传递过来的用户名和密码进行一次加密，之后再把结果当做cookie传递给客户端。</span></p></blockquote><p data-lake-id=\"udb6d9f3b\" id=\"udb6d9f3b\"><br></p><h3 data-lake-id=\"2d7bdafe\" id=\"2d7bdafe\"><span data-lake-id=\"u1441f73f\" id=\"u1441f73f\">如何使用Token？</span></h3><p data-lake-id=\"u40a4d140\" id=\"u40a4d140\"><br></p><blockquote data-lake-id=\"u8506d3d1\" id=\"u8506d3d1\"><p data-lake-id=\"u0b1c9a6f\" id=\"u0b1c9a6f\"><span data-lake-id=\"u81dcf1f1\" id=\"u81dcf1f1\"> </span></p><ul list=\"u38c6fc63\"><li fid=\"u8d30b4d5\" data-lake-id=\"u23b9e530\" id=\"u23b9e530\"><span data-lake-id=\"u3119fbd8\" id=\"u3119fbd8\">使用设备号/设备mac地址作为token</span></li></ul><p data-lake-id=\"u48c35fa0\" id=\"u48c35fa0\"><span data-lake-id=\"uff2604fc\" id=\"uff2604fc\"> </span></p></blockquote><p data-lake-id=\"u13a82e32\" id=\"u13a82e32\"><br></p><ul list=\"u80fe11ef\"><li fid=\"u0e335d76\" data-lake-id=\"u19629509\" id=\"u19629509\"><span data-lake-id=\"u06cf556d\" id=\"u06cf556d\">客户端：客户端在登录的时候获取设备的设备号/mac地址，并将其作为参数传递到服务器端</span></li><li fid=\"u0e335d76\" data-lake-id=\"u9885718d\" id=\"u9885718d\"><span data-lake-id=\"u10c18fc2\" id=\"u10c18fc2\">服务器：服务器接收到该参数之后，使用一个变量接收同时将其作为token保存数据库，并将该token设置在session中，客户端每次请求的时候都要统一拦截，并将客户端传递的token和服务器session中的token对比，如果相同则放下，不同则拒绝</span></li></ul><p data-lake-id=\"u1cab3a48\" id=\"u1cab3a48\"><br></p><blockquote data-lake-id=\"u0d7ba7cb\" id=\"u0d7ba7cb\"><p data-lake-id=\"u6146a051\" id=\"u6146a051\"><span data-lake-id=\"u38d57ee9\" id=\"u38d57ee9\">优点：客户端不需要重新登录，只要登录一次后就能一直使用<br /></span><span data-lake-id=\"u1afce82c\" id=\"u1afce82c\">缺点：客户端需要带设备号/mac地址作为参数传递</span></p></blockquote><p data-lake-id=\"uc82fe724\" id=\"uc82fe724\"><br></p><ul list=\"uab0ea87c\"><li fid=\"u788722ee\" data-lake-id=\"u02f60de7\" id=\"u02f60de7\"><span data-lake-id=\"u43f1f3f9\" id=\"u43f1f3f9\">用session值作为token</span></li><li fid=\"u788722ee\" data-lake-id=\"u1f72ec8a\" id=\"u1f72ec8a\"><span data-lake-id=\"ud37ea437\" id=\"ud37ea437\">客户端：客户端只需要携带用户名和密码即可登录</span></li><li fid=\"u788722ee\" data-lake-id=\"ue5a9f084\" id=\"ue5a9f084\"><span data-lake-id=\"u868c437a\" id=\"u868c437a\">服务端：客户端接收到用户名和密码后并判断，如果正确就将本地获取sessionId作为token返回给客户端，客户端以后只需要带上请求数据即可</span></li></ul>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-22T05:18:21.000Z",
    "deleted_at": null,
    "created_at": "2021-12-22T05:17:38.000Z",
    "updated_at": "2021-12-22T05:18:21.000Z",
    "published_at": "2021-12-22T05:18:21.000Z",
    "first_published_at": "2021-12-22T05:17:59.000Z",
    "word_count": 3287,
    "cover": null,
    "description": "参考文档：https://blog.csdn.net/zhangquan_zone/article/details/77627899https://www.sohu.com/a/207801015_114819https://www.cnblogs.com/lufeiludaima/p/pz2...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 63204524,
    "slug": "fbpn35",
    "title": "ES6新特性简介",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-22T05:31:44.747Z",
      "updated_at": "2021-12-22T05:31:44.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-22T05:28:17.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-22T05:28:17.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"5e9d502d\"></a>\n## 一、新的变量声明方式 let/const\n\n<br />**let** 声明的变量只在let命令所在的代码块 （即JavaScript块级作用域)内有效<br />\n\n```javascript\n{\n    let _a = 20;\n}\nconsole.log(a);  // a is not defined\n```\n\n<br />**const**用于声明一个或多个常量，声明同时须进行初始化，一旦声明，常量值则不能再修改。但是使用const定义的常量对象或者常量数组是可变的，可对其对象或属性进行添加和修改等操作，但不能对其进行重新赋值。<br />\n\n```javascript\nconst obDev = {\n    a: 20,\n    b: 30\n}\nobDev.a = 30;\nconsole.log(obDev); // Object {a: 30, b: 30}\n```\n\n\n<a name=\"P1B84\"></a>\n## 二、 箭头函数的使用\n\n\n```javascript\n// es5\nvar fn = function(a, b) {\n    return a + b;\n}\n\n// es6 箭头函数写法，当函数直接被return时，可以省略函数体的括号\nconst fn = (a, b) => a + b;\n\n// es5\nvar foo = function() {\n    var a = 20；\n    var b = 30;\n    return a + b;\n}\n\n// es6\nconst foo = () => {\n   const a = 20;\n   const b = 30;\n   return a + b;\n}\n```\n\n<br />其次还有一个至关重要的一点，那就是箭头函数中，没有this。如果你在箭头函数中使用了this，那么该this一定就是外层的this。<br />\n\n```javascript\nvar person = {\n    name: 'tom',\n    getName: function() {\n        return this.name;\n    }\n}\n\n// 用ES6的写法来重构上面的对象\nconst person = {\n    name: 'tom',\n    getName: () => this.name\n}\n\n// 但是编译结果却是\nvar person = {\n    name: 'tom',\n    getName: function getName() {\n        return undefined.name;\n    }\n};\n//在ES6中，会默认采用严格模式，因此this也不会自动指向window对象了，而箭头函数本身并没有this，因此this就只能是undefined,可以使用es5中常用的定义变量来保存this\n```\n\n\n<a name=\"60cbf849\"></a>\n## 三、模板字符串\n\n<br />使用 ``(反引号) 将整个字符串包裹起来，而在其中使用 ${} 来包裹一个变量或者一个表达式。<br />\n\n```javascript\n// es6\nconst a = 20;\nconst b = 30;\nconst string = `${a}+${b}=${a+b}`; // \"20+30=50\"\n\n// es5\nvar a = 20;\nvar b = 30;\nvar string = a + \"+\" + b + \"=\" + (a + b); // \"20+30=50\"\n```\n\n\n<a name=\"d05a95f5\"></a>\n## 四、 解析结构\n\n\n```javascript\n// 首先有这么一个对象\nconst props = {\n    loading: false,\n    clicked: true,\n}\n// 当我们想要取得其中的2个值：loading与clicked时：\n\n// es5\nvar loading = props.loading;\nvar clicked = props.clicked;\n\n// es6\nconst { loading, clicked } = props;\n\n// 给一个默认值，当props对象中找不到loading时，loading就等于该默认值\nconst { loading = false, clicked } = props;\n\n// 项目中使用场景\n// section1\nimport Vue from 'Vue';\n\n// section2\nexport { default } from './Button';\n\n// section3\nconst { click, loading } = this.props;\nconst { isCheck } = this.state;\n```\n\n<br />##五、 函数默认参数<br />\n\n```javascript\n//es5\nfunction add(x, y) {\n    var x = x || 20;\n    var y = y || 30;\n    return x + y;\n}\n\nconsole.log(add()); // 50\n\n//es6\nfunction add(x = 20, y = 30) {\n    return x + y;\n}\n\nconsole.log(add());//50\n```\n\n<br />##六、 展开运算符<br />在ES6中用...来表示展开运算符，它可以将数组方法或者对象进行展开<br />\n\n```javascript\n1.数组中的使用\n\n// 数组的合并\nvar a = [1, 2];\nvar b = [0, ...a, 3]\nconsole.log(b) // [0, 1, 2, 3]\n\n// 数组的分割\n\nvar [a, ...b] = [0, 1, 2];\nconsole.log(b) // [1, 2]\n\n// 数组的拷贝\n\nvar a = [1, 2];\nvar b = [...a];\nconsole.log(b) // [1, 2]\n\n2.对象中的使用(指{a: 1}这种对象,)\n\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nconsole.log(z) // {a: 3, b: 4}\n\n3.解析结果中使用\n// 当不确定props到底还有多少数据会传进来，就可以利用展开运算符来处理剩余的数据\nconst props = {\n  size: 1,\n  src: 'xxxx',\n  mode: 'si'\n}\nconst { size, ...others } = props;\n\nconsole.log(others)//{src: \"xxxx\", mode: \"si\"}\n```\n\n<br />##七、对象字面量<br />\n\n```javascript\n1.当属性与值的变量同名时\n\nconst name = 'Jane';\nconst age = 20\n\n// es6\nconst person = {\n  name,\n  age\n}\n\n// es5\nvar person = {\n  name: name,\n  age: age\n};\n\n2.当一个模块对外提供接口时\nconst getName = () => person.name;\nconst getAge = () => person.age;\n\n// ES6 modules的方式\nexport default { getName, getAge  }\n\n3.在对象字面量中可以使用中括号作为属性，表示属性名也能是一个变量\nconst name = 'Jane';\nconst age = 20\n\nconst person = {\n  [name]: true,\n  [age]: true\n}\nconsole.log(person) // {20: true, Jane: true}\n```\n\n<br />##八、Promise<br />1、主要用于异步计算<br />2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果<br />3、可以在对象之间传递和操作promise，帮助我们处理队列<br />\n<br />异步回调的问题：<br />\n\n```\n 1. 很容易多层嵌套，剥夺了函数return的能力 \n 2. 问题可以解决，但是难以读懂，\n 3. 维护困难 嵌套层次深，不好维护\n```\n\n\n```javascript\n$.ajax({\n    url: 'https://www.mock.com/city',\n    success(resCity){\n        let findCityId = resCity.filter(item =>{\n            if(item.id === 'c1') {\n                return item\n            }\n        })[0].id\n        $.ajax({\n            // 第二个api,根据上一个返回的 findCityId\n            url: 'https://www.mock.com/position-list',\n            success(resPosition){\n                let findPostion = resPosition.filter(item =>{\n                    if(item.cityId === findCityId){\n                        return item\n                    }\n                })[0].id\n            }\n        })\n    }\n})\n```\n\n<br />Promise<br />\n\n```\n 1. promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）\n 2. 并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据 \n 3. 容易理解，便于维护\n 4. 多个异步等待合并便于解决\n```\n\n\n-  resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为           resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<br />reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为<br />rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。 \n-  promise有三个状态：<br />1、pending[待定]初始状态<br />2、fulfilled[实现]操作成功<br />3、rejected[被否决]操作失败<br />当promise状态发生改变，就会触发then()里的响应函数处理后续步骤； \n-  promise状态一经改变，不会再变。<br />Promise对象的状态改变，只有两种可能：<br />从pending变为fulfilled<br />从pending变为rejected。                                                             这两种情况只要发生，状态就凝固了，不会再变了。 \n\n\n\n```javascript\n//  分两次，顺序执行\nnew Promise(resolve => {\n    setTimeout(() => {\n      resolve('hello')\n    }, 2000)\n  }).then(val => {\n    console.log(val) //  参数val = 'hello'\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve('world')\n      }, 2000)\n    })\n  }).then(val => {\n    console.log(val) // 参数val = 'world'\n  })\n```\n\n<br />错误处理<br />1.throw new Error('错误信息').catch( () => {错误处理逻辑})<br />\n\n```javascript\n   new Promise((resolve) => {\n       setTimeout( ()=> {\n           resolve()\n       }, 2000)\n   }).then((val)=>{\n       console.log('start')\n       throw new Error('test error')\n   }).catch(error =>{\n       console.log('I catch', error)\n   }).then(()=>{\n       console.log('arrive here')\n   }).then(()=>{\n       console.log('... and here')\n   }).catch(error =>{\n       console.log('No, I catch', error)\n   })\n   // 打印结果\n   start\n   I catch Error: test error\n   arrive here\n   ... and here\n```\n\n<br />2.reject('错误信息').then(() => {}, () => {错误处理逻辑})<br />\n\n```javascript\n  new Promise((resolve,reject) => {\n      setTimeout( ()=> {\n          reject('bye')\n      }, 2000)\n  }).then((val)=>{\n      console.log(val)\n  },(err) =>{\n      console.log('error:', err) //  error:bye\n  })\n```\n\n<br />Promise.all() 批量执行<br />Promise.all([p1, p2,p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise<br />它接收一个数组作为参数<br />数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变<br />当所有的子Promise都完成，该Promise完成，返回值是全部值得数组<br />有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果<br />\n\n```javascript\n//切菜\n  function cutUp(){\n      console.log('开始切菜。');\n      var p = new Promise(function(resolve, reject){        //做一些异步操作\n          setTimeout(function(){\n              console.log('切菜完毕！');\n              resolve('切好的菜');\n          }, 1000);\n      });\n      return p;\n  }\n\n  //烧水\n  function boil(){\n      console.log('开始烧水。');\n      var p = new Promise(function(resolve, reject){        //做一些异步操作\n          setTimeout(function(){\n              console.log('烧水完毕！');\n              resolve('烧好的水');\n          }, 1000);\n      });\n      return p;\n  }\n  Promise.all([cutUp(), boil()])\n      .then((result) => {\n          console.log('准备工作完毕');\n          console.log(result);\n      })\n\n//返回结果\n开始切菜。\n开始烧水。\n切菜完毕！\n烧水完毕！\n准备工作完毕\n[\"切好的菜\", \"烧好的水\"]\n```\n\n<br />Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成<br />\n\n```javascript\nlet p1 = new Promise(resolve => {\n      setTimeout(() => {\n          resolve('I\\`m p1 ')\n      }, 1000)\n  });\n  let p2 = new Promise(resolve => {\n      setTimeout(() => {\n          resolve('I\\`m p2 ')\n      }, 2000)\n  });\n  Promise.race([p1, p2])\n      .then(value => {\n          console.log(value)\n      })\n      \n      // I`m p1\n```\n",
    "body_draft": "<a name=\"5e9d502d\"></a>\n## 一、新的变量声明方式 let/const\n\n<br />**let** 声明的变量只在let命令所在的代码块 （即JavaScript块级作用域)内有效<br />\n\n```javascript\n{\n    let _a = 20;\n}\nconsole.log(a);  // a is not defined\n```\n\n<br />**const**用于声明一个或多个常量，声明同时须进行初始化，一旦声明，常量值则不能再修改。但是使用const定义的常量对象或者常量数组是可变的，可对其对象或属性进行添加和修改等操作，但不能对其进行重新赋值。<br />\n\n```javascript\nconst obDev = {\n    a: 20,\n    b: 30\n}\nobDev.a = 30;\nconsole.log(obDev); // Object {a: 30, b: 30}\n```\n\n\n<a name=\"P1B84\"></a>\n## 二、 箭头函数的使用\n\n\n```javascript\n// es5\nvar fn = function(a, b) {\n    return a + b;\n}\n\n// es6 箭头函数写法，当函数直接被return时，可以省略函数体的括号\nconst fn = (a, b) => a + b;\n\n// es5\nvar foo = function() {\n    var a = 20；\n    var b = 30;\n    return a + b;\n}\n\n// es6\nconst foo = () => {\n   const a = 20;\n   const b = 30;\n   return a + b;\n}\n```\n\n<br />其次还有一个至关重要的一点，那就是箭头函数中，没有this。如果你在箭头函数中使用了this，那么该this一定就是外层的this。<br />\n\n```javascript\nvar person = {\n    name: 'tom',\n    getName: function() {\n        return this.name;\n    }\n}\n\n// 用ES6的写法来重构上面的对象\nconst person = {\n    name: 'tom',\n    getName: () => this.name\n}\n\n// 但是编译结果却是\nvar person = {\n    name: 'tom',\n    getName: function getName() {\n        return undefined.name;\n    }\n};\n//在ES6中，会默认采用严格模式，因此this也不会自动指向window对象了，而箭头函数本身并没有this，因此this就只能是undefined,可以使用es5中常用的定义变量来保存this\n```\n\n\n<a name=\"60cbf849\"></a>\n## 三、模板字符串\n\n<br />使用 ``(反引号) 将整个字符串包裹起来，而在其中使用 ${} 来包裹一个变量或者一个表达式。<br />\n\n```javascript\n// es6\nconst a = 20;\nconst b = 30;\nconst string = `${a}+${b}=${a+b}`; // \"20+30=50\"\n\n// es5\nvar a = 20;\nvar b = 30;\nvar string = a + \"+\" + b + \"=\" + (a + b); // \"20+30=50\"\n```\n\n\n<a name=\"d05a95f5\"></a>\n## 四、 解析结构\n\n\n```javascript\n// 首先有这么一个对象\nconst props = {\n    loading: false,\n    clicked: true,\n}\n// 当我们想要取得其中的2个值：loading与clicked时：\n\n// es5\nvar loading = props.loading;\nvar clicked = props.clicked;\n\n// es6\nconst { loading, clicked } = props;\n\n// 给一个默认值，当props对象中找不到loading时，loading就等于该默认值\nconst { loading = false, clicked } = props;\n\n// 项目中使用场景\n// section1\nimport Vue from 'Vue';\n\n// section2\nexport { default } from './Button';\n\n// section3\nconst { click, loading } = this.props;\nconst { isCheck } = this.state;\n```\n\n<br />##五、 函数默认参数<br />\n\n```javascript\n//es5\nfunction add(x, y) {\n    var x = x || 20;\n    var y = y || 30;\n    return x + y;\n}\n\nconsole.log(add()); // 50\n\n//es6\nfunction add(x = 20, y = 30) {\n    return x + y;\n}\n\nconsole.log(add());//50\n```\n\n<br />##六、 展开运算符<br />在ES6中用...来表示展开运算符，它可以将数组方法或者对象进行展开<br />\n\n```javascript\n1.数组中的使用\n\n// 数组的合并\nvar a = [1, 2];\nvar b = [0, ...a, 3]\nconsole.log(b) // [0, 1, 2, 3]\n\n// 数组的分割\n\nvar [a, ...b] = [0, 1, 2];\nconsole.log(b) // [1, 2]\n\n// 数组的拷贝\n\nvar a = [1, 2];\nvar b = [...a];\nconsole.log(b) // [1, 2]\n\n2.对象中的使用(指{a: 1}这种对象,)\n\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nconsole.log(z) // {a: 3, b: 4}\n\n3.解析结果中使用\n// 当不确定props到底还有多少数据会传进来，就可以利用展开运算符来处理剩余的数据\nconst props = {\n  size: 1,\n  src: 'xxxx',\n  mode: 'si'\n}\nconst { size, ...others } = props;\n\nconsole.log(others)//{src: \"xxxx\", mode: \"si\"}\n```\n\n<br />##七、对象字面量<br />\n\n```javascript\n1.当属性与值的变量同名时\n\nconst name = 'Jane';\nconst age = 20\n\n// es6\nconst person = {\n  name,\n  age\n}\n\n// es5\nvar person = {\n  name: name,\n  age: age\n};\n\n2.当一个模块对外提供接口时\nconst getName = () => person.name;\nconst getAge = () => person.age;\n\n// ES6 modules的方式\nexport default { getName, getAge  }\n\n3.在对象字面量中可以使用中括号作为属性，表示属性名也能是一个变量\nconst name = 'Jane';\nconst age = 20\n\nconst person = {\n  [name]: true,\n  [age]: true\n}\nconsole.log(person) // {20: true, Jane: true}\n```\n\n<br />##八、Promise<br />1、主要用于异步计算<br />2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果<br />3、可以在对象之间传递和操作promise，帮助我们处理队列<br />\n<br />异步回调的问题：<br />\n\n```\n 1. 很容易多层嵌套，剥夺了函数return的能力 \n 2. 问题可以解决，但是难以读懂，\n 3. 维护困难 嵌套层次深，不好维护\n```\n\n\n```javascript\n$.ajax({\n    url: 'https://www.mock.com/city',\n    success(resCity){\n        let findCityId = resCity.filter(item =>{\n            if(item.id === 'c1') {\n                return item\n            }\n        })[0].id\n        $.ajax({\n            // 第二个api,根据上一个返回的 findCityId\n            url: 'https://www.mock.com/position-list',\n            success(resPosition){\n                let findPostion = resPosition.filter(item =>{\n                    if(item.cityId === findCityId){\n                        return item\n                    }\n                })[0].id\n            }\n        })\n    }\n})\n```\n\n<br />Promise<br />\n\n```\n 1. promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）\n 2. 并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据 \n 3. 容易理解，便于维护\n 4. 多个异步等待合并便于解决\n```\n\n\n-  resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为           resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<br />reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为<br />rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。 \n-  promise有三个状态：<br />1、pending[待定]初始状态<br />2、fulfilled[实现]操作成功<br />3、rejected[被否决]操作失败<br />当promise状态发生改变，就会触发then()里的响应函数处理后续步骤； \n-  promise状态一经改变，不会再变。<br />Promise对象的状态改变，只有两种可能：<br />从pending变为fulfilled<br />从pending变为rejected。                                                             这两种情况只要发生，状态就凝固了，不会再变了。 \n\n\n\n```javascript\n//  分两次，顺序执行\nnew Promise(resolve => {\n    setTimeout(() => {\n      resolve('hello')\n    }, 2000)\n  }).then(val => {\n    console.log(val) //  参数val = 'hello'\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve('world')\n      }, 2000)\n    })\n  }).then(val => {\n    console.log(val) // 参数val = 'world'\n  })\n```\n\n<br />错误处理<br />1.throw new Error('错误信息').catch( () => {错误处理逻辑})<br />\n\n```javascript\n   new Promise((resolve) => {\n       setTimeout( ()=> {\n           resolve()\n       }, 2000)\n   }).then((val)=>{\n       console.log('start')\n       throw new Error('test error')\n   }).catch(error =>{\n       console.log('I catch', error)\n   }).then(()=>{\n       console.log('arrive here')\n   }).then(()=>{\n       console.log('... and here')\n   }).catch(error =>{\n       console.log('No, I catch', error)\n   })\n   // 打印结果\n   start\n   I catch Error: test error\n   arrive here\n   ... and here\n```\n\n<br />2.reject('错误信息').then(() => {}, () => {错误处理逻辑})<br />\n\n```javascript\n  new Promise((resolve,reject) => {\n      setTimeout( ()=> {\n          reject('bye')\n      }, 2000)\n  }).then((val)=>{\n      console.log(val)\n  },(err) =>{\n      console.log('error:', err) //  error:bye\n  })\n```\n\n<br />Promise.all() 批量执行<br />Promise.all([p1, p2,p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise<br />它接收一个数组作为参数<br />数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变<br />当所有的子Promise都完成，该Promise完成，返回值是全部值得数组<br />有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果<br />\n\n```javascript\n//切菜\n  function cutUp(){\n      console.log('开始切菜。');\n      var p = new Promise(function(resolve, reject){        //做一些异步操作\n          setTimeout(function(){\n              console.log('切菜完毕！');\n              resolve('切好的菜');\n          }, 1000);\n      });\n      return p;\n  }\n\n  //烧水\n  function boil(){\n      console.log('开始烧水。');\n      var p = new Promise(function(resolve, reject){        //做一些异步操作\n          setTimeout(function(){\n              console.log('烧水完毕！');\n              resolve('烧好的水');\n          }, 1000);\n      });\n      return p;\n  }\n  Promise.all([cutUp(), boil()])\n      .then((result) => {\n          console.log('准备工作完毕');\n          console.log(result);\n      })\n\n//返回结果\n开始切菜。\n开始烧水。\n切菜完毕！\n烧水完毕！\n准备工作完毕\n[\"切好的菜\", \"烧好的水\"]\n```\n\n<br />Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成<br />\n\n```javascript\nlet p1 = new Promise(resolve => {\n      setTimeout(() => {\n          resolve('I\\`m p1 ')\n      }, 1000)\n  });\n  let p2 = new Promise(resolve => {\n      setTimeout(() => {\n          resolve('I\\`m p2 ')\n      }, 2000)\n  });\n  Promise.race([p1, p2])\n      .then(value => {\n          console.log(value)\n      })\n      \n      // I`m p1\n```\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"5e9d502d\"><span class=\"ne-text\">一、新的变量声明方式 let/const</span></h2><p id=\"u2bbc9301\" class=\"ne-p\"><br></p><p id=\"ubf2f3302\" class=\"ne-p\"><strong><span class=\"ne-text\">let</span></strong><span class=\"ne-text\"> 声明的变量只在let命令所在的代码块 （即JavaScript块级作用域)内有效</span></p><p id=\"ua9c900ae\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"e4b79aa0\" class=\"ne-codeblock language-javascript\">{\n    let _a = 20;\n}\nconsole.log(a);  // a is not defined</pre><p id=\"ua2bb505e\" class=\"ne-p\"><br></p><p id=\"uf73d0c2e\" class=\"ne-p\"><strong><span class=\"ne-text\">const</span></strong><span class=\"ne-text\">用于声明一个或多个常量，声明同时须进行初始化，一旦声明，常量值则不能再修改。但是使用const定义的常量对象或者常量数组是可变的，可对其对象或属性进行添加和修改等操作，但不能对其进行重新赋值。</span></p><p id=\"u2d097fac\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"fe8fb2f3\" class=\"ne-codeblock language-javascript\">const obDev = {\n    a: 20,\n    b: 30\n}\nobDev.a = 30;\nconsole.log(obDev); // Object {a: 30, b: 30}</pre><p id=\"ubd3d7e00\" class=\"ne-p\"><br></p><h2 id=\"P1B84\"><span class=\"ne-text\">二、 箭头函数的使用</span></h2><p id=\"ubda28749\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"b4fff593\" class=\"ne-codeblock language-javascript\">// es5\nvar fn = function(a, b) {\n    return a + b;\n}\n\n// es6 箭头函数写法，当函数直接被return时，可以省略函数体的括号\nconst fn = (a, b) =&gt; a + b;\n\n// es5\nvar foo = function() {\n    var a = 20；\n    var b = 30;\n    return a + b;\n}\n\n// es6\nconst foo = () =&gt; {\n   const a = 20;\n   const b = 30;\n   return a + b;\n}</pre><p id=\"u13040cc1\" class=\"ne-p\"><br></p><p id=\"ub5dc1fa1\" class=\"ne-p\"><span class=\"ne-text\">其次还有一个至关重要的一点，那就是箭头函数中，没有this。如果你在箭头函数中使用了this，那么该this一定就是外层的this。</span></p><p id=\"u33c148da\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"625b8f64\" class=\"ne-codeblock language-javascript\">var person = {\n    name: 'tom',\n    getName: function() {\n        return this.name;\n    }\n}\n\n// 用ES6的写法来重构上面的对象\nconst person = {\n    name: 'tom',\n    getName: () =&gt; this.name\n}\n\n// 但是编译结果却是\nvar person = {\n    name: 'tom',\n    getName: function getName() {\n        return undefined.name;\n    }\n};\n//在ES6中，会默认采用严格模式，因此this也不会自动指向window对象了，而箭头函数本身并没有this，因此this就只能是undefined,可以使用es5中常用的定义变量来保存this</pre><p id=\"u848883cb\" class=\"ne-p\"><br></p><h2 id=\"60cbf849\"><span class=\"ne-text\">三、模板字符串</span></h2><p id=\"u189176c0\" class=\"ne-p\"><br></p><p id=\"u75bb80ca\" class=\"ne-p\"><span class=\"ne-text\">使用 ``(反引号) 将整个字符串包裹起来，而在其中使用 ${} 来包裹一个变量或者一个表达式。</span></p><p id=\"ue7177a92\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"c51c818c\" class=\"ne-codeblock language-javascript\">// es6\nconst a = 20;\nconst b = 30;\nconst string = `${a}+${b}=${a+b}`; // &quot;20+30=50&quot;\n\n// es5\nvar a = 20;\nvar b = 30;\nvar string = a + &quot;+&quot; + b + &quot;=&quot; + (a + b); // &quot;20+30=50&quot;</pre><p id=\"uac5f3e7d\" class=\"ne-p\"><br></p><h2 id=\"d05a95f5\"><span class=\"ne-text\">四、 解析结构</span></h2><p id=\"ub64a36ba\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"6cc796d5\" class=\"ne-codeblock language-javascript\">// 首先有这么一个对象\nconst props = {\n    loading: false,\n    clicked: true,\n}\n// 当我们想要取得其中的2个值：loading与clicked时：\n\n// es5\nvar loading = props.loading;\nvar clicked = props.clicked;\n\n// es6\nconst { loading, clicked } = props;\n\n// 给一个默认值，当props对象中找不到loading时，loading就等于该默认值\nconst { loading = false, clicked } = props;\n\n// 项目中使用场景\n// section1\nimport Vue from 'Vue';\n\n// section2\nexport { default } from './Button';\n\n// section3\nconst { click, loading } = this.props;\nconst { isCheck } = this.state;</pre><p id=\"u10ed4a7e\" class=\"ne-p\"><br></p><p id=\"u6478af8f\" class=\"ne-p\"><span class=\"ne-text\">##五、 函数默认参数</span></p><p id=\"u99646438\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"6291315b\" class=\"ne-codeblock language-javascript\">//es5\nfunction add(x, y) {\n    var x = x || 20;\n    var y = y || 30;\n    return x + y;\n}\n\nconsole.log(add()); // 50\n\n//es6\nfunction add(x = 20, y = 30) {\n    return x + y;\n}\n\nconsole.log(add());//50</pre><p id=\"ud532c424\" class=\"ne-p\"><br></p><p id=\"u9678fedf\" class=\"ne-p\"><span class=\"ne-text\">##六、 展开运算符<br /></span><span class=\"ne-text\">在ES6中用...来表示展开运算符，它可以将数组方法或者对象进行展开</span></p><p id=\"u50a5777b\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"d6e16b3d\" class=\"ne-codeblock language-javascript\">1.数组中的使用\n\n// 数组的合并\nvar a = [1, 2];\nvar b = [0, ...a, 3]\nconsole.log(b) // [0, 1, 2, 3]\n\n// 数组的分割\n\nvar [a, ...b] = [0, 1, 2];\nconsole.log(b) // [1, 2]\n\n// 数组的拷贝\n\nvar a = [1, 2];\nvar b = [...a];\nconsole.log(b) // [1, 2]\n\n2.对象中的使用(指{a: 1}这种对象,)\n\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nconsole.log(z) // {a: 3, b: 4}\n\n3.解析结果中使用\n// 当不确定props到底还有多少数据会传进来，就可以利用展开运算符来处理剩余的数据\nconst props = {\n  size: 1,\n  src: 'xxxx',\n  mode: 'si'\n}\nconst { size, ...others } = props;\n\nconsole.log(others)//{src: &quot;xxxx&quot;, mode: &quot;si&quot;}</pre><p id=\"u02cb49f0\" class=\"ne-p\"><br></p><p id=\"uce0e510b\" class=\"ne-p\"><span class=\"ne-text\">##七、对象字面量</span></p><p id=\"u32126d18\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"f90d8ace\" class=\"ne-codeblock language-javascript\">1.当属性与值的变量同名时\n\nconst name = 'Jane';\nconst age = 20\n\n// es6\nconst person = {\n  name,\n  age\n}\n\n// es5\nvar person = {\n  name: name,\n  age: age\n};\n\n2.当一个模块对外提供接口时\nconst getName = () =&gt; person.name;\nconst getAge = () =&gt; person.age;\n\n// ES6 modules的方式\nexport default { getName, getAge  }\n\n3.在对象字面量中可以使用中括号作为属性，表示属性名也能是一个变量\nconst name = 'Jane';\nconst age = 20\n\nconst person = {\n  [name]: true,\n  [age]: true\n}\nconsole.log(person) // {20: true, Jane: true}</pre><p id=\"ub447b12c\" class=\"ne-p\"><br></p><p id=\"u5da6c7a7\" class=\"ne-p\"><span class=\"ne-text\">##八、Promise<br /></span><span class=\"ne-text\">1、主要用于异步计算<br /></span><span class=\"ne-text\">2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果<br /></span><span class=\"ne-text\">3、可以在对象之间传递和操作promise，帮助我们处理队列</span></p><p id=\"uc0a68560\" class=\"ne-p\"><br></p><p id=\"u2e855c77\" class=\"ne-p\"><span class=\"ne-text\">异步回调的问题：</span></p><p id=\"u41ed6846\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"ca914f3f\" class=\"ne-codeblock language-plain\"> 1. 很容易多层嵌套，剥夺了函数return的能力 \n 2. 问题可以解决，但是难以读懂，\n 3. 维护困难 嵌套层次深，不好维护</pre><p id=\"uced79881\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"59df8dfc\" class=\"ne-codeblock language-javascript\">$.ajax({\n    url: 'https://www.mock.com/city',\n    success(resCity){\n        let findCityId = resCity.filter(item =&gt;{\n            if(item.id === 'c1') {\n                return item\n            }\n        })[0].id\n        $.ajax({\n            // 第二个api,根据上一个返回的 findCityId\n            url: 'https://www.mock.com/position-list',\n            success(resPosition){\n                let findPostion = resPosition.filter(item =&gt;{\n                    if(item.cityId === findCityId){\n                        return item\n                    }\n                })[0].id\n            }\n        })\n    }\n})</pre><p id=\"u2efb7796\" class=\"ne-p\"><br></p><p id=\"u195970f4\" class=\"ne-p\"><span class=\"ne-text\">Promise</span></p><p id=\"ua146c8fb\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"34084438\" class=\"ne-codeblock language-plain\"> 1. promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）\n 2. 并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据 \n 3. 容易理解，便于维护\n 4. 多个异步等待合并便于解决</pre><p id=\"u56fa99f7\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u9115d016\"><span class=\"ne-text\"> resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为           resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<br /></span><span class=\"ne-text\">reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为<br /></span><span class=\"ne-text\">rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。 </span></li><li id=\"u3f4e5ca5\"><span class=\"ne-text\"> promise有三个状态：<br /></span><span class=\"ne-text\">1、pending[待定]初始状态<br /></span><span class=\"ne-text\">2、fulfilled[实现]操作成功<br /></span><span class=\"ne-text\">3、rejected[被否决]操作失败<br /></span><span class=\"ne-text\">当promise状态发生改变，就会触发then()里的响应函数处理后续步骤； </span></li></ul><ul class=\"ne-ul\"><li id=\"u67210baf\"><span class=\"ne-text\"> promise状态一经改变，不会再变。<br /></span><span class=\"ne-text\">Promise对象的状态改变，只有两种可能：<br /></span><span class=\"ne-text\">从pending变为fulfilled<br /></span><span class=\"ne-text\">从pending变为rejected。                                                             这两种情况只要发生，状态就凝固了，不会再变了。 </span></li></ul><p id=\"ub54ab37e\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"02dec14c\" class=\"ne-codeblock language-javascript\">//  分两次，顺序执行\nnew Promise(resolve =&gt; {\n    setTimeout(() =&gt; {\n      resolve('hello')\n    }, 2000)\n  }).then(val =&gt; {\n    console.log(val) //  参数val = 'hello'\n    return new Promise(resolve =&gt; {\n      setTimeout(() =&gt; {\n        resolve('world')\n      }, 2000)\n    })\n  }).then(val =&gt; {\n    console.log(val) // 参数val = 'world'\n  })</pre><p id=\"ua3b60933\" class=\"ne-p\"><br></p><p id=\"u23deadef\" class=\"ne-p\"><span class=\"ne-text\">错误处理<br /></span><span class=\"ne-text\">1.throw new Error('错误信息').catch( () =&gt; {错误处理逻辑})</span></p><p id=\"u0741c809\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"e0130756\" class=\"ne-codeblock language-javascript\">   new Promise((resolve) =&gt; {\n       setTimeout( ()=&gt; {\n           resolve()\n       }, 2000)\n   }).then((val)=&gt;{\n       console.log('start')\n       throw new Error('test error')\n   }).catch(error =&gt;{\n       console.log('I catch', error)\n   }).then(()=&gt;{\n       console.log('arrive here')\n   }).then(()=&gt;{\n       console.log('... and here')\n   }).catch(error =&gt;{\n       console.log('No, I catch', error)\n   })\n   // 打印结果\n   start\n   I catch Error: test error\n   arrive here\n   ... and here</pre><p id=\"ub12d1383\" class=\"ne-p\"><br></p><p id=\"u1486e013\" class=\"ne-p\"><span class=\"ne-text\">2.reject('错误信息').then(() =&gt; {}, () =&gt; {错误处理逻辑})</span></p><p id=\"u3def418d\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"2e8b72d9\" class=\"ne-codeblock language-javascript\">  new Promise((resolve,reject) =&gt; {\n      setTimeout( ()=&gt; {\n          reject('bye')\n      }, 2000)\n  }).then((val)=&gt;{\n      console.log(val)\n  },(err) =&gt;{\n      console.log('error:', err) //  error:bye\n  })</pre><p id=\"ud7c037db\" class=\"ne-p\"><br></p><p id=\"ufdbf7639\" class=\"ne-p\"><span class=\"ne-text\">Promise.all() 批量执行<br /></span><span class=\"ne-text\">Promise.all([p1, p2,p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise<br /></span><span class=\"ne-text\">它接收一个数组作为参数<br /></span><span class=\"ne-text\">数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变<br /></span><span class=\"ne-text\">当所有的子Promise都完成，该Promise完成，返回值是全部值得数组<br /></span><span class=\"ne-text\">有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果</span></p><p id=\"ucbb30ac4\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"77377c4a\" class=\"ne-codeblock language-javascript\">//切菜\n  function cutUp(){\n      console.log('开始切菜。');\n      var p = new Promise(function(resolve, reject){        //做一些异步操作\n          setTimeout(function(){\n              console.log('切菜完毕！');\n              resolve('切好的菜');\n          }, 1000);\n      });\n      return p;\n  }\n\n  //烧水\n  function boil(){\n      console.log('开始烧水。');\n      var p = new Promise(function(resolve, reject){        //做一些异步操作\n          setTimeout(function(){\n              console.log('烧水完毕！');\n              resolve('烧好的水');\n          }, 1000);\n      });\n      return p;\n  }\n  Promise.all([cutUp(), boil()])\n      .then((result) =&gt; {\n          console.log('准备工作完毕');\n          console.log(result);\n      })\n\n//返回结果\n开始切菜。\n开始烧水。\n切菜完毕！\n烧水完毕！\n准备工作完毕\n[&quot;切好的菜&quot;, &quot;烧好的水&quot;]</pre><p id=\"u4d2e8354\" class=\"ne-p\"><br></p><p id=\"u57392117\" class=\"ne-p\"><span class=\"ne-text\">Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成</span></p><p id=\"u13183717\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"0c9fbb3a\" class=\"ne-codeblock language-javascript\">let p1 = new Promise(resolve =&gt; {\n      setTimeout(() =&gt; {\n          resolve('I\\`m p1 ')\n      }, 1000)\n  });\n  let p2 = new Promise(resolve =&gt; {\n      setTimeout(() =&gt; {\n          resolve('I\\`m p2 ')\n      }, 2000)\n  });\n  Promise.race([p1, p2])\n      .then(value =&gt; {\n          console.log(value)\n      })\n      \n      // I`m p1</pre></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"5e9d502d\" id=\"5e9d502d\"><span data-lake-id=\"u172b10a9\" id=\"u172b10a9\">一、新的变量声明方式 let/const</span></h2><p data-lake-id=\"u2bbc9301\" id=\"u2bbc9301\"><br></p><p data-lake-id=\"ubf2f3302\" id=\"ubf2f3302\"><strong><span data-lake-id=\"u516e5707\" id=\"u516e5707\">let</span></strong><span data-lake-id=\"udfe3ac5c\" id=\"udfe3ac5c\"> 声明的变量只在let命令所在的代码块 （即JavaScript块级作用域)内有效</span></p><p data-lake-id=\"ua9c900ae\" id=\"ua9c900ae\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%7B%5Cn%20%20%20%20let%20_a%20%3D%2020%3B%5Cn%7D%5Cnconsole.log(a)%3B%20%20%2F%2F%20a%20is%20not%20defined%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e4b79aa0%22%7D\"></card><p data-lake-id=\"ua2bb505e\" id=\"ua2bb505e\"><br></p><p data-lake-id=\"uf73d0c2e\" id=\"uf73d0c2e\"><strong><span data-lake-id=\"u9f91d5a2\" id=\"u9f91d5a2\">const</span></strong><span data-lake-id=\"u69ce98aa\" id=\"u69ce98aa\">用于声明一个或多个常量，声明同时须进行初始化，一旦声明，常量值则不能再修改。但是使用const定义的常量对象或者常量数组是可变的，可对其对象或属性进行添加和修改等操作，但不能对其进行重新赋值。</span></p><p data-lake-id=\"u2d097fac\" id=\"u2d097fac\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20obDev%20%3D%20%7B%5Cn%20%20%20%20a%3A%2020%2C%5Cn%20%20%20%20b%3A%2030%5Cn%7D%5CnobDev.a%20%3D%2030%3B%5Cnconsole.log(obDev)%3B%20%2F%2F%20Object%20%7Ba%3A%2030%2C%20b%3A%2030%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fe8fb2f3%22%7D\"></card><p data-lake-id=\"ubd3d7e00\" id=\"ubd3d7e00\"><br></p><h2 data-lake-id=\"P1B84\" id=\"P1B84\"><span data-lake-id=\"u378572b4\" id=\"u378572b4\">二、 箭头函数的使用</span></h2><p data-lake-id=\"ubda28749\" id=\"ubda28749\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20es5%5Cnvar%20fn%20%3D%20function(a%2C%20b)%20%7B%5Cn%20%20%20%20return%20a%20%2B%20b%3B%5Cn%7D%5Cn%5Cn%2F%2F%20es6%20%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%86%99%E6%B3%95%EF%BC%8C%E5%BD%93%E5%87%BD%E6%95%B0%E7%9B%B4%E6%8E%A5%E8%A2%ABreturn%E6%97%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%E5%87%BD%E6%95%B0%E4%BD%93%E7%9A%84%E6%8B%AC%E5%8F%B7%5Cnconst%20fn%20%3D%20(a%2C%20b)%20%3D%3E%20a%20%2B%20b%3B%5Cn%5Cn%2F%2F%20es5%5Cnvar%20foo%20%3D%20function()%20%7B%5Cn%20%20%20%20var%20a%20%3D%2020%EF%BC%9B%5Cn%20%20%20%20var%20b%20%3D%2030%3B%5Cn%20%20%20%20return%20a%20%2B%20b%3B%5Cn%7D%5Cn%5Cn%2F%2F%20es6%5Cnconst%20foo%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20const%20a%20%3D%2020%3B%5Cn%20%20%20const%20b%20%3D%2030%3B%5Cn%20%20%20return%20a%20%2B%20b%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b4fff593%22%7D\"></card><p data-lake-id=\"u13040cc1\" id=\"u13040cc1\"><br></p><p data-lake-id=\"ub5dc1fa1\" id=\"ub5dc1fa1\"><span data-lake-id=\"ub0e08f4c\" id=\"ub0e08f4c\">其次还有一个至关重要的一点，那就是箭头函数中，没有this。如果你在箭头函数中使用了this，那么该this一定就是外层的this。</span></p><p data-lake-id=\"u33c148da\" id=\"u33c148da\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20person%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'tom'%2C%5Cn%20%20%20%20getName%3A%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.name%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E7%94%A8ES6%E7%9A%84%E5%86%99%E6%B3%95%E6%9D%A5%E9%87%8D%E6%9E%84%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cnconst%20person%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'tom'%2C%5Cn%20%20%20%20getName%3A%20()%20%3D%3E%20this.name%5Cn%7D%5Cn%5Cn%2F%2F%20%E4%BD%86%E6%98%AF%E7%BC%96%E8%AF%91%E7%BB%93%E6%9E%9C%E5%8D%B4%E6%98%AF%5Cnvar%20person%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'tom'%2C%5Cn%20%20%20%20getName%3A%20function%20getName()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20undefined.name%3B%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cn%2F%2F%E5%9C%A8ES6%E4%B8%AD%EF%BC%8C%E4%BC%9A%E9%BB%98%E8%AE%A4%E9%87%87%E7%94%A8%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%9B%A0%E6%AD%A4this%E4%B9%9F%E4%B8%8D%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%8C%87%E5%90%91window%E5%AF%B9%E8%B1%A1%E4%BA%86%EF%BC%8C%E8%80%8C%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E6%9C%AC%E8%BA%AB%E5%B9%B6%E6%B2%A1%E6%9C%89this%EF%BC%8C%E5%9B%A0%E6%AD%A4this%E5%B0%B1%E5%8F%AA%E8%83%BD%E6%98%AFundefined%2C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8es5%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E6%9D%A5%E4%BF%9D%E5%AD%98this%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22625b8f64%22%7D\"></card><p data-lake-id=\"u848883cb\" id=\"u848883cb\"><br></p><h2 data-lake-id=\"60cbf849\" id=\"60cbf849\"><span data-lake-id=\"u252199d5\" id=\"u252199d5\">三、模板字符串</span></h2><p data-lake-id=\"u189176c0\" id=\"u189176c0\"><br></p><p data-lake-id=\"u75bb80ca\" id=\"u75bb80ca\"><span data-lake-id=\"u0e895004\" id=\"u0e895004\">使用 ``(反引号) 将整个字符串包裹起来，而在其中使用 ${} 来包裹一个变量或者一个表达式。</span></p><p data-lake-id=\"ue7177a92\" id=\"ue7177a92\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20es6%5Cnconst%20a%20%3D%2020%3B%5Cnconst%20b%20%3D%2030%3B%5Cnconst%20string%20%3D%20%60%24%7Ba%7D%2B%24%7Bb%7D%3D%24%7Ba%2Bb%7D%60%3B%20%2F%2F%20%5C%2220%2B30%3D50%5C%22%5Cn%5Cn%2F%2F%20es5%5Cnvar%20a%20%3D%2020%3B%5Cnvar%20b%20%3D%2030%3B%5Cnvar%20string%20%3D%20a%20%2B%20%5C%22%2B%5C%22%20%2B%20b%20%2B%20%5C%22%3D%5C%22%20%2B%20(a%20%2B%20b)%3B%20%2F%2F%20%5C%2220%2B30%3D50%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22c51c818c%22%7D\"></card><p data-lake-id=\"uac5f3e7d\" id=\"uac5f3e7d\"><br></p><h2 data-lake-id=\"d05a95f5\" id=\"d05a95f5\"><span data-lake-id=\"u8333fb63\" id=\"u8333fb63\">四、 解析结构</span></h2><p data-lake-id=\"ub64a36ba\" id=\"ub64a36ba\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E9%A6%96%E5%85%88%E6%9C%89%E8%BF%99%E4%B9%88%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%5Cnconst%20props%20%3D%20%7B%5Cn%20%20%20%20loading%3A%20false%2C%5Cn%20%20%20%20clicked%3A%20true%2C%5Cn%7D%5Cn%2F%2F%20%E5%BD%93%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E5%8F%96%E5%BE%97%E5%85%B6%E4%B8%AD%E7%9A%842%E4%B8%AA%E5%80%BC%EF%BC%9Aloading%E4%B8%8Eclicked%E6%97%B6%EF%BC%9A%5Cn%5Cn%2F%2F%20es5%5Cnvar%20loading%20%3D%20props.loading%3B%5Cnvar%20clicked%20%3D%20props.clicked%3B%5Cn%5Cn%2F%2F%20es6%5Cnconst%20%7B%20loading%2C%20clicked%20%7D%20%3D%20props%3B%5Cn%5Cn%2F%2F%20%E7%BB%99%E4%B8%80%E4%B8%AA%E9%BB%98%E8%AE%A4%E5%80%BC%EF%BC%8C%E5%BD%93props%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0loading%E6%97%B6%EF%BC%8Cloading%E5%B0%B1%E7%AD%89%E4%BA%8E%E8%AF%A5%E9%BB%98%E8%AE%A4%E5%80%BC%5Cnconst%20%7B%20loading%20%3D%20false%2C%20clicked%20%7D%20%3D%20props%3B%5Cn%5Cn%2F%2F%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%5Cn%2F%2F%20section1%5Cnimport%20Vue%20from%20'Vue'%3B%5Cn%5Cn%2F%2F%20section2%5Cnexport%20%7B%20default%20%7D%20from%20'.%2FButton'%3B%5Cn%5Cn%2F%2F%20section3%5Cnconst%20%7B%20click%2C%20loading%20%7D%20%3D%20this.props%3B%5Cnconst%20%7B%20isCheck%20%7D%20%3D%20this.state%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%226cc796d5%22%7D\"></card><p data-lake-id=\"u10ed4a7e\" id=\"u10ed4a7e\"><br></p><p data-lake-id=\"u6478af8f\" id=\"u6478af8f\"><span data-lake-id=\"u6b185ca4\" id=\"u6b185ca4\">##五、 函数默认参数</span></p><p data-lake-id=\"u99646438\" id=\"u99646438\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2Fes5%5Cnfunction%20add(x%2C%20y)%20%7B%5Cn%20%20%20%20var%20x%20%3D%20x%20%7C%7C%2020%3B%5Cn%20%20%20%20var%20y%20%3D%20y%20%7C%7C%2030%3B%5Cn%20%20%20%20return%20x%20%2B%20y%3B%5Cn%7D%5Cn%5Cnconsole.log(add())%3B%20%2F%2F%2050%5Cn%5Cn%2F%2Fes6%5Cnfunction%20add(x%20%3D%2020%2C%20y%20%3D%2030)%20%7B%5Cn%20%20%20%20return%20x%20%2B%20y%3B%5Cn%7D%5Cn%5Cnconsole.log(add())%3B%2F%2F50%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%226291315b%22%7D\"></card><p data-lake-id=\"ud532c424\" id=\"ud532c424\"><br></p><p data-lake-id=\"u9678fedf\" id=\"u9678fedf\"><span data-lake-id=\"u96b7ad22\" id=\"u96b7ad22\">##六、 展开运算符<br /></span><span data-lake-id=\"ue89b8179\" id=\"ue89b8179\">在ES6中用...来表示展开运算符，它可以将数组方法或者对象进行展开</span></p><p data-lake-id=\"u50a5777b\" id=\"u50a5777b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%221.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%5Cn%5Cn%2F%2F%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%90%88%E5%B9%B6%5Cnvar%20a%20%3D%20%5B1%2C%202%5D%3B%5Cnvar%20b%20%3D%20%5B0%2C%20...a%2C%203%5D%5Cnconsole.log(b)%20%2F%2F%20%5B0%2C%201%2C%202%2C%203%5D%5Cn%5Cn%2F%2F%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%86%E5%89%B2%5Cn%5Cnvar%20%5Ba%2C%20...b%5D%20%3D%20%5B0%2C%201%2C%202%5D%3B%5Cnconsole.log(b)%20%2F%2F%20%5B1%2C%202%5D%5Cn%5Cn%2F%2F%20%E6%95%B0%E7%BB%84%E7%9A%84%E6%8B%B7%E8%B4%9D%5Cn%5Cnvar%20a%20%3D%20%5B1%2C%202%5D%3B%5Cnvar%20b%20%3D%20%5B...a%5D%3B%5Cnconsole.log(b)%20%2F%2F%20%5B1%2C%202%5D%5Cn%5Cn2.%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8(%E6%8C%87%7Ba%3A%201%7D%E8%BF%99%E7%A7%8D%E5%AF%B9%E8%B1%A1%2C)%5Cn%5Cnlet%20%7B%20x%2C%20y%2C%20...z%20%7D%20%3D%20%7B%20x%3A%201%2C%20y%3A%202%2C%20a%3A%203%2C%20b%3A%204%20%7D%3B%5Cnconsole.log(z)%20%2F%2F%20%7Ba%3A%203%2C%20b%3A%204%7D%5Cn%5Cn3.%E8%A7%A3%E6%9E%90%E7%BB%93%E6%9E%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%5Cn%2F%2F%20%E5%BD%93%E4%B8%8D%E7%A1%AE%E5%AE%9Aprops%E5%88%B0%E5%BA%95%E8%BF%98%E6%9C%89%E5%A4%9A%E5%B0%91%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%BC%A0%E8%BF%9B%E6%9D%A5%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9D%A5%E5%A4%84%E7%90%86%E5%89%A9%E4%BD%99%E7%9A%84%E6%95%B0%E6%8D%AE%5Cnconst%20props%20%3D%20%7B%5Cn%20%20size%3A%201%2C%5Cn%20%20src%3A%20'xxxx'%2C%5Cn%20%20mode%3A%20'si'%5Cn%7D%5Cnconst%20%7B%20size%2C%20...others%20%7D%20%3D%20props%3B%5Cn%5Cnconsole.log(others)%2F%2F%7Bsrc%3A%20%5C%22xxxx%5C%22%2C%20mode%3A%20%5C%22si%5C%22%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d6e16b3d%22%7D\"></card><p data-lake-id=\"u02cb49f0\" id=\"u02cb49f0\"><br></p><p data-lake-id=\"uce0e510b\" id=\"uce0e510b\"><span data-lake-id=\"u20a247bb\" id=\"u20a247bb\">##七、对象字面量</span></p><p data-lake-id=\"u32126d18\" id=\"u32126d18\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%221.%E5%BD%93%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%80%BC%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8C%E5%90%8D%E6%97%B6%5Cn%5Cnconst%20name%20%3D%20'Jane'%3B%5Cnconst%20age%20%3D%2020%5Cn%5Cn%2F%2F%20es6%5Cnconst%20person%20%3D%20%7B%5Cn%20%20name%2C%5Cn%20%20age%5Cn%7D%5Cn%5Cn%2F%2F%20es5%5Cnvar%20person%20%3D%20%7B%5Cn%20%20name%3A%20name%2C%5Cn%20%20age%3A%20age%5Cn%7D%3B%5Cn%5Cn2.%E5%BD%93%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E6%8E%A5%E5%8F%A3%E6%97%B6%5Cnconst%20getName%20%3D%20()%20%3D%3E%20person.name%3B%5Cnconst%20getAge%20%3D%20()%20%3D%3E%20person.age%3B%5Cn%5Cn%2F%2F%20ES6%20modules%E7%9A%84%E6%96%B9%E5%BC%8F%5Cnexport%20default%20%7B%20getName%2C%20getAge%20%20%7D%5Cn%5Cn3.%E5%9C%A8%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%8B%AC%E5%8F%B7%E4%BD%9C%E4%B8%BA%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%A1%A8%E7%A4%BA%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B9%9F%E8%83%BD%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%5Cnconst%20name%20%3D%20'Jane'%3B%5Cnconst%20age%20%3D%2020%5Cn%5Cnconst%20person%20%3D%20%7B%5Cn%20%20%5Bname%5D%3A%20true%2C%5Cn%20%20%5Bage%5D%3A%20true%5Cn%7D%5Cnconsole.log(person)%20%2F%2F%20%7B20%3A%20true%2C%20Jane%3A%20true%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f90d8ace%22%7D\"></card><p data-lake-id=\"ub447b12c\" id=\"ub447b12c\"><br></p><p data-lake-id=\"u5da6c7a7\" id=\"u5da6c7a7\"><span data-lake-id=\"u3b06b72e\" id=\"u3b06b72e\">##八、Promise<br /></span><span data-lake-id=\"u37f74822\" id=\"u37f74822\">1、主要用于异步计算<br /></span><span data-lake-id=\"u1baf151e\" id=\"u1baf151e\">2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果<br /></span><span data-lake-id=\"ue10161df\" id=\"ue10161df\">3、可以在对象之间传递和操作promise，帮助我们处理队列</span></p><p data-lake-id=\"uc0a68560\" id=\"uc0a68560\"><br></p><p data-lake-id=\"u2e855c77\" id=\"u2e855c77\"><span data-lake-id=\"udd671fd1\" id=\"udd671fd1\">异步回调的问题：</span></p><p data-lake-id=\"u41ed6846\" id=\"u41ed6846\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%201.%20%E5%BE%88%E5%AE%B9%E6%98%93%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%EF%BC%8C%E5%89%A5%E5%A4%BA%E4%BA%86%E5%87%BD%E6%95%B0return%E7%9A%84%E8%83%BD%E5%8A%9B%20%5Cn%202.%20%E9%97%AE%E9%A2%98%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%EF%BC%8C%E4%BD%86%E6%98%AF%E9%9A%BE%E4%BB%A5%E8%AF%BB%E6%87%82%EF%BC%8C%5Cn%203.%20%E7%BB%B4%E6%8A%A4%E5%9B%B0%E9%9A%BE%20%E5%B5%8C%E5%A5%97%E5%B1%82%E6%AC%A1%E6%B7%B1%EF%BC%8C%E4%B8%8D%E5%A5%BD%E7%BB%B4%E6%8A%A4%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ca914f3f%22%7D\"></card><p data-lake-id=\"uced79881\" id=\"uced79881\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%24.ajax(%7B%5Cn%20%20%20%20url%3A%20'https%3A%2F%2Fwww.mock.com%2Fcity'%2C%5Cn%20%20%20%20success(resCity)%7B%5Cn%20%20%20%20%20%20%20%20let%20findCityId%20%3D%20resCity.filter(item%20%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(item.id%20%3D%3D%3D%20'c1')%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5B0%5D.id%5Cn%20%20%20%20%20%20%20%20%24.ajax(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E4%B8%AAapi%2C%E6%A0%B9%E6%8D%AE%E4%B8%8A%E4%B8%80%E4%B8%AA%E8%BF%94%E5%9B%9E%E7%9A%84%20findCityId%5Cn%20%20%20%20%20%20%20%20%20%20%20%20url%3A%20'https%3A%2F%2Fwww.mock.com%2Fposition-list'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20success(resPosition)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20findPostion%20%3D%20resPosition.filter(item%20%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(item.cityId%20%3D%3D%3D%20findCityId)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5B0%5D.id%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2259df8dfc%22%7D\"></card><p data-lake-id=\"u2efb7796\" id=\"u2efb7796\"><br></p><p data-lake-id=\"u195970f4\" id=\"u195970f4\"><span data-lake-id=\"u95823628\" id=\"u95823628\">Promise</span></p><p data-lake-id=\"ua146c8fb\" id=\"ua146c8fb\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%201.%20promise%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%E5%B0%B1%E6%98%AF%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E4%BF%9D%E5%AD%98%E7%8A%B6%E6%80%81%EF%BC%8C%E5%87%BD%E6%95%B0%E4%B8%8D%E5%8F%AF%E4%BB%A5%EF%BC%88%E9%97%AD%E5%8C%85%E9%99%A4%E5%A4%96%EF%BC%89%5Cn%202.%20%E5%B9%B6%E6%9C%AA%E5%89%A5%E5%A4%BA%E5%87%BD%E6%95%B0return%E7%9A%84%E8%83%BD%E5%8A%9B%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E9%9C%80%E5%B1%82%E5%B1%82%E4%BC%A0%E9%80%92callback%EF%BC%8C%E8%BF%9B%E8%A1%8C%E5%9B%9E%E8%B0%83%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%20%5Cn%203.%20%E5%AE%B9%E6%98%93%E7%90%86%E8%A7%A3%EF%BC%8C%E4%BE%BF%E4%BA%8E%E7%BB%B4%E6%8A%A4%5Cn%204.%20%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%AD%89%E5%BE%85%E5%90%88%E5%B9%B6%E4%BE%BF%E4%BA%8E%E8%A7%A3%E5%86%B3%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2234084438%22%7D\"></card><p data-lake-id=\"u56fa99f7\" id=\"u56fa99f7\"><br></p><ul list=\"u6971e534\"><li fid=\"u3569e37b\" data-lake-id=\"u9115d016\" id=\"u9115d016\"><span data-lake-id=\"u4dd068d3\" id=\"u4dd068d3\"> resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为           resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<br /></span><span data-lake-id=\"u1c175b12\" id=\"u1c175b12\">reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为<br /></span><span data-lake-id=\"ubc0ab89a\" id=\"ubc0ab89a\">rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。 </span></li><li fid=\"u3569e37b\" data-lake-id=\"u3f4e5ca5\" id=\"u3f4e5ca5\"><span data-lake-id=\"u8266c324\" id=\"u8266c324\"> promise有三个状态：<br /></span><span data-lake-id=\"u6c26180c\" id=\"u6c26180c\">1、pending[待定]初始状态<br /></span><span data-lake-id=\"ude9d7d61\" id=\"ude9d7d61\">2、fulfilled[实现]操作成功<br /></span><span data-lake-id=\"u5c9c83d7\" id=\"u5c9c83d7\">3、rejected[被否决]操作失败<br /></span><span data-lake-id=\"u8335adc1\" id=\"u8335adc1\">当promise状态发生改变，就会触发then()里的响应函数处理后续步骤； </span></li><li fid=\"u3569e37b\" data-lake-id=\"u67210baf\" id=\"u67210baf\"><span data-lake-id=\"uc7fefb3a\" id=\"uc7fefb3a\"> promise状态一经改变，不会再变。<br /></span><span data-lake-id=\"u6b4d6a1c\" id=\"u6b4d6a1c\">Promise对象的状态改变，只有两种可能：<br /></span><span data-lake-id=\"ud6738ab1\" id=\"ud6738ab1\">从pending变为fulfilled<br /></span><span data-lake-id=\"u5ffadb68\" id=\"u5ffadb68\">从pending变为rejected。                                                             这两种情况只要发生，状态就凝固了，不会再变了。 </span></li></ul><p data-lake-id=\"ub54ab37e\" id=\"ub54ab37e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%20%E5%88%86%E4%B8%A4%E6%AC%A1%EF%BC%8C%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%5Cnnew%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20resolve('hello')%5Cn%20%20%20%20%7D%2C%202000)%5Cn%20%20%7D).then(val%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(val)%20%2F%2F%20%20%E5%8F%82%E6%95%B0val%20%3D%20'hello'%5Cn%20%20%20%20return%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20resolve('world')%5Cn%20%20%20%20%20%20%7D%2C%202000)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D).then(val%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(val)%20%2F%2F%20%E5%8F%82%E6%95%B0val%20%3D%20'world'%5Cn%20%20%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2202dec14c%22%7D\"></card><p data-lake-id=\"ua3b60933\" id=\"ua3b60933\"><br></p><p data-lake-id=\"u23deadef\" id=\"u23deadef\"><span data-lake-id=\"ub0578f89\" id=\"ub0578f89\">错误处理<br /></span><span data-lake-id=\"uf1fe570b\" id=\"uf1fe570b\">1.throw new Error('错误信息').catch( () =&gt; {错误处理逻辑})</span></p><p data-lake-id=\"u0741c809\" id=\"u0741c809\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%20new%20Promise((resolve)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20setTimeout(%20()%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20resolve()%5Cn%20%20%20%20%20%20%20%7D%2C%202000)%5Cn%20%20%20%7D).then((val)%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('start')%5Cn%20%20%20%20%20%20%20throw%20new%20Error('test%20error')%5Cn%20%20%20%7D).catch(error%20%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('I%20catch'%2C%20error)%5Cn%20%20%20%7D).then(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('arrive%20here')%5Cn%20%20%20%7D).then(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('...%20and%20here')%5Cn%20%20%20%7D).catch(error%20%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('No%2C%20I%20catch'%2C%20error)%5Cn%20%20%20%7D)%5Cn%20%20%20%2F%2F%20%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C%5Cn%20%20%20start%5Cn%20%20%20I%20catch%20Error%3A%20test%20error%5Cn%20%20%20arrive%20here%5Cn%20%20%20...%20and%20here%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e0130756%22%7D\"></card><p data-lake-id=\"ub12d1383\" id=\"ub12d1383\"><br></p><p data-lake-id=\"u1486e013\" id=\"u1486e013\"><span data-lake-id=\"u519fe053\" id=\"u519fe053\">2.reject('错误信息').then(() =&gt; {}, () =&gt; {错误处理逻辑})</span></p><p data-lake-id=\"u3def418d\" id=\"u3def418d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20new%20Promise((resolve%2Creject)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(%20()%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20reject('bye')%5Cn%20%20%20%20%20%20%7D%2C%202000)%5Cn%20%20%7D).then((val)%3D%3E%7B%5Cn%20%20%20%20%20%20console.log(val)%5Cn%20%20%7D%2C(err)%20%3D%3E%7B%5Cn%20%20%20%20%20%20console.log('error%3A'%2C%20err)%20%2F%2F%20%20error%3Abye%5Cn%20%20%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%222e8b72d9%22%7D\"></card><p data-lake-id=\"ud7c037db\" id=\"ud7c037db\"><br></p><p data-lake-id=\"ufdbf7639\" id=\"ufdbf7639\"><span data-lake-id=\"u33c6448f\" id=\"u33c6448f\">Promise.all() 批量执行<br /></span><span data-lake-id=\"u855d7a8a\" id=\"u855d7a8a\">Promise.all([p1, p2,p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise<br /></span><span data-lake-id=\"ue72ae493\" id=\"ue72ae493\">它接收一个数组作为参数<br /></span><span data-lake-id=\"u165e1879\" id=\"u165e1879\">数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变<br /></span><span data-lake-id=\"u20f89f39\" id=\"u20f89f39\">当所有的子Promise都完成，该Promise完成，返回值是全部值得数组<br /></span><span data-lake-id=\"ucdda27a3\" id=\"ucdda27a3\">有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果</span></p><p data-lake-id=\"ucbb30ac4\" id=\"ucbb30ac4\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E5%88%87%E8%8F%9C%5Cn%20%20function%20cutUp()%7B%5Cn%20%20%20%20%20%20console.log('%E5%BC%80%E5%A7%8B%E5%88%87%E8%8F%9C%E3%80%82')%3B%5Cn%20%20%20%20%20%20var%20p%20%3D%20new%20Promise(function(resolve%2C%20reject)%7B%20%20%20%20%20%20%20%20%2F%2F%E5%81%9A%E4%B8%80%E4%BA%9B%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20%20%20%20%20%20%20setTimeout(function()%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log('%E5%88%87%E8%8F%9C%E5%AE%8C%E6%AF%95%EF%BC%81')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve('%E5%88%87%E5%A5%BD%E7%9A%84%E8%8F%9C')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20return%20p%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F%2F%E7%83%A7%E6%B0%B4%5Cn%20%20function%20boil()%7B%5Cn%20%20%20%20%20%20console.log('%E5%BC%80%E5%A7%8B%E7%83%A7%E6%B0%B4%E3%80%82')%3B%5Cn%20%20%20%20%20%20var%20p%20%3D%20new%20Promise(function(resolve%2C%20reject)%7B%20%20%20%20%20%20%20%20%2F%2F%E5%81%9A%E4%B8%80%E4%BA%9B%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20%20%20%20%20%20%20setTimeout(function()%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log('%E7%83%A7%E6%B0%B4%E5%AE%8C%E6%AF%95%EF%BC%81')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve('%E7%83%A7%E5%A5%BD%E7%9A%84%E6%B0%B4')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20return%20p%3B%5Cn%20%20%7D%5Cn%20%20Promise.all(%5BcutUp()%2C%20boil()%5D)%5Cn%20%20%20%20%20%20.then((result)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.log('%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%E5%AE%8C%E6%AF%95')%3B%5Cn%20%20%20%20%20%20%20%20%20%20console.log(result)%3B%5Cn%20%20%20%20%20%20%7D)%5Cn%5Cn%2F%2F%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%5Cn%E5%BC%80%E5%A7%8B%E5%88%87%E8%8F%9C%E3%80%82%5Cn%E5%BC%80%E5%A7%8B%E7%83%A7%E6%B0%B4%E3%80%82%5Cn%E5%88%87%E8%8F%9C%E5%AE%8C%E6%AF%95%EF%BC%81%5Cn%E7%83%A7%E6%B0%B4%E5%AE%8C%E6%AF%95%EF%BC%81%5Cn%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%E5%AE%8C%E6%AF%95%5Cn%5B%5C%22%E5%88%87%E5%A5%BD%E7%9A%84%E8%8F%9C%5C%22%2C%20%5C%22%E7%83%A7%E5%A5%BD%E7%9A%84%E6%B0%B4%5C%22%5D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2277377c4a%22%7D\"></card><p data-lake-id=\"u4d2e8354\" id=\"u4d2e8354\"><br></p><p data-lake-id=\"u57392117\" id=\"u57392117\"><span data-lake-id=\"u001396fc\" id=\"u001396fc\">Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成</span></p><p data-lake-id=\"u13183717\" id=\"u13183717\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20p1%20%3D%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20resolve('I%5C%5C%60m%20p1%20')%5Cn%20%20%20%20%20%20%7D%2C%201000)%5Cn%20%20%7D)%3B%5Cn%20%20let%20p2%20%3D%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20resolve('I%5C%5C%60m%20p2%20')%5Cn%20%20%20%20%20%20%7D%2C%202000)%5Cn%20%20%7D)%3B%5Cn%20%20Promise.race(%5Bp1%2C%20p2%5D)%5Cn%20%20%20%20%20%20.then(value%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.log(value)%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%2F%2F%20I%60m%20p1%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%220c9fbb3a%22%7D\"></card>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"5e9d502d\" id=\"5e9d502d\"><span data-lake-id=\"u172b10a9\" id=\"u172b10a9\">一、新的变量声明方式 let/const</span></h2><p data-lake-id=\"u2bbc9301\" id=\"u2bbc9301\"><br></p><p data-lake-id=\"ubf2f3302\" id=\"ubf2f3302\"><strong><span data-lake-id=\"u516e5707\" id=\"u516e5707\">let</span></strong><span data-lake-id=\"udfe3ac5c\" id=\"udfe3ac5c\"> 声明的变量只在let命令所在的代码块 （即JavaScript块级作用域)内有效</span></p><p data-lake-id=\"ua9c900ae\" id=\"ua9c900ae\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%7B%5Cn%20%20%20%20let%20_a%20%3D%2020%3B%5Cn%7D%5Cnconsole.log(a)%3B%20%20%2F%2F%20a%20is%20not%20defined%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e4b79aa0%22%7D\"></card><p data-lake-id=\"ua2bb505e\" id=\"ua2bb505e\"><br></p><p data-lake-id=\"uf73d0c2e\" id=\"uf73d0c2e\"><strong><span data-lake-id=\"u9f91d5a2\" id=\"u9f91d5a2\">const</span></strong><span data-lake-id=\"u69ce98aa\" id=\"u69ce98aa\">用于声明一个或多个常量，声明同时须进行初始化，一旦声明，常量值则不能再修改。但是使用const定义的常量对象或者常量数组是可变的，可对其对象或属性进行添加和修改等操作，但不能对其进行重新赋值。</span></p><p data-lake-id=\"u2d097fac\" id=\"u2d097fac\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20obDev%20%3D%20%7B%5Cn%20%20%20%20a%3A%2020%2C%5Cn%20%20%20%20b%3A%2030%5Cn%7D%5CnobDev.a%20%3D%2030%3B%5Cnconsole.log(obDev)%3B%20%2F%2F%20Object%20%7Ba%3A%2030%2C%20b%3A%2030%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fe8fb2f3%22%7D\"></card><p data-lake-id=\"ubd3d7e00\" id=\"ubd3d7e00\"><br></p><h2 data-lake-id=\"P1B84\" id=\"P1B84\"><span data-lake-id=\"u378572b4\" id=\"u378572b4\">二、 箭头函数的使用</span></h2><p data-lake-id=\"ubda28749\" id=\"ubda28749\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20es5%5Cnvar%20fn%20%3D%20function(a%2C%20b)%20%7B%5Cn%20%20%20%20return%20a%20%2B%20b%3B%5Cn%7D%5Cn%5Cn%2F%2F%20es6%20%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%86%99%E6%B3%95%EF%BC%8C%E5%BD%93%E5%87%BD%E6%95%B0%E7%9B%B4%E6%8E%A5%E8%A2%ABreturn%E6%97%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%E5%87%BD%E6%95%B0%E4%BD%93%E7%9A%84%E6%8B%AC%E5%8F%B7%5Cnconst%20fn%20%3D%20(a%2C%20b)%20%3D%3E%20a%20%2B%20b%3B%5Cn%5Cn%2F%2F%20es5%5Cnvar%20foo%20%3D%20function()%20%7B%5Cn%20%20%20%20var%20a%20%3D%2020%EF%BC%9B%5Cn%20%20%20%20var%20b%20%3D%2030%3B%5Cn%20%20%20%20return%20a%20%2B%20b%3B%5Cn%7D%5Cn%5Cn%2F%2F%20es6%5Cnconst%20foo%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20const%20a%20%3D%2020%3B%5Cn%20%20%20const%20b%20%3D%2030%3B%5Cn%20%20%20return%20a%20%2B%20b%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b4fff593%22%7D\"></card><p data-lake-id=\"u13040cc1\" id=\"u13040cc1\"><br></p><p data-lake-id=\"ub5dc1fa1\" id=\"ub5dc1fa1\"><span data-lake-id=\"ub0e08f4c\" id=\"ub0e08f4c\">其次还有一个至关重要的一点，那就是箭头函数中，没有this。如果你在箭头函数中使用了this，那么该this一定就是外层的this。</span></p><p data-lake-id=\"u33c148da\" id=\"u33c148da\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20person%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'tom'%2C%5Cn%20%20%20%20getName%3A%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.name%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E7%94%A8ES6%E7%9A%84%E5%86%99%E6%B3%95%E6%9D%A5%E9%87%8D%E6%9E%84%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cnconst%20person%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'tom'%2C%5Cn%20%20%20%20getName%3A%20()%20%3D%3E%20this.name%5Cn%7D%5Cn%5Cn%2F%2F%20%E4%BD%86%E6%98%AF%E7%BC%96%E8%AF%91%E7%BB%93%E6%9E%9C%E5%8D%B4%E6%98%AF%5Cnvar%20person%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'tom'%2C%5Cn%20%20%20%20getName%3A%20function%20getName()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20undefined.name%3B%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cn%2F%2F%E5%9C%A8ES6%E4%B8%AD%EF%BC%8C%E4%BC%9A%E9%BB%98%E8%AE%A4%E9%87%87%E7%94%A8%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%9B%A0%E6%AD%A4this%E4%B9%9F%E4%B8%8D%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%8C%87%E5%90%91window%E5%AF%B9%E8%B1%A1%E4%BA%86%EF%BC%8C%E8%80%8C%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E6%9C%AC%E8%BA%AB%E5%B9%B6%E6%B2%A1%E6%9C%89this%EF%BC%8C%E5%9B%A0%E6%AD%A4this%E5%B0%B1%E5%8F%AA%E8%83%BD%E6%98%AFundefined%2C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8es5%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E6%9D%A5%E4%BF%9D%E5%AD%98this%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22625b8f64%22%7D\"></card><p data-lake-id=\"u848883cb\" id=\"u848883cb\"><br></p><h2 data-lake-id=\"60cbf849\" id=\"60cbf849\"><span data-lake-id=\"u252199d5\" id=\"u252199d5\">三、模板字符串</span></h2><p data-lake-id=\"u189176c0\" id=\"u189176c0\"><br></p><p data-lake-id=\"u75bb80ca\" id=\"u75bb80ca\"><span data-lake-id=\"u0e895004\" id=\"u0e895004\">使用 ``(反引号) 将整个字符串包裹起来，而在其中使用 ${} 来包裹一个变量或者一个表达式。</span></p><p data-lake-id=\"ue7177a92\" id=\"ue7177a92\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20es6%5Cnconst%20a%20%3D%2020%3B%5Cnconst%20b%20%3D%2030%3B%5Cnconst%20string%20%3D%20%60%24%7Ba%7D%2B%24%7Bb%7D%3D%24%7Ba%2Bb%7D%60%3B%20%2F%2F%20%5C%2220%2B30%3D50%5C%22%5Cn%5Cn%2F%2F%20es5%5Cnvar%20a%20%3D%2020%3B%5Cnvar%20b%20%3D%2030%3B%5Cnvar%20string%20%3D%20a%20%2B%20%5C%22%2B%5C%22%20%2B%20b%20%2B%20%5C%22%3D%5C%22%20%2B%20(a%20%2B%20b)%3B%20%2F%2F%20%5C%2220%2B30%3D50%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22c51c818c%22%7D\"></card><p data-lake-id=\"uac5f3e7d\" id=\"uac5f3e7d\"><br></p><h2 data-lake-id=\"d05a95f5\" id=\"d05a95f5\"><span data-lake-id=\"u8333fb63\" id=\"u8333fb63\">四、 解析结构</span></h2><p data-lake-id=\"ub64a36ba\" id=\"ub64a36ba\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E9%A6%96%E5%85%88%E6%9C%89%E8%BF%99%E4%B9%88%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%5Cnconst%20props%20%3D%20%7B%5Cn%20%20%20%20loading%3A%20false%2C%5Cn%20%20%20%20clicked%3A%20true%2C%5Cn%7D%5Cn%2F%2F%20%E5%BD%93%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E5%8F%96%E5%BE%97%E5%85%B6%E4%B8%AD%E7%9A%842%E4%B8%AA%E5%80%BC%EF%BC%9Aloading%E4%B8%8Eclicked%E6%97%B6%EF%BC%9A%5Cn%5Cn%2F%2F%20es5%5Cnvar%20loading%20%3D%20props.loading%3B%5Cnvar%20clicked%20%3D%20props.clicked%3B%5Cn%5Cn%2F%2F%20es6%5Cnconst%20%7B%20loading%2C%20clicked%20%7D%20%3D%20props%3B%5Cn%5Cn%2F%2F%20%E7%BB%99%E4%B8%80%E4%B8%AA%E9%BB%98%E8%AE%A4%E5%80%BC%EF%BC%8C%E5%BD%93props%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0loading%E6%97%B6%EF%BC%8Cloading%E5%B0%B1%E7%AD%89%E4%BA%8E%E8%AF%A5%E9%BB%98%E8%AE%A4%E5%80%BC%5Cnconst%20%7B%20loading%20%3D%20false%2C%20clicked%20%7D%20%3D%20props%3B%5Cn%5Cn%2F%2F%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%5Cn%2F%2F%20section1%5Cnimport%20Vue%20from%20'Vue'%3B%5Cn%5Cn%2F%2F%20section2%5Cnexport%20%7B%20default%20%7D%20from%20'.%2FButton'%3B%5Cn%5Cn%2F%2F%20section3%5Cnconst%20%7B%20click%2C%20loading%20%7D%20%3D%20this.props%3B%5Cnconst%20%7B%20isCheck%20%7D%20%3D%20this.state%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%226cc796d5%22%7D\"></card><p data-lake-id=\"u10ed4a7e\" id=\"u10ed4a7e\"><br></p><p data-lake-id=\"u6478af8f\" id=\"u6478af8f\"><span data-lake-id=\"u6b185ca4\" id=\"u6b185ca4\">##五、 函数默认参数</span></p><p data-lake-id=\"u99646438\" id=\"u99646438\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2Fes5%5Cnfunction%20add(x%2C%20y)%20%7B%5Cn%20%20%20%20var%20x%20%3D%20x%20%7C%7C%2020%3B%5Cn%20%20%20%20var%20y%20%3D%20y%20%7C%7C%2030%3B%5Cn%20%20%20%20return%20x%20%2B%20y%3B%5Cn%7D%5Cn%5Cnconsole.log(add())%3B%20%2F%2F%2050%5Cn%5Cn%2F%2Fes6%5Cnfunction%20add(x%20%3D%2020%2C%20y%20%3D%2030)%20%7B%5Cn%20%20%20%20return%20x%20%2B%20y%3B%5Cn%7D%5Cn%5Cnconsole.log(add())%3B%2F%2F50%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%226291315b%22%7D\"></card><p data-lake-id=\"ud532c424\" id=\"ud532c424\"><br></p><p data-lake-id=\"u9678fedf\" id=\"u9678fedf\"><span data-lake-id=\"u96b7ad22\" id=\"u96b7ad22\">##六、 展开运算符<br /></span><span data-lake-id=\"ue89b8179\" id=\"ue89b8179\">在ES6中用...来表示展开运算符，它可以将数组方法或者对象进行展开</span></p><p data-lake-id=\"u50a5777b\" id=\"u50a5777b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%221.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%5Cn%5Cn%2F%2F%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%90%88%E5%B9%B6%5Cnvar%20a%20%3D%20%5B1%2C%202%5D%3B%5Cnvar%20b%20%3D%20%5B0%2C%20...a%2C%203%5D%5Cnconsole.log(b)%20%2F%2F%20%5B0%2C%201%2C%202%2C%203%5D%5Cn%5Cn%2F%2F%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%86%E5%89%B2%5Cn%5Cnvar%20%5Ba%2C%20...b%5D%20%3D%20%5B0%2C%201%2C%202%5D%3B%5Cnconsole.log(b)%20%2F%2F%20%5B1%2C%202%5D%5Cn%5Cn%2F%2F%20%E6%95%B0%E7%BB%84%E7%9A%84%E6%8B%B7%E8%B4%9D%5Cn%5Cnvar%20a%20%3D%20%5B1%2C%202%5D%3B%5Cnvar%20b%20%3D%20%5B...a%5D%3B%5Cnconsole.log(b)%20%2F%2F%20%5B1%2C%202%5D%5Cn%5Cn2.%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8(%E6%8C%87%7Ba%3A%201%7D%E8%BF%99%E7%A7%8D%E5%AF%B9%E8%B1%A1%2C)%5Cn%5Cnlet%20%7B%20x%2C%20y%2C%20...z%20%7D%20%3D%20%7B%20x%3A%201%2C%20y%3A%202%2C%20a%3A%203%2C%20b%3A%204%20%7D%3B%5Cnconsole.log(z)%20%2F%2F%20%7Ba%3A%203%2C%20b%3A%204%7D%5Cn%5Cn3.%E8%A7%A3%E6%9E%90%E7%BB%93%E6%9E%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%5Cn%2F%2F%20%E5%BD%93%E4%B8%8D%E7%A1%AE%E5%AE%9Aprops%E5%88%B0%E5%BA%95%E8%BF%98%E6%9C%89%E5%A4%9A%E5%B0%91%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%BC%A0%E8%BF%9B%E6%9D%A5%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9D%A5%E5%A4%84%E7%90%86%E5%89%A9%E4%BD%99%E7%9A%84%E6%95%B0%E6%8D%AE%5Cnconst%20props%20%3D%20%7B%5Cn%20%20size%3A%201%2C%5Cn%20%20src%3A%20'xxxx'%2C%5Cn%20%20mode%3A%20'si'%5Cn%7D%5Cnconst%20%7B%20size%2C%20...others%20%7D%20%3D%20props%3B%5Cn%5Cnconsole.log(others)%2F%2F%7Bsrc%3A%20%5C%22xxxx%5C%22%2C%20mode%3A%20%5C%22si%5C%22%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d6e16b3d%22%7D\"></card><p data-lake-id=\"u02cb49f0\" id=\"u02cb49f0\"><br></p><p data-lake-id=\"uce0e510b\" id=\"uce0e510b\"><span data-lake-id=\"u20a247bb\" id=\"u20a247bb\">##七、对象字面量</span></p><p data-lake-id=\"u32126d18\" id=\"u32126d18\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%221.%E5%BD%93%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%80%BC%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8C%E5%90%8D%E6%97%B6%5Cn%5Cnconst%20name%20%3D%20'Jane'%3B%5Cnconst%20age%20%3D%2020%5Cn%5Cn%2F%2F%20es6%5Cnconst%20person%20%3D%20%7B%5Cn%20%20name%2C%5Cn%20%20age%5Cn%7D%5Cn%5Cn%2F%2F%20es5%5Cnvar%20person%20%3D%20%7B%5Cn%20%20name%3A%20name%2C%5Cn%20%20age%3A%20age%5Cn%7D%3B%5Cn%5Cn2.%E5%BD%93%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E6%8E%A5%E5%8F%A3%E6%97%B6%5Cnconst%20getName%20%3D%20()%20%3D%3E%20person.name%3B%5Cnconst%20getAge%20%3D%20()%20%3D%3E%20person.age%3B%5Cn%5Cn%2F%2F%20ES6%20modules%E7%9A%84%E6%96%B9%E5%BC%8F%5Cnexport%20default%20%7B%20getName%2C%20getAge%20%20%7D%5Cn%5Cn3.%E5%9C%A8%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%8B%AC%E5%8F%B7%E4%BD%9C%E4%B8%BA%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%A1%A8%E7%A4%BA%E5%B1%9E%E6%80%A7%E5%90%8D%E4%B9%9F%E8%83%BD%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%5Cnconst%20name%20%3D%20'Jane'%3B%5Cnconst%20age%20%3D%2020%5Cn%5Cnconst%20person%20%3D%20%7B%5Cn%20%20%5Bname%5D%3A%20true%2C%5Cn%20%20%5Bage%5D%3A%20true%5Cn%7D%5Cnconsole.log(person)%20%2F%2F%20%7B20%3A%20true%2C%20Jane%3A%20true%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f90d8ace%22%7D\"></card><p data-lake-id=\"ub447b12c\" id=\"ub447b12c\"><br></p><p data-lake-id=\"u5da6c7a7\" id=\"u5da6c7a7\"><span data-lake-id=\"u3b06b72e\" id=\"u3b06b72e\">##八、Promise<br /></span><span data-lake-id=\"u37f74822\" id=\"u37f74822\">1、主要用于异步计算<br /></span><span data-lake-id=\"u1baf151e\" id=\"u1baf151e\">2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果<br /></span><span data-lake-id=\"ue10161df\" id=\"ue10161df\">3、可以在对象之间传递和操作promise，帮助我们处理队列</span></p><p data-lake-id=\"uc0a68560\" id=\"uc0a68560\"><br></p><p data-lake-id=\"u2e855c77\" id=\"u2e855c77\"><span data-lake-id=\"udd671fd1\" id=\"udd671fd1\">异步回调的问题：</span></p><p data-lake-id=\"u41ed6846\" id=\"u41ed6846\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%201.%20%E5%BE%88%E5%AE%B9%E6%98%93%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%EF%BC%8C%E5%89%A5%E5%A4%BA%E4%BA%86%E5%87%BD%E6%95%B0return%E7%9A%84%E8%83%BD%E5%8A%9B%20%5Cn%202.%20%E9%97%AE%E9%A2%98%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%EF%BC%8C%E4%BD%86%E6%98%AF%E9%9A%BE%E4%BB%A5%E8%AF%BB%E6%87%82%EF%BC%8C%5Cn%203.%20%E7%BB%B4%E6%8A%A4%E5%9B%B0%E9%9A%BE%20%E5%B5%8C%E5%A5%97%E5%B1%82%E6%AC%A1%E6%B7%B1%EF%BC%8C%E4%B8%8D%E5%A5%BD%E7%BB%B4%E6%8A%A4%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ca914f3f%22%7D\"></card><p data-lake-id=\"uced79881\" id=\"uced79881\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%24.ajax(%7B%5Cn%20%20%20%20url%3A%20'https%3A%2F%2Fwww.mock.com%2Fcity'%2C%5Cn%20%20%20%20success(resCity)%7B%5Cn%20%20%20%20%20%20%20%20let%20findCityId%20%3D%20resCity.filter(item%20%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(item.id%20%3D%3D%3D%20'c1')%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5B0%5D.id%5Cn%20%20%20%20%20%20%20%20%24.ajax(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E4%B8%AAapi%2C%E6%A0%B9%E6%8D%AE%E4%B8%8A%E4%B8%80%E4%B8%AA%E8%BF%94%E5%9B%9E%E7%9A%84%20findCityId%5Cn%20%20%20%20%20%20%20%20%20%20%20%20url%3A%20'https%3A%2F%2Fwww.mock.com%2Fposition-list'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20success(resPosition)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20findPostion%20%3D%20resPosition.filter(item%20%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(item.cityId%20%3D%3D%3D%20findCityId)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5B0%5D.id%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2259df8dfc%22%7D\"></card><p data-lake-id=\"u2efb7796\" id=\"u2efb7796\"><br></p><p data-lake-id=\"u195970f4\" id=\"u195970f4\"><span data-lake-id=\"u95823628\" id=\"u95823628\">Promise</span></p><p data-lake-id=\"ua146c8fb\" id=\"ua146c8fb\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%201.%20promise%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%E5%B0%B1%E6%98%AF%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E4%BF%9D%E5%AD%98%E7%8A%B6%E6%80%81%EF%BC%8C%E5%87%BD%E6%95%B0%E4%B8%8D%E5%8F%AF%E4%BB%A5%EF%BC%88%E9%97%AD%E5%8C%85%E9%99%A4%E5%A4%96%EF%BC%89%5Cn%202.%20%E5%B9%B6%E6%9C%AA%E5%89%A5%E5%A4%BA%E5%87%BD%E6%95%B0return%E7%9A%84%E8%83%BD%E5%8A%9B%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E9%9C%80%E5%B1%82%E5%B1%82%E4%BC%A0%E9%80%92callback%EF%BC%8C%E8%BF%9B%E8%A1%8C%E5%9B%9E%E8%B0%83%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%20%5Cn%203.%20%E5%AE%B9%E6%98%93%E7%90%86%E8%A7%A3%EF%BC%8C%E4%BE%BF%E4%BA%8E%E7%BB%B4%E6%8A%A4%5Cn%204.%20%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E7%AD%89%E5%BE%85%E5%90%88%E5%B9%B6%E4%BE%BF%E4%BA%8E%E8%A7%A3%E5%86%B3%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2234084438%22%7D\"></card><p data-lake-id=\"u56fa99f7\" id=\"u56fa99f7\"><br></p><ul list=\"u6971e534\"><li fid=\"u3569e37b\" data-lake-id=\"u9115d016\" id=\"u9115d016\"><span data-lake-id=\"u4dd068d3\" id=\"u4dd068d3\"> resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为           resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<br /></span><span data-lake-id=\"u1c175b12\" id=\"u1c175b12\">reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为<br /></span><span data-lake-id=\"ubc0ab89a\" id=\"ubc0ab89a\">rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。 </span></li><li fid=\"u3569e37b\" data-lake-id=\"u3f4e5ca5\" id=\"u3f4e5ca5\"><span data-lake-id=\"u8266c324\" id=\"u8266c324\"> promise有三个状态：<br /></span><span data-lake-id=\"u6c26180c\" id=\"u6c26180c\">1、pending[待定]初始状态<br /></span><span data-lake-id=\"ude9d7d61\" id=\"ude9d7d61\">2、fulfilled[实现]操作成功<br /></span><span data-lake-id=\"u5c9c83d7\" id=\"u5c9c83d7\">3、rejected[被否决]操作失败<br /></span><span data-lake-id=\"u8335adc1\" id=\"u8335adc1\">当promise状态发生改变，就会触发then()里的响应函数处理后续步骤； </span></li><li fid=\"u3569e37b\" data-lake-id=\"u67210baf\" id=\"u67210baf\"><span data-lake-id=\"uc7fefb3a\" id=\"uc7fefb3a\"> promise状态一经改变，不会再变。<br /></span><span data-lake-id=\"u6b4d6a1c\" id=\"u6b4d6a1c\">Promise对象的状态改变，只有两种可能：<br /></span><span data-lake-id=\"ud6738ab1\" id=\"ud6738ab1\">从pending变为fulfilled<br /></span><span data-lake-id=\"u5ffadb68\" id=\"u5ffadb68\">从pending变为rejected。                                                             这两种情况只要发生，状态就凝固了，不会再变了。 </span></li></ul><p data-lake-id=\"ub54ab37e\" id=\"ub54ab37e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%20%E5%88%86%E4%B8%A4%E6%AC%A1%EF%BC%8C%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%5Cnnew%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20resolve('hello')%5Cn%20%20%20%20%7D%2C%202000)%5Cn%20%20%7D).then(val%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(val)%20%2F%2F%20%20%E5%8F%82%E6%95%B0val%20%3D%20'hello'%5Cn%20%20%20%20return%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20resolve('world')%5Cn%20%20%20%20%20%20%7D%2C%202000)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D).then(val%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(val)%20%2F%2F%20%E5%8F%82%E6%95%B0val%20%3D%20'world'%5Cn%20%20%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2202dec14c%22%7D\"></card><p data-lake-id=\"ua3b60933\" id=\"ua3b60933\"><br></p><p data-lake-id=\"u23deadef\" id=\"u23deadef\"><span data-lake-id=\"ub0578f89\" id=\"ub0578f89\">错误处理<br /></span><span data-lake-id=\"uf1fe570b\" id=\"uf1fe570b\">1.throw new Error('错误信息').catch( () =&gt; {错误处理逻辑})</span></p><p data-lake-id=\"u0741c809\" id=\"u0741c809\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20%20new%20Promise((resolve)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20setTimeout(%20()%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20resolve()%5Cn%20%20%20%20%20%20%20%7D%2C%202000)%5Cn%20%20%20%7D).then((val)%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('start')%5Cn%20%20%20%20%20%20%20throw%20new%20Error('test%20error')%5Cn%20%20%20%7D).catch(error%20%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('I%20catch'%2C%20error)%5Cn%20%20%20%7D).then(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('arrive%20here')%5Cn%20%20%20%7D).then(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('...%20and%20here')%5Cn%20%20%20%7D).catch(error%20%3D%3E%7B%5Cn%20%20%20%20%20%20%20console.log('No%2C%20I%20catch'%2C%20error)%5Cn%20%20%20%7D)%5Cn%20%20%20%2F%2F%20%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C%5Cn%20%20%20start%5Cn%20%20%20I%20catch%20Error%3A%20test%20error%5Cn%20%20%20arrive%20here%5Cn%20%20%20...%20and%20here%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e0130756%22%7D\"></card><p data-lake-id=\"ub12d1383\" id=\"ub12d1383\"><br></p><p data-lake-id=\"u1486e013\" id=\"u1486e013\"><span data-lake-id=\"u519fe053\" id=\"u519fe053\">2.reject('错误信息').then(() =&gt; {}, () =&gt; {错误处理逻辑})</span></p><p data-lake-id=\"u3def418d\" id=\"u3def418d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20new%20Promise((resolve%2Creject)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(%20()%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20reject('bye')%5Cn%20%20%20%20%20%20%7D%2C%202000)%5Cn%20%20%7D).then((val)%3D%3E%7B%5Cn%20%20%20%20%20%20console.log(val)%5Cn%20%20%7D%2C(err)%20%3D%3E%7B%5Cn%20%20%20%20%20%20console.log('error%3A'%2C%20err)%20%2F%2F%20%20error%3Abye%5Cn%20%20%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%222e8b72d9%22%7D\"></card><p data-lake-id=\"ud7c037db\" id=\"ud7c037db\"><br></p><p data-lake-id=\"ufdbf7639\" id=\"ufdbf7639\"><span data-lake-id=\"u33c6448f\" id=\"u33c6448f\">Promise.all() 批量执行<br /></span><span data-lake-id=\"u855d7a8a\" id=\"u855d7a8a\">Promise.all([p1, p2,p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise<br /></span><span data-lake-id=\"ue72ae493\" id=\"ue72ae493\">它接收一个数组作为参数<br /></span><span data-lake-id=\"u165e1879\" id=\"u165e1879\">数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变<br /></span><span data-lake-id=\"u20f89f39\" id=\"u20f89f39\">当所有的子Promise都完成，该Promise完成，返回值是全部值得数组<br /></span><span data-lake-id=\"ucdda27a3\" id=\"ucdda27a3\">有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果</span></p><p data-lake-id=\"ucbb30ac4\" id=\"ucbb30ac4\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E5%88%87%E8%8F%9C%5Cn%20%20function%20cutUp()%7B%5Cn%20%20%20%20%20%20console.log('%E5%BC%80%E5%A7%8B%E5%88%87%E8%8F%9C%E3%80%82')%3B%5Cn%20%20%20%20%20%20var%20p%20%3D%20new%20Promise(function(resolve%2C%20reject)%7B%20%20%20%20%20%20%20%20%2F%2F%E5%81%9A%E4%B8%80%E4%BA%9B%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20%20%20%20%20%20%20setTimeout(function()%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log('%E5%88%87%E8%8F%9C%E5%AE%8C%E6%AF%95%EF%BC%81')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve('%E5%88%87%E5%A5%BD%E7%9A%84%E8%8F%9C')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20return%20p%3B%5Cn%20%20%7D%5Cn%5Cn%20%20%2F%2F%E7%83%A7%E6%B0%B4%5Cn%20%20function%20boil()%7B%5Cn%20%20%20%20%20%20console.log('%E5%BC%80%E5%A7%8B%E7%83%A7%E6%B0%B4%E3%80%82')%3B%5Cn%20%20%20%20%20%20var%20p%20%3D%20new%20Promise(function(resolve%2C%20reject)%7B%20%20%20%20%20%20%20%20%2F%2F%E5%81%9A%E4%B8%80%E4%BA%9B%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20%20%20%20%20%20%20setTimeout(function()%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log('%E7%83%A7%E6%B0%B4%E5%AE%8C%E6%AF%95%EF%BC%81')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve('%E7%83%A7%E5%A5%BD%E7%9A%84%E6%B0%B4')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20return%20p%3B%5Cn%20%20%7D%5Cn%20%20Promise.all(%5BcutUp()%2C%20boil()%5D)%5Cn%20%20%20%20%20%20.then((result)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.log('%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%E5%AE%8C%E6%AF%95')%3B%5Cn%20%20%20%20%20%20%20%20%20%20console.log(result)%3B%5Cn%20%20%20%20%20%20%7D)%5Cn%5Cn%2F%2F%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%5Cn%E5%BC%80%E5%A7%8B%E5%88%87%E8%8F%9C%E3%80%82%5Cn%E5%BC%80%E5%A7%8B%E7%83%A7%E6%B0%B4%E3%80%82%5Cn%E5%88%87%E8%8F%9C%E5%AE%8C%E6%AF%95%EF%BC%81%5Cn%E7%83%A7%E6%B0%B4%E5%AE%8C%E6%AF%95%EF%BC%81%5Cn%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%E5%AE%8C%E6%AF%95%5Cn%5B%5C%22%E5%88%87%E5%A5%BD%E7%9A%84%E8%8F%9C%5C%22%2C%20%5C%22%E7%83%A7%E5%A5%BD%E7%9A%84%E6%B0%B4%5C%22%5D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2277377c4a%22%7D\"></card><p data-lake-id=\"u4d2e8354\" id=\"u4d2e8354\"><br></p><p data-lake-id=\"u57392117\" id=\"u57392117\"><span data-lake-id=\"u001396fc\" id=\"u001396fc\">Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成</span></p><p data-lake-id=\"u13183717\" id=\"u13183717\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20p1%20%3D%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20resolve('I%5C%5C%60m%20p1%20')%5Cn%20%20%20%20%20%20%7D%2C%201000)%5Cn%20%20%7D)%3B%5Cn%20%20let%20p2%20%3D%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20resolve('I%5C%5C%60m%20p2%20')%5Cn%20%20%20%20%20%20%7D%2C%202000)%5Cn%20%20%7D)%3B%5Cn%20%20Promise.race(%5Bp1%2C%20p2%5D)%5Cn%20%20%20%20%20%20.then(value%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.log(value)%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%2F%2F%20I%60m%20p1%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%220c9fbb3a%22%7D\"></card>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-22T05:17:30.000Z",
    "deleted_at": null,
    "created_at": "2021-12-22T05:16:28.000Z",
    "updated_at": "2021-12-22T05:17:30.000Z",
    "published_at": "2021-12-22T05:17:30.000Z",
    "first_published_at": "2021-12-22T05:17:30.000Z",
    "word_count": 2102,
    "cover": null,
    "description": "一、新的变量声明方式 let/constlet 声明的变量只在let命令所在的代码块 （即JavaScript块级作用域)内有效{     let _a = 20; } console.log(a);  // a is not definedconst用于声明一个或多个常量，声明同时须进行初始...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 63204478,
    "slug": "ob2y8t",
    "title": "D3可视化，SVG介绍",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-22T05:31:44.747Z",
      "updated_at": "2021-12-22T05:31:44.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-22T05:28:17.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-22T05:28:17.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"6a09cca2\"></a>\n## D3可视化\n\n\n<a name=\"1f12a104\"></a>\n### 选择集\n\n<br />D3是实现数据可视化，仍然离不开传统DOM的选择和操作，也因此，D3提供了类似Jquery的DOM操作指令：<br />\n\n- d3.select：选择第一个指定元素\n- d3.selectAll ： 选择所有的元素\n\n\n\n```\nconst svg = d3.select('svg') //选择svg\nconst p = svg.selectAll('p') //选择svg下所有的p标签\n```\n\n<br />当然，可以使用#id 以及 .class 对id和类进行选择<br />\n\n<a name=\"0e16902c\"></a>\n### 查看状态\n\n<br />d3.select和d3.selectAll返回的都是选择集，添加、删除以及修改都需要用到选择集，查看状态有三个函数可以使用：<br />\n\n- selection.empty() 选择集为空，返回true，否则返回false\n- selection.node() 返回第一个非空元素，如果选择集为空，返回null\n- selection.size() 返回选择集中的元素个数\n\n\n\n<a name=\"799c504a\"></a>\n### 设定和获取属性\n\n<br />使用select或selectAll选择后，可以通过attr获取和设定属性，可以使用append方法添加元素<br />\n\n```\nconst svg = select('svg');\nsvg.append('circle')\n.attr('r','30')\n```\n\n\n<a name=\"2dbd7c1c\"></a>\n### SVG内置图形\n\n\n<a name=\"4adf1a32\"></a>\n#### 1、矩形\n\n\n- rect 元素的 width 和 height 属性可定义矩形的高度和宽度\n- x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）\n- y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）\n- rx 和 ry 属性可使矩形产生圆角\n- style 属性用来定义 CSS 属性\n- CSS 的 fill 属性定义矩形的填充颜色（rgb 值、颜色名或者十六进制值）\n- CSS 的 stroke-width 属性定义矩形边框的宽度\n- CSS 的 stroke 属性定义矩形边框的颜色\n- CSS opacity 属性用于定义了元素的透明值 (范围: 0 到 1)。\n- CSS 的 fill-opacity 属性定义填充颜色透明度（合法的范围是：0 - 1）\n- CSS 的 stroke-opacity 属性定义笔触颜色的透明度（合法的范围是：0 - 1）\n\n\n\n<a name=\"5127e051\"></a>\n#### 2、圆形\n\n\n- cx和cy属性定义圆点的x和y坐标。如果省略cx和cy，圆的中心会被设置为(0, 0)\n- r属性定义圆的半径\n\n\n\n<a name=\"f8cd969d\"></a>\n#### 3、椭圆\n\n\n- CX属性定义的椭圆中心的x坐标\n- CY属性定义的椭圆中心的y坐标\n- RX属性定义的水平半径\n- RY属性定义的垂直半径\n\n\n\n<a name=\"08534a0e\"></a>\n#### 4、直线\n\n\n- x1 属性在 x 轴定义线条的开始\n- y1 属性在 y 轴定义线条的开始\n- x2 属性在 x 轴定义线条的结束\n- y2 属性在 y 轴定义线条的结束\n\n\n\n<a name=\"cafb2d86\"></a>\n#### 5、曲线\n\n\n- points 属性定义多边形每个角的 x 和 y 坐标\n- 是用于创建任何只有直线的形状\n\n\n\n<a name=\"5962e2c2\"></a>\n#### 6、多边形\n\n\n- points 属性定义多边形每个角的 x 和 y 坐标\n\n\n\n<a name=\"f7327da1\"></a>\n#### 7、路径\n\n\n- M = moveto(M X,Y) ：将画笔移动到指定的坐标位置\n- L = lineto(L X,Y) ：画直线到指定的坐标位置\n- H = horizontal lineto(H X)：画水平线到指定的X坐标位置\n- V = vertical lineto(V Y)：画垂直线到指定的Y坐标位置\n- C = curveto(C X1,Y1,X2,Y2,ENDX,ENDY)：三次贝赛曲线\n- S = smooth curveto(x2 y2 x y)光滑三次贝塞尔曲线到\n- Q = quadratic Belzier curve(Q X,Y,ENDX,ENDY)：二次贝赛曲线\n- T = smooth quadratic Belzier curveto(T ENDX,ENDY)：光滑二次贝塞尔曲线到\n- A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：arc椭圆弧\n- Z = closepath()：关闭路径<br />`如：M　起点X，起点Y　L（直线）终点X，终点Y　H（水平线）终点X　V（垂直线）终点Y M 10,20 L 80,50 M 10,20 V 50 M 10,20 H 90`\n\n\n<br />如果指令字母是大写的，例如M, 则表示坐标位置是绝对位置；如果指令字母小写的，例如m, 则表示坐标位置是相对位置。<br />\n<br />####8、文本<br />\n\n- x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）\n- y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）<br />`<text x=\"10\" y=\"15\">Text travels along any path that you define for it.</text>`<br />####9、容器元素用法\n- 链接元素<br />svg的链接元素 a和html的链接元素a很相似，都是指向一个超链接。<br />在svg的a元素中，可以包含任何的形状<br />注意： 在获取svg的a元素时，为了区分html的a元素，要加命名空间<br />`//css @namespace svg url(http://www.w3.org/2000/svg); svg|a {}`\n- defs<br />defs元素通常用来存储在后续将会用到的图像，其 defs中的图像，不会直接呈现，必须在后续通过其他元素 引用才能呈现。<br />相当于在js中，封装的一个方法，供其他地方调用。 在这里，是封装了一段html，供后续的html调用。<br />一般情况下，defs中用来定义过滤，渐变，填充(pattern)等效果。\n- g<br />元素是一个用于对其他SVG元素进行分组的容器。<br />在元素上设置的属性和变换，会统一影响g分组中的所有元素，会把g元素当成一个整体处理。<br />和前面的defs类似，只是中的元素会直接作为一个整体呈现，可以不需要引用就能呈现，当然也能被use复制。\n- mask<br />mask元素定义了一个alpha通道，用于将当前对象合成到背景中，在其他元素上通过mask属性来引用。<br />其本身不会呈现，必须被其他元素引用才能呈现。\n- marker<br />marker元素定义了用于在给定的、、或元素上绘制箭头或 多点标记 的图形。<br />在元素上使用 marker-start, marker-mid, 和 marker-end 属性，来引用marker元素。<br />marker有如下属性:<br />markerHeight: 定义marker元素的高度<br />markerWidth: 定义marker元素的宽度<br />markerUnits: 该属性为markerWidth、markerHeight以及marker的内容 定义了坐标系统。 userSpaceOnUse|strokeWidth<br />orient：定义marker相对于寄宿元素的方向，值有auto|auto start-reverse|。<br />refX: marker元素相对于X轴的偏移。和正常坐标系相反，正值向左，负值向右。<br />refY：marker元素相对于Y轴的偏移。和正常坐标系相反，正值向上，负值向下。<br />viewBox： 当前marker片段定义SVG视图端口的边界。<br />preserveAspectRatio：定义了如果marker片段嵌入到具有不同纵横比的容器中，则必须如何对其进行变形。<br />注意：<br />如果一个元素定义了marker-start，那么就在开头的位置添加marker，<br />如果一个元素定义了marker-mid，那么就在所有中间位置添加marker，<br />如果一个元素定义了marker-end，那么就在结尾位置添加marker。\n\n\n<br />可以定义多个，那么也就添加多个。<br />####10、其它<br />\n\n-  1、image图像<br />x表示图像左上角在水平方向的位移，<br />y表示图像做商检在竖直方向的位移，<br />height，width分别为image的高度和宽度。<br />注意：默认图像不会缩放，即使定义了height，width，也不会缩放铺满剩余区域 \n-  2、stroke属性<br />SVG提供了一个范围广泛stroke 属性。这几个属性多用来定义线条的样式。<br />stroke. 线条颜色<br />stroke-width 线条粗细<br />stroke-linecap 线条闭合方式<br />stroke-dasharray 线条虚线数值组 \n-  3、use<br />该元素从SVG文档中获取节点，并在其他位置复制它们。<br />当use复制其他元素后，还能对复制的元素进行属性的覆盖。<br />x, y, width, height，href这几个属性，不管源 元素是否有设置，都可以覆盖。<br />而其他属性，如果源 元素已经设置，则无法覆盖，如果没有设置，则可以再use上设置。<br />可以看到设置的x属性覆盖成功了，第二个use的fill也设置成功了，但是第三个use 的stroke没有变成红色，因为circle已经指定了，所以无法覆盖。 \n-  4、事件<br />最常用的是 onclick、onactivate、onmousedown、onmouseup、onmouseover、onmousemove、onmouseout、onload、onresize、 onunload 和 onrepeat。 \n-  5、svg<br />svg所定义的片段， 不管在独立的svg文件中，还是嵌入html中，都拥有独立的视口和坐标系统。<br />svg元素有如下专有属性:<br />version：指明 SVG 文档遵循规范， 值为1.0 | 1.1<br />x：起始 横坐标<br />y：起始 纵坐标<br />width：svg元素的宽度<br />height：svg元素的高度<br />preserveAspectRatio：是否强制进行统一缩放.<br />viewBox：允许指定一个给定的一组图形伸展以适应特定的容器元素。 \n-  6、视口 viewbox<br />viewBox属性的值是一个包含4个参数的列表 min-x, min-y, width and height<br />下面的不设置 viewbox的情形:<br />矩形起始于 svg的（0,0）位置，长度为100px，宽度为150px<br />当设置viewbo后<br />可以看到，不仅变大了，而且还向右下角 平移了。<br />为什么呢？ \n-  我们可以看到 viewBox的值为\"-5 -5 100 150\"，（-5 -5）分别表示 最小的x和最小的y，也就是说，左上角原本的（0,0）现在等价于(-5,-5), 那么如果想要时rect 还是在原来的左上角，那么才可以，而如果设置为<br />就会向右向下平移5px。 \n-  然后我们看到viewbox后两个是100 150，分别表示 svg的宽度和高度，即100等同于svg定义的宽度500,150等同于svg定义的高度600，那么在svg容器里面的rect 上设置 width为100，等同于500，高为150，等同于600，这样会有个问题，就是本来rect的长宽比为100:150，而通过viewbox设置后，长宽比会变化， 所以svg默认 即使viewbox宽度比变化了，但是viewbox容器里的元素的长宽比不会变化，会以缩放较小的那个为准。<br />所以我们可以看到 viewbox相当于 一个比例尺，对原本的svg的位置和宽高 做了相同比例的缩放。<br />一共有下面的5个元素可以设置 viewbox:<br />`<marker>, <pattern>, <svg>, <symbol>, 和 <view>`<br />###总结 \n-  1、svg遵循XML文档格式，所以所以我们能给其定义css、但同时要注意其每个图形独特的属性。 \n-  2、内置图形在同一位置的时候，默认的是空间向上重叠，可用z-index来理解，后来者居上。 \n-  3、我们能用js获取SVG的DOM，并对其进行相关操作。 \n-  4、定义和分组这两个概念，入手相对较难理解，但对使用D3.js开发的时候很有帮助。定义能减少我们的工作量，提高代码复用率。分组方便我们统一管理SVG中的内置图形。 \n-  5、SVG内置图形都有自己的坐标属性，正是这些属性，我们才能对内置图形做位置变化。 \n-  6、动画，SVG有自己的动画定义，但是个人不建议使用，因为我们完全可以使用CSS的动画来实现同样的功能。 \n",
    "body_draft": "<a name=\"6a09cca2\"></a>\n## D3可视化\n\n\n<a name=\"1f12a104\"></a>\n### 选择集\n\n<br />D3是实现数据可视化，仍然离不开传统DOM的选择和操作，也因此，D3提供了类似Jquery的DOM操作指令：<br />\n\n- d3.select：选择第一个指定元素\n- d3.selectAll ： 选择所有的元素\n\n\n\n```\nconst svg = d3.select('svg') //选择svg\nconst p = svg.selectAll('p') //选择svg下所有的p标签\n```\n\n<br />当然，可以使用#id 以及 .class 对id和类进行选择<br />\n\n<a name=\"0e16902c\"></a>\n### 查看状态\n\n<br />d3.select和d3.selectAll返回的都是选择集，添加、删除以及修改都需要用到选择集，查看状态有三个函数可以使用：<br />\n\n- selection.empty() 选择集为空，返回true，否则返回false\n- selection.node() 返回第一个非空元素，如果选择集为空，返回null\n- selection.size() 返回选择集中的元素个数\n\n\n\n<a name=\"799c504a\"></a>\n### 设定和获取属性\n\n<br />使用select或selectAll选择后，可以通过attr获取和设定属性，可以使用append方法添加元素<br />\n\n```\nconst svg = select('svg');\nsvg.append('circle')\n.attr('r','30')\n```\n\n\n<a name=\"2dbd7c1c\"></a>\n### SVG内置图形\n\n\n<a name=\"4adf1a32\"></a>\n#### 1、矩形\n\n\n- rect 元素的 width 和 height 属性可定义矩形的高度和宽度\n- x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）\n- y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）\n- rx 和 ry 属性可使矩形产生圆角\n- style 属性用来定义 CSS 属性\n- CSS 的 fill 属性定义矩形的填充颜色（rgb 值、颜色名或者十六进制值）\n- CSS 的 stroke-width 属性定义矩形边框的宽度\n- CSS 的 stroke 属性定义矩形边框的颜色\n- CSS opacity 属性用于定义了元素的透明值 (范围: 0 到 1)。\n- CSS 的 fill-opacity 属性定义填充颜色透明度（合法的范围是：0 - 1）\n- CSS 的 stroke-opacity 属性定义笔触颜色的透明度（合法的范围是：0 - 1）\n\n\n\n<a name=\"5127e051\"></a>\n#### 2、圆形\n\n\n- cx和cy属性定义圆点的x和y坐标。如果省略cx和cy，圆的中心会被设置为(0, 0)\n- r属性定义圆的半径\n\n\n\n<a name=\"f8cd969d\"></a>\n#### 3、椭圆\n\n\n- CX属性定义的椭圆中心的x坐标\n- CY属性定义的椭圆中心的y坐标\n- RX属性定义的水平半径\n- RY属性定义的垂直半径\n\n\n\n<a name=\"08534a0e\"></a>\n#### 4、直线\n\n\n- x1 属性在 x 轴定义线条的开始\n- y1 属性在 y 轴定义线条的开始\n- x2 属性在 x 轴定义线条的结束\n- y2 属性在 y 轴定义线条的结束\n\n\n\n<a name=\"cafb2d86\"></a>\n#### 5、曲线\n\n\n- points 属性定义多边形每个角的 x 和 y 坐标\n- 是用于创建任何只有直线的形状\n\n\n\n<a name=\"5962e2c2\"></a>\n#### 6、多边形\n\n\n- points 属性定义多边形每个角的 x 和 y 坐标\n\n\n\n<a name=\"f7327da1\"></a>\n#### 7、路径\n\n\n- M = moveto(M X,Y) ：将画笔移动到指定的坐标位置\n- L = lineto(L X,Y) ：画直线到指定的坐标位置\n- H = horizontal lineto(H X)：画水平线到指定的X坐标位置\n- V = vertical lineto(V Y)：画垂直线到指定的Y坐标位置\n- C = curveto(C X1,Y1,X2,Y2,ENDX,ENDY)：三次贝赛曲线\n- S = smooth curveto(x2 y2 x y)光滑三次贝塞尔曲线到\n- Q = quadratic Belzier curve(Q X,Y,ENDX,ENDY)：二次贝赛曲线\n- T = smooth quadratic Belzier curveto(T ENDX,ENDY)：光滑二次贝塞尔曲线到\n- A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：arc椭圆弧\n- Z = closepath()：关闭路径<br />`如：M　起点X，起点Y　L（直线）终点X，终点Y　H（水平线）终点X　V（垂直线）终点Y M 10,20 L 80,50 M 10,20 V 50 M 10,20 H 90`\n\n\n<br />如果指令字母是大写的，例如M, 则表示坐标位置是绝对位置；如果指令字母小写的，例如m, 则表示坐标位置是相对位置。<br />\n<br />####8、文本<br />\n\n- x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）\n- y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）<br />`<text x=\"10\" y=\"15\">Text travels along any path that you define for it.</text>`<br />####9、容器元素用法\n- 链接元素<br />svg的链接元素 a和html的链接元素a很相似，都是指向一个超链接。<br />在svg的a元素中，可以包含任何的形状<br />注意： 在获取svg的a元素时，为了区分html的a元素，要加命名空间<br />`//css @namespace svg url(http://www.w3.org/2000/svg); svg|a {}`\n- defs<br />defs元素通常用来存储在后续将会用到的图像，其 defs中的图像，不会直接呈现，必须在后续通过其他元素 引用才能呈现。<br />相当于在js中，封装的一个方法，供其他地方调用。 在这里，是封装了一段html，供后续的html调用。<br />一般情况下，defs中用来定义过滤，渐变，填充(pattern)等效果。\n- g<br />元素是一个用于对其他SVG元素进行分组的容器。<br />在元素上设置的属性和变换，会统一影响g分组中的所有元素，会把g元素当成一个整体处理。<br />和前面的defs类似，只是中的元素会直接作为一个整体呈现，可以不需要引用就能呈现，当然也能被use复制。\n- mask<br />mask元素定义了一个alpha通道，用于将当前对象合成到背景中，在其他元素上通过mask属性来引用。<br />其本身不会呈现，必须被其他元素引用才能呈现。\n- marker<br />marker元素定义了用于在给定的、、或元素上绘制箭头或 多点标记 的图形。<br />在元素上使用 marker-start, marker-mid, 和 marker-end 属性，来引用marker元素。<br />marker有如下属性:<br />markerHeight: 定义marker元素的高度<br />markerWidth: 定义marker元素的宽度<br />markerUnits: 该属性为markerWidth、markerHeight以及marker的内容 定义了坐标系统。 userSpaceOnUse|strokeWidth<br />orient：定义marker相对于寄宿元素的方向，值有auto|auto start-reverse|。<br />refX: marker元素相对于X轴的偏移。和正常坐标系相反，正值向左，负值向右。<br />refY：marker元素相对于Y轴的偏移。和正常坐标系相反，正值向上，负值向下。<br />viewBox： 当前marker片段定义SVG视图端口的边界。<br />preserveAspectRatio：定义了如果marker片段嵌入到具有不同纵横比的容器中，则必须如何对其进行变形。<br />注意：<br />如果一个元素定义了marker-start，那么就在开头的位置添加marker，<br />如果一个元素定义了marker-mid，那么就在所有中间位置添加marker，<br />如果一个元素定义了marker-end，那么就在结尾位置添加marker。\n\n\n<br />可以定义多个，那么也就添加多个。<br />####10、其它<br />\n\n-  1、image图像<br />x表示图像左上角在水平方向的位移，<br />y表示图像做商检在竖直方向的位移，<br />height，width分别为image的高度和宽度。<br />注意：默认图像不会缩放，即使定义了height，width，也不会缩放铺满剩余区域 \n-  2、stroke属性<br />SVG提供了一个范围广泛stroke 属性。这几个属性多用来定义线条的样式。<br />stroke. 线条颜色<br />stroke-width 线条粗细<br />stroke-linecap 线条闭合方式<br />stroke-dasharray 线条虚线数值组 \n-  3、use<br />该元素从SVG文档中获取节点，并在其他位置复制它们。<br />当use复制其他元素后，还能对复制的元素进行属性的覆盖。<br />x, y, width, height，href这几个属性，不管源 元素是否有设置，都可以覆盖。<br />而其他属性，如果源 元素已经设置，则无法覆盖，如果没有设置，则可以再use上设置。<br />可以看到设置的x属性覆盖成功了，第二个use的fill也设置成功了，但是第三个use 的stroke没有变成红色，因为circle已经指定了，所以无法覆盖。 \n-  4、事件<br />最常用的是 onclick、onactivate、onmousedown、onmouseup、onmouseover、onmousemove、onmouseout、onload、onresize、 onunload 和 onrepeat。 \n-  5、svg<br />svg所定义的片段， 不管在独立的svg文件中，还是嵌入html中，都拥有独立的视口和坐标系统。<br />svg元素有如下专有属性:<br />version：指明 SVG 文档遵循规范， 值为1.0 | 1.1<br />x：起始 横坐标<br />y：起始 纵坐标<br />width：svg元素的宽度<br />height：svg元素的高度<br />preserveAspectRatio：是否强制进行统一缩放.<br />viewBox：允许指定一个给定的一组图形伸展以适应特定的容器元素。 \n-  6、视口 viewbox<br />viewBox属性的值是一个包含4个参数的列表 min-x, min-y, width and height<br />下面的不设置 viewbox的情形:<br />矩形起始于 svg的（0,0）位置，长度为100px，宽度为150px<br />当设置viewbo后<br />可以看到，不仅变大了，而且还向右下角 平移了。<br />为什么呢？ \n-  我们可以看到 viewBox的值为\"-5 -5 100 150\"，（-5 -5）分别表示 最小的x和最小的y，也就是说，左上角原本的（0,0）现在等价于(-5,-5), 那么如果想要时rect 还是在原来的左上角，那么才可以，而如果设置为<br />就会向右向下平移5px。 \n-  然后我们看到viewbox后两个是100 150，分别表示 svg的宽度和高度，即100等同于svg定义的宽度500,150等同于svg定义的高度600，那么在svg容器里面的rect 上设置 width为100，等同于500，高为150，等同于600，这样会有个问题，就是本来rect的长宽比为100:150，而通过viewbox设置后，长宽比会变化， 所以svg默认 即使viewbox宽度比变化了，但是viewbox容器里的元素的长宽比不会变化，会以缩放较小的那个为准。<br />所以我们可以看到 viewbox相当于 一个比例尺，对原本的svg的位置和宽高 做了相同比例的缩放。<br />一共有下面的5个元素可以设置 viewbox:<br />`<marker>, <pattern>, <svg>, <symbol>, 和 <view>`<br />###总结 \n-  1、svg遵循XML文档格式，所以所以我们能给其定义css、但同时要注意其每个图形独特的属性。 \n-  2、内置图形在同一位置的时候，默认的是空间向上重叠，可用z-index来理解，后来者居上。 \n-  3、我们能用js获取SVG的DOM，并对其进行相关操作。 \n-  4、定义和分组这两个概念，入手相对较难理解，但对使用D3.js开发的时候很有帮助。定义能减少我们的工作量，提高代码复用率。分组方便我们统一管理SVG中的内置图形。 \n-  5、SVG内置图形都有自己的坐标属性，正是这些属性，我们才能对内置图形做位置变化。 \n-  6、动画，SVG有自己的动画定义，但是个人不建议使用，因为我们完全可以使用CSS的动画来实现同样的功能。 \n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"6a09cca2\"><span class=\"ne-text\">D3可视化</span></h2><p id=\"ud3c05db6\" class=\"ne-p\"><br></p><h3 id=\"1f12a104\"><span class=\"ne-text\">选择集</span></h3><p id=\"u55bcef83\" class=\"ne-p\"><br></p><p id=\"uaab39295\" class=\"ne-p\"><span class=\"ne-text\">D3是实现数据可视化，仍然离不开传统DOM的选择和操作，也因此，D3提供了类似Jquery的DOM操作指令：</span></p><p id=\"ub12dc306\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u6b41bd23\"><span class=\"ne-text\">d3.select：选择第一个指定元素</span></li><li id=\"u9e9c23a4\"><span class=\"ne-text\">d3.selectAll ： 选择所有的元素</span></li></ul><p id=\"u4b9c04a2\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"b8763ac7\" class=\"ne-codeblock language-plain\">const svg = d3.select('svg') //选择svg\nconst p = svg.selectAll('p') //选择svg下所有的p标签</pre><p id=\"u7885b169\" class=\"ne-p\"><br></p><p id=\"u2caef36c\" class=\"ne-p\"><span class=\"ne-text\">当然，可以使用#id 以及 .class 对id和类进行选择</span></p><p id=\"u9ff2aa6b\" class=\"ne-p\"><br></p><h3 id=\"0e16902c\"><span class=\"ne-text\">查看状态</span></h3><p id=\"uc1b66b4c\" class=\"ne-p\"><br></p><p id=\"ua240b2f6\" class=\"ne-p\"><span class=\"ne-text\">d3.select和d3.selectAll返回的都是选择集，添加、删除以及修改都需要用到选择集，查看状态有三个函数可以使用：</span></p><p id=\"u581ad422\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u563c3bd4\"><span class=\"ne-text\">selection.empty() 选择集为空，返回true，否则返回false</span></li><li id=\"u182cc614\"><span class=\"ne-text\">selection.node() 返回第一个非空元素，如果选择集为空，返回null</span></li></ul><ul class=\"ne-ul\"><li id=\"ue3fedb0f\"><span class=\"ne-text\">selection.size() 返回选择集中的元素个数</span></li></ul><p id=\"u9ae650c5\" class=\"ne-p\"><br></p><h3 id=\"799c504a\"><span class=\"ne-text\">设定和获取属性</span></h3><p id=\"u4a49a079\" class=\"ne-p\"><br></p><p id=\"ud89603fd\" class=\"ne-p\"><span class=\"ne-text\">使用select或selectAll选择后，可以通过attr获取和设定属性，可以使用append方法添加元素</span></p><p id=\"u0e71cae8\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"ae9713d6\" class=\"ne-codeblock language-plain\">const svg = select('svg');\nsvg.append('circle')\n.attr('r','30')</pre><p id=\"ud5492ae4\" class=\"ne-p\"><br></p><h3 id=\"2dbd7c1c\"><span class=\"ne-text\">SVG内置图形</span></h3><p id=\"u1056de6d\" class=\"ne-p\"><br></p><h4 id=\"4adf1a32\"><span class=\"ne-text\">1、矩形</span></h4><p id=\"u7ce64ed3\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u9af22efd\"><span class=\"ne-text\">rect 元素的 width 和 height 属性可定义矩形的高度和宽度</span></li><li id=\"uea79dc6d\"><span class=\"ne-text\">x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）</span></li></ul><ul class=\"ne-ul\"><li id=\"ufa0551af\"><span class=\"ne-text\">y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）</span></li><li id=\"u9bb0f971\"><span class=\"ne-text\">rx 和 ry 属性可使矩形产生圆角</span></li></ul><ul class=\"ne-ul\"><li id=\"u9354e4aa\"><span class=\"ne-text\">style 属性用来定义 CSS 属性</span></li><li id=\"u6337cd63\"><span class=\"ne-text\">CSS 的 fill 属性定义矩形的填充颜色（rgb 值、颜色名或者十六进制值）</span></li></ul><ul class=\"ne-ul\"><li id=\"uc7052250\"><span class=\"ne-text\">CSS 的 stroke-width 属性定义矩形边框的宽度</span></li><li id=\"uf313a31c\"><span class=\"ne-text\">CSS 的 stroke 属性定义矩形边框的颜色</span></li></ul><ul class=\"ne-ul\"><li id=\"u3f4b93fe\"><span class=\"ne-text\">CSS opacity 属性用于定义了元素的透明值 (范围: 0 到 1)。</span></li><li id=\"uc3b28c73\"><span class=\"ne-text\">CSS 的 fill-opacity 属性定义填充颜色透明度（合法的范围是：0 - 1）</span></li></ul><ul class=\"ne-ul\"><li id=\"uffaf9e96\"><span class=\"ne-text\">CSS 的 stroke-opacity 属性定义笔触颜色的透明度（合法的范围是：0 - 1）</span></li></ul><p id=\"u16ea2e09\" class=\"ne-p\"><br></p><h4 id=\"5127e051\"><span class=\"ne-text\">2、圆形</span></h4><p id=\"u6db1b9bc\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u2a159b2f\"><span class=\"ne-text\">cx和cy属性定义圆点的x和y坐标。如果省略cx和cy，圆的中心会被设置为(0, 0)</span></li><li id=\"u92b8588b\"><span class=\"ne-text\">r属性定义圆的半径</span></li></ul><p id=\"u142c385d\" class=\"ne-p\"><br></p><h4 id=\"f8cd969d\"><span class=\"ne-text\">3、椭圆</span></h4><p id=\"u7602a00c\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ubf60f87e\"><span class=\"ne-text\">CX属性定义的椭圆中心的x坐标</span></li><li id=\"ucdbe228a\"><span class=\"ne-text\">CY属性定义的椭圆中心的y坐标</span></li></ul><ul class=\"ne-ul\"><li id=\"u8abb5e75\"><span class=\"ne-text\">RX属性定义的水平半径</span></li><li id=\"u3dbfd2e4\"><span class=\"ne-text\">RY属性定义的垂直半径</span></li></ul><p id=\"uf22a3a6e\" class=\"ne-p\"><br></p><h4 id=\"08534a0e\"><span class=\"ne-text\">4、直线</span></h4><p id=\"uf057db75\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ua26b9ede\"><span class=\"ne-text\">x1 属性在 x 轴定义线条的开始</span></li><li id=\"ud38c1a3c\"><span class=\"ne-text\">y1 属性在 y 轴定义线条的开始</span></li></ul><ul class=\"ne-ul\"><li id=\"uad00353e\"><span class=\"ne-text\">x2 属性在 x 轴定义线条的结束</span></li><li id=\"ud82d130e\"><span class=\"ne-text\">y2 属性在 y 轴定义线条的结束</span></li></ul><p id=\"uf37dff40\" class=\"ne-p\"><br></p><h4 id=\"cafb2d86\"><span class=\"ne-text\">5、曲线</span></h4><p id=\"u5c71c8a1\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u6d38a8cb\"><span class=\"ne-text\">points 属性定义多边形每个角的 x 和 y 坐标</span></li><li id=\"u52024667\"><span class=\"ne-text\">是用于创建任何只有直线的形状</span></li></ul><p id=\"u58f32f89\" class=\"ne-p\"><br></p><h4 id=\"5962e2c2\"><span class=\"ne-text\">6、多边形</span></h4><p id=\"u343b1226\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ucd1f95db\"><span class=\"ne-text\">points 属性定义多边形每个角的 x 和 y 坐标</span></li></ul><p id=\"ubda45c5c\" class=\"ne-p\"><br></p><h4 id=\"f7327da1\"><span class=\"ne-text\">7、路径</span></h4><p id=\"u4036cc55\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u4c48df76\"><span class=\"ne-text\">M = moveto(M X,Y) ：将画笔移动到指定的坐标位置</span></li><li id=\"u0822cd6a\"><span class=\"ne-text\">L = lineto(L X,Y) ：画直线到指定的坐标位置</span></li></ul><ul class=\"ne-ul\"><li id=\"ub48d0928\"><span class=\"ne-text\">H = horizontal lineto(H X)：画水平线到指定的X坐标位置</span></li><li id=\"ue639fac9\"><span class=\"ne-text\">V = vertical lineto(V Y)：画垂直线到指定的Y坐标位置</span></li></ul><ul class=\"ne-ul\"><li id=\"ua3a4be63\"><span class=\"ne-text\">C = curveto(C X1,Y1,X2,Y2,ENDX,ENDY)：三次贝赛曲线</span></li><li id=\"u8ba4e5d6\"><span class=\"ne-text\">S = smooth curveto(x2 y2 x y)光滑三次贝塞尔曲线到</span></li></ul><ul class=\"ne-ul\"><li id=\"ud41d8adf\"><span class=\"ne-text\">Q = quadratic Belzier curve(Q X,Y,ENDX,ENDY)：二次贝赛曲线</span></li><li id=\"u44ff3273\"><span class=\"ne-text\">T = smooth quadratic Belzier curveto(T ENDX,ENDY)：光滑二次贝塞尔曲线到</span></li></ul><ul class=\"ne-ul\"><li id=\"uc788cf74\"><span class=\"ne-text\">A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：arc椭圆弧</span></li><li id=\"u1773fc3f\"><span class=\"ne-text\">Z = closepath()：关闭路径<br /></span><code class=\"ne-code\"><span class=\"ne-text\">如：M　起点X，起点Y　L（直线）终点X，终点Y　H（水平线）终点X　V（垂直线）终点Y M 10,20 L 80,50 M 10,20 V 50 M 10,20 H 90</span></code></li></ul><p id=\"u3cf9bcbc\" class=\"ne-p\"><br></p><p id=\"uf17e6f54\" class=\"ne-p\"><span class=\"ne-text\">如果指令字母是大写的，例如M, 则表示坐标位置是绝对位置；如果指令字母小写的，例如m, 则表示坐标位置是相对位置。</span></p><p id=\"u1312d3eb\" class=\"ne-p\"><br></p><p id=\"u83bca0b9\" class=\"ne-p\"><span class=\"ne-text\">####8、文本</span></p><p id=\"u44285525\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u8ece962e\"><span class=\"ne-text\">x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）</span></li><li id=\"u3e13658e\"><span class=\"ne-text\">y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）<br /></span><code class=\"ne-code\"><span class=\"ne-text\">&lt;text x=&quot;10&quot; y=&quot;15&quot;&gt;Text travels along any path that you define for it.&lt;/text&gt;</span></code><span class=\"ne-text\"><br /></span><span class=\"ne-text\">####9、容器元素用法</span></li></ul><ul class=\"ne-ul\"><li id=\"uecc89e71\"><span class=\"ne-text\">链接元素<br /></span><span class=\"ne-text\">svg的链接元素 a和html的链接元素a很相似，都是指向一个超链接。<br /></span><span class=\"ne-text\">在svg的a元素中，可以包含任何的形状<br /></span><span class=\"ne-text\">注意： 在获取svg的a元素时，为了区分html的a元素，要加命名空间<br /></span><code class=\"ne-code\"><span class=\"ne-text\">//css @namespace svg url(http://www.w3.org/2000/svg); svg|a {}</span></code></li><li id=\"u362648e5\"><span class=\"ne-text\">defs<br /></span><span class=\"ne-text\">defs元素通常用来存储在后续将会用到的图像，其 defs中的图像，不会直接呈现，必须在后续通过其他元素 引用才能呈现。<br /></span><span class=\"ne-text\">相当于在js中，封装的一个方法，供其他地方调用。 在这里，是封装了一段html，供后续的html调用。<br /></span><span class=\"ne-text\">一般情况下，defs中用来定义过滤，渐变，填充(pattern)等效果。</span></li></ul><ul class=\"ne-ul\"><li id=\"u0b7acb83\"><span class=\"ne-text\">g<br /></span><span class=\"ne-text\">元素是一个用于对其他SVG元素进行分组的容器。<br /></span><span class=\"ne-text\">在元素上设置的属性和变换，会统一影响g分组中的所有元素，会把g元素当成一个整体处理。<br /></span><span class=\"ne-text\">和前面的defs类似，只是中的元素会直接作为一个整体呈现，可以不需要引用就能呈现，当然也能被use复制。</span></li><li id=\"u03daad53\"><span class=\"ne-text\">mask<br /></span><span class=\"ne-text\">mask元素定义了一个alpha通道，用于将当前对象合成到背景中，在其他元素上通过mask属性来引用。<br /></span><span class=\"ne-text\">其本身不会呈现，必须被其他元素引用才能呈现。</span></li></ul><ul class=\"ne-ul\"><li id=\"u147fb85d\"><span class=\"ne-text\">marker<br /></span><span class=\"ne-text\">marker元素定义了用于在给定的、、或元素上绘制箭头或 多点标记 的图形。<br /></span><span class=\"ne-text\">在元素上使用 marker-start, marker-mid, 和 marker-end 属性，来引用marker元素。<br /></span><span class=\"ne-text\">marker有如下属性:<br /></span><span class=\"ne-text\">markerHeight: 定义marker元素的高度<br /></span><span class=\"ne-text\">markerWidth: 定义marker元素的宽度<br /></span><span class=\"ne-text\">markerUnits: 该属性为markerWidth、markerHeight以及marker的内容 定义了坐标系统。 userSpaceOnUse|strokeWidth<br /></span><span class=\"ne-text\">orient：定义marker相对于寄宿元素的方向，值有auto|auto start-reverse|。<br /></span><span class=\"ne-text\">refX: marker元素相对于X轴的偏移。和正常坐标系相反，正值向左，负值向右。<br /></span><span class=\"ne-text\">refY：marker元素相对于Y轴的偏移。和正常坐标系相反，正值向上，负值向下。<br /></span><span class=\"ne-text\">viewBox： 当前marker片段定义SVG视图端口的边界。<br /></span><span class=\"ne-text\">preserveAspectRatio：定义了如果marker片段嵌入到具有不同纵横比的容器中，则必须如何对其进行变形。<br /></span><span class=\"ne-text\">注意：<br /></span><span class=\"ne-text\">如果一个元素定义了marker-start，那么就在开头的位置添加marker，<br /></span><span class=\"ne-text\">如果一个元素定义了marker-mid，那么就在所有中间位置添加marker，<br /></span><span class=\"ne-text\">如果一个元素定义了marker-end，那么就在结尾位置添加marker。</span></li></ul><p id=\"ub40a4e1e\" class=\"ne-p\"><br></p><p id=\"u895ab295\" class=\"ne-p\"><span class=\"ne-text\">可以定义多个，那么也就添加多个。<br /></span><span class=\"ne-text\">####10、其它</span></p><p id=\"u470618c8\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u8df2054a\"><span class=\"ne-text\"> 1、image图像<br /></span><span class=\"ne-text\">x表示图像左上角在水平方向的位移，<br /></span><span class=\"ne-text\">y表示图像做商检在竖直方向的位移，<br /></span><span class=\"ne-text\">height，width分别为image的高度和宽度。<br /></span><span class=\"ne-text\">注意：默认图像不会缩放，即使定义了height，width，也不会缩放铺满剩余区域 </span></li><li id=\"uf3ea7d66\"><span class=\"ne-text\"> 2、stroke属性<br /></span><span class=\"ne-text\">SVG提供了一个范围广泛stroke 属性。这几个属性多用来定义线条的样式。<br /></span><span class=\"ne-text\">stroke. 线条颜色<br /></span><span class=\"ne-text\">stroke-width 线条粗细<br /></span><span class=\"ne-text\">stroke-linecap 线条闭合方式<br /></span><span class=\"ne-text\">stroke-dasharray 线条虚线数值组 </span></li></ul><ul class=\"ne-ul\"><li id=\"uaf01c3bf\"><span class=\"ne-text\"> 3、use<br /></span><span class=\"ne-text\">该元素从SVG文档中获取节点，并在其他位置复制它们。<br /></span><span class=\"ne-text\">当use复制其他元素后，还能对复制的元素进行属性的覆盖。<br /></span><span class=\"ne-text\">x, y, width, height，href这几个属性，不管源 元素是否有设置，都可以覆盖。<br /></span><span class=\"ne-text\">而其他属性，如果源 元素已经设置，则无法覆盖，如果没有设置，则可以再use上设置。<br /></span><span class=\"ne-text\">可以看到设置的x属性覆盖成功了，第二个use的fill也设置成功了，但是第三个use 的stroke没有变成红色，因为circle已经指定了，所以无法覆盖。 </span></li><li id=\"u6947f877\"><span class=\"ne-text\"> 4、事件<br /></span><span class=\"ne-text\">最常用的是 onclick、onactivate、onmousedown、onmouseup、onmouseover、onmousemove、onmouseout、onload、onresize、 onunload 和 onrepeat。 </span></li></ul><ul class=\"ne-ul\"><li id=\"u47777950\"><span class=\"ne-text\"> 5、svg<br /></span><span class=\"ne-text\">svg所定义的片段， 不管在独立的svg文件中，还是嵌入html中，都拥有独立的视口和坐标系统。<br /></span><span class=\"ne-text\">svg元素有如下专有属性:<br /></span><span class=\"ne-text\">version：指明 SVG 文档遵循规范， 值为1.0 | 1.1<br /></span><span class=\"ne-text\">x：起始 横坐标<br /></span><span class=\"ne-text\">y：起始 纵坐标<br /></span><span class=\"ne-text\">width：svg元素的宽度<br /></span><span class=\"ne-text\">height：svg元素的高度<br /></span><span class=\"ne-text\">preserveAspectRatio：是否强制进行统一缩放.<br /></span><span class=\"ne-text\">viewBox：允许指定一个给定的一组图形伸展以适应特定的容器元素。 </span></li><li id=\"u643e2227\"><span class=\"ne-text\"> 6、视口 viewbox<br /></span><span class=\"ne-text\">viewBox属性的值是一个包含4个参数的列表 min-x, min-y, width and height<br /></span><span class=\"ne-text\">下面的不设置 viewbox的情形:<br /></span><span class=\"ne-text\">矩形起始于 svg的（0,0）位置，长度为100px，宽度为150px<br /></span><span class=\"ne-text\">当设置viewbo后<br /></span><span class=\"ne-text\">可以看到，不仅变大了，而且还向右下角 平移了。<br /></span><span class=\"ne-text\">为什么呢？ </span></li></ul><ul class=\"ne-ul\"><li id=\"u25700e4d\"><span class=\"ne-text\"> 我们可以看到 viewBox的值为&quot;-5 -5 100 150&quot;，（-5 -5）分别表示 最小的x和最小的y，也就是说，左上角原本的（0,0）现在等价于(-5,-5), 那么如果想要时rect 还是在原来的左上角，那么才可以，而如果设置为<br /></span><span class=\"ne-text\">就会向右向下平移5px。 </span></li><li id=\"u6cec3efe\"><span class=\"ne-text\"> 然后我们看到viewbox后两个是100 150，分别表示 svg的宽度和高度，即100等同于svg定义的宽度500,150等同于svg定义的高度600，那么在svg容器里面的rect 上设置 width为100，等同于500，高为150，等同于600，这样会有个问题，就是本来rect的长宽比为100:150，而通过viewbox设置后，长宽比会变化， 所以svg默认 即使viewbox宽度比变化了，但是viewbox容器里的元素的长宽比不会变化，会以缩放较小的那个为准。<br /></span><span class=\"ne-text\">所以我们可以看到 viewbox相当于 一个比例尺，对原本的svg的位置和宽高 做了相同比例的缩放。<br /></span><span class=\"ne-text\">一共有下面的5个元素可以设置 viewbox:<br /></span><code class=\"ne-code\"><span class=\"ne-text\">&lt;marker&gt;, &lt;pattern&gt;, &lt;svg&gt;, &lt;symbol&gt;, 和 &lt;view&gt;</span></code><span class=\"ne-text\"><br /></span><span class=\"ne-text\">###总结 </span></li></ul><ul class=\"ne-ul\"><li id=\"ufe828b7a\"><span class=\"ne-text\"> 1、svg遵循XML文档格式，所以所以我们能给其定义css、但同时要注意其每个图形独特的属性。 </span></li><li id=\"u29b8d580\"><span class=\"ne-text\"> 2、内置图形在同一位置的时候，默认的是空间向上重叠，可用z-index来理解，后来者居上。 </span></li></ul><ul class=\"ne-ul\"><li id=\"u12d6f196\"><span class=\"ne-text\"> 3、我们能用js获取SVG的DOM，并对其进行相关操作。 </span></li><li id=\"ub366f09d\"><span class=\"ne-text\"> 4、定义和分组这两个概念，入手相对较难理解，但对使用D3.js开发的时候很有帮助。定义能减少我们的工作量，提高代码复用率。分组方便我们统一管理SVG中的内置图形。 </span></li></ul><ul class=\"ne-ul\"><li id=\"u0b44b73f\"><span class=\"ne-text\"> 5、SVG内置图形都有自己的坐标属性，正是这些属性，我们才能对内置图形做位置变化。 </span></li><li id=\"u6e13cc71\"><span class=\"ne-text\"> 6、动画，SVG有自己的动画定义，但是个人不建议使用，因为我们完全可以使用CSS的动画来实现同样的功能。 </span></li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"6a09cca2\" id=\"6a09cca2\"><span data-lake-id=\"u2aab9438\" id=\"u2aab9438\">D3可视化</span></h2><p data-lake-id=\"ud3c05db6\" id=\"ud3c05db6\"><br></p><h3 data-lake-id=\"1f12a104\" id=\"1f12a104\"><span data-lake-id=\"u8309e012\" id=\"u8309e012\">选择集</span></h3><p data-lake-id=\"u55bcef83\" id=\"u55bcef83\"><br></p><p data-lake-id=\"uaab39295\" id=\"uaab39295\"><span data-lake-id=\"u1167b051\" id=\"u1167b051\">D3是实现数据可视化，仍然离不开传统DOM的选择和操作，也因此，D3提供了类似Jquery的DOM操作指令：</span></p><p data-lake-id=\"ub12dc306\" id=\"ub12dc306\"><br></p><ul list=\"uc4bbb924\"><li fid=\"ua18c0a9b\" data-lake-id=\"u6b41bd23\" id=\"u6b41bd23\"><span data-lake-id=\"u295bd1e4\" id=\"u295bd1e4\">d3.select：选择第一个指定元素</span></li><li fid=\"ua18c0a9b\" data-lake-id=\"u9e9c23a4\" id=\"u9e9c23a4\"><span data-lake-id=\"u3c2f69c9\" id=\"u3c2f69c9\">d3.selectAll ： 选择所有的元素</span></li></ul><p data-lake-id=\"u4b9c04a2\" id=\"u4b9c04a2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22const%20svg%20%3D%20d3.select('svg')%20%2F%2F%E9%80%89%E6%8B%A9svg%5Cnconst%20p%20%3D%20svg.selectAll('p')%20%2F%2F%E9%80%89%E6%8B%A9svg%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84p%E6%A0%87%E7%AD%BE%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b8763ac7%22%7D\"></card><p data-lake-id=\"u7885b169\" id=\"u7885b169\"><br></p><p data-lake-id=\"u2caef36c\" id=\"u2caef36c\"><span data-lake-id=\"ud4625fce\" id=\"ud4625fce\">当然，可以使用#id 以及 .class 对id和类进行选择</span></p><p data-lake-id=\"u9ff2aa6b\" id=\"u9ff2aa6b\"><br></p><h3 data-lake-id=\"0e16902c\" id=\"0e16902c\"><span data-lake-id=\"u6ef49427\" id=\"u6ef49427\">查看状态</span></h3><p data-lake-id=\"uc1b66b4c\" id=\"uc1b66b4c\"><br></p><p data-lake-id=\"ua240b2f6\" id=\"ua240b2f6\"><span data-lake-id=\"u0341593c\" id=\"u0341593c\">d3.select和d3.selectAll返回的都是选择集，添加、删除以及修改都需要用到选择集，查看状态有三个函数可以使用：</span></p><p data-lake-id=\"u581ad422\" id=\"u581ad422\"><br></p><ul list=\"uc0764114\"><li fid=\"u7dfeba7d\" data-lake-id=\"u563c3bd4\" id=\"u563c3bd4\"><span data-lake-id=\"ufb7901ac\" id=\"ufb7901ac\">selection.empty() 选择集为空，返回true，否则返回false</span></li><li fid=\"u7dfeba7d\" data-lake-id=\"u182cc614\" id=\"u182cc614\"><span data-lake-id=\"u670a6879\" id=\"u670a6879\">selection.node() 返回第一个非空元素，如果选择集为空，返回null</span></li><li fid=\"u7dfeba7d\" data-lake-id=\"ue3fedb0f\" id=\"ue3fedb0f\"><span data-lake-id=\"udbdf3465\" id=\"udbdf3465\">selection.size() 返回选择集中的元素个数</span></li></ul><p data-lake-id=\"u9ae650c5\" id=\"u9ae650c5\"><br></p><h3 data-lake-id=\"799c504a\" id=\"799c504a\"><span data-lake-id=\"ubdc099e6\" id=\"ubdc099e6\">设定和获取属性</span></h3><p data-lake-id=\"u4a49a079\" id=\"u4a49a079\"><br></p><p data-lake-id=\"ud89603fd\" id=\"ud89603fd\"><span data-lake-id=\"u64e6183f\" id=\"u64e6183f\">使用select或selectAll选择后，可以通过attr获取和设定属性，可以使用append方法添加元素</span></p><p data-lake-id=\"u0e71cae8\" id=\"u0e71cae8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22const%20svg%20%3D%20select('svg')%3B%5Cnsvg.append('circle')%5Cn.attr('r'%2C'30')%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ae9713d6%22%7D\"></card><p data-lake-id=\"ud5492ae4\" id=\"ud5492ae4\"><br></p><h3 data-lake-id=\"2dbd7c1c\" id=\"2dbd7c1c\"><span data-lake-id=\"uedb3c502\" id=\"uedb3c502\">SVG内置图形</span></h3><p data-lake-id=\"u1056de6d\" id=\"u1056de6d\"><br></p><h4 data-lake-id=\"4adf1a32\" id=\"4adf1a32\"><span data-lake-id=\"u4a095d83\" id=\"u4a095d83\">1、矩形</span></h4><p data-lake-id=\"u7ce64ed3\" id=\"u7ce64ed3\"><br></p><ul list=\"u9f840178\"><li fid=\"u0b51ae16\" data-lake-id=\"u9af22efd\" id=\"u9af22efd\"><span data-lake-id=\"u5920d71a\" id=\"u5920d71a\">rect 元素的 width 和 height 属性可定义矩形的高度和宽度</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uea79dc6d\" id=\"uea79dc6d\"><span data-lake-id=\"u411b0c8c\" id=\"u411b0c8c\">x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）</span></li><li fid=\"u0b51ae16\" data-lake-id=\"ufa0551af\" id=\"ufa0551af\"><span data-lake-id=\"ude2adb8c\" id=\"ude2adb8c\">y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）</span></li><li fid=\"u0b51ae16\" data-lake-id=\"u9bb0f971\" id=\"u9bb0f971\"><span data-lake-id=\"u39d13c0f\" id=\"u39d13c0f\">rx 和 ry 属性可使矩形产生圆角</span></li><li fid=\"u0b51ae16\" data-lake-id=\"u9354e4aa\" id=\"u9354e4aa\"><span data-lake-id=\"uf69d5746\" id=\"uf69d5746\">style 属性用来定义 CSS 属性</span></li><li fid=\"u0b51ae16\" data-lake-id=\"u6337cd63\" id=\"u6337cd63\"><span data-lake-id=\"u6fe10f90\" id=\"u6fe10f90\">CSS 的 fill 属性定义矩形的填充颜色（rgb 值、颜色名或者十六进制值）</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uc7052250\" id=\"uc7052250\"><span data-lake-id=\"u9aa5c808\" id=\"u9aa5c808\">CSS 的 stroke-width 属性定义矩形边框的宽度</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uf313a31c\" id=\"uf313a31c\"><span data-lake-id=\"u6ec871bb\" id=\"u6ec871bb\">CSS 的 stroke 属性定义矩形边框的颜色</span></li><li fid=\"u0b51ae16\" data-lake-id=\"u3f4b93fe\" id=\"u3f4b93fe\"><span data-lake-id=\"ua679b61f\" id=\"ua679b61f\">CSS opacity 属性用于定义了元素的透明值 (范围: 0 到 1)。</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uc3b28c73\" id=\"uc3b28c73\"><span data-lake-id=\"u14b58fdf\" id=\"u14b58fdf\">CSS 的 fill-opacity 属性定义填充颜色透明度（合法的范围是：0 - 1）</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uffaf9e96\" id=\"uffaf9e96\"><span data-lake-id=\"u5d52f80f\" id=\"u5d52f80f\">CSS 的 stroke-opacity 属性定义笔触颜色的透明度（合法的范围是：0 - 1）</span></li></ul><p data-lake-id=\"u16ea2e09\" id=\"u16ea2e09\"><br></p><h4 data-lake-id=\"5127e051\" id=\"5127e051\"><span data-lake-id=\"u5a62a3ab\" id=\"u5a62a3ab\">2、圆形</span></h4><p data-lake-id=\"u6db1b9bc\" id=\"u6db1b9bc\"><br></p><ul list=\"u400ab3ea\"><li fid=\"uca5c3cad\" data-lake-id=\"u2a159b2f\" id=\"u2a159b2f\"><span data-lake-id=\"uc74c9648\" id=\"uc74c9648\">cx和cy属性定义圆点的x和y坐标。如果省略cx和cy，圆的中心会被设置为(0, 0)</span></li><li fid=\"uca5c3cad\" data-lake-id=\"u92b8588b\" id=\"u92b8588b\"><span data-lake-id=\"u5c955340\" id=\"u5c955340\">r属性定义圆的半径</span></li></ul><p data-lake-id=\"u142c385d\" id=\"u142c385d\"><br></p><h4 data-lake-id=\"f8cd969d\" id=\"f8cd969d\"><span data-lake-id=\"uefe6b7b3\" id=\"uefe6b7b3\">3、椭圆</span></h4><p data-lake-id=\"u7602a00c\" id=\"u7602a00c\"><br></p><ul list=\"uf1edbf63\"><li fid=\"u3f4cceda\" data-lake-id=\"ubf60f87e\" id=\"ubf60f87e\"><span data-lake-id=\"u51a3a2ac\" id=\"u51a3a2ac\">CX属性定义的椭圆中心的x坐标</span></li><li fid=\"u3f4cceda\" data-lake-id=\"ucdbe228a\" id=\"ucdbe228a\"><span data-lake-id=\"u19b31ae0\" id=\"u19b31ae0\">CY属性定义的椭圆中心的y坐标</span></li><li fid=\"u3f4cceda\" data-lake-id=\"u8abb5e75\" id=\"u8abb5e75\"><span data-lake-id=\"u5564a392\" id=\"u5564a392\">RX属性定义的水平半径</span></li><li fid=\"u3f4cceda\" data-lake-id=\"u3dbfd2e4\" id=\"u3dbfd2e4\"><span data-lake-id=\"u11b492a2\" id=\"u11b492a2\">RY属性定义的垂直半径</span></li></ul><p data-lake-id=\"uf22a3a6e\" id=\"uf22a3a6e\"><br></p><h4 data-lake-id=\"08534a0e\" id=\"08534a0e\"><span data-lake-id=\"u6cef6386\" id=\"u6cef6386\">4、直线</span></h4><p data-lake-id=\"uf057db75\" id=\"uf057db75\"><br></p><ul list=\"u6db4cb52\"><li fid=\"ue87943c1\" data-lake-id=\"ua26b9ede\" id=\"ua26b9ede\"><span data-lake-id=\"ubedccbc4\" id=\"ubedccbc4\">x1 属性在 x 轴定义线条的开始</span></li><li fid=\"ue87943c1\" data-lake-id=\"ud38c1a3c\" id=\"ud38c1a3c\"><span data-lake-id=\"u3be58d1a\" id=\"u3be58d1a\">y1 属性在 y 轴定义线条的开始</span></li><li fid=\"ue87943c1\" data-lake-id=\"uad00353e\" id=\"uad00353e\"><span data-lake-id=\"uc75629bc\" id=\"uc75629bc\">x2 属性在 x 轴定义线条的结束</span></li><li fid=\"ue87943c1\" data-lake-id=\"ud82d130e\" id=\"ud82d130e\"><span data-lake-id=\"u3ed76660\" id=\"u3ed76660\">y2 属性在 y 轴定义线条的结束</span></li></ul><p data-lake-id=\"uf37dff40\" id=\"uf37dff40\"><br></p><h4 data-lake-id=\"cafb2d86\" id=\"cafb2d86\"><span data-lake-id=\"u1b3b4989\" id=\"u1b3b4989\">5、曲线</span></h4><p data-lake-id=\"u5c71c8a1\" id=\"u5c71c8a1\"><br></p><ul list=\"ua2a06b2c\"><li fid=\"ue3c63673\" data-lake-id=\"u6d38a8cb\" id=\"u6d38a8cb\"><span data-lake-id=\"uc3a74532\" id=\"uc3a74532\">points 属性定义多边形每个角的 x 和 y 坐标</span></li><li fid=\"ue3c63673\" data-lake-id=\"u52024667\" id=\"u52024667\"><span data-lake-id=\"u059f629f\" id=\"u059f629f\">是用于创建任何只有直线的形状</span></li></ul><p data-lake-id=\"u58f32f89\" id=\"u58f32f89\"><br></p><h4 data-lake-id=\"5962e2c2\" id=\"5962e2c2\"><span data-lake-id=\"u0098e717\" id=\"u0098e717\">6、多边形</span></h4><p data-lake-id=\"u343b1226\" id=\"u343b1226\"><br></p><ul list=\"u16e654c9\"><li fid=\"u6081e91d\" data-lake-id=\"ucd1f95db\" id=\"ucd1f95db\"><span data-lake-id=\"uf6618e16\" id=\"uf6618e16\">points 属性定义多边形每个角的 x 和 y 坐标</span></li></ul><p data-lake-id=\"ubda45c5c\" id=\"ubda45c5c\"><br></p><h4 data-lake-id=\"f7327da1\" id=\"f7327da1\"><span data-lake-id=\"ued71a058\" id=\"ued71a058\">7、路径</span></h4><p data-lake-id=\"u4036cc55\" id=\"u4036cc55\"><br></p><ul list=\"u3deca482\"><li fid=\"u2b3187ab\" data-lake-id=\"u4c48df76\" id=\"u4c48df76\"><span data-lake-id=\"u7e5fcea1\" id=\"u7e5fcea1\">M = moveto(M X,Y) ：将画笔移动到指定的坐标位置</span></li><li fid=\"u2b3187ab\" data-lake-id=\"u0822cd6a\" id=\"u0822cd6a\"><span data-lake-id=\"uc4e7f6af\" id=\"uc4e7f6af\">L = lineto(L X,Y) ：画直线到指定的坐标位置</span></li><li fid=\"u2b3187ab\" data-lake-id=\"ub48d0928\" id=\"ub48d0928\"><span data-lake-id=\"u79e2bf98\" id=\"u79e2bf98\">H = horizontal lineto(H X)：画水平线到指定的X坐标位置</span></li><li fid=\"u2b3187ab\" data-lake-id=\"ue639fac9\" id=\"ue639fac9\"><span data-lake-id=\"u8755266d\" id=\"u8755266d\">V = vertical lineto(V Y)：画垂直线到指定的Y坐标位置</span></li><li fid=\"u2b3187ab\" data-lake-id=\"ua3a4be63\" id=\"ua3a4be63\"><span data-lake-id=\"ua97aefc0\" id=\"ua97aefc0\">C = curveto(C X1,Y1,X2,Y2,ENDX,ENDY)：三次贝赛曲线</span></li><li fid=\"u2b3187ab\" data-lake-id=\"u8ba4e5d6\" id=\"u8ba4e5d6\"><span data-lake-id=\"u86766e49\" id=\"u86766e49\">S = smooth curveto(x2 y2 x y)光滑三次贝塞尔曲线到</span></li><li fid=\"u2b3187ab\" data-lake-id=\"ud41d8adf\" id=\"ud41d8adf\"><span data-lake-id=\"ud7737027\" id=\"ud7737027\">Q = quadratic Belzier curve(Q X,Y,ENDX,ENDY)：二次贝赛曲线</span></li><li fid=\"u2b3187ab\" data-lake-id=\"u44ff3273\" id=\"u44ff3273\"><span data-lake-id=\"u148034fa\" id=\"u148034fa\">T = smooth quadratic Belzier curveto(T ENDX,ENDY)：光滑二次贝塞尔曲线到</span></li><li fid=\"u2b3187ab\" data-lake-id=\"uc788cf74\" id=\"uc788cf74\"><span data-lake-id=\"u52e4f7fe\" id=\"u52e4f7fe\">A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：arc椭圆弧</span></li><li fid=\"u2b3187ab\" data-lake-id=\"u1773fc3f\" id=\"u1773fc3f\"><span data-lake-id=\"u130cdee4\" id=\"u130cdee4\">Z = closepath()：关闭路径<br /></span><code data-lake-id=\"ucb4f5cd1\" id=\"ucb4f5cd1\"><span data-lake-id=\"u49cfe1f1\" id=\"u49cfe1f1\">如：M　起点X，起点Y　L（直线）终点X，终点Y　H（水平线）终点X　V（垂直线）终点Y M 10,20 L 80,50 M 10,20 V 50 M 10,20 H 90</span></code></li></ul><p data-lake-id=\"u3cf9bcbc\" id=\"u3cf9bcbc\"><br></p><p data-lake-id=\"uf17e6f54\" id=\"uf17e6f54\"><span data-lake-id=\"u1c524946\" id=\"u1c524946\">如果指令字母是大写的，例如M, 则表示坐标位置是绝对位置；如果指令字母小写的，例如m, 则表示坐标位置是相对位置。</span></p><p data-lake-id=\"u1312d3eb\" id=\"u1312d3eb\"><br></p><p data-lake-id=\"u83bca0b9\" id=\"u83bca0b9\"><span data-lake-id=\"ue428d5d6\" id=\"ue428d5d6\">####8、文本</span></p><p data-lake-id=\"u44285525\" id=\"u44285525\"><br></p><ul list=\"u4a8c02dc\"><li fid=\"ub6c2c78a\" data-lake-id=\"u8ece962e\" id=\"u8ece962e\"><span data-lake-id=\"ubfe638ff\" id=\"ubfe638ff\">x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"u3e13658e\" id=\"u3e13658e\"><span data-lake-id=\"ueb17b2a2\" id=\"ueb17b2a2\">y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）<br /></span><code data-lake-id=\"u3c577a14\" id=\"u3c577a14\"><span data-lake-id=\"u960492cf\" id=\"u960492cf\">&lt;text x=&quot;10&quot; y=&quot;15&quot;&gt;Text travels along any path that you define for it.&lt;/text&gt;</span></code><span data-lake-id=\"uc4e098de\" id=\"uc4e098de\"><br /></span><span data-lake-id=\"u22ed7cb2\" id=\"u22ed7cb2\">####9、容器元素用法</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"uecc89e71\" id=\"uecc89e71\"><span data-lake-id=\"u56328961\" id=\"u56328961\">链接元素<br /></span><span data-lake-id=\"uca794a90\" id=\"uca794a90\">svg的链接元素 a和html的链接元素a很相似，都是指向一个超链接。<br /></span><span data-lake-id=\"u6f10e727\" id=\"u6f10e727\">在svg的a元素中，可以包含任何的形状<br /></span><span data-lake-id=\"u2b774285\" id=\"u2b774285\">注意： 在获取svg的a元素时，为了区分html的a元素，要加命名空间<br /></span><code data-lake-id=\"uf7b77ece\" id=\"uf7b77ece\"><span data-lake-id=\"uf7581c64\" id=\"uf7581c64\">//css @namespace svg url(http://www.w3.org/2000/svg); svg|a {}</span></code></li><li fid=\"ub6c2c78a\" data-lake-id=\"u362648e5\" id=\"u362648e5\"><span data-lake-id=\"ufc4572cd\" id=\"ufc4572cd\">defs<br /></span><span data-lake-id=\"u8ddbad5b\" id=\"u8ddbad5b\">defs元素通常用来存储在后续将会用到的图像，其 defs中的图像，不会直接呈现，必须在后续通过其他元素 引用才能呈现。<br /></span><span data-lake-id=\"ucab2fe7b\" id=\"ucab2fe7b\">相当于在js中，封装的一个方法，供其他地方调用。 在这里，是封装了一段html，供后续的html调用。<br /></span><span data-lake-id=\"u45ae02ba\" id=\"u45ae02ba\">一般情况下，defs中用来定义过滤，渐变，填充(pattern)等效果。</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"u0b7acb83\" id=\"u0b7acb83\"><span data-lake-id=\"uc6149de7\" id=\"uc6149de7\">g<br /></span><span data-lake-id=\"u98d68c26\" id=\"u98d68c26\">元素是一个用于对其他SVG元素进行分组的容器。<br /></span><span data-lake-id=\"ub59736d3\" id=\"ub59736d3\">在元素上设置的属性和变换，会统一影响g分组中的所有元素，会把g元素当成一个整体处理。<br /></span><span data-lake-id=\"u8a0a06c0\" id=\"u8a0a06c0\">和前面的defs类似，只是中的元素会直接作为一个整体呈现，可以不需要引用就能呈现，当然也能被use复制。</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"u03daad53\" id=\"u03daad53\"><span data-lake-id=\"u817e5c17\" id=\"u817e5c17\">mask<br /></span><span data-lake-id=\"u55636861\" id=\"u55636861\">mask元素定义了一个alpha通道，用于将当前对象合成到背景中，在其他元素上通过mask属性来引用。<br /></span><span data-lake-id=\"u22050a5f\" id=\"u22050a5f\">其本身不会呈现，必须被其他元素引用才能呈现。</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"u147fb85d\" id=\"u147fb85d\"><span data-lake-id=\"ubef89fb0\" id=\"ubef89fb0\">marker<br /></span><span data-lake-id=\"u9f2149da\" id=\"u9f2149da\">marker元素定义了用于在给定的、、或元素上绘制箭头或 多点标记 的图形。<br /></span><span data-lake-id=\"u70f9a70f\" id=\"u70f9a70f\">在元素上使用 marker-start, marker-mid, 和 marker-end 属性，来引用marker元素。<br /></span><span data-lake-id=\"u55f85502\" id=\"u55f85502\">marker有如下属性:<br /></span><span data-lake-id=\"ua676e4f4\" id=\"ua676e4f4\">markerHeight: 定义marker元素的高度<br /></span><span data-lake-id=\"ucac9b651\" id=\"ucac9b651\">markerWidth: 定义marker元素的宽度<br /></span><span data-lake-id=\"u2ec6a7f5\" id=\"u2ec6a7f5\">markerUnits: 该属性为markerWidth、markerHeight以及marker的内容 定义了坐标系统。 userSpaceOnUse|strokeWidth<br /></span><span data-lake-id=\"u110674ce\" id=\"u110674ce\">orient：定义marker相对于寄宿元素的方向，值有auto|auto start-reverse|。<br /></span><span data-lake-id=\"uc3b57bf5\" id=\"uc3b57bf5\">refX: marker元素相对于X轴的偏移。和正常坐标系相反，正值向左，负值向右。<br /></span><span data-lake-id=\"u64f2ff22\" id=\"u64f2ff22\">refY：marker元素相对于Y轴的偏移。和正常坐标系相反，正值向上，负值向下。<br /></span><span data-lake-id=\"ud00ed425\" id=\"ud00ed425\">viewBox： 当前marker片段定义SVG视图端口的边界。<br /></span><span data-lake-id=\"u59828e70\" id=\"u59828e70\">preserveAspectRatio：定义了如果marker片段嵌入到具有不同纵横比的容器中，则必须如何对其进行变形。<br /></span><span data-lake-id=\"u0fd6e2da\" id=\"u0fd6e2da\">注意：<br /></span><span data-lake-id=\"u4f357640\" id=\"u4f357640\">如果一个元素定义了marker-start，那么就在开头的位置添加marker，<br /></span><span data-lake-id=\"u48fad4bd\" id=\"u48fad4bd\">如果一个元素定义了marker-mid，那么就在所有中间位置添加marker，<br /></span><span data-lake-id=\"u1de9dd90\" id=\"u1de9dd90\">如果一个元素定义了marker-end，那么就在结尾位置添加marker。</span></li></ul><p data-lake-id=\"ub40a4e1e\" id=\"ub40a4e1e\"><br></p><p data-lake-id=\"u895ab295\" id=\"u895ab295\"><span data-lake-id=\"u18e540db\" id=\"u18e540db\">可以定义多个，那么也就添加多个。<br /></span><span data-lake-id=\"u856b14a3\" id=\"u856b14a3\">####10、其它</span></p><p data-lake-id=\"u470618c8\" id=\"u470618c8\"><br></p><ul list=\"u903ec438\"><li fid=\"u732e3cca\" data-lake-id=\"u8df2054a\" id=\"u8df2054a\"><span data-lake-id=\"ua00155ff\" id=\"ua00155ff\"> 1、image图像<br /></span><span data-lake-id=\"u244c7753\" id=\"u244c7753\">x表示图像左上角在水平方向的位移，<br /></span><span data-lake-id=\"ua2f7b5f5\" id=\"ua2f7b5f5\">y表示图像做商检在竖直方向的位移，<br /></span><span data-lake-id=\"ueb0e987c\" id=\"ueb0e987c\">height，width分别为image的高度和宽度。<br /></span><span data-lake-id=\"u8198c935\" id=\"u8198c935\">注意：默认图像不会缩放，即使定义了height，width，也不会缩放铺满剩余区域 </span></li><li fid=\"u732e3cca\" data-lake-id=\"uf3ea7d66\" id=\"uf3ea7d66\"><span data-lake-id=\"u806d0b87\" id=\"u806d0b87\"> 2、stroke属性<br /></span><span data-lake-id=\"u25b7945f\" id=\"u25b7945f\">SVG提供了一个范围广泛stroke 属性。这几个属性多用来定义线条的样式。<br /></span><span data-lake-id=\"ub6ecb98e\" id=\"ub6ecb98e\">stroke. 线条颜色<br /></span><span data-lake-id=\"ucadd4a41\" id=\"ucadd4a41\">stroke-width 线条粗细<br /></span><span data-lake-id=\"u6df3aed7\" id=\"u6df3aed7\">stroke-linecap 线条闭合方式<br /></span><span data-lake-id=\"ub8a86eaa\" id=\"ub8a86eaa\">stroke-dasharray 线条虚线数值组 </span></li><li fid=\"u732e3cca\" data-lake-id=\"uaf01c3bf\" id=\"uaf01c3bf\"><span data-lake-id=\"ue5e76f94\" id=\"ue5e76f94\"> 3、use<br /></span><span data-lake-id=\"u4f0a3784\" id=\"u4f0a3784\">该元素从SVG文档中获取节点，并在其他位置复制它们。<br /></span><span data-lake-id=\"u245660a5\" id=\"u245660a5\">当use复制其他元素后，还能对复制的元素进行属性的覆盖。<br /></span><span data-lake-id=\"u8fc83eed\" id=\"u8fc83eed\">x, y, width, height，href这几个属性，不管源 元素是否有设置，都可以覆盖。<br /></span><span data-lake-id=\"u52decdec\" id=\"u52decdec\">而其他属性，如果源 元素已经设置，则无法覆盖，如果没有设置，则可以再use上设置。<br /></span><span data-lake-id=\"u6b8935fa\" id=\"u6b8935fa\">可以看到设置的x属性覆盖成功了，第二个use的fill也设置成功了，但是第三个use 的stroke没有变成红色，因为circle已经指定了，所以无法覆盖。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u6947f877\" id=\"u6947f877\"><span data-lake-id=\"ub895175e\" id=\"ub895175e\"> 4、事件<br /></span><span data-lake-id=\"u9010861d\" id=\"u9010861d\">最常用的是 onclick、onactivate、onmousedown、onmouseup、onmouseover、onmousemove、onmouseout、onload、onresize、 onunload 和 onrepeat。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u47777950\" id=\"u47777950\"><span data-lake-id=\"ua7cba26f\" id=\"ua7cba26f\"> 5、svg<br /></span><span data-lake-id=\"u9a0f9541\" id=\"u9a0f9541\">svg所定义的片段， 不管在独立的svg文件中，还是嵌入html中，都拥有独立的视口和坐标系统。<br /></span><span data-lake-id=\"u2968507c\" id=\"u2968507c\">svg元素有如下专有属性:<br /></span><span data-lake-id=\"u5e0cd14f\" id=\"u5e0cd14f\">version：指明 SVG 文档遵循规范， 值为1.0 | 1.1<br /></span><span data-lake-id=\"u331419d2\" id=\"u331419d2\">x：起始 横坐标<br /></span><span data-lake-id=\"u11f78593\" id=\"u11f78593\">y：起始 纵坐标<br /></span><span data-lake-id=\"u10d8bf1c\" id=\"u10d8bf1c\">width：svg元素的宽度<br /></span><span data-lake-id=\"u531dfb08\" id=\"u531dfb08\">height：svg元素的高度<br /></span><span data-lake-id=\"ue4ee4251\" id=\"ue4ee4251\">preserveAspectRatio：是否强制进行统一缩放.<br /></span><span data-lake-id=\"u64427237\" id=\"u64427237\">viewBox：允许指定一个给定的一组图形伸展以适应特定的容器元素。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u643e2227\" id=\"u643e2227\"><span data-lake-id=\"u8fb2f024\" id=\"u8fb2f024\"> 6、视口 viewbox<br /></span><span data-lake-id=\"u900a6aa5\" id=\"u900a6aa5\">viewBox属性的值是一个包含4个参数的列表 min-x, min-y, width and height<br /></span><span data-lake-id=\"ub6713b18\" id=\"ub6713b18\">下面的不设置 viewbox的情形:<br /></span><span data-lake-id=\"uf1c2bf1f\" id=\"uf1c2bf1f\">矩形起始于 svg的（0,0）位置，长度为100px，宽度为150px<br /></span><span data-lake-id=\"uc494753b\" id=\"uc494753b\">当设置viewbo后<br /></span><span data-lake-id=\"u8654ba28\" id=\"u8654ba28\">可以看到，不仅变大了，而且还向右下角 平移了。<br /></span><span data-lake-id=\"ua5a99d14\" id=\"ua5a99d14\">为什么呢？ </span></li><li fid=\"u732e3cca\" data-lake-id=\"u25700e4d\" id=\"u25700e4d\"><span data-lake-id=\"u4757ae18\" id=\"u4757ae18\"> 我们可以看到 viewBox的值为&quot;-5 -5 100 150&quot;，（-5 -5）分别表示 最小的x和最小的y，也就是说，左上角原本的（0,0）现在等价于(-5,-5), 那么如果想要时rect 还是在原来的左上角，那么才可以，而如果设置为<br /></span><span data-lake-id=\"u9f890fdb\" id=\"u9f890fdb\">就会向右向下平移5px。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u6cec3efe\" id=\"u6cec3efe\"><span data-lake-id=\"ub8843b78\" id=\"ub8843b78\"> 然后我们看到viewbox后两个是100 150，分别表示 svg的宽度和高度，即100等同于svg定义的宽度500,150等同于svg定义的高度600，那么在svg容器里面的rect 上设置 width为100，等同于500，高为150，等同于600，这样会有个问题，就是本来rect的长宽比为100:150，而通过viewbox设置后，长宽比会变化， 所以svg默认 即使viewbox宽度比变化了，但是viewbox容器里的元素的长宽比不会变化，会以缩放较小的那个为准。<br /></span><span data-lake-id=\"u9a0aefbf\" id=\"u9a0aefbf\">所以我们可以看到 viewbox相当于 一个比例尺，对原本的svg的位置和宽高 做了相同比例的缩放。<br /></span><span data-lake-id=\"u463cfe6d\" id=\"u463cfe6d\">一共有下面的5个元素可以设置 viewbox:<br /></span><code data-lake-id=\"uf7779c09\" id=\"uf7779c09\"><span data-lake-id=\"u52d31dc5\" id=\"u52d31dc5\">&lt;marker&gt;, &lt;pattern&gt;, &lt;svg&gt;, &lt;symbol&gt;, 和 &lt;view&gt;</span></code><span data-lake-id=\"uf2322e8e\" id=\"uf2322e8e\"><br /></span><span data-lake-id=\"u5a2ef247\" id=\"u5a2ef247\">###总结 </span></li><li fid=\"u732e3cca\" data-lake-id=\"ufe828b7a\" id=\"ufe828b7a\"><span data-lake-id=\"uc376f2c1\" id=\"uc376f2c1\"> 1、svg遵循XML文档格式，所以所以我们能给其定义css、但同时要注意其每个图形独特的属性。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u29b8d580\" id=\"u29b8d580\"><span data-lake-id=\"u8cd9a029\" id=\"u8cd9a029\"> 2、内置图形在同一位置的时候，默认的是空间向上重叠，可用z-index来理解，后来者居上。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u12d6f196\" id=\"u12d6f196\"><span data-lake-id=\"ud8572729\" id=\"ud8572729\"> 3、我们能用js获取SVG的DOM，并对其进行相关操作。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"ub366f09d\" id=\"ub366f09d\"><span data-lake-id=\"u0bd435fd\" id=\"u0bd435fd\"> 4、定义和分组这两个概念，入手相对较难理解，但对使用D3.js开发的时候很有帮助。定义能减少我们的工作量，提高代码复用率。分组方便我们统一管理SVG中的内置图形。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u0b44b73f\" id=\"u0b44b73f\"><span data-lake-id=\"uf060816a\" id=\"uf060816a\"> 5、SVG内置图形都有自己的坐标属性，正是这些属性，我们才能对内置图形做位置变化。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u6e13cc71\" id=\"u6e13cc71\"><span data-lake-id=\"ue0c5c428\" id=\"ue0c5c428\"> 6、动画，SVG有自己的动画定义，但是个人不建议使用，因为我们完全可以使用CSS的动画来实现同样的功能。 </span></li></ul>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"6a09cca2\" id=\"6a09cca2\"><span data-lake-id=\"u2aab9438\" id=\"u2aab9438\">D3可视化</span></h2><p data-lake-id=\"ud3c05db6\" id=\"ud3c05db6\"><br></p><h3 data-lake-id=\"1f12a104\" id=\"1f12a104\"><span data-lake-id=\"u8309e012\" id=\"u8309e012\">选择集</span></h3><p data-lake-id=\"u55bcef83\" id=\"u55bcef83\"><br></p><p data-lake-id=\"uaab39295\" id=\"uaab39295\"><span data-lake-id=\"u1167b051\" id=\"u1167b051\">D3是实现数据可视化，仍然离不开传统DOM的选择和操作，也因此，D3提供了类似Jquery的DOM操作指令：</span></p><p data-lake-id=\"ub12dc306\" id=\"ub12dc306\"><br></p><ul list=\"uc4bbb924\"><li fid=\"ua18c0a9b\" data-lake-id=\"u6b41bd23\" id=\"u6b41bd23\"><span data-lake-id=\"u295bd1e4\" id=\"u295bd1e4\">d3.select：选择第一个指定元素</span></li><li fid=\"ua18c0a9b\" data-lake-id=\"u9e9c23a4\" id=\"u9e9c23a4\"><span data-lake-id=\"u3c2f69c9\" id=\"u3c2f69c9\">d3.selectAll ： 选择所有的元素</span></li></ul><p data-lake-id=\"u4b9c04a2\" id=\"u4b9c04a2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22const%20svg%20%3D%20d3.select('svg')%20%2F%2F%E9%80%89%E6%8B%A9svg%5Cnconst%20p%20%3D%20svg.selectAll('p')%20%2F%2F%E9%80%89%E6%8B%A9svg%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84p%E6%A0%87%E7%AD%BE%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b8763ac7%22%7D\"></card><p data-lake-id=\"u7885b169\" id=\"u7885b169\"><br></p><p data-lake-id=\"u2caef36c\" id=\"u2caef36c\"><span data-lake-id=\"ud4625fce\" id=\"ud4625fce\">当然，可以使用#id 以及 .class 对id和类进行选择</span></p><p data-lake-id=\"u9ff2aa6b\" id=\"u9ff2aa6b\"><br></p><h3 data-lake-id=\"0e16902c\" id=\"0e16902c\"><span data-lake-id=\"u6ef49427\" id=\"u6ef49427\">查看状态</span></h3><p data-lake-id=\"uc1b66b4c\" id=\"uc1b66b4c\"><br></p><p data-lake-id=\"ua240b2f6\" id=\"ua240b2f6\"><span data-lake-id=\"u0341593c\" id=\"u0341593c\">d3.select和d3.selectAll返回的都是选择集，添加、删除以及修改都需要用到选择集，查看状态有三个函数可以使用：</span></p><p data-lake-id=\"u581ad422\" id=\"u581ad422\"><br></p><ul list=\"uc0764114\"><li fid=\"u7dfeba7d\" data-lake-id=\"u563c3bd4\" id=\"u563c3bd4\"><span data-lake-id=\"ufb7901ac\" id=\"ufb7901ac\">selection.empty() 选择集为空，返回true，否则返回false</span></li><li fid=\"u7dfeba7d\" data-lake-id=\"u182cc614\" id=\"u182cc614\"><span data-lake-id=\"u670a6879\" id=\"u670a6879\">selection.node() 返回第一个非空元素，如果选择集为空，返回null</span></li><li fid=\"u7dfeba7d\" data-lake-id=\"ue3fedb0f\" id=\"ue3fedb0f\"><span data-lake-id=\"udbdf3465\" id=\"udbdf3465\">selection.size() 返回选择集中的元素个数</span></li></ul><p data-lake-id=\"u9ae650c5\" id=\"u9ae650c5\"><br></p><h3 data-lake-id=\"799c504a\" id=\"799c504a\"><span data-lake-id=\"ubdc099e6\" id=\"ubdc099e6\">设定和获取属性</span></h3><p data-lake-id=\"u4a49a079\" id=\"u4a49a079\"><br></p><p data-lake-id=\"ud89603fd\" id=\"ud89603fd\"><span data-lake-id=\"u64e6183f\" id=\"u64e6183f\">使用select或selectAll选择后，可以通过attr获取和设定属性，可以使用append方法添加元素</span></p><p data-lake-id=\"u0e71cae8\" id=\"u0e71cae8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22const%20svg%20%3D%20select('svg')%3B%5Cnsvg.append('circle')%5Cn.attr('r'%2C'30')%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ae9713d6%22%7D\"></card><p data-lake-id=\"ud5492ae4\" id=\"ud5492ae4\"><br></p><h3 data-lake-id=\"2dbd7c1c\" id=\"2dbd7c1c\"><span data-lake-id=\"uedb3c502\" id=\"uedb3c502\">SVG内置图形</span></h3><p data-lake-id=\"u1056de6d\" id=\"u1056de6d\"><br></p><h4 data-lake-id=\"4adf1a32\" id=\"4adf1a32\"><span data-lake-id=\"u4a095d83\" id=\"u4a095d83\">1、矩形</span></h4><p data-lake-id=\"u7ce64ed3\" id=\"u7ce64ed3\"><br></p><ul list=\"u9f840178\"><li fid=\"u0b51ae16\" data-lake-id=\"u9af22efd\" id=\"u9af22efd\"><span data-lake-id=\"u5920d71a\" id=\"u5920d71a\">rect 元素的 width 和 height 属性可定义矩形的高度和宽度</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uea79dc6d\" id=\"uea79dc6d\"><span data-lake-id=\"u411b0c8c\" id=\"u411b0c8c\">x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）</span></li><li fid=\"u0b51ae16\" data-lake-id=\"ufa0551af\" id=\"ufa0551af\"><span data-lake-id=\"ude2adb8c\" id=\"ude2adb8c\">y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）</span></li><li fid=\"u0b51ae16\" data-lake-id=\"u9bb0f971\" id=\"u9bb0f971\"><span data-lake-id=\"u39d13c0f\" id=\"u39d13c0f\">rx 和 ry 属性可使矩形产生圆角</span></li><li fid=\"u0b51ae16\" data-lake-id=\"u9354e4aa\" id=\"u9354e4aa\"><span data-lake-id=\"uf69d5746\" id=\"uf69d5746\">style 属性用来定义 CSS 属性</span></li><li fid=\"u0b51ae16\" data-lake-id=\"u6337cd63\" id=\"u6337cd63\"><span data-lake-id=\"u6fe10f90\" id=\"u6fe10f90\">CSS 的 fill 属性定义矩形的填充颜色（rgb 值、颜色名或者十六进制值）</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uc7052250\" id=\"uc7052250\"><span data-lake-id=\"u9aa5c808\" id=\"u9aa5c808\">CSS 的 stroke-width 属性定义矩形边框的宽度</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uf313a31c\" id=\"uf313a31c\"><span data-lake-id=\"u6ec871bb\" id=\"u6ec871bb\">CSS 的 stroke 属性定义矩形边框的颜色</span></li><li fid=\"u0b51ae16\" data-lake-id=\"u3f4b93fe\" id=\"u3f4b93fe\"><span data-lake-id=\"ua679b61f\" id=\"ua679b61f\">CSS opacity 属性用于定义了元素的透明值 (范围: 0 到 1)。</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uc3b28c73\" id=\"uc3b28c73\"><span data-lake-id=\"u14b58fdf\" id=\"u14b58fdf\">CSS 的 fill-opacity 属性定义填充颜色透明度（合法的范围是：0 - 1）</span></li><li fid=\"u0b51ae16\" data-lake-id=\"uffaf9e96\" id=\"uffaf9e96\"><span data-lake-id=\"u5d52f80f\" id=\"u5d52f80f\">CSS 的 stroke-opacity 属性定义笔触颜色的透明度（合法的范围是：0 - 1）</span></li></ul><p data-lake-id=\"u16ea2e09\" id=\"u16ea2e09\"><br></p><h4 data-lake-id=\"5127e051\" id=\"5127e051\"><span data-lake-id=\"u5a62a3ab\" id=\"u5a62a3ab\">2、圆形</span></h4><p data-lake-id=\"u6db1b9bc\" id=\"u6db1b9bc\"><br></p><ul list=\"u400ab3ea\"><li fid=\"uca5c3cad\" data-lake-id=\"u2a159b2f\" id=\"u2a159b2f\"><span data-lake-id=\"uc74c9648\" id=\"uc74c9648\">cx和cy属性定义圆点的x和y坐标。如果省略cx和cy，圆的中心会被设置为(0, 0)</span></li><li fid=\"uca5c3cad\" data-lake-id=\"u92b8588b\" id=\"u92b8588b\"><span data-lake-id=\"u5c955340\" id=\"u5c955340\">r属性定义圆的半径</span></li></ul><p data-lake-id=\"u142c385d\" id=\"u142c385d\"><br></p><h4 data-lake-id=\"f8cd969d\" id=\"f8cd969d\"><span data-lake-id=\"uefe6b7b3\" id=\"uefe6b7b3\">3、椭圆</span></h4><p data-lake-id=\"u7602a00c\" id=\"u7602a00c\"><br></p><ul list=\"uf1edbf63\"><li fid=\"u3f4cceda\" data-lake-id=\"ubf60f87e\" id=\"ubf60f87e\"><span data-lake-id=\"u51a3a2ac\" id=\"u51a3a2ac\">CX属性定义的椭圆中心的x坐标</span></li><li fid=\"u3f4cceda\" data-lake-id=\"ucdbe228a\" id=\"ucdbe228a\"><span data-lake-id=\"u19b31ae0\" id=\"u19b31ae0\">CY属性定义的椭圆中心的y坐标</span></li><li fid=\"u3f4cceda\" data-lake-id=\"u8abb5e75\" id=\"u8abb5e75\"><span data-lake-id=\"u5564a392\" id=\"u5564a392\">RX属性定义的水平半径</span></li><li fid=\"u3f4cceda\" data-lake-id=\"u3dbfd2e4\" id=\"u3dbfd2e4\"><span data-lake-id=\"u11b492a2\" id=\"u11b492a2\">RY属性定义的垂直半径</span></li></ul><p data-lake-id=\"uf22a3a6e\" id=\"uf22a3a6e\"><br></p><h4 data-lake-id=\"08534a0e\" id=\"08534a0e\"><span data-lake-id=\"u6cef6386\" id=\"u6cef6386\">4、直线</span></h4><p data-lake-id=\"uf057db75\" id=\"uf057db75\"><br></p><ul list=\"u6db4cb52\"><li fid=\"ue87943c1\" data-lake-id=\"ua26b9ede\" id=\"ua26b9ede\"><span data-lake-id=\"ubedccbc4\" id=\"ubedccbc4\">x1 属性在 x 轴定义线条的开始</span></li><li fid=\"ue87943c1\" data-lake-id=\"ud38c1a3c\" id=\"ud38c1a3c\"><span data-lake-id=\"u3be58d1a\" id=\"u3be58d1a\">y1 属性在 y 轴定义线条的开始</span></li><li fid=\"ue87943c1\" data-lake-id=\"uad00353e\" id=\"uad00353e\"><span data-lake-id=\"uc75629bc\" id=\"uc75629bc\">x2 属性在 x 轴定义线条的结束</span></li><li fid=\"ue87943c1\" data-lake-id=\"ud82d130e\" id=\"ud82d130e\"><span data-lake-id=\"u3ed76660\" id=\"u3ed76660\">y2 属性在 y 轴定义线条的结束</span></li></ul><p data-lake-id=\"uf37dff40\" id=\"uf37dff40\"><br></p><h4 data-lake-id=\"cafb2d86\" id=\"cafb2d86\"><span data-lake-id=\"u1b3b4989\" id=\"u1b3b4989\">5、曲线</span></h4><p data-lake-id=\"u5c71c8a1\" id=\"u5c71c8a1\"><br></p><ul list=\"ua2a06b2c\"><li fid=\"ue3c63673\" data-lake-id=\"u6d38a8cb\" id=\"u6d38a8cb\"><span data-lake-id=\"uc3a74532\" id=\"uc3a74532\">points 属性定义多边形每个角的 x 和 y 坐标</span></li><li fid=\"ue3c63673\" data-lake-id=\"u52024667\" id=\"u52024667\"><span data-lake-id=\"u059f629f\" id=\"u059f629f\">是用于创建任何只有直线的形状</span></li></ul><p data-lake-id=\"u58f32f89\" id=\"u58f32f89\"><br></p><h4 data-lake-id=\"5962e2c2\" id=\"5962e2c2\"><span data-lake-id=\"u0098e717\" id=\"u0098e717\">6、多边形</span></h4><p data-lake-id=\"u343b1226\" id=\"u343b1226\"><br></p><ul list=\"u16e654c9\"><li fid=\"u6081e91d\" data-lake-id=\"ucd1f95db\" id=\"ucd1f95db\"><span data-lake-id=\"uf6618e16\" id=\"uf6618e16\">points 属性定义多边形每个角的 x 和 y 坐标</span></li></ul><p data-lake-id=\"ubda45c5c\" id=\"ubda45c5c\"><br></p><h4 data-lake-id=\"f7327da1\" id=\"f7327da1\"><span data-lake-id=\"ued71a058\" id=\"ued71a058\">7、路径</span></h4><p data-lake-id=\"u4036cc55\" id=\"u4036cc55\"><br></p><ul list=\"u3deca482\"><li fid=\"u2b3187ab\" data-lake-id=\"u4c48df76\" id=\"u4c48df76\"><span data-lake-id=\"u7e5fcea1\" id=\"u7e5fcea1\">M = moveto(M X,Y) ：将画笔移动到指定的坐标位置</span></li><li fid=\"u2b3187ab\" data-lake-id=\"u0822cd6a\" id=\"u0822cd6a\"><span data-lake-id=\"uc4e7f6af\" id=\"uc4e7f6af\">L = lineto(L X,Y) ：画直线到指定的坐标位置</span></li><li fid=\"u2b3187ab\" data-lake-id=\"ub48d0928\" id=\"ub48d0928\"><span data-lake-id=\"u79e2bf98\" id=\"u79e2bf98\">H = horizontal lineto(H X)：画水平线到指定的X坐标位置</span></li><li fid=\"u2b3187ab\" data-lake-id=\"ue639fac9\" id=\"ue639fac9\"><span data-lake-id=\"u8755266d\" id=\"u8755266d\">V = vertical lineto(V Y)：画垂直线到指定的Y坐标位置</span></li><li fid=\"u2b3187ab\" data-lake-id=\"ua3a4be63\" id=\"ua3a4be63\"><span data-lake-id=\"ua97aefc0\" id=\"ua97aefc0\">C = curveto(C X1,Y1,X2,Y2,ENDX,ENDY)：三次贝赛曲线</span></li><li fid=\"u2b3187ab\" data-lake-id=\"u8ba4e5d6\" id=\"u8ba4e5d6\"><span data-lake-id=\"u86766e49\" id=\"u86766e49\">S = smooth curveto(x2 y2 x y)光滑三次贝塞尔曲线到</span></li><li fid=\"u2b3187ab\" data-lake-id=\"ud41d8adf\" id=\"ud41d8adf\"><span data-lake-id=\"ud7737027\" id=\"ud7737027\">Q = quadratic Belzier curve(Q X,Y,ENDX,ENDY)：二次贝赛曲线</span></li><li fid=\"u2b3187ab\" data-lake-id=\"u44ff3273\" id=\"u44ff3273\"><span data-lake-id=\"u148034fa\" id=\"u148034fa\">T = smooth quadratic Belzier curveto(T ENDX,ENDY)：光滑二次贝塞尔曲线到</span></li><li fid=\"u2b3187ab\" data-lake-id=\"uc788cf74\" id=\"uc788cf74\"><span data-lake-id=\"u52e4f7fe\" id=\"u52e4f7fe\">A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：arc椭圆弧</span></li><li fid=\"u2b3187ab\" data-lake-id=\"u1773fc3f\" id=\"u1773fc3f\"><span data-lake-id=\"u130cdee4\" id=\"u130cdee4\">Z = closepath()：关闭路径<br /></span><code data-lake-id=\"ucb4f5cd1\" id=\"ucb4f5cd1\"><span data-lake-id=\"u49cfe1f1\" id=\"u49cfe1f1\">如：M　起点X，起点Y　L（直线）终点X，终点Y　H（水平线）终点X　V（垂直线）终点Y M 10,20 L 80,50 M 10,20 V 50 M 10,20 H 90</span></code></li></ul><p data-lake-id=\"u3cf9bcbc\" id=\"u3cf9bcbc\"><br></p><p data-lake-id=\"uf17e6f54\" id=\"uf17e6f54\"><span data-lake-id=\"u1c524946\" id=\"u1c524946\">如果指令字母是大写的，例如M, 则表示坐标位置是绝对位置；如果指令字母小写的，例如m, 则表示坐标位置是相对位置。</span></p><p data-lake-id=\"u1312d3eb\" id=\"u1312d3eb\"><br></p><p data-lake-id=\"u83bca0b9\" id=\"u83bca0b9\"><span data-lake-id=\"ue428d5d6\" id=\"ue428d5d6\">####8、文本</span></p><p data-lake-id=\"u44285525\" id=\"u44285525\"><br></p><ul list=\"u4a8c02dc\"><li fid=\"ub6c2c78a\" data-lake-id=\"u8ece962e\" id=\"u8ece962e\"><span data-lake-id=\"ubfe638ff\" id=\"ubfe638ff\">x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px）</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"u3e13658e\" id=\"u3e13658e\"><span data-lake-id=\"ueb17b2a2\" id=\"ueb17b2a2\">y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px）<br /></span><code data-lake-id=\"u3c577a14\" id=\"u3c577a14\"><span data-lake-id=\"u960492cf\" id=\"u960492cf\">&lt;text x=&quot;10&quot; y=&quot;15&quot;&gt;Text travels along any path that you define for it.&lt;/text&gt;</span></code><span data-lake-id=\"uc4e098de\" id=\"uc4e098de\"><br /></span><span data-lake-id=\"u22ed7cb2\" id=\"u22ed7cb2\">####9、容器元素用法</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"uecc89e71\" id=\"uecc89e71\"><span data-lake-id=\"u56328961\" id=\"u56328961\">链接元素<br /></span><span data-lake-id=\"uca794a90\" id=\"uca794a90\">svg的链接元素 a和html的链接元素a很相似，都是指向一个超链接。<br /></span><span data-lake-id=\"u6f10e727\" id=\"u6f10e727\">在svg的a元素中，可以包含任何的形状<br /></span><span data-lake-id=\"u2b774285\" id=\"u2b774285\">注意： 在获取svg的a元素时，为了区分html的a元素，要加命名空间<br /></span><code data-lake-id=\"uf7b77ece\" id=\"uf7b77ece\"><span data-lake-id=\"uf7581c64\" id=\"uf7581c64\">//css @namespace svg url(http://www.w3.org/2000/svg); svg|a {}</span></code></li><li fid=\"ub6c2c78a\" data-lake-id=\"u362648e5\" id=\"u362648e5\"><span data-lake-id=\"ufc4572cd\" id=\"ufc4572cd\">defs<br /></span><span data-lake-id=\"u8ddbad5b\" id=\"u8ddbad5b\">defs元素通常用来存储在后续将会用到的图像，其 defs中的图像，不会直接呈现，必须在后续通过其他元素 引用才能呈现。<br /></span><span data-lake-id=\"ucab2fe7b\" id=\"ucab2fe7b\">相当于在js中，封装的一个方法，供其他地方调用。 在这里，是封装了一段html，供后续的html调用。<br /></span><span data-lake-id=\"u45ae02ba\" id=\"u45ae02ba\">一般情况下，defs中用来定义过滤，渐变，填充(pattern)等效果。</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"u0b7acb83\" id=\"u0b7acb83\"><span data-lake-id=\"uc6149de7\" id=\"uc6149de7\">g<br /></span><span data-lake-id=\"u98d68c26\" id=\"u98d68c26\">元素是一个用于对其他SVG元素进行分组的容器。<br /></span><span data-lake-id=\"ub59736d3\" id=\"ub59736d3\">在元素上设置的属性和变换，会统一影响g分组中的所有元素，会把g元素当成一个整体处理。<br /></span><span data-lake-id=\"u8a0a06c0\" id=\"u8a0a06c0\">和前面的defs类似，只是中的元素会直接作为一个整体呈现，可以不需要引用就能呈现，当然也能被use复制。</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"u03daad53\" id=\"u03daad53\"><span data-lake-id=\"u817e5c17\" id=\"u817e5c17\">mask<br /></span><span data-lake-id=\"u55636861\" id=\"u55636861\">mask元素定义了一个alpha通道，用于将当前对象合成到背景中，在其他元素上通过mask属性来引用。<br /></span><span data-lake-id=\"u22050a5f\" id=\"u22050a5f\">其本身不会呈现，必须被其他元素引用才能呈现。</span></li><li fid=\"ub6c2c78a\" data-lake-id=\"u147fb85d\" id=\"u147fb85d\"><span data-lake-id=\"ubef89fb0\" id=\"ubef89fb0\">marker<br /></span><span data-lake-id=\"u9f2149da\" id=\"u9f2149da\">marker元素定义了用于在给定的、、或元素上绘制箭头或 多点标记 的图形。<br /></span><span data-lake-id=\"u70f9a70f\" id=\"u70f9a70f\">在元素上使用 marker-start, marker-mid, 和 marker-end 属性，来引用marker元素。<br /></span><span data-lake-id=\"u55f85502\" id=\"u55f85502\">marker有如下属性:<br /></span><span data-lake-id=\"ua676e4f4\" id=\"ua676e4f4\">markerHeight: 定义marker元素的高度<br /></span><span data-lake-id=\"ucac9b651\" id=\"ucac9b651\">markerWidth: 定义marker元素的宽度<br /></span><span data-lake-id=\"u2ec6a7f5\" id=\"u2ec6a7f5\">markerUnits: 该属性为markerWidth、markerHeight以及marker的内容 定义了坐标系统。 userSpaceOnUse|strokeWidth<br /></span><span data-lake-id=\"u110674ce\" id=\"u110674ce\">orient：定义marker相对于寄宿元素的方向，值有auto|auto start-reverse|。<br /></span><span data-lake-id=\"uc3b57bf5\" id=\"uc3b57bf5\">refX: marker元素相对于X轴的偏移。和正常坐标系相反，正值向左，负值向右。<br /></span><span data-lake-id=\"u64f2ff22\" id=\"u64f2ff22\">refY：marker元素相对于Y轴的偏移。和正常坐标系相反，正值向上，负值向下。<br /></span><span data-lake-id=\"ud00ed425\" id=\"ud00ed425\">viewBox： 当前marker片段定义SVG视图端口的边界。<br /></span><span data-lake-id=\"u59828e70\" id=\"u59828e70\">preserveAspectRatio：定义了如果marker片段嵌入到具有不同纵横比的容器中，则必须如何对其进行变形。<br /></span><span data-lake-id=\"u0fd6e2da\" id=\"u0fd6e2da\">注意：<br /></span><span data-lake-id=\"u4f357640\" id=\"u4f357640\">如果一个元素定义了marker-start，那么就在开头的位置添加marker，<br /></span><span data-lake-id=\"u48fad4bd\" id=\"u48fad4bd\">如果一个元素定义了marker-mid，那么就在所有中间位置添加marker，<br /></span><span data-lake-id=\"u1de9dd90\" id=\"u1de9dd90\">如果一个元素定义了marker-end，那么就在结尾位置添加marker。</span></li></ul><p data-lake-id=\"ub40a4e1e\" id=\"ub40a4e1e\"><br></p><p data-lake-id=\"u895ab295\" id=\"u895ab295\"><span data-lake-id=\"u18e540db\" id=\"u18e540db\">可以定义多个，那么也就添加多个。<br /></span><span data-lake-id=\"u856b14a3\" id=\"u856b14a3\">####10、其它</span></p><p data-lake-id=\"u470618c8\" id=\"u470618c8\"><br></p><ul list=\"u903ec438\"><li fid=\"u732e3cca\" data-lake-id=\"u8df2054a\" id=\"u8df2054a\"><span data-lake-id=\"ua00155ff\" id=\"ua00155ff\"> 1、image图像<br /></span><span data-lake-id=\"u244c7753\" id=\"u244c7753\">x表示图像左上角在水平方向的位移，<br /></span><span data-lake-id=\"ua2f7b5f5\" id=\"ua2f7b5f5\">y表示图像做商检在竖直方向的位移，<br /></span><span data-lake-id=\"ueb0e987c\" id=\"ueb0e987c\">height，width分别为image的高度和宽度。<br /></span><span data-lake-id=\"u8198c935\" id=\"u8198c935\">注意：默认图像不会缩放，即使定义了height，width，也不会缩放铺满剩余区域 </span></li><li fid=\"u732e3cca\" data-lake-id=\"uf3ea7d66\" id=\"uf3ea7d66\"><span data-lake-id=\"u806d0b87\" id=\"u806d0b87\"> 2、stroke属性<br /></span><span data-lake-id=\"u25b7945f\" id=\"u25b7945f\">SVG提供了一个范围广泛stroke 属性。这几个属性多用来定义线条的样式。<br /></span><span data-lake-id=\"ub6ecb98e\" id=\"ub6ecb98e\">stroke. 线条颜色<br /></span><span data-lake-id=\"ucadd4a41\" id=\"ucadd4a41\">stroke-width 线条粗细<br /></span><span data-lake-id=\"u6df3aed7\" id=\"u6df3aed7\">stroke-linecap 线条闭合方式<br /></span><span data-lake-id=\"ub8a86eaa\" id=\"ub8a86eaa\">stroke-dasharray 线条虚线数值组 </span></li><li fid=\"u732e3cca\" data-lake-id=\"uaf01c3bf\" id=\"uaf01c3bf\"><span data-lake-id=\"ue5e76f94\" id=\"ue5e76f94\"> 3、use<br /></span><span data-lake-id=\"u4f0a3784\" id=\"u4f0a3784\">该元素从SVG文档中获取节点，并在其他位置复制它们。<br /></span><span data-lake-id=\"u245660a5\" id=\"u245660a5\">当use复制其他元素后，还能对复制的元素进行属性的覆盖。<br /></span><span data-lake-id=\"u8fc83eed\" id=\"u8fc83eed\">x, y, width, height，href这几个属性，不管源 元素是否有设置，都可以覆盖。<br /></span><span data-lake-id=\"u52decdec\" id=\"u52decdec\">而其他属性，如果源 元素已经设置，则无法覆盖，如果没有设置，则可以再use上设置。<br /></span><span data-lake-id=\"u6b8935fa\" id=\"u6b8935fa\">可以看到设置的x属性覆盖成功了，第二个use的fill也设置成功了，但是第三个use 的stroke没有变成红色，因为circle已经指定了，所以无法覆盖。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u6947f877\" id=\"u6947f877\"><span data-lake-id=\"ub895175e\" id=\"ub895175e\"> 4、事件<br /></span><span data-lake-id=\"u9010861d\" id=\"u9010861d\">最常用的是 onclick、onactivate、onmousedown、onmouseup、onmouseover、onmousemove、onmouseout、onload、onresize、 onunload 和 onrepeat。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u47777950\" id=\"u47777950\"><span data-lake-id=\"ua7cba26f\" id=\"ua7cba26f\"> 5、svg<br /></span><span data-lake-id=\"u9a0f9541\" id=\"u9a0f9541\">svg所定义的片段， 不管在独立的svg文件中，还是嵌入html中，都拥有独立的视口和坐标系统。<br /></span><span data-lake-id=\"u2968507c\" id=\"u2968507c\">svg元素有如下专有属性:<br /></span><span data-lake-id=\"u5e0cd14f\" id=\"u5e0cd14f\">version：指明 SVG 文档遵循规范， 值为1.0 | 1.1<br /></span><span data-lake-id=\"u331419d2\" id=\"u331419d2\">x：起始 横坐标<br /></span><span data-lake-id=\"u11f78593\" id=\"u11f78593\">y：起始 纵坐标<br /></span><span data-lake-id=\"u10d8bf1c\" id=\"u10d8bf1c\">width：svg元素的宽度<br /></span><span data-lake-id=\"u531dfb08\" id=\"u531dfb08\">height：svg元素的高度<br /></span><span data-lake-id=\"ue4ee4251\" id=\"ue4ee4251\">preserveAspectRatio：是否强制进行统一缩放.<br /></span><span data-lake-id=\"u64427237\" id=\"u64427237\">viewBox：允许指定一个给定的一组图形伸展以适应特定的容器元素。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u643e2227\" id=\"u643e2227\"><span data-lake-id=\"u8fb2f024\" id=\"u8fb2f024\"> 6、视口 viewbox<br /></span><span data-lake-id=\"u900a6aa5\" id=\"u900a6aa5\">viewBox属性的值是一个包含4个参数的列表 min-x, min-y, width and height<br /></span><span data-lake-id=\"ub6713b18\" id=\"ub6713b18\">下面的不设置 viewbox的情形:<br /></span><span data-lake-id=\"uf1c2bf1f\" id=\"uf1c2bf1f\">矩形起始于 svg的（0,0）位置，长度为100px，宽度为150px<br /></span><span data-lake-id=\"uc494753b\" id=\"uc494753b\">当设置viewbo后<br /></span><span data-lake-id=\"u8654ba28\" id=\"u8654ba28\">可以看到，不仅变大了，而且还向右下角 平移了。<br /></span><span data-lake-id=\"ua5a99d14\" id=\"ua5a99d14\">为什么呢？ </span></li><li fid=\"u732e3cca\" data-lake-id=\"u25700e4d\" id=\"u25700e4d\"><span data-lake-id=\"u4757ae18\" id=\"u4757ae18\"> 我们可以看到 viewBox的值为&quot;-5 -5 100 150&quot;，（-5 -5）分别表示 最小的x和最小的y，也就是说，左上角原本的（0,0）现在等价于(-5,-5), 那么如果想要时rect 还是在原来的左上角，那么才可以，而如果设置为<br /></span><span data-lake-id=\"u9f890fdb\" id=\"u9f890fdb\">就会向右向下平移5px。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u6cec3efe\" id=\"u6cec3efe\"><span data-lake-id=\"ub8843b78\" id=\"ub8843b78\"> 然后我们看到viewbox后两个是100 150，分别表示 svg的宽度和高度，即100等同于svg定义的宽度500,150等同于svg定义的高度600，那么在svg容器里面的rect 上设置 width为100，等同于500，高为150，等同于600，这样会有个问题，就是本来rect的长宽比为100:150，而通过viewbox设置后，长宽比会变化， 所以svg默认 即使viewbox宽度比变化了，但是viewbox容器里的元素的长宽比不会变化，会以缩放较小的那个为准。<br /></span><span data-lake-id=\"u9a0aefbf\" id=\"u9a0aefbf\">所以我们可以看到 viewbox相当于 一个比例尺，对原本的svg的位置和宽高 做了相同比例的缩放。<br /></span><span data-lake-id=\"u463cfe6d\" id=\"u463cfe6d\">一共有下面的5个元素可以设置 viewbox:<br /></span><code data-lake-id=\"uf7779c09\" id=\"uf7779c09\"><span data-lake-id=\"u52d31dc5\" id=\"u52d31dc5\">&lt;marker&gt;, &lt;pattern&gt;, &lt;svg&gt;, &lt;symbol&gt;, 和 &lt;view&gt;</span></code><span data-lake-id=\"uf2322e8e\" id=\"uf2322e8e\"><br /></span><span data-lake-id=\"u5a2ef247\" id=\"u5a2ef247\">###总结 </span></li><li fid=\"u732e3cca\" data-lake-id=\"ufe828b7a\" id=\"ufe828b7a\"><span data-lake-id=\"uc376f2c1\" id=\"uc376f2c1\"> 1、svg遵循XML文档格式，所以所以我们能给其定义css、但同时要注意其每个图形独特的属性。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u29b8d580\" id=\"u29b8d580\"><span data-lake-id=\"u8cd9a029\" id=\"u8cd9a029\"> 2、内置图形在同一位置的时候，默认的是空间向上重叠，可用z-index来理解，后来者居上。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u12d6f196\" id=\"u12d6f196\"><span data-lake-id=\"ud8572729\" id=\"ud8572729\"> 3、我们能用js获取SVG的DOM，并对其进行相关操作。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"ub366f09d\" id=\"ub366f09d\"><span data-lake-id=\"u0bd435fd\" id=\"u0bd435fd\"> 4、定义和分组这两个概念，入手相对较难理解，但对使用D3.js开发的时候很有帮助。定义能减少我们的工作量，提高代码复用率。分组方便我们统一管理SVG中的内置图形。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u0b44b73f\" id=\"u0b44b73f\"><span data-lake-id=\"uf060816a\" id=\"uf060816a\"> 5、SVG内置图形都有自己的坐标属性，正是这些属性，我们才能对内置图形做位置变化。 </span></li><li fid=\"u732e3cca\" data-lake-id=\"u6e13cc71\" id=\"u6e13cc71\"><span data-lake-id=\"ue0c5c428\" id=\"ue0c5c428\"> 6、动画，SVG有自己的动画定义，但是个人不建议使用，因为我们完全可以使用CSS的动画来实现同样的功能。 </span></li></ul>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-22T05:16:29.000Z",
    "deleted_at": null,
    "created_at": "2021-12-22T05:15:26.000Z",
    "updated_at": "2021-12-22T05:16:29.000Z",
    "published_at": "2021-12-22T05:16:29.000Z",
    "first_published_at": "2021-12-22T05:16:29.000Z",
    "word_count": 2976,
    "cover": null,
    "description": "D3可视化选择集D3是实现数据可视化，仍然离不开传统DOM的选择和操作，也因此，D3提供了类似Jquery的DOM操作指令：d3.select：选择第一个指定元素d3.selectAll ： 选择所有的元素const svg = d3.select('svg') //选择svg const p...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 62758435,
    "slug": "ew98ne",
    "title": "微前端的发展与实践",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-22T05:31:44.747Z",
      "updated_at": "2021-12-22T05:31:44.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-22T05:28:17.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-22T05:28:17.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"f4bb9c40\"></a>\n# 微前端介绍\n\n\n<a name=\"e17d58e6\"></a>\n## 什么是微前端\n\n\n> Techniques, strategies and recipes for building a **modern web app** with **multiple teams** that can **ship features independently**. -- [Micro Frontends](https://micro-frontends.org/)\n>  \n> 微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。\n\n\n<br />微前端架构具备以下几个核心价值：<br />\n\n-  技术栈无关<br />主框架不限制接入应用的技术栈，微应用具备完全自主权 \n-  独立开发、独立部署<br />微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 \n-  增量升级<br />在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 \n-  独立运行时<br />每个微应用之间状态隔离，运行时状态不共享 \n\n\n<br />微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用([Frontend Monolith](https://www.youtube.com/watch?v=pU1gXA0rfwc))后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。<br />\n<br />更多关于微前端的相关介绍，推荐大家可以去看这几篇文章：<br />\n\n- [Micro Frontends](https://micro-frontends.org/)\n- [Micro Frontends from martinfowler.com](https://martinfowler.com/articles/micro-frontends.html)\n- [可能是你见过最完善的微前端解决方案](https://zhuanlan.zhihu.com/p/78362028)\n- [微前端的核心价值](https://zhuanlan.zhihu.com/p/95085796)\n\n\n\n<a name=\"6e3c7750\"></a>\n## qiankun 介绍\n\n<br />qiankun 是一个基于 [single-spa](https://github.com/CanopyTax/single-spa) 的[微前端](https://micro-frontends.org/)实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。<br />\n<br />qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。<br />\n<br />目前 qiankun 已在蚂蚁内部服务了超过 200+ 线上应用，在易用性及完备性上，绝对是值得信赖的。<br />\n\n-  🥄 简单<br />由于主应用微应用都能做到技术栈无关，qiankun 对于用户而言只是一个类似 jQuery 的库，你需要调用几个 qiankun 的 API 即可完成应用的微前端改造。同时由于 qiankun 的 HTML entry 及沙箱的设计，使得微应用的接入像使用 iframe 一样简单。 \n-  🍡 解耦/技术栈无关<br />微前端的核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，而 qiankun 的诸多设计均是秉持这一原则，如 HTML entry、沙箱、应用间通信等。这样才能确保微应用真正具备 独立开发、独立运行 的能力。 \n\n\n\n<a name=\"e0bd7e27\"></a>\n## 为什么不是 iframe\n\n<br />为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 \"炫技\" 或者刻意追求 \"特立独行\"。<br />\n<br />如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。<br />\n<br />iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。<br />\n\n1. url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。\n1. UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..\n1. 全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。\n1. 慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。\n\n\n<br />其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。<br />\n\n<a name=\"c666ad11\"></a>\n## 特性\n\n\n- 📦 **基于 **[**single-spa**](https://github.com/CanopyTax/single-spa) 封装，提供了更加开箱即用的 API。\n- 📱 **技术栈无关**，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。\n- 💪 **HTML Entry 接入方式**，让你接入微应用像使用 iframe 一样简单。\n- 🛡 **样式隔离**，确保微应用之间样式互相不干扰。\n- 🧳 **JS 沙箱**，确保微应用之间 全局变量/事件 不冲突。\n- ⚡️ **资源预加载**，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。\n- 🔌 **umi 插件**，提供了 [@umijs/plugin-qiankun](https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun) 供 umi 应用一键切换成微前端架构系统。\n\n\n\n<a name=\"c1b18ad6\"></a>\n## 快速上手\n\n\n<a name=\"d970b2a8\"></a>\n### 主应用\n\n\n<a name=\"34b974f9\"></a>\n#### 1. 安装 qiankun\n\n\n```javascript\n  yarn add qiankun # 或者 npm i qiankun -S\n```\n\n\n<a name=\"fdb3f36c\"></a>\n#### 2. 在主应用中注册微应用\n\n\n```javascript\nimport { registerMicroApps, start } from 'qiankun';\n\n// 注册微应用\nregisterMicroApps([\n  {\n    name: 'cos',\n    entry: process.env.VUE_APP_COS_UI_URL,\n    container: '#subapp-viewport',\n    activeRule: '/cos',\n    props: config\n  },\n  {\n    name: 'middleware',\n    entry: process.env.VUE_APP_MIDDLEWARE_UI_URL,\n    container: '#subapp-viewport',\n    activeRule: '/middleware',\n    props: config\n  }\n],\n{\n  beforeLoad: [\n    app => {\n      console.log('[LifeCycle] before load %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ],\n  beforeMount: [\n    app => {\n      console.log('[LifeCycle] before mount %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ],\n  afterUnmount: [\n    app => {\n      console.log('[LifeCycle] after unmount %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ]\n}\n)\n// 设置默认进入微应用\nsetDefaultMountApp('/cos')\n\n// 启动\nif (!window.qiankunStarted) {\n  window.qiankunStarted = true\n  start()\n}\n```\n\n<br />当微应用信息注册完之后，一旦浏览器的 url 发生变化，便会自动触发 qiankun 的匹配逻辑，所有 activeRule 规则匹配上的微应用就会被插入到指定的 container 中，同时依次调用微应用暴露出的生命周期钩子。<br />\n\n<a name=\"9cca01fb\"></a>\n### 微应用\n\n<br />微应用不需要额外安装任何其他依赖即可接入 qiankun 主应用。<br />\n<br />微应用分为有 `webpack` 构建和无 `webpack` 构建项目，有 `webpack` 的微应用（主要是指 Vue、React、Angular）需要做的事情有：<br />\n\n1.  新增 public-path.js 文件，用于修改运行时的 publicPath。什么是运行时的 publicPath ？。  \n> 注意：运行时的 publicPath 和构建时的 publicPath 是不同的，两者不能等价替代。\n\n2.  微应用建议使用 history 模式的路由，需要设置路由 base，值和它的 activeRule 是一样的。 \n2.  在入口文件最顶部引入 public-path.js，修改并导出三个生命周期函数。 \n2.  修改 webpack 打包，允许开发环境跨域和 umd 打包。 \n\n\n<br />主要的修改就是以上四个，可能会根据项目的不同情况而改变。例如，你的项目是 index.html 和其他的所有文件分开部署的，说明你们已经将构建时的 publicPath 设置为了完整路径，则不用修改运行时的 publicPath （第一步操作可省）。<br />\n<br />无 `webpack` 构建的微应用直接将 `lifecycles` 挂载到 `window` 上即可。<br />\n\n<a name=\"f4af72d0\"></a>\n#### 1. 导出相应的生命周期钩子\n\n<br />微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。<br />\n\n```javascript\nlet instance = null\nasync function render (props = {}) {\n  const { container } = props\n  // 注入 actions 实例\n  actions.setActions(props)\n  // 从父应用获取全局配置\n  for (let i in config) {\n    config[i] = props[i]\n  }\n  const router = new vueRouter({\n    base: window.__POWERED_BY_QIANKUN__ ? 'cos' : process.env.BASE_URL,\n    mode: 'history',\n    scrollBehavior: () => ({ y: 0 }),\n    routes\n  })\n  // 获取本地时间与服务器时间的差值\n  if (isUndefined(config.timeDifference)) {\n    await getTimeFunc()\n  }\n  instance = new Vue({\n    router,\n    store,\n    created: storeBootstrap,\n    render: (h) => h(App)\n  }).$mount(container ? container.querySelector('#app') : '#app')\n\n  // 获取用户信息\n  store.dispatch('GetInfo')\n  // 获取用户vdc列表，teamSpace列表\n  if (config.systemId === systemId.VDC_SYSTEM_ID) {\n    store.dispatch('GetVdcList')\n  } else if (config.systemId === systemId.TEAM_SPACE_SYSTEM_ID) {\n    store.dispatch('GetTeamSpaceList')\n  }\n}\n\n\nif (!window.__POWERED_BY_QIANKUN__) {\n  render()\n}\n\nexport async function bootstrap () {\n  console.log('[vue] vue app bootstraped')\n}\n\nexport async function mount (props) {\n  console.log('[vue] props from main framework', props)\n\n  render(props)\n}\n\nexport async function unmount () {\n  instance.$destroy()\n  instance.$el.innerHTML = ''\n  instance = null\n}\n```\n\n\n<a name=\"6f5639d8\"></a>\n#### 2. 配置微应用的打包工具\n\n<br />除了代码中暴露出相应的生命周期钩子之外，为了让主应用能正确识别微应用暴露出来的一些信息，微应用的打包工具需要增加如下配置：<br />\n\n```javascript\nconst packageName = require('./package.json').name;\n\nmodule.exports = {\n  output: {\n    library: `${packageName}-[name]`,\n    libraryTarget: 'umd',\n    jsonpFunction: `webpackJsonp_${packageName}`,\n  },\n};\n```\n",
    "body_draft": "<a name=\"f4bb9c40\"></a>\n# 微前端介绍\n\n\n<a name=\"e17d58e6\"></a>\n## 什么是微前端\n\n\n> Techniques, strategies and recipes for building a **modern web app** with **multiple teams** that can **ship features independently**. -- [Micro Frontends](https://micro-frontends.org/)\n>  \n> 微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。\n\n\n<br />微前端架构具备以下几个核心价值：<br />\n\n-  技术栈无关<br />主框架不限制接入应用的技术栈，微应用具备完全自主权 \n-  独立开发、独立部署<br />微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 \n-  增量升级<br />在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 \n-  独立运行时<br />每个微应用之间状态隔离，运行时状态不共享 \n\n\n<br />微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用([Frontend Monolith](https://www.youtube.com/watch?v=pU1gXA0rfwc))后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。<br />\n<br />更多关于微前端的相关介绍，推荐大家可以去看这几篇文章：<br />\n\n- [Micro Frontends](https://micro-frontends.org/)\n- [Micro Frontends from martinfowler.com](https://martinfowler.com/articles/micro-frontends.html)\n- [可能是你见过最完善的微前端解决方案](https://zhuanlan.zhihu.com/p/78362028)\n- [微前端的核心价值](https://zhuanlan.zhihu.com/p/95085796)\n\n\n\n<a name=\"6e3c7750\"></a>\n## qiankun 介绍\n\n<br />qiankun 是一个基于 [single-spa](https://github.com/CanopyTax/single-spa) 的[微前端](https://micro-frontends.org/)实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。<br />\n<br />qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。<br />\n<br />目前 qiankun 已在蚂蚁内部服务了超过 200+ 线上应用，在易用性及完备性上，绝对是值得信赖的。<br />\n\n-  🥄 简单<br />由于主应用微应用都能做到技术栈无关，qiankun 对于用户而言只是一个类似 jQuery 的库，你需要调用几个 qiankun 的 API 即可完成应用的微前端改造。同时由于 qiankun 的 HTML entry 及沙箱的设计，使得微应用的接入像使用 iframe 一样简单。 \n-  🍡 解耦/技术栈无关<br />微前端的核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，而 qiankun 的诸多设计均是秉持这一原则，如 HTML entry、沙箱、应用间通信等。这样才能确保微应用真正具备 独立开发、独立运行 的能力。 \n\n\n\n<a name=\"e0bd7e27\"></a>\n## 为什么不是 iframe\n\n<br />为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 \"炫技\" 或者刻意追求 \"特立独行\"。<br />\n<br />如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。<br />\n<br />iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。<br />\n\n1. url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。\n1. UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..\n1. 全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。\n1. 慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。\n\n\n<br />其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。<br />\n\n<a name=\"c666ad11\"></a>\n## 特性\n\n\n- 📦 **基于 **[**single-spa**](https://github.com/CanopyTax/single-spa) 封装，提供了更加开箱即用的 API。\n- 📱 **技术栈无关**，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。\n- 💪 **HTML Entry 接入方式**，让你接入微应用像使用 iframe 一样简单。\n- 🛡 **样式隔离**，确保微应用之间样式互相不干扰。\n- 🧳 **JS 沙箱**，确保微应用之间 全局变量/事件 不冲突。\n- ⚡️ **资源预加载**，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。\n- 🔌 **umi 插件**，提供了 [@umijs/plugin-qiankun](https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun) 供 umi 应用一键切换成微前端架构系统。\n\n\n\n<a name=\"c1b18ad6\"></a>\n## 快速上手\n\n\n<a name=\"d970b2a8\"></a>\n### 主应用\n\n\n<a name=\"34b974f9\"></a>\n#### 1. 安装 qiankun\n\n\n```javascript\n  yarn add qiankun # 或者 npm i qiankun -S\n```\n\n\n<a name=\"fdb3f36c\"></a>\n#### 2. 在主应用中注册微应用\n\n\n```javascript\nimport { registerMicroApps, start } from 'qiankun';\n\n// 注册微应用\nregisterMicroApps([\n  {\n    name: 'cos',\n    entry: process.env.VUE_APP_COS_UI_URL,\n    container: '#subapp-viewport',\n    activeRule: '/cos',\n    props: config\n  },\n  {\n    name: 'middleware',\n    entry: process.env.VUE_APP_MIDDLEWARE_UI_URL,\n    container: '#subapp-viewport',\n    activeRule: '/middleware',\n    props: config\n  }\n],\n{\n  beforeLoad: [\n    app => {\n      console.log('[LifeCycle] before load %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ],\n  beforeMount: [\n    app => {\n      console.log('[LifeCycle] before mount %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ],\n  afterUnmount: [\n    app => {\n      console.log('[LifeCycle] after unmount %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ]\n}\n)\n// 设置默认进入微应用\nsetDefaultMountApp('/cos')\n\n// 启动\nif (!window.qiankunStarted) {\n  window.qiankunStarted = true\n  start()\n}\n```\n\n<br />当微应用信息注册完之后，一旦浏览器的 url 发生变化，便会自动触发 qiankun 的匹配逻辑，所有 activeRule 规则匹配上的微应用就会被插入到指定的 container 中，同时依次调用微应用暴露出的生命周期钩子。<br />\n\n<a name=\"9cca01fb\"></a>\n### 微应用\n\n<br />微应用不需要额外安装任何其他依赖即可接入 qiankun 主应用。<br />\n<br />微应用分为有 `webpack` 构建和无 `webpack` 构建项目，有 `webpack` 的微应用（主要是指 Vue、React、Angular）需要做的事情有：<br />\n\n1.  新增 public-path.js 文件，用于修改运行时的 publicPath。什么是运行时的 publicPath ？。  \n> 注意：运行时的 publicPath 和构建时的 publicPath 是不同的，两者不能等价替代。\n\n2.  微应用建议使用 history 模式的路由，需要设置路由 base，值和它的 activeRule 是一样的。 \n2.  在入口文件最顶部引入 public-path.js，修改并导出三个生命周期函数。 \n2.  修改 webpack 打包，允许开发环境跨域和 umd 打包。 \n\n\n<br />主要的修改就是以上四个，可能会根据项目的不同情况而改变。例如，你的项目是 index.html 和其他的所有文件分开部署的，说明你们已经将构建时的 publicPath 设置为了完整路径，则不用修改运行时的 publicPath （第一步操作可省）。<br />\n<br />无 `webpack` 构建的微应用直接将 `lifecycles` 挂载到 `window` 上即可。<br />\n\n<a name=\"f4af72d0\"></a>\n#### 1. 导出相应的生命周期钩子\n\n<br />微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。<br />\n\n```javascript\nlet instance = null\nasync function render (props = {}) {\n  const { container } = props\n  // 注入 actions 实例\n  actions.setActions(props)\n  // 从父应用获取全局配置\n  for (let i in config) {\n    config[i] = props[i]\n  }\n  const router = new vueRouter({\n    base: window.__POWERED_BY_QIANKUN__ ? 'cos' : process.env.BASE_URL,\n    mode: 'history',\n    scrollBehavior: () => ({ y: 0 }),\n    routes\n  })\n  // 获取本地时间与服务器时间的差值\n  if (isUndefined(config.timeDifference)) {\n    await getTimeFunc()\n  }\n  instance = new Vue({\n    router,\n    store,\n    created: storeBootstrap,\n    render: (h) => h(App)\n  }).$mount(container ? container.querySelector('#app') : '#app')\n\n  // 获取用户信息\n  store.dispatch('GetInfo')\n  // 获取用户vdc列表，teamSpace列表\n  if (config.systemId === systemId.VDC_SYSTEM_ID) {\n    store.dispatch('GetVdcList')\n  } else if (config.systemId === systemId.TEAM_SPACE_SYSTEM_ID) {\n    store.dispatch('GetTeamSpaceList')\n  }\n}\n\n\nif (!window.__POWERED_BY_QIANKUN__) {\n  render()\n}\n\nexport async function bootstrap () {\n  console.log('[vue] vue app bootstraped')\n}\n\nexport async function mount (props) {\n  console.log('[vue] props from main framework', props)\n\n  render(props)\n}\n\nexport async function unmount () {\n  instance.$destroy()\n  instance.$el.innerHTML = ''\n  instance = null\n}\n```\n\n\n<a name=\"6f5639d8\"></a>\n#### 2. 配置微应用的打包工具\n\n<br />除了代码中暴露出相应的生命周期钩子之外，为了让主应用能正确识别微应用暴露出来的一些信息，微应用的打包工具需要增加如下配置：<br />\n\n```javascript\nconst packageName = require('./package.json').name;\n\nmodule.exports = {\n  output: {\n    library: `${packageName}-[name]`,\n    libraryTarget: 'umd',\n    jsonpFunction: `webpackJsonp_${packageName}`,\n  },\n};\n```\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"f4bb9c40\"><span class=\"ne-text\">微前端介绍</span></h1><p id=\"ufceda51f\" class=\"ne-p\"><br></p><h2 id=\"e17d58e6\"><span class=\"ne-text\">什么是微前端</span></h2><p id=\"u19542e3f\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"uee69ffe8\" class=\"ne-p\"><span class=\"ne-text\">Techniques, strategies and recipes for building a </span><strong><span class=\"ne-text\">modern web app</span></strong><span class=\"ne-text\"> with </span><strong><span class=\"ne-text\">multiple teams</span></strong><span class=\"ne-text\"> that can </span><strong><span class=\"ne-text\">ship features independently</span></strong><span class=\"ne-text\">. -- </span><a href=\"https://micro-frontends.org/\" data-href=\"https://micro-frontends.org/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Micro Frontends</span></a></p><p id=\"ua27d87df\" class=\"ne-p\"><span class=\"ne-text\"> </span></p><p id=\"u9b60fad8\" class=\"ne-p\"><span class=\"ne-text\">微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</span></p></div><p id=\"u584bc306\" class=\"ne-p\"><br></p><p id=\"u3b9f93eb\" class=\"ne-p\"><span class=\"ne-text\">微前端架构具备以下几个核心价值：</span></p><p id=\"ud2d83eec\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u25c1ff03\"><span class=\"ne-text\"> 技术栈无关<br /></span><span class=\"ne-text\">主框架不限制接入应用的技术栈，微应用具备完全自主权 </span></li><li id=\"uda897720\"><span class=\"ne-text\"> 独立开发、独立部署<br /></span><span class=\"ne-text\">微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 </span></li></ul><ul class=\"ne-ul\"><li id=\"ua75e4208\"><span class=\"ne-text\"> 增量升级<br /></span><span class=\"ne-text\">在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 </span></li><li id=\"ud90dee2c\"><span class=\"ne-text\"> 独立运行时<br /></span><span class=\"ne-text\">每个微应用之间状态隔离，运行时状态不共享 </span></li></ul><p id=\"u5791070c\" class=\"ne-p\"><br></p><p id=\"ue170ecd8\" class=\"ne-p\"><span class=\"ne-text\">微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(</span><a href=\"https://www.youtube.com/watch?v=pU1gXA0rfwc\" data-href=\"https://www.youtube.com/watch?v=pU1gXA0rfwc\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Frontend Monolith</span></a><span class=\"ne-text\">)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。</span></p><p id=\"uad823e83\" class=\"ne-p\"><br></p><p id=\"u99dc4e7c\" class=\"ne-p\"><span class=\"ne-text\">更多关于微前端的相关介绍，推荐大家可以去看这几篇文章：</span></p><p id=\"uf586c67e\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ua2ec798a\"><a href=\"https://micro-frontends.org/\" data-href=\"https://micro-frontends.org/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Micro Frontends</span></a></li><li id=\"uf747eef3\"><a href=\"https://martinfowler.com/articles/micro-frontends.html\" data-href=\"https://martinfowler.com/articles/micro-frontends.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Micro Frontends from martinfowler.com</span></a></li></ul><ul class=\"ne-ul\"><li id=\"ufdd83cd4\"><a href=\"https://zhuanlan.zhihu.com/p/78362028\" data-href=\"https://zhuanlan.zhihu.com/p/78362028\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">可能是你见过最完善的微前端解决方案</span></a></li><li id=\"u4ed41b66\"><a href=\"https://zhuanlan.zhihu.com/p/95085796\" data-href=\"https://zhuanlan.zhihu.com/p/95085796\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">微前端的核心价值</span></a></li></ul><p id=\"u53798d26\" class=\"ne-p\"><br></p><h2 id=\"6e3c7750\"><span class=\"ne-text\">qiankun 介绍</span></h2><p id=\"u34ecda9f\" class=\"ne-p\"><br></p><p id=\"u38b389fd\" class=\"ne-p\"><span class=\"ne-text\">qiankun 是一个基于 </span><a href=\"https://github.com/CanopyTax/single-spa\" data-href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">single-spa</span></a><span class=\"ne-text\"> 的</span><a href=\"https://micro-frontends.org/\" data-href=\"https://micro-frontends.org/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">微前端</span></a><span class=\"ne-text\">实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</span></p><p id=\"u72108bdc\" class=\"ne-p\"><br></p><p id=\"u5686ef85\" class=\"ne-p\"><span class=\"ne-text\">qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。</span></p><p id=\"u7543dca7\" class=\"ne-p\"><br></p><p id=\"u622752e4\" class=\"ne-p\"><span class=\"ne-text\">目前 qiankun 已在蚂蚁内部服务了超过 200+ 线上应用，在易用性及完备性上，绝对是值得信赖的。</span></p><p id=\"ud277691c\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ua15b038a\"><span class=\"ne-text\"> 🥄 简单<br /></span><span class=\"ne-text\">由于主应用微应用都能做到技术栈无关，qiankun 对于用户而言只是一个类似 jQuery 的库，你需要调用几个 qiankun 的 API 即可完成应用的微前端改造。同时由于 qiankun 的 HTML entry 及沙箱的设计，使得微应用的接入像使用 iframe 一样简单。 </span></li><li id=\"ubf1907aa\"><span class=\"ne-text\"> 🍡 解耦/技术栈无关<br /></span><span class=\"ne-text\">微前端的核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，而 qiankun 的诸多设计均是秉持这一原则，如 HTML entry、沙箱、应用间通信等。这样才能确保微应用真正具备 独立开发、独立运行 的能力。 </span></li></ul><p id=\"u5401c0d9\" class=\"ne-p\"><br></p><h2 id=\"e0bd7e27\"><span class=\"ne-text\">为什么不是 iframe</span></h2><p id=\"uc5032734\" class=\"ne-p\"><br></p><p id=\"ue8f84e5b\" class=\"ne-p\"><span class=\"ne-text\">为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 &quot;炫技&quot; 或者刻意追求 &quot;特立独行&quot;。</span></p><p id=\"u538cd364\" class=\"ne-p\"><br></p><p id=\"u005d54e8\" class=\"ne-p\"><span class=\"ne-text\">如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。</span></p><p id=\"uad5046be\" class=\"ne-p\"><br></p><p id=\"u7f95dceb\" class=\"ne-p\"><span class=\"ne-text\">iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。</span></p><p id=\"u6fdff032\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u4faa6f9e\"><span class=\"ne-text\">url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。</span></li><li id=\"u6b868db1\"><span class=\"ne-text\">UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"ubc657fc2\"><span class=\"ne-text\">全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。</span></li><li id=\"ub2aaa546\"><span class=\"ne-text\">慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。</span></li></ol><p id=\"u2e9c820b\" class=\"ne-p\"><br></p><p id=\"u1c489023\" class=\"ne-p\"><span class=\"ne-text\">其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。</span></p><p id=\"uf08e88b3\" class=\"ne-p\"><br></p><h2 id=\"c666ad11\"><span class=\"ne-text\">特性</span></h2><p id=\"u96bfa7fa\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ubdf837e5\"><span class=\"ne-text\">📦 </span><strong><span class=\"ne-text\">基于 </span></strong><a href=\"https://github.com/CanopyTax/single-spa\" data-href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" class=\"ne-link\"><strong><span class=\"ne-text\">single-spa</span></strong></a><span class=\"ne-text\"> 封装，提供了更加开箱即用的 API。</span></li><li id=\"u083b092e\"><span class=\"ne-text\">📱 </span><strong><span class=\"ne-text\">技术栈无关</span></strong><span class=\"ne-text\">，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。</span></li></ul><ul class=\"ne-ul\"><li id=\"u0a50ec0d\"><span class=\"ne-text\">💪 </span><strong><span class=\"ne-text\">HTML Entry 接入方式</span></strong><span class=\"ne-text\">，让你接入微应用像使用 iframe 一样简单。</span></li><li id=\"ubc859ce3\"><span class=\"ne-text\">🛡 </span><strong><span class=\"ne-text\">样式隔离</span></strong><span class=\"ne-text\">，确保微应用之间样式互相不干扰。</span></li></ul><ul class=\"ne-ul\"><li id=\"u7a6502b1\"><span class=\"ne-text\">🧳 </span><strong><span class=\"ne-text\">JS 沙箱</span></strong><span class=\"ne-text\">，确保微应用之间 全局变量/事件 不冲突。</span></li><li id=\"uc7114d6b\"><span class=\"ne-text\">⚡️ </span><strong><span class=\"ne-text\">资源预加载</span></strong><span class=\"ne-text\">，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。</span></li></ul><ul class=\"ne-ul\"><li id=\"u76072b1e\"><span class=\"ne-text\">🔌 </span><strong><span class=\"ne-text\">umi 插件</span></strong><span class=\"ne-text\">，提供了 </span><a href=\"https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun\" data-href=\"https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">@umijs/plugin-qiankun</span></a><span class=\"ne-text\"> 供 umi 应用一键切换成微前端架构系统。</span></li></ul><p id=\"u44484d3b\" class=\"ne-p\"><br></p><h2 id=\"c1b18ad6\"><span class=\"ne-text\">快速上手</span></h2><p id=\"u7894b2fe\" class=\"ne-p\"><br></p><h3 id=\"d970b2a8\"><span class=\"ne-text\">主应用</span></h3><p id=\"ua6ae5185\" class=\"ne-p\"><br></p><h4 id=\"34b974f9\"><span class=\"ne-text\">1. 安装 qiankun</span></h4><p id=\"u0aa17afd\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"dcfaf0ec\" class=\"ne-codeblock language-javascript\">  yarn add qiankun # 或者 npm i qiankun -S</pre><p id=\"uce875440\" class=\"ne-p\"><br></p><h4 id=\"fdb3f36c\"><span class=\"ne-text\">2. 在主应用中注册微应用</span></h4><p id=\"uf360d759\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"8cdf1539\" class=\"ne-codeblock language-javascript\">import { registerMicroApps, start } from 'qiankun';\n\n// 注册微应用\nregisterMicroApps([\n  {\n    name: 'cos',\n    entry: process.env.VUE_APP_COS_UI_URL,\n    container: '#subapp-viewport',\n    activeRule: '/cos',\n    props: config\n  },\n  {\n    name: 'middleware',\n    entry: process.env.VUE_APP_MIDDLEWARE_UI_URL,\n    container: '#subapp-viewport',\n    activeRule: '/middleware',\n    props: config\n  }\n],\n{\n  beforeLoad: [\n    app =&gt; {\n      console.log('[LifeCycle] before load %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ],\n  beforeMount: [\n    app =&gt; {\n      console.log('[LifeCycle] before mount %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ],\n  afterUnmount: [\n    app =&gt; {\n      console.log('[LifeCycle] after unmount %c%s', 'color: green;', app.name)\n      return Promise.resolve()\n    }\n  ]\n}\n)\n// 设置默认进入微应用\nsetDefaultMountApp('/cos')\n\n// 启动\nif (!window.qiankunStarted) {\n  window.qiankunStarted = true\n  start()\n}</pre><p id=\"u398d9289\" class=\"ne-p\"><br></p><p id=\"uf488a806\" class=\"ne-p\"><span class=\"ne-text\">当微应用信息注册完之后，一旦浏览器的 url 发生变化，便会自动触发 qiankun 的匹配逻辑，所有 activeRule 规则匹配上的微应用就会被插入到指定的 container 中，同时依次调用微应用暴露出的生命周期钩子。</span></p><p id=\"ua3b19a3d\" class=\"ne-p\"><br></p><h3 id=\"9cca01fb\"><span class=\"ne-text\">微应用</span></h3><p id=\"u4834e8e1\" class=\"ne-p\"><br></p><p id=\"ub75fc277\" class=\"ne-p\"><span class=\"ne-text\">微应用不需要额外安装任何其他依赖即可接入 qiankun 主应用。</span></p><p id=\"u1b5e745d\" class=\"ne-p\"><br></p><p id=\"u46b2361b\" class=\"ne-p\"><span class=\"ne-text\">微应用分为有 </span><code class=\"ne-code\"><span class=\"ne-text\">webpack</span></code><span class=\"ne-text\"> 构建和无 </span><code class=\"ne-code\"><span class=\"ne-text\">webpack</span></code><span class=\"ne-text\"> 构建项目，有 </span><code class=\"ne-code\"><span class=\"ne-text\">webpack</span></code><span class=\"ne-text\"> 的微应用（主要是指 Vue、React、Angular）需要做的事情有：</span></p><p id=\"uc0904745\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ud1422faf\"><span class=\"ne-text\"> 新增 public-path.js 文件，用于修改运行时的 publicPath。什么是运行时的 publicPath ？。 </span><span class=\"ne-text\"> </span></li></ol><div class=\"ne-quote\"><p id=\"u98cd5db5\" class=\"ne-p\"><span class=\"ne-text\">注意：运行时的 publicPath 和构建时的 publicPath 是不同的，两者不能等价替代。</span></p></div><ol start=\"2\" class=\"ne-ol\"><li id=\"ucd67241c\"><span class=\"ne-text\"> 微应用建议使用 history 模式的路由，需要设置路由 base，值和它的 activeRule 是一样的。 </span></li><li id=\"uf7194382\"><span class=\"ne-text\"> 在入口文件最顶部引入 public-path.js，修改并导出三个生命周期函数。 </span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"u8a93dc9c\"><span class=\"ne-text\"> 修改 webpack 打包，允许开发环境跨域和 umd 打包。 </span></li></ol><p id=\"u4b15f76e\" class=\"ne-p\"><br></p><p id=\"u874d14d1\" class=\"ne-p\"><span class=\"ne-text\">主要的修改就是以上四个，可能会根据项目的不同情况而改变。例如，你的项目是 index.html 和其他的所有文件分开部署的，说明你们已经将构建时的 publicPath 设置为了完整路径，则不用修改运行时的 publicPath （第一步操作可省）。</span></p><p id=\"u7202f6eb\" class=\"ne-p\"><br></p><p id=\"u2ad517d7\" class=\"ne-p\"><span class=\"ne-text\">无 </span><code class=\"ne-code\"><span class=\"ne-text\">webpack</span></code><span class=\"ne-text\"> 构建的微应用直接将 </span><code class=\"ne-code\"><span class=\"ne-text\">lifecycles</span></code><span class=\"ne-text\"> 挂载到 </span><code class=\"ne-code\"><span class=\"ne-text\">window</span></code><span class=\"ne-text\"> 上即可。</span></p><p id=\"u7e5118e2\" class=\"ne-p\"><br></p><h4 id=\"f4af72d0\"><span class=\"ne-text\">1. 导出相应的生命周期钩子</span></h4><p id=\"u1e9846ae\" class=\"ne-p\"><br></p><p id=\"u95550a39\" class=\"ne-p\"><span class=\"ne-text\">微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。</span></p><p id=\"ubc262a4c\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"bb1e1991\" class=\"ne-codeblock language-javascript\">let instance = null\nasync function render (props = {}) {\n  const { container } = props\n  // 注入 actions 实例\n  actions.setActions(props)\n  // 从父应用获取全局配置\n  for (let i in config) {\n    config[i] = props[i]\n  }\n  const router = new vueRouter({\n    base: window.__POWERED_BY_QIANKUN__ ? 'cos' : process.env.BASE_URL,\n    mode: 'history',\n    scrollBehavior: () =&gt; ({ y: 0 }),\n    routes\n  })\n  // 获取本地时间与服务器时间的差值\n  if (isUndefined(config.timeDifference)) {\n    await getTimeFunc()\n  }\n  instance = new Vue({\n    router,\n    store,\n    created: storeBootstrap,\n    render: (h) =&gt; h(App)\n  }).$mount(container ? container.querySelector('#app') : '#app')\n\n  // 获取用户信息\n  store.dispatch('GetInfo')\n  // 获取用户vdc列表，teamSpace列表\n  if (config.systemId === systemId.VDC_SYSTEM_ID) {\n    store.dispatch('GetVdcList')\n  } else if (config.systemId === systemId.TEAM_SPACE_SYSTEM_ID) {\n    store.dispatch('GetTeamSpaceList')\n  }\n}\n\n\nif (!window.__POWERED_BY_QIANKUN__) {\n  render()\n}\n\nexport async function bootstrap () {\n  console.log('[vue] vue app bootstraped')\n}\n\nexport async function mount (props) {\n  console.log('[vue] props from main framework', props)\n\n  render(props)\n}\n\nexport async function unmount () {\n  instance.$destroy()\n  instance.$el.innerHTML = ''\n  instance = null\n}</pre><p id=\"u4f5b4e8b\" class=\"ne-p\"><br></p><h4 id=\"6f5639d8\"><span class=\"ne-text\">2. 配置微应用的打包工具</span></h4><p id=\"u70df9b7e\" class=\"ne-p\"><br></p><p id=\"u2a94d352\" class=\"ne-p\"><span class=\"ne-text\">除了代码中暴露出相应的生命周期钩子之外，为了让主应用能正确识别微应用暴露出来的一些信息，微应用的打包工具需要增加如下配置：</span></p><p id=\"u00ac34cd\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"53ada36e\" class=\"ne-codeblock language-javascript\">const packageName = require('./package.json').name;\n\nmodule.exports = {\n  output: {\n    library: `${packageName}-[name]`,\n    libraryTarget: 'umd',\n    jsonpFunction: `webpackJsonp_${packageName}`,\n  },\n};</pre></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"f4bb9c40\" id=\"f4bb9c40\"><span data-lake-id=\"ub66d8d1a\" id=\"ub66d8d1a\">微前端介绍</span></h1><p data-lake-id=\"ufceda51f\" id=\"ufceda51f\"><br></p><h2 data-lake-id=\"e17d58e6\" id=\"e17d58e6\"><span data-lake-id=\"u9764da43\" id=\"u9764da43\">什么是微前端</span></h2><p data-lake-id=\"u19542e3f\" id=\"u19542e3f\"><br></p><blockquote data-lake-id=\"u8dd22685\" id=\"u8dd22685\"><p data-lake-id=\"uee69ffe8\" id=\"uee69ffe8\"><span data-lake-id=\"ua23f643e\" id=\"ua23f643e\">Techniques, strategies and recipes for building a </span><strong><span data-lake-id=\"u9eef16ee\" id=\"u9eef16ee\">modern web app</span></strong><span data-lake-id=\"u7496fbf3\" id=\"u7496fbf3\"> with </span><strong><span data-lake-id=\"u3173f244\" id=\"u3173f244\">multiple teams</span></strong><span data-lake-id=\"u1eba6d0a\" id=\"u1eba6d0a\"> that can </span><strong><span data-lake-id=\"u6bc73855\" id=\"u6bc73855\">ship features independently</span></strong><span data-lake-id=\"u4b1468a5\" id=\"u4b1468a5\">. -- </span><a href=\"https://micro-frontends.org/\" target=\"_blank\" data-lake-id=\"u13d01e45\" id=\"u13d01e45\"><span data-lake-id=\"u99cdce28\" id=\"u99cdce28\">Micro Frontends</span></a></p><p data-lake-id=\"ua27d87df\" id=\"ua27d87df\"><span data-lake-id=\"uf299328b\" id=\"uf299328b\"> </span></p><p data-lake-id=\"u9b60fad8\" id=\"u9b60fad8\"><span data-lake-id=\"u7d22e8b1\" id=\"u7d22e8b1\">微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</span></p></blockquote><p data-lake-id=\"u584bc306\" id=\"u584bc306\"><br></p><p data-lake-id=\"u3b9f93eb\" id=\"u3b9f93eb\"><span data-lake-id=\"u1abc38e8\" id=\"u1abc38e8\">微前端架构具备以下几个核心价值：</span></p><p data-lake-id=\"ud2d83eec\" id=\"ud2d83eec\"><br></p><ul list=\"uf54514fd\"><li fid=\"u2ed5e365\" data-lake-id=\"u25c1ff03\" id=\"u25c1ff03\"><span data-lake-id=\"ub20f9982\" id=\"ub20f9982\"> 技术栈无关<br /></span><span data-lake-id=\"ua0059dcc\" id=\"ua0059dcc\">主框架不限制接入应用的技术栈，微应用具备完全自主权 </span></li><li fid=\"u2ed5e365\" data-lake-id=\"uda897720\" id=\"uda897720\"><span data-lake-id=\"ud4708afa\" id=\"ud4708afa\"> 独立开发、独立部署<br /></span><span data-lake-id=\"udd53b362\" id=\"udd53b362\">微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 </span></li><li fid=\"u2ed5e365\" data-lake-id=\"ua75e4208\" id=\"ua75e4208\"><span data-lake-id=\"u2ac7864b\" id=\"u2ac7864b\"> 增量升级<br /></span><span data-lake-id=\"u7c974d7b\" id=\"u7c974d7b\">在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 </span></li><li fid=\"u2ed5e365\" data-lake-id=\"ud90dee2c\" id=\"ud90dee2c\"><span data-lake-id=\"u9ad10526\" id=\"u9ad10526\"> 独立运行时<br /></span><span data-lake-id=\"ua4211b2b\" id=\"ua4211b2b\">每个微应用之间状态隔离，运行时状态不共享 </span></li></ul><p data-lake-id=\"u5791070c\" id=\"u5791070c\"><br></p><p data-lake-id=\"ue170ecd8\" id=\"ue170ecd8\"><span data-lake-id=\"u704115ba\" id=\"u704115ba\">微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(</span><a href=\"https://www.youtube.com/watch?v=pU1gXA0rfwc\" target=\"_blank\" data-lake-id=\"ua7f5a1c8\" id=\"ua7f5a1c8\"><span data-lake-id=\"ue9634eec\" id=\"ue9634eec\">Frontend Monolith</span></a><span data-lake-id=\"ue2848c56\" id=\"ue2848c56\">)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。</span></p><p data-lake-id=\"uad823e83\" id=\"uad823e83\"><br></p><p data-lake-id=\"u99dc4e7c\" id=\"u99dc4e7c\"><span data-lake-id=\"u659badfd\" id=\"u659badfd\">更多关于微前端的相关介绍，推荐大家可以去看这几篇文章：</span></p><p data-lake-id=\"uf586c67e\" id=\"uf586c67e\"><br></p><ul list=\"u5fc097f6\"><li fid=\"u182f7edb\" data-lake-id=\"ua2ec798a\" id=\"ua2ec798a\"><a href=\"https://micro-frontends.org/\" target=\"_blank\" data-lake-id=\"uef14aa5a\" id=\"uef14aa5a\"><span data-lake-id=\"u235ead46\" id=\"u235ead46\">Micro Frontends</span></a></li><li fid=\"u182f7edb\" data-lake-id=\"uf747eef3\" id=\"uf747eef3\"><a href=\"https://martinfowler.com/articles/micro-frontends.html\" target=\"_blank\" data-lake-id=\"ub7e5ceef\" id=\"ub7e5ceef\"><span data-lake-id=\"ue81907b1\" id=\"ue81907b1\">Micro Frontends from martinfowler.com</span></a></li><li fid=\"u182f7edb\" data-lake-id=\"ufdd83cd4\" id=\"ufdd83cd4\"><a href=\"https://zhuanlan.zhihu.com/p/78362028\" target=\"_blank\" data-lake-id=\"u8f2183c2\" id=\"u8f2183c2\"><span data-lake-id=\"u979d21eb\" id=\"u979d21eb\">可能是你见过最完善的微前端解决方案</span></a></li><li fid=\"u182f7edb\" data-lake-id=\"u4ed41b66\" id=\"u4ed41b66\"><a href=\"https://zhuanlan.zhihu.com/p/95085796\" target=\"_blank\" data-lake-id=\"ue593f7d8\" id=\"ue593f7d8\"><span data-lake-id=\"u7f287243\" id=\"u7f287243\">微前端的核心价值</span></a></li></ul><p data-lake-id=\"u53798d26\" id=\"u53798d26\"><br></p><h2 data-lake-id=\"6e3c7750\" id=\"6e3c7750\"><span data-lake-id=\"u0250afe9\" id=\"u0250afe9\">qiankun 介绍</span></h2><p data-lake-id=\"u34ecda9f\" id=\"u34ecda9f\"><br></p><p data-lake-id=\"u38b389fd\" id=\"u38b389fd\"><span data-lake-id=\"ua75e185c\" id=\"ua75e185c\">qiankun 是一个基于 </span><a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" data-lake-id=\"ud42ff1e6\" id=\"ud42ff1e6\"><span data-lake-id=\"u2e20ff75\" id=\"u2e20ff75\">single-spa</span></a><span data-lake-id=\"u390a815e\" id=\"u390a815e\"> 的</span><a href=\"https://micro-frontends.org/\" target=\"_blank\" data-lake-id=\"ueac4aea2\" id=\"ueac4aea2\"><span data-lake-id=\"u6b83d84f\" id=\"u6b83d84f\">微前端</span></a><span data-lake-id=\"u90202dd4\" id=\"u90202dd4\">实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</span></p><p data-lake-id=\"u72108bdc\" id=\"u72108bdc\"><br></p><p data-lake-id=\"u5686ef85\" id=\"u5686ef85\"><span data-lake-id=\"ub5173560\" id=\"ub5173560\">qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。</span></p><p data-lake-id=\"u7543dca7\" id=\"u7543dca7\"><br></p><p data-lake-id=\"u622752e4\" id=\"u622752e4\"><span data-lake-id=\"u5577edc4\" id=\"u5577edc4\">目前 qiankun 已在蚂蚁内部服务了超过 200+ 线上应用，在易用性及完备性上，绝对是值得信赖的。</span></p><p data-lake-id=\"ud277691c\" id=\"ud277691c\"><br></p><ul list=\"u98d6ff38\"><li fid=\"ua3eb8d00\" data-lake-id=\"ua15b038a\" id=\"ua15b038a\"><span data-lake-id=\"u9176471a\" id=\"u9176471a\"> 🥄 简单<br /></span><span data-lake-id=\"u1f4c0754\" id=\"u1f4c0754\">由于主应用微应用都能做到技术栈无关，qiankun 对于用户而言只是一个类似 jQuery 的库，你需要调用几个 qiankun 的 API 即可完成应用的微前端改造。同时由于 qiankun 的 HTML entry 及沙箱的设计，使得微应用的接入像使用 iframe 一样简单。 </span></li><li fid=\"ua3eb8d00\" data-lake-id=\"ubf1907aa\" id=\"ubf1907aa\"><span data-lake-id=\"udbb98cb2\" id=\"udbb98cb2\"> 🍡 解耦/技术栈无关<br /></span><span data-lake-id=\"u37f294a4\" id=\"u37f294a4\">微前端的核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，而 qiankun 的诸多设计均是秉持这一原则，如 HTML entry、沙箱、应用间通信等。这样才能确保微应用真正具备 独立开发、独立运行 的能力。 </span></li></ul><p data-lake-id=\"u5401c0d9\" id=\"u5401c0d9\"><br></p><h2 data-lake-id=\"e0bd7e27\" id=\"e0bd7e27\"><span data-lake-id=\"u6a552112\" id=\"u6a552112\">为什么不是 iframe</span></h2><p data-lake-id=\"uc5032734\" id=\"uc5032734\"><br></p><p data-lake-id=\"ue8f84e5b\" id=\"ue8f84e5b\"><span data-lake-id=\"u37385ff1\" id=\"u37385ff1\">为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 &quot;炫技&quot; 或者刻意追求 &quot;特立独行&quot;。</span></p><p data-lake-id=\"u538cd364\" id=\"u538cd364\"><br></p><p data-lake-id=\"u005d54e8\" id=\"u005d54e8\"><span data-lake-id=\"ucdd02ba8\" id=\"ucdd02ba8\">如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。</span></p><p data-lake-id=\"uad5046be\" id=\"uad5046be\"><br></p><p data-lake-id=\"u7f95dceb\" id=\"u7f95dceb\"><span data-lake-id=\"u9bc7bf5e\" id=\"u9bc7bf5e\">iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。</span></p><p data-lake-id=\"u6fdff032\" id=\"u6fdff032\"><br></p><ol list=\"uab9c7f52\"><li fid=\"ucbbbcf15\" data-lake-id=\"u4faa6f9e\" id=\"u4faa6f9e\"><span data-lake-id=\"uf8052e7d\" id=\"uf8052e7d\">url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。</span></li><li fid=\"ucbbbcf15\" data-lake-id=\"u6b868db1\" id=\"u6b868db1\"><span data-lake-id=\"u574a9501\" id=\"u574a9501\">UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..</span></li><li fid=\"ucbbbcf15\" data-lake-id=\"ubc657fc2\" id=\"ubc657fc2\"><span data-lake-id=\"uf29f5ffd\" id=\"uf29f5ffd\">全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。</span></li><li fid=\"ucbbbcf15\" data-lake-id=\"ub2aaa546\" id=\"ub2aaa546\"><span data-lake-id=\"u34bfb5d2\" id=\"u34bfb5d2\">慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。</span></li></ol><p data-lake-id=\"u2e9c820b\" id=\"u2e9c820b\"><br></p><p data-lake-id=\"u1c489023\" id=\"u1c489023\"><span data-lake-id=\"uff1f88d7\" id=\"uff1f88d7\">其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。</span></p><p data-lake-id=\"uf08e88b3\" id=\"uf08e88b3\"><br></p><h2 data-lake-id=\"c666ad11\" id=\"c666ad11\"><span data-lake-id=\"u3b09509b\" id=\"u3b09509b\">特性</span></h2><p data-lake-id=\"u96bfa7fa\" id=\"u96bfa7fa\"><br></p><ul list=\"ubc1bc33a\"><li fid=\"u2b151712\" data-lake-id=\"ubdf837e5\" id=\"ubdf837e5\"><span data-lake-id=\"u42028cf2\" id=\"u42028cf2\">📦 </span><strong><span data-lake-id=\"ub2ce66bc\" id=\"ub2ce66bc\">基于 </span></strong><a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" data-lake-id=\"u3f770797\" id=\"u3f770797\"><strong><span data-lake-id=\"u65523dbe\" id=\"u65523dbe\">single-spa</span></strong></a><span data-lake-id=\"u8a7d39a8\" id=\"u8a7d39a8\"> 封装，提供了更加开箱即用的 API。</span></li><li fid=\"u2b151712\" data-lake-id=\"u083b092e\" id=\"u083b092e\"><span data-lake-id=\"u3a841998\" id=\"u3a841998\">📱 </span><strong><span data-lake-id=\"ua40a7efe\" id=\"ua40a7efe\">技术栈无关</span></strong><span data-lake-id=\"ue4092c68\" id=\"ue4092c68\">，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。</span></li><li fid=\"u2b151712\" data-lake-id=\"u0a50ec0d\" id=\"u0a50ec0d\"><span data-lake-id=\"u9d0ab2be\" id=\"u9d0ab2be\">💪 </span><strong><span data-lake-id=\"u6679eb8a\" id=\"u6679eb8a\">HTML Entry 接入方式</span></strong><span data-lake-id=\"ud41dc002\" id=\"ud41dc002\">，让你接入微应用像使用 iframe 一样简单。</span></li><li fid=\"u2b151712\" data-lake-id=\"ubc859ce3\" id=\"ubc859ce3\"><span data-lake-id=\"u1f6d0e13\" id=\"u1f6d0e13\">🛡 </span><strong><span data-lake-id=\"u814611b2\" id=\"u814611b2\">样式隔离</span></strong><span data-lake-id=\"u00223f00\" id=\"u00223f00\">，确保微应用之间样式互相不干扰。</span></li><li fid=\"u2b151712\" data-lake-id=\"u7a6502b1\" id=\"u7a6502b1\"><span data-lake-id=\"u328ae80c\" id=\"u328ae80c\">🧳 </span><strong><span data-lake-id=\"u33896ad9\" id=\"u33896ad9\">JS 沙箱</span></strong><span data-lake-id=\"ua77996db\" id=\"ua77996db\">，确保微应用之间 全局变量/事件 不冲突。</span></li><li fid=\"u2b151712\" data-lake-id=\"uc7114d6b\" id=\"uc7114d6b\"><span data-lake-id=\"u81776cf1\" id=\"u81776cf1\">⚡️ </span><strong><span data-lake-id=\"u1e9d56d4\" id=\"u1e9d56d4\">资源预加载</span></strong><span data-lake-id=\"u0a7a1ddf\" id=\"u0a7a1ddf\">，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。</span></li><li fid=\"u2b151712\" data-lake-id=\"u76072b1e\" id=\"u76072b1e\"><span data-lake-id=\"u8ac933d7\" id=\"u8ac933d7\">🔌 </span><strong><span data-lake-id=\"u0dec80be\" id=\"u0dec80be\">umi 插件</span></strong><span data-lake-id=\"u91d42c9d\" id=\"u91d42c9d\">，提供了 </span><a href=\"https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun\" target=\"_blank\" data-lake-id=\"u6f73d153\" id=\"u6f73d153\"><span data-lake-id=\"uec5eb3d4\" id=\"uec5eb3d4\">@umijs/plugin-qiankun</span></a><span data-lake-id=\"ud478fbe9\" id=\"ud478fbe9\"> 供 umi 应用一键切换成微前端架构系统。</span></li></ul><p data-lake-id=\"u44484d3b\" id=\"u44484d3b\"><br></p><h2 data-lake-id=\"c1b18ad6\" id=\"c1b18ad6\"><span data-lake-id=\"u68982dd2\" id=\"u68982dd2\">快速上手</span></h2><p data-lake-id=\"u7894b2fe\" id=\"u7894b2fe\"><br></p><h3 data-lake-id=\"d970b2a8\" id=\"d970b2a8\"><span data-lake-id=\"u86e2446e\" id=\"u86e2446e\">主应用</span></h3><p data-lake-id=\"ua6ae5185\" id=\"ua6ae5185\"><br></p><h4 data-lake-id=\"34b974f9\" id=\"34b974f9\"><span data-lake-id=\"u3cea3b6c\" id=\"u3cea3b6c\">1. 安装 qiankun</span></h4><p data-lake-id=\"u0aa17afd\" id=\"u0aa17afd\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20yarn%20add%20qiankun%20%23%20%E6%88%96%E8%80%85%20npm%20i%20qiankun%20-S%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dcfaf0ec%22%7D\"></card><p data-lake-id=\"uce875440\" id=\"uce875440\"><br></p><h4 data-lake-id=\"fdb3f36c\" id=\"fdb3f36c\"><span data-lake-id=\"u1ac121e8\" id=\"u1ac121e8\">2. 在主应用中注册微应用</span></h4><p data-lake-id=\"uf360d759\" id=\"uf360d759\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20registerMicroApps%2C%20start%20%7D%20from%20'qiankun'%3B%5Cn%5Cn%2F%2F%20%E6%B3%A8%E5%86%8C%E5%BE%AE%E5%BA%94%E7%94%A8%5CnregisterMicroApps(%5B%5Cn%20%20%7B%5Cn%20%20%20%20name%3A%20'cos'%2C%5Cn%20%20%20%20entry%3A%20process.env.VUE_APP_COS_UI_URL%2C%5Cn%20%20%20%20container%3A%20'%23subapp-viewport'%2C%5Cn%20%20%20%20activeRule%3A%20'%2Fcos'%2C%5Cn%20%20%20%20props%3A%20config%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20name%3A%20'middleware'%2C%5Cn%20%20%20%20entry%3A%20process.env.VUE_APP_MIDDLEWARE_UI_URL%2C%5Cn%20%20%20%20container%3A%20'%23subapp-viewport'%2C%5Cn%20%20%20%20activeRule%3A%20'%2Fmiddleware'%2C%5Cn%20%20%20%20props%3A%20config%5Cn%20%20%7D%5Cn%5D%2C%5Cn%7B%5Cn%20%20beforeLoad%3A%20%5B%5Cn%20%20%20%20app%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20console.log('%5BLifeCycle%5D%20before%20load%20%25c%25s'%2C%20'color%3A%20green%3B'%2C%20app.name)%5Cn%20%20%20%20%20%20return%20Promise.resolve()%5Cn%20%20%20%20%7D%5Cn%20%20%5D%2C%5Cn%20%20beforeMount%3A%20%5B%5Cn%20%20%20%20app%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20console.log('%5BLifeCycle%5D%20before%20mount%20%25c%25s'%2C%20'color%3A%20green%3B'%2C%20app.name)%5Cn%20%20%20%20%20%20return%20Promise.resolve()%5Cn%20%20%20%20%7D%5Cn%20%20%5D%2C%5Cn%20%20afterUnmount%3A%20%5B%5Cn%20%20%20%20app%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20console.log('%5BLifeCycle%5D%20after%20unmount%20%25c%25s'%2C%20'color%3A%20green%3B'%2C%20app.name)%5Cn%20%20%20%20%20%20return%20Promise.resolve()%5Cn%20%20%20%20%7D%5Cn%20%20%5D%5Cn%7D%5Cn)%5Cn%2F%2F%20%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E8%BF%9B%E5%85%A5%E5%BE%AE%E5%BA%94%E7%94%A8%5CnsetDefaultMountApp('%2Fcos')%5Cn%5Cn%2F%2F%20%E5%90%AF%E5%8A%A8%5Cnif%20(!window.qiankunStarted)%20%7B%5Cn%20%20window.qiankunStarted%20%3D%20true%5Cn%20%20start()%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%228cdf1539%22%7D\"></card><p data-lake-id=\"u398d9289\" id=\"u398d9289\"><br></p><p data-lake-id=\"uf488a806\" id=\"uf488a806\"><span data-lake-id=\"ua7ca471d\" id=\"ua7ca471d\">当微应用信息注册完之后，一旦浏览器的 url 发生变化，便会自动触发 qiankun 的匹配逻辑，所有 activeRule 规则匹配上的微应用就会被插入到指定的 container 中，同时依次调用微应用暴露出的生命周期钩子。</span></p><p data-lake-id=\"ua3b19a3d\" id=\"ua3b19a3d\"><br></p><h3 data-lake-id=\"9cca01fb\" id=\"9cca01fb\"><span data-lake-id=\"u15fcf62c\" id=\"u15fcf62c\">微应用</span></h3><p data-lake-id=\"u4834e8e1\" id=\"u4834e8e1\"><br></p><p data-lake-id=\"ub75fc277\" id=\"ub75fc277\"><span data-lake-id=\"u7e2789d3\" id=\"u7e2789d3\">微应用不需要额外安装任何其他依赖即可接入 qiankun 主应用。</span></p><p data-lake-id=\"u1b5e745d\" id=\"u1b5e745d\"><br></p><p data-lake-id=\"u46b2361b\" id=\"u46b2361b\"><span data-lake-id=\"ucc0348ab\" id=\"ucc0348ab\">微应用分为有 </span><code data-lake-id=\"u3885f740\" id=\"u3885f740\"><span data-lake-id=\"ua4ad2782\" id=\"ua4ad2782\">webpack</span></code><span data-lake-id=\"uf1ebbe3a\" id=\"uf1ebbe3a\"> 构建和无 </span><code data-lake-id=\"u4745f2c6\" id=\"u4745f2c6\"><span data-lake-id=\"u276ed344\" id=\"u276ed344\">webpack</span></code><span data-lake-id=\"ue2cfd70f\" id=\"ue2cfd70f\"> 构建项目，有 </span><code data-lake-id=\"ufad89443\" id=\"ufad89443\"><span data-lake-id=\"u2b770bc0\" id=\"u2b770bc0\">webpack</span></code><span data-lake-id=\"u75573ff8\" id=\"u75573ff8\"> 的微应用（主要是指 Vue、React、Angular）需要做的事情有：</span></p><p data-lake-id=\"uc0904745\" id=\"uc0904745\"><br></p><ol list=\"u167a1cbb\"><li fid=\"udb0f730f\" data-lake-id=\"ud1422faf\" id=\"ud1422faf\"><span data-lake-id=\"u003f31ab\" id=\"u003f31ab\"> 新增 public-path.js 文件，用于修改运行时的 publicPath。什么是运行时的 publicPath ？。 </span><span data-lake-id=\"u8f256915\" id=\"u8f256915\"> </span></li></ol><blockquote data-lake-id=\"u629a9d32\" id=\"u629a9d32\"><p data-lake-id=\"u98cd5db5\" id=\"u98cd5db5\"><span data-lake-id=\"u66e60f57\" id=\"u66e60f57\">注意：运行时的 publicPath 和构建时的 publicPath 是不同的，两者不能等价替代。</span></p></blockquote><ol list=\"uba9a13dc\" start=\"2\"><li fid=\"u84fb58bf\" data-lake-id=\"ucd67241c\" id=\"ucd67241c\"><span data-lake-id=\"u4878ec29\" id=\"u4878ec29\"> 微应用建议使用 history 模式的路由，需要设置路由 base，值和它的 activeRule 是一样的。 </span></li><li fid=\"u84fb58bf\" data-lake-id=\"uf7194382\" id=\"uf7194382\"><span data-lake-id=\"u58c4887f\" id=\"u58c4887f\"> 在入口文件最顶部引入 public-path.js，修改并导出三个生命周期函数。 </span></li><li fid=\"u84fb58bf\" data-lake-id=\"u8a93dc9c\" id=\"u8a93dc9c\"><span data-lake-id=\"u484c5662\" id=\"u484c5662\"> 修改 webpack 打包，允许开发环境跨域和 umd 打包。 </span></li></ol><p data-lake-id=\"u4b15f76e\" id=\"u4b15f76e\"><br></p><p data-lake-id=\"u874d14d1\" id=\"u874d14d1\"><span data-lake-id=\"u2df82fa3\" id=\"u2df82fa3\">主要的修改就是以上四个，可能会根据项目的不同情况而改变。例如，你的项目是 index.html 和其他的所有文件分开部署的，说明你们已经将构建时的 publicPath 设置为了完整路径，则不用修改运行时的 publicPath （第一步操作可省）。</span></p><p data-lake-id=\"u7202f6eb\" id=\"u7202f6eb\"><br></p><p data-lake-id=\"u2ad517d7\" id=\"u2ad517d7\"><span data-lake-id=\"u1f6a167c\" id=\"u1f6a167c\">无 </span><code data-lake-id=\"ud98e5844\" id=\"ud98e5844\"><span data-lake-id=\"ucbd58b44\" id=\"ucbd58b44\">webpack</span></code><span data-lake-id=\"u808e7423\" id=\"u808e7423\"> 构建的微应用直接将 </span><code data-lake-id=\"u5790ce95\" id=\"u5790ce95\"><span data-lake-id=\"ud0c0f0f1\" id=\"ud0c0f0f1\">lifecycles</span></code><span data-lake-id=\"uf20280a2\" id=\"uf20280a2\"> 挂载到 </span><code data-lake-id=\"u1a4686ca\" id=\"u1a4686ca\"><span data-lake-id=\"u94b91bfd\" id=\"u94b91bfd\">window</span></code><span data-lake-id=\"ub6806232\" id=\"ub6806232\"> 上即可。</span></p><p data-lake-id=\"u7e5118e2\" id=\"u7e5118e2\"><br></p><h4 data-lake-id=\"f4af72d0\" id=\"f4af72d0\"><span data-lake-id=\"udb2523cc\" id=\"udb2523cc\">1. 导出相应的生命周期钩子</span></h4><p data-lake-id=\"u1e9846ae\" id=\"u1e9846ae\"><br></p><p data-lake-id=\"u95550a39\" id=\"u95550a39\"><span data-lake-id=\"u90519135\" id=\"u90519135\">微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。</span></p><p data-lake-id=\"ubc262a4c\" id=\"ubc262a4c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20instance%20%3D%20null%5Cnasync%20function%20render%20(props%20%3D%20%7B%7D)%20%7B%5Cn%20%20const%20%7B%20container%20%7D%20%3D%20props%5Cn%20%20%2F%2F%20%E6%B3%A8%E5%85%A5%20actions%20%E5%AE%9E%E4%BE%8B%5Cn%20%20actions.setActions(props)%5Cn%20%20%2F%2F%20%E4%BB%8E%E7%88%B6%E5%BA%94%E7%94%A8%E8%8E%B7%E5%8F%96%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%5Cn%20%20for%20(let%20i%20in%20config)%20%7B%5Cn%20%20%20%20config%5Bi%5D%20%3D%20props%5Bi%5D%5Cn%20%20%7D%5Cn%20%20const%20router%20%3D%20new%20vueRouter(%7B%5Cn%20%20%20%20base%3A%20window.__POWERED_BY_QIANKUN__%20%3F%20'cos'%20%3A%20process.env.BASE_URL%2C%5Cn%20%20%20%20mode%3A%20'history'%2C%5Cn%20%20%20%20scrollBehavior%3A%20()%20%3D%3E%20(%7B%20y%3A%200%20%7D)%2C%5Cn%20%20%20%20routes%5Cn%20%20%7D)%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%97%B6%E9%97%B4%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E7%9A%84%E5%B7%AE%E5%80%BC%5Cn%20%20if%20(isUndefined(config.timeDifference))%20%7B%5Cn%20%20%20%20await%20getTimeFunc()%5Cn%20%20%7D%5Cn%20%20instance%20%3D%20new%20Vue(%7B%5Cn%20%20%20%20router%2C%5Cn%20%20%20%20store%2C%5Cn%20%20%20%20created%3A%20storeBootstrap%2C%5Cn%20%20%20%20render%3A%20(h)%20%3D%3E%20h(App)%5Cn%20%20%7D).%24mount(container%20%3F%20container.querySelector('%23app')%20%3A%20'%23app')%5Cn%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%5Cn%20%20store.dispatch('GetInfo')%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7vdc%E5%88%97%E8%A1%A8%EF%BC%8CteamSpace%E5%88%97%E8%A1%A8%5Cn%20%20if%20(config.systemId%20%3D%3D%3D%20systemId.VDC_SYSTEM_ID)%20%7B%5Cn%20%20%20%20store.dispatch('GetVdcList')%5Cn%20%20%7D%20else%20if%20(config.systemId%20%3D%3D%3D%20systemId.TEAM_SPACE_SYSTEM_ID)%20%7B%5Cn%20%20%20%20store.dispatch('GetTeamSpaceList')%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%5Cnif%20(!window.__POWERED_BY_QIANKUN__)%20%7B%5Cn%20%20render()%5Cn%7D%5Cn%5Cnexport%20async%20function%20bootstrap%20()%20%7B%5Cn%20%20console.log('%5Bvue%5D%20vue%20app%20bootstraped')%5Cn%7D%5Cn%5Cnexport%20async%20function%20mount%20(props)%20%7B%5Cn%20%20console.log('%5Bvue%5D%20props%20from%20main%20framework'%2C%20props)%5Cn%5Cn%20%20render(props)%5Cn%7D%5Cn%5Cnexport%20async%20function%20unmount%20()%20%7B%5Cn%20%20instance.%24destroy()%5Cn%20%20instance.%24el.innerHTML%20%3D%20''%5Cn%20%20instance%20%3D%20null%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22bb1e1991%22%7D\"></card><p data-lake-id=\"u4f5b4e8b\" id=\"u4f5b4e8b\"><br></p><h4 data-lake-id=\"6f5639d8\" id=\"6f5639d8\"><span data-lake-id=\"u1d50ce18\" id=\"u1d50ce18\">2. 配置微应用的打包工具</span></h4><p data-lake-id=\"u70df9b7e\" id=\"u70df9b7e\"><br></p><p data-lake-id=\"u2a94d352\" id=\"u2a94d352\"><span data-lake-id=\"u192f1982\" id=\"u192f1982\">除了代码中暴露出相应的生命周期钩子之外，为了让主应用能正确识别微应用暴露出来的一些信息，微应用的打包工具需要增加如下配置：</span></p><p data-lake-id=\"u00ac34cd\" id=\"u00ac34cd\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20packageName%20%3D%20require('.%2Fpackage.json').name%3B%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20output%3A%20%7B%5Cn%20%20%20%20library%3A%20%60%24%7BpackageName%7D-%5Bname%5D%60%2C%5Cn%20%20%20%20libraryTarget%3A%20'umd'%2C%5Cn%20%20%20%20jsonpFunction%3A%20%60webpackJsonp_%24%7BpackageName%7D%60%2C%5Cn%20%20%7D%2C%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2253ada36e%22%7D\"></card>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"f4bb9c40\" id=\"f4bb9c40\"><span data-lake-id=\"ub66d8d1a\" id=\"ub66d8d1a\">微前端介绍</span></h1><p data-lake-id=\"ufceda51f\" id=\"ufceda51f\"><br></p><h2 data-lake-id=\"e17d58e6\" id=\"e17d58e6\"><span data-lake-id=\"u9764da43\" id=\"u9764da43\">什么是微前端</span></h2><p data-lake-id=\"u19542e3f\" id=\"u19542e3f\"><br></p><blockquote data-lake-id=\"u8dd22685\" id=\"u8dd22685\"><p data-lake-id=\"uee69ffe8\" id=\"uee69ffe8\"><span data-lake-id=\"ua23f643e\" id=\"ua23f643e\">Techniques, strategies and recipes for building a </span><strong><span data-lake-id=\"u9eef16ee\" id=\"u9eef16ee\">modern web app</span></strong><span data-lake-id=\"u7496fbf3\" id=\"u7496fbf3\"> with </span><strong><span data-lake-id=\"u3173f244\" id=\"u3173f244\">multiple teams</span></strong><span data-lake-id=\"u1eba6d0a\" id=\"u1eba6d0a\"> that can </span><strong><span data-lake-id=\"u6bc73855\" id=\"u6bc73855\">ship features independently</span></strong><span data-lake-id=\"u4b1468a5\" id=\"u4b1468a5\">. -- </span><a href=\"https://micro-frontends.org/\" target=\"_blank\" data-lake-id=\"u13d01e45\" id=\"u13d01e45\"><span data-lake-id=\"u99cdce28\" id=\"u99cdce28\">Micro Frontends</span></a></p><p data-lake-id=\"ua27d87df\" id=\"ua27d87df\"><span data-lake-id=\"uf299328b\" id=\"uf299328b\"> </span></p><p data-lake-id=\"u9b60fad8\" id=\"u9b60fad8\"><span data-lake-id=\"u7d22e8b1\" id=\"u7d22e8b1\">微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</span></p></blockquote><p data-lake-id=\"u584bc306\" id=\"u584bc306\"><br></p><p data-lake-id=\"u3b9f93eb\" id=\"u3b9f93eb\"><span data-lake-id=\"u1abc38e8\" id=\"u1abc38e8\">微前端架构具备以下几个核心价值：</span></p><p data-lake-id=\"ud2d83eec\" id=\"ud2d83eec\"><br></p><ul list=\"uf54514fd\"><li fid=\"u2ed5e365\" data-lake-id=\"u25c1ff03\" id=\"u25c1ff03\"><span data-lake-id=\"ub20f9982\" id=\"ub20f9982\"> 技术栈无关<br /></span><span data-lake-id=\"ua0059dcc\" id=\"ua0059dcc\">主框架不限制接入应用的技术栈，微应用具备完全自主权 </span></li><li fid=\"u2ed5e365\" data-lake-id=\"uda897720\" id=\"uda897720\"><span data-lake-id=\"ud4708afa\" id=\"ud4708afa\"> 独立开发、独立部署<br /></span><span data-lake-id=\"udd53b362\" id=\"udd53b362\">微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 </span></li><li fid=\"u2ed5e365\" data-lake-id=\"ua75e4208\" id=\"ua75e4208\"><span data-lake-id=\"u2ac7864b\" id=\"u2ac7864b\"> 增量升级<br /></span><span data-lake-id=\"u7c974d7b\" id=\"u7c974d7b\">在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 </span></li><li fid=\"u2ed5e365\" data-lake-id=\"ud90dee2c\" id=\"ud90dee2c\"><span data-lake-id=\"u9ad10526\" id=\"u9ad10526\"> 独立运行时<br /></span><span data-lake-id=\"ua4211b2b\" id=\"ua4211b2b\">每个微应用之间状态隔离，运行时状态不共享 </span></li></ul><p data-lake-id=\"u5791070c\" id=\"u5791070c\"><br></p><p data-lake-id=\"ue170ecd8\" id=\"ue170ecd8\"><span data-lake-id=\"u704115ba\" id=\"u704115ba\">微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(</span><a href=\"https://www.youtube.com/watch?v=pU1gXA0rfwc\" target=\"_blank\" data-lake-id=\"ua7f5a1c8\" id=\"ua7f5a1c8\"><span data-lake-id=\"ue9634eec\" id=\"ue9634eec\">Frontend Monolith</span></a><span data-lake-id=\"ue2848c56\" id=\"ue2848c56\">)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。</span></p><p data-lake-id=\"uad823e83\" id=\"uad823e83\"><br></p><p data-lake-id=\"u99dc4e7c\" id=\"u99dc4e7c\"><span data-lake-id=\"u659badfd\" id=\"u659badfd\">更多关于微前端的相关介绍，推荐大家可以去看这几篇文章：</span></p><p data-lake-id=\"uf586c67e\" id=\"uf586c67e\"><br></p><ul list=\"u5fc097f6\"><li fid=\"u182f7edb\" data-lake-id=\"ua2ec798a\" id=\"ua2ec798a\"><a href=\"https://micro-frontends.org/\" target=\"_blank\" data-lake-id=\"uef14aa5a\" id=\"uef14aa5a\"><span data-lake-id=\"u235ead46\" id=\"u235ead46\">Micro Frontends</span></a></li><li fid=\"u182f7edb\" data-lake-id=\"uf747eef3\" id=\"uf747eef3\"><a href=\"https://martinfowler.com/articles/micro-frontends.html\" target=\"_blank\" data-lake-id=\"ub7e5ceef\" id=\"ub7e5ceef\"><span data-lake-id=\"ue81907b1\" id=\"ue81907b1\">Micro Frontends from martinfowler.com</span></a></li><li fid=\"u182f7edb\" data-lake-id=\"ufdd83cd4\" id=\"ufdd83cd4\"><a href=\"https://zhuanlan.zhihu.com/p/78362028\" target=\"_blank\" data-lake-id=\"u8f2183c2\" id=\"u8f2183c2\"><span data-lake-id=\"u979d21eb\" id=\"u979d21eb\">可能是你见过最完善的微前端解决方案</span></a></li><li fid=\"u182f7edb\" data-lake-id=\"u4ed41b66\" id=\"u4ed41b66\"><a href=\"https://zhuanlan.zhihu.com/p/95085796\" target=\"_blank\" data-lake-id=\"ue593f7d8\" id=\"ue593f7d8\"><span data-lake-id=\"u7f287243\" id=\"u7f287243\">微前端的核心价值</span></a></li></ul><p data-lake-id=\"u53798d26\" id=\"u53798d26\"><br></p><h2 data-lake-id=\"6e3c7750\" id=\"6e3c7750\"><span data-lake-id=\"u0250afe9\" id=\"u0250afe9\">qiankun 介绍</span></h2><p data-lake-id=\"u34ecda9f\" id=\"u34ecda9f\"><br></p><p data-lake-id=\"u38b389fd\" id=\"u38b389fd\"><span data-lake-id=\"ua75e185c\" id=\"ua75e185c\">qiankun 是一个基于 </span><a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" data-lake-id=\"ud42ff1e6\" id=\"ud42ff1e6\"><span data-lake-id=\"u2e20ff75\" id=\"u2e20ff75\">single-spa</span></a><span data-lake-id=\"u390a815e\" id=\"u390a815e\"> 的</span><a href=\"https://micro-frontends.org/\" target=\"_blank\" data-lake-id=\"ueac4aea2\" id=\"ueac4aea2\"><span data-lake-id=\"u6b83d84f\" id=\"u6b83d84f\">微前端</span></a><span data-lake-id=\"u90202dd4\" id=\"u90202dd4\">实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</span></p><p data-lake-id=\"u72108bdc\" id=\"u72108bdc\"><br></p><p data-lake-id=\"u5686ef85\" id=\"u5686ef85\"><span data-lake-id=\"ub5173560\" id=\"ub5173560\">qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。</span></p><p data-lake-id=\"u7543dca7\" id=\"u7543dca7\"><br></p><p data-lake-id=\"u622752e4\" id=\"u622752e4\"><span data-lake-id=\"u5577edc4\" id=\"u5577edc4\">目前 qiankun 已在蚂蚁内部服务了超过 200+ 线上应用，在易用性及完备性上，绝对是值得信赖的。</span></p><p data-lake-id=\"ud277691c\" id=\"ud277691c\"><br></p><ul list=\"u98d6ff38\"><li fid=\"ua3eb8d00\" data-lake-id=\"ua15b038a\" id=\"ua15b038a\"><span data-lake-id=\"u9176471a\" id=\"u9176471a\"> 🥄 简单<br /></span><span data-lake-id=\"u1f4c0754\" id=\"u1f4c0754\">由于主应用微应用都能做到技术栈无关，qiankun 对于用户而言只是一个类似 jQuery 的库，你需要调用几个 qiankun 的 API 即可完成应用的微前端改造。同时由于 qiankun 的 HTML entry 及沙箱的设计，使得微应用的接入像使用 iframe 一样简单。 </span></li><li fid=\"ua3eb8d00\" data-lake-id=\"ubf1907aa\" id=\"ubf1907aa\"><span data-lake-id=\"udbb98cb2\" id=\"udbb98cb2\"> 🍡 解耦/技术栈无关<br /></span><span data-lake-id=\"u37f294a4\" id=\"u37f294a4\">微前端的核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，而 qiankun 的诸多设计均是秉持这一原则，如 HTML entry、沙箱、应用间通信等。这样才能确保微应用真正具备 独立开发、独立运行 的能力。 </span></li></ul><p data-lake-id=\"u5401c0d9\" id=\"u5401c0d9\"><br></p><h2 data-lake-id=\"e0bd7e27\" id=\"e0bd7e27\"><span data-lake-id=\"u6a552112\" id=\"u6a552112\">为什么不是 iframe</span></h2><p data-lake-id=\"uc5032734\" id=\"uc5032734\"><br></p><p data-lake-id=\"ue8f84e5b\" id=\"ue8f84e5b\"><span data-lake-id=\"u37385ff1\" id=\"u37385ff1\">为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 &quot;炫技&quot; 或者刻意追求 &quot;特立独行&quot;。</span></p><p data-lake-id=\"u538cd364\" id=\"u538cd364\"><br></p><p data-lake-id=\"u005d54e8\" id=\"u005d54e8\"><span data-lake-id=\"ucdd02ba8\" id=\"ucdd02ba8\">如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。</span></p><p data-lake-id=\"uad5046be\" id=\"uad5046be\"><br></p><p data-lake-id=\"u7f95dceb\" id=\"u7f95dceb\"><span data-lake-id=\"u9bc7bf5e\" id=\"u9bc7bf5e\">iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。</span></p><p data-lake-id=\"u6fdff032\" id=\"u6fdff032\"><br></p><ol list=\"uab9c7f52\"><li fid=\"ucbbbcf15\" data-lake-id=\"u4faa6f9e\" id=\"u4faa6f9e\"><span data-lake-id=\"uf8052e7d\" id=\"uf8052e7d\">url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。</span></li><li fid=\"ucbbbcf15\" data-lake-id=\"u6b868db1\" id=\"u6b868db1\"><span data-lake-id=\"u574a9501\" id=\"u574a9501\">UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..</span></li><li fid=\"ucbbbcf15\" data-lake-id=\"ubc657fc2\" id=\"ubc657fc2\"><span data-lake-id=\"uf29f5ffd\" id=\"uf29f5ffd\">全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。</span></li><li fid=\"ucbbbcf15\" data-lake-id=\"ub2aaa546\" id=\"ub2aaa546\"><span data-lake-id=\"u34bfb5d2\" id=\"u34bfb5d2\">慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。</span></li></ol><p data-lake-id=\"u2e9c820b\" id=\"u2e9c820b\"><br></p><p data-lake-id=\"u1c489023\" id=\"u1c489023\"><span data-lake-id=\"uff1f88d7\" id=\"uff1f88d7\">其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。</span></p><p data-lake-id=\"uf08e88b3\" id=\"uf08e88b3\"><br></p><h2 data-lake-id=\"c666ad11\" id=\"c666ad11\"><span data-lake-id=\"u3b09509b\" id=\"u3b09509b\">特性</span></h2><p data-lake-id=\"u96bfa7fa\" id=\"u96bfa7fa\"><br></p><ul list=\"ubc1bc33a\"><li fid=\"u2b151712\" data-lake-id=\"ubdf837e5\" id=\"ubdf837e5\"><span data-lake-id=\"u42028cf2\" id=\"u42028cf2\">📦 </span><strong><span data-lake-id=\"ub2ce66bc\" id=\"ub2ce66bc\">基于 </span></strong><a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" data-lake-id=\"u3f770797\" id=\"u3f770797\"><strong><span data-lake-id=\"u65523dbe\" id=\"u65523dbe\">single-spa</span></strong></a><span data-lake-id=\"u8a7d39a8\" id=\"u8a7d39a8\"> 封装，提供了更加开箱即用的 API。</span></li><li fid=\"u2b151712\" data-lake-id=\"u083b092e\" id=\"u083b092e\"><span data-lake-id=\"u3a841998\" id=\"u3a841998\">📱 </span><strong><span data-lake-id=\"ua40a7efe\" id=\"ua40a7efe\">技术栈无关</span></strong><span data-lake-id=\"ue4092c68\" id=\"ue4092c68\">，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。</span></li><li fid=\"u2b151712\" data-lake-id=\"u0a50ec0d\" id=\"u0a50ec0d\"><span data-lake-id=\"u9d0ab2be\" id=\"u9d0ab2be\">💪 </span><strong><span data-lake-id=\"u6679eb8a\" id=\"u6679eb8a\">HTML Entry 接入方式</span></strong><span data-lake-id=\"ud41dc002\" id=\"ud41dc002\">，让你接入微应用像使用 iframe 一样简单。</span></li><li fid=\"u2b151712\" data-lake-id=\"ubc859ce3\" id=\"ubc859ce3\"><span data-lake-id=\"u1f6d0e13\" id=\"u1f6d0e13\">🛡 </span><strong><span data-lake-id=\"u814611b2\" id=\"u814611b2\">样式隔离</span></strong><span data-lake-id=\"u00223f00\" id=\"u00223f00\">，确保微应用之间样式互相不干扰。</span></li><li fid=\"u2b151712\" data-lake-id=\"u7a6502b1\" id=\"u7a6502b1\"><span data-lake-id=\"u328ae80c\" id=\"u328ae80c\">🧳 </span><strong><span data-lake-id=\"u33896ad9\" id=\"u33896ad9\">JS 沙箱</span></strong><span data-lake-id=\"ua77996db\" id=\"ua77996db\">，确保微应用之间 全局变量/事件 不冲突。</span></li><li fid=\"u2b151712\" data-lake-id=\"uc7114d6b\" id=\"uc7114d6b\"><span data-lake-id=\"u81776cf1\" id=\"u81776cf1\">⚡️ </span><strong><span data-lake-id=\"u1e9d56d4\" id=\"u1e9d56d4\">资源预加载</span></strong><span data-lake-id=\"u0a7a1ddf\" id=\"u0a7a1ddf\">，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。</span></li><li fid=\"u2b151712\" data-lake-id=\"u76072b1e\" id=\"u76072b1e\"><span data-lake-id=\"u8ac933d7\" id=\"u8ac933d7\">🔌 </span><strong><span data-lake-id=\"u0dec80be\" id=\"u0dec80be\">umi 插件</span></strong><span data-lake-id=\"u91d42c9d\" id=\"u91d42c9d\">，提供了 </span><a href=\"https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun\" target=\"_blank\" data-lake-id=\"u6f73d153\" id=\"u6f73d153\"><span data-lake-id=\"uec5eb3d4\" id=\"uec5eb3d4\">@umijs/plugin-qiankun</span></a><span data-lake-id=\"ud478fbe9\" id=\"ud478fbe9\"> 供 umi 应用一键切换成微前端架构系统。</span></li></ul><p data-lake-id=\"u44484d3b\" id=\"u44484d3b\"><br></p><h2 data-lake-id=\"c1b18ad6\" id=\"c1b18ad6\"><span data-lake-id=\"u68982dd2\" id=\"u68982dd2\">快速上手</span></h2><p data-lake-id=\"u7894b2fe\" id=\"u7894b2fe\"><br></p><h3 data-lake-id=\"d970b2a8\" id=\"d970b2a8\"><span data-lake-id=\"u86e2446e\" id=\"u86e2446e\">主应用</span></h3><p data-lake-id=\"ua6ae5185\" id=\"ua6ae5185\"><br></p><h4 data-lake-id=\"34b974f9\" id=\"34b974f9\"><span data-lake-id=\"u3cea3b6c\" id=\"u3cea3b6c\">1. 安装 qiankun</span></h4><p data-lake-id=\"u0aa17afd\" id=\"u0aa17afd\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%20yarn%20add%20qiankun%20%23%20%E6%88%96%E8%80%85%20npm%20i%20qiankun%20-S%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dcfaf0ec%22%7D\"></card><p data-lake-id=\"uce875440\" id=\"uce875440\"><br></p><h4 data-lake-id=\"fdb3f36c\" id=\"fdb3f36c\"><span data-lake-id=\"u1ac121e8\" id=\"u1ac121e8\">2. 在主应用中注册微应用</span></h4><p data-lake-id=\"uf360d759\" id=\"uf360d759\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20registerMicroApps%2C%20start%20%7D%20from%20'qiankun'%3B%5Cn%5Cn%2F%2F%20%E6%B3%A8%E5%86%8C%E5%BE%AE%E5%BA%94%E7%94%A8%5CnregisterMicroApps(%5B%5Cn%20%20%7B%5Cn%20%20%20%20name%3A%20'cos'%2C%5Cn%20%20%20%20entry%3A%20process.env.VUE_APP_COS_UI_URL%2C%5Cn%20%20%20%20container%3A%20'%23subapp-viewport'%2C%5Cn%20%20%20%20activeRule%3A%20'%2Fcos'%2C%5Cn%20%20%20%20props%3A%20config%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20name%3A%20'middleware'%2C%5Cn%20%20%20%20entry%3A%20process.env.VUE_APP_MIDDLEWARE_UI_URL%2C%5Cn%20%20%20%20container%3A%20'%23subapp-viewport'%2C%5Cn%20%20%20%20activeRule%3A%20'%2Fmiddleware'%2C%5Cn%20%20%20%20props%3A%20config%5Cn%20%20%7D%5Cn%5D%2C%5Cn%7B%5Cn%20%20beforeLoad%3A%20%5B%5Cn%20%20%20%20app%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20console.log('%5BLifeCycle%5D%20before%20load%20%25c%25s'%2C%20'color%3A%20green%3B'%2C%20app.name)%5Cn%20%20%20%20%20%20return%20Promise.resolve()%5Cn%20%20%20%20%7D%5Cn%20%20%5D%2C%5Cn%20%20beforeMount%3A%20%5B%5Cn%20%20%20%20app%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20console.log('%5BLifeCycle%5D%20before%20mount%20%25c%25s'%2C%20'color%3A%20green%3B'%2C%20app.name)%5Cn%20%20%20%20%20%20return%20Promise.resolve()%5Cn%20%20%20%20%7D%5Cn%20%20%5D%2C%5Cn%20%20afterUnmount%3A%20%5B%5Cn%20%20%20%20app%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20console.log('%5BLifeCycle%5D%20after%20unmount%20%25c%25s'%2C%20'color%3A%20green%3B'%2C%20app.name)%5Cn%20%20%20%20%20%20return%20Promise.resolve()%5Cn%20%20%20%20%7D%5Cn%20%20%5D%5Cn%7D%5Cn)%5Cn%2F%2F%20%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E8%BF%9B%E5%85%A5%E5%BE%AE%E5%BA%94%E7%94%A8%5CnsetDefaultMountApp('%2Fcos')%5Cn%5Cn%2F%2F%20%E5%90%AF%E5%8A%A8%5Cnif%20(!window.qiankunStarted)%20%7B%5Cn%20%20window.qiankunStarted%20%3D%20true%5Cn%20%20start()%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%228cdf1539%22%7D\"></card><p data-lake-id=\"u398d9289\" id=\"u398d9289\"><br></p><p data-lake-id=\"uf488a806\" id=\"uf488a806\"><span data-lake-id=\"ua7ca471d\" id=\"ua7ca471d\">当微应用信息注册完之后，一旦浏览器的 url 发生变化，便会自动触发 qiankun 的匹配逻辑，所有 activeRule 规则匹配上的微应用就会被插入到指定的 container 中，同时依次调用微应用暴露出的生命周期钩子。</span></p><p data-lake-id=\"ua3b19a3d\" id=\"ua3b19a3d\"><br></p><h3 data-lake-id=\"9cca01fb\" id=\"9cca01fb\"><span data-lake-id=\"u15fcf62c\" id=\"u15fcf62c\">微应用</span></h3><p data-lake-id=\"u4834e8e1\" id=\"u4834e8e1\"><br></p><p data-lake-id=\"ub75fc277\" id=\"ub75fc277\"><span data-lake-id=\"u7e2789d3\" id=\"u7e2789d3\">微应用不需要额外安装任何其他依赖即可接入 qiankun 主应用。</span></p><p data-lake-id=\"u1b5e745d\" id=\"u1b5e745d\"><br></p><p data-lake-id=\"u46b2361b\" id=\"u46b2361b\"><span data-lake-id=\"ucc0348ab\" id=\"ucc0348ab\">微应用分为有 </span><code data-lake-id=\"u3885f740\" id=\"u3885f740\"><span data-lake-id=\"ua4ad2782\" id=\"ua4ad2782\">webpack</span></code><span data-lake-id=\"uf1ebbe3a\" id=\"uf1ebbe3a\"> 构建和无 </span><code data-lake-id=\"u4745f2c6\" id=\"u4745f2c6\"><span data-lake-id=\"u276ed344\" id=\"u276ed344\">webpack</span></code><span data-lake-id=\"ue2cfd70f\" id=\"ue2cfd70f\"> 构建项目，有 </span><code data-lake-id=\"ufad89443\" id=\"ufad89443\"><span data-lake-id=\"u2b770bc0\" id=\"u2b770bc0\">webpack</span></code><span data-lake-id=\"u75573ff8\" id=\"u75573ff8\"> 的微应用（主要是指 Vue、React、Angular）需要做的事情有：</span></p><p data-lake-id=\"uc0904745\" id=\"uc0904745\"><br></p><ol list=\"u167a1cbb\"><li fid=\"udb0f730f\" data-lake-id=\"ud1422faf\" id=\"ud1422faf\"><span data-lake-id=\"u003f31ab\" id=\"u003f31ab\"> 新增 public-path.js 文件，用于修改运行时的 publicPath。什么是运行时的 publicPath ？。 </span><span data-lake-id=\"u8f256915\" id=\"u8f256915\"> </span></li></ol><blockquote data-lake-id=\"u629a9d32\" id=\"u629a9d32\"><p data-lake-id=\"u98cd5db5\" id=\"u98cd5db5\"><span data-lake-id=\"u66e60f57\" id=\"u66e60f57\">注意：运行时的 publicPath 和构建时的 publicPath 是不同的，两者不能等价替代。</span></p></blockquote><ol list=\"uba9a13dc\" start=\"2\"><li fid=\"u84fb58bf\" data-lake-id=\"ucd67241c\" id=\"ucd67241c\"><span data-lake-id=\"u4878ec29\" id=\"u4878ec29\"> 微应用建议使用 history 模式的路由，需要设置路由 base，值和它的 activeRule 是一样的。 </span></li><li fid=\"u84fb58bf\" data-lake-id=\"uf7194382\" id=\"uf7194382\"><span data-lake-id=\"u58c4887f\" id=\"u58c4887f\"> 在入口文件最顶部引入 public-path.js，修改并导出三个生命周期函数。 </span></li><li fid=\"u84fb58bf\" data-lake-id=\"u8a93dc9c\" id=\"u8a93dc9c\"><span data-lake-id=\"u484c5662\" id=\"u484c5662\"> 修改 webpack 打包，允许开发环境跨域和 umd 打包。 </span></li></ol><p data-lake-id=\"u4b15f76e\" id=\"u4b15f76e\"><br></p><p data-lake-id=\"u874d14d1\" id=\"u874d14d1\"><span data-lake-id=\"u2df82fa3\" id=\"u2df82fa3\">主要的修改就是以上四个，可能会根据项目的不同情况而改变。例如，你的项目是 index.html 和其他的所有文件分开部署的，说明你们已经将构建时的 publicPath 设置为了完整路径，则不用修改运行时的 publicPath （第一步操作可省）。</span></p><p data-lake-id=\"u7202f6eb\" id=\"u7202f6eb\"><br></p><p data-lake-id=\"u2ad517d7\" id=\"u2ad517d7\"><span data-lake-id=\"u1f6a167c\" id=\"u1f6a167c\">无 </span><code data-lake-id=\"ud98e5844\" id=\"ud98e5844\"><span data-lake-id=\"ucbd58b44\" id=\"ucbd58b44\">webpack</span></code><span data-lake-id=\"u808e7423\" id=\"u808e7423\"> 构建的微应用直接将 </span><code data-lake-id=\"u5790ce95\" id=\"u5790ce95\"><span data-lake-id=\"ud0c0f0f1\" id=\"ud0c0f0f1\">lifecycles</span></code><span data-lake-id=\"uf20280a2\" id=\"uf20280a2\"> 挂载到 </span><code data-lake-id=\"u1a4686ca\" id=\"u1a4686ca\"><span data-lake-id=\"u94b91bfd\" id=\"u94b91bfd\">window</span></code><span data-lake-id=\"ub6806232\" id=\"ub6806232\"> 上即可。</span></p><p data-lake-id=\"u7e5118e2\" id=\"u7e5118e2\"><br></p><h4 data-lake-id=\"f4af72d0\" id=\"f4af72d0\"><span data-lake-id=\"udb2523cc\" id=\"udb2523cc\">1. 导出相应的生命周期钩子</span></h4><p data-lake-id=\"u1e9846ae\" id=\"u1e9846ae\"><br></p><p data-lake-id=\"u95550a39\" id=\"u95550a39\"><span data-lake-id=\"u90519135\" id=\"u90519135\">微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。</span></p><p data-lake-id=\"ubc262a4c\" id=\"ubc262a4c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20instance%20%3D%20null%5Cnasync%20function%20render%20(props%20%3D%20%7B%7D)%20%7B%5Cn%20%20const%20%7B%20container%20%7D%20%3D%20props%5Cn%20%20%2F%2F%20%E6%B3%A8%E5%85%A5%20actions%20%E5%AE%9E%E4%BE%8B%5Cn%20%20actions.setActions(props)%5Cn%20%20%2F%2F%20%E4%BB%8E%E7%88%B6%E5%BA%94%E7%94%A8%E8%8E%B7%E5%8F%96%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%5Cn%20%20for%20(let%20i%20in%20config)%20%7B%5Cn%20%20%20%20config%5Bi%5D%20%3D%20props%5Bi%5D%5Cn%20%20%7D%5Cn%20%20const%20router%20%3D%20new%20vueRouter(%7B%5Cn%20%20%20%20base%3A%20window.__POWERED_BY_QIANKUN__%20%3F%20'cos'%20%3A%20process.env.BASE_URL%2C%5Cn%20%20%20%20mode%3A%20'history'%2C%5Cn%20%20%20%20scrollBehavior%3A%20()%20%3D%3E%20(%7B%20y%3A%200%20%7D)%2C%5Cn%20%20%20%20routes%5Cn%20%20%7D)%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%97%B6%E9%97%B4%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E7%9A%84%E5%B7%AE%E5%80%BC%5Cn%20%20if%20(isUndefined(config.timeDifference))%20%7B%5Cn%20%20%20%20await%20getTimeFunc()%5Cn%20%20%7D%5Cn%20%20instance%20%3D%20new%20Vue(%7B%5Cn%20%20%20%20router%2C%5Cn%20%20%20%20store%2C%5Cn%20%20%20%20created%3A%20storeBootstrap%2C%5Cn%20%20%20%20render%3A%20(h)%20%3D%3E%20h(App)%5Cn%20%20%7D).%24mount(container%20%3F%20container.querySelector('%23app')%20%3A%20'%23app')%5Cn%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%5Cn%20%20store.dispatch('GetInfo')%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7vdc%E5%88%97%E8%A1%A8%EF%BC%8CteamSpace%E5%88%97%E8%A1%A8%5Cn%20%20if%20(config.systemId%20%3D%3D%3D%20systemId.VDC_SYSTEM_ID)%20%7B%5Cn%20%20%20%20store.dispatch('GetVdcList')%5Cn%20%20%7D%20else%20if%20(config.systemId%20%3D%3D%3D%20systemId.TEAM_SPACE_SYSTEM_ID)%20%7B%5Cn%20%20%20%20store.dispatch('GetTeamSpaceList')%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%5Cnif%20(!window.__POWERED_BY_QIANKUN__)%20%7B%5Cn%20%20render()%5Cn%7D%5Cn%5Cnexport%20async%20function%20bootstrap%20()%20%7B%5Cn%20%20console.log('%5Bvue%5D%20vue%20app%20bootstraped')%5Cn%7D%5Cn%5Cnexport%20async%20function%20mount%20(props)%20%7B%5Cn%20%20console.log('%5Bvue%5D%20props%20from%20main%20framework'%2C%20props)%5Cn%5Cn%20%20render(props)%5Cn%7D%5Cn%5Cnexport%20async%20function%20unmount%20()%20%7B%5Cn%20%20instance.%24destroy()%5Cn%20%20instance.%24el.innerHTML%20%3D%20''%5Cn%20%20instance%20%3D%20null%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22bb1e1991%22%7D\"></card><p data-lake-id=\"u4f5b4e8b\" id=\"u4f5b4e8b\"><br></p><h4 data-lake-id=\"6f5639d8\" id=\"6f5639d8\"><span data-lake-id=\"u1d50ce18\" id=\"u1d50ce18\">2. 配置微应用的打包工具</span></h4><p data-lake-id=\"u70df9b7e\" id=\"u70df9b7e\"><br></p><p data-lake-id=\"u2a94d352\" id=\"u2a94d352\"><span data-lake-id=\"u192f1982\" id=\"u192f1982\">除了代码中暴露出相应的生命周期钩子之外，为了让主应用能正确识别微应用暴露出来的一些信息，微应用的打包工具需要增加如下配置：</span></p><p data-lake-id=\"u00ac34cd\" id=\"u00ac34cd\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20packageName%20%3D%20require('.%2Fpackage.json').name%3B%5Cn%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20output%3A%20%7B%5Cn%20%20%20%20library%3A%20%60%24%7BpackageName%7D-%5Bname%5D%60%2C%5Cn%20%20%20%20libraryTarget%3A%20'umd'%2C%5Cn%20%20%20%20jsonpFunction%3A%20%60webpackJsonp_%24%7BpackageName%7D%60%2C%5Cn%20%20%7D%2C%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2253ada36e%22%7D\"></card>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-22T05:12:57.000Z",
    "deleted_at": null,
    "created_at": "2021-12-16T01:23:09.000Z",
    "updated_at": "2021-12-22T05:12:57.000Z",
    "published_at": "2021-12-22T05:12:57.000Z",
    "first_published_at": "2021-12-22T05:12:57.000Z",
    "word_count": 2385,
    "cover": null,
    "description": "微前端介绍什么是微前端Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. -- Micro Fron...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 62529787,
    "slug": "yhx3yn",
    "title": "函数和函数参数定义类型",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-22T05:31:44.747Z",
      "updated_at": "2021-12-22T05:31:44.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-22T05:28:17.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-22T05:28:17.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"tHJwe\"></a>\n## 1.函数类型\n<a name=\"qkS5T\"></a>\n### (1) 为函数定义类型\n我们可以给函数定义类型，这个定义包括对参数和返回值的类型定义，我们先来看简单的定义写法：\n```typescript\nfunction add(arg1: number, arg2: number): number {\n  return x + y;\n}\n// 或者\nconst add = (arg1: number, arg2: number): number => {\n  return x + y;\n};\n```\n在上面的例子中我们用function和箭头函数两种形式定义了add函数，以展示如何定义函数类型。这里参数 arg1 和 arg2 都是数值类型，最后通过相加得到的结果也是数值类型。<br />如果在这里省略参数的类型，TypeScript 会默认这个参数是 any 类型；如果省略返回值的类型，如果函数无返回值，那么 TypeScript 会默认函数返回值是 void 类型；如果函数有返回值，那么 TypeScript 会根据我们定义的逻辑推断出返回类型。\n<a name=\"Pm9fQ\"></a>\n### (2) 完整的函数类型\n一个函数的定义包括函数名、参数、逻辑和返回值。我们为一个函数定义类型时，完整的定义应该包括参数类型和返回值类型。上面的例子中，我们都是在定义函数的指定参数类型和返回值类型。接下来我们看下，如何定义一个完整的函数类型，以及用这个函数类型来规定一个函数定义时参数和返回值需要符合的类型。先来看例子然后再进行解释：\n```typescript\nlet add: (x: number, y: number) => number;\nadd = (arg1: number, arg2: number): number => arg1 + arg2;\nadd = (arg1: string, arg2: string): string => arg1 + arg2; // error\n```\n上面这个例子中，我们首先定义了一个变量 add，给它指定了函数类型，也就是(x: number, y: number) => number，这个函数类型包含参数和返回值的类型。然后我们给 add 赋了一个实际的函数，这个函数参数类型和返回类型都和函数类型中定义的一致，所以可以赋值。后面我们又给它赋了一个新函数，而这个函数的参数类型和返回值类型都是 string 类型，这时就会报如下错误：\n```typescript\n     不能将类型\"(arg1: string, arg2: string) => string\"分配给类型\"(x: number, y: number) => number\"。   参数\"arg1\"和\"x\" 的类型不兼容。     不能将类型\"number\"分配给类型\"string\"。\n```\n <br />函数中如果使用了函数体之外定义的变量，这个变量的类型是不体现在函数类型定义的。\n<a name=\"hmuWo\"></a>\n### (3) 使用接口定义函数类型\n使用接口定义函数类型：\n```typescript\ninterface Add {\n  (x: number, y: number): number;\n}\nlet add: Add = (arg1: string, arg2: string): string => arg1 + arg2; // error 不能将类型“(arg1: string, arg2: string) => string”分配给类型“Add”\n```\n这里我们通过接口的形式定义函数类型，这个接口Add定义了这个结构是一个函数，两个参数类型都是number类型，返回值也是number类型。然后我们指定变量add类型为Add时，再要给add赋值，就必须是一个函数，且参数类型和返回值类型都要满足接口Add，显然例子中这个函数并不满足条件，所以报错了。\n<a name=\"OKKqq\"></a>\n### (4) 使用类型别名\n我们可以使用类型别名来定义函数类型，使用类型别名定义函数类型更直观易读，我们来看一下具体的写法：\n```typescript\ntype Add = (x: number, y: number) => number;\nlet add: Add = (arg1: string, arg2: string): string => arg1 + arg2; // error 不能将类型“(arg1: string, arg2: string) => string”分配给类型“Add”\n```\n使用type关键字可以为原始值、联合类型、元组以及任何我们定义的类型起一个别名。上面定义了 Add 这个别名后，Add就成为了一个和(x: number, y: number) => number一致的类型定义。例子中定义了Add类型，指定add类型为Add，但是给add赋的值并不满足Add类型要求，所以报错了。\n<a name=\"FWfKA\"></a>\n## 2.参数\n<a name=\"dDcXy\"></a>\n### (1) 可选参数\nTypeScript 会帮我们在编写代码的时候就检查出调用函数时参数中存在的一些错误，先看下面例子：\n```typescript\ntype Add = (x: number, y: number) => number;\nlet add: Add = (arg1: string, arg2: string): string => arg1 + arg2;\n\nadd(1, 2); // right\nadd(1, 2, 3); // error 应有 2 个参数，但获得 3 个\nadd(1); // error 应有 2 个参数，但获得 1 个\n```\n在 JS 中，上面例子中最后两个函数调用都不会报错, 只不过add(1, 2, 3)可以返回正确结果3，add(1)会返回NaN。<br />但有时候，我们的函数有些参数不是必须的，是可选的。在学习接口的时候我们学习过，可选参数只需在参数名后跟随一个?即可。但是接口形式的定义和今天学到的函数类型定义有一点区别，那就是参数位置的要求：<br />接口形式定义的函数类型必选参数和可选参数的位置前后是无所谓的，但是今天学到的定义形式，可选参数必须放在必选参数后面，这和在 JS 中定义函数是一致的。\n```typescript\ntype Add = (x?: number, y: number) => number; // error 必选参数不能位于可选参数后。\n```\n在TypeScript中，可选参数放到最后才行，上面例子中把可选参数x放到了必选参数y前面，所以报错了；但是在 JavaScript 中，其实是没有可选参数这个概念的，只不过是我们在写逻辑的时候，我们可能会判断某个参数是否为undefined，如果是则说明调用该函数的时候没有传这个参数，要做下兼容处理；而如果几个参数中，前面的参数是可不传的，后面的参数是需要传的，就需要在该可不传的参数位置传入一个 undefined 占位才行。\n<a name=\"bjNGa\"></a>\n### (2) 默认参数\n在 ES6 标准出来之前，我们的默认参数实现起来比较繁琐：<br />// javascript var count = 0; function countUp(step) {   step = step || 1;   count += step; }<br />上面我们定义了一个计数器增值函数，这个函数有一个参数 step，即每次增加的步长，如果不传入参数，那么 step 接受到的就是 undefined，undefined 转换为布尔值是 false，所以step || 1这里取了 1，从而达到了不传参数默认 step === 1 的效果。<br />在 ES6 中，我们定义函数时给参数设默认值就很方便了，直接在参数后面使用等号连接默认值即可：<br />// javascript const count = 0; const countUp = (step = 1) => {   count += step; };<br />你会发现，可选参数和带默认值的参数在函数调用时都是可以不传实参的，但是区别在于定义函数的时候，可选参数必须放在必选参数后面，而带默认值的参数则可放在必须参数前后都可。<br />当我们为参数指定了默认参数的时候，TypeScript 会识别默认参数的类型；当我们在调用函数时，如果给这个带默认值的参数传了别的类型的参数则会报错：<br />const add = (x: number, y = 2) => {   return x + y; }; add(1, \"a\"); // error 类型\"string\"的参数不能赋给类型\"number\"的参数<br />当然了，你也可以显式地给 y 设置类型：<br />const add = (x: number, y: number = 2) => {   return x + y; };\n<a name=\"xTpRY\"></a>\n### (3) 剩余参数\n在 JS 中，如果我们定义一个函数，这个函数可以输入任意个数的参数，那么我们就无法在定义参数列表的时候挨个定义。在 ES6 发布之前，我们需要用到 arguments 来获取参数列表。arguments 是每一个函数都包含的一个类数组对象，它包含在函数调用时传入函数的所有实际参数（简称实参），它还包含一个 length 属性，记录参数个数。来看下面的例子，我们来模拟实现函数的重载：\n```typescript\n// javascript\nfunction handleData() {\n  if (arguments.length === 1) return arguments[0] * 2;\n  else if (arguments.length === 2) return arguments[0] * arguments[1];\n  else return Array.prototype.slice.apply(arguments).join(\"_\");\n}\nhandleData(2); // 4\nhandleData(2, 3); // 6\nhandleData(1, 2, 3, 4, 5); // '1_2_3_4_5'\n// 这段代码如果在TypeScript环境中，三个对handleData函数的调用都会报错，因为handleData函数定义的时候没有参数。\n```\n上面这个函数通过判断传入实参的个数，做出不同的处理并返回结果。else 后面的逻辑是如果实参个数不为 1 和 2，那么将这些参数拼接成以\"_\"连接的字符串。<br />你应该注意到了我们使用Array.prototype.slice.apply(arguments)对 arguments 做了处理，前面我们讲过 arguments 不是数组，而是类数组对象，如果直接在 arguments 调用 join 方法，它是没有这个方法的。所以我们通过这个处理得到一个包含 arguments 中所有元素的真实数组。<br />在 ES6 中，加入了\"…\"拓展运算符，它可以将一个函数或对象进行拆解。它还支持用在函数的参数列表中，用来处理任意数量的参数：\n```typescript\nconst handleData = (arg1, ...args) => {\n  // 这里省略逻辑\n  console.log(args);\n};\nhandleData(1, 2, 3, 4, 5); // [ 2, 3, 4, 5 ]\n```\n可以看到，args 是除了 arg1 之外的所有实参的集合，它是一个数组。<br />补充：\"…\"运算符可以拆解数组和对象，比如：arr1 = [1, 2]，arr2 = [3, 4]，那么[…arr1, …arr2]的结果就是[1, 2, 3, 4]，他还可以用在方法的参数中：如果使用 arr1.push(arr2)，则 arr1 结果是[1, 2, [3, 4]]，如果你想让他们合并成一个函数而不使用 concat 方法，就可以使用 arr1.push(…arr2)。还有对象的使用方法：obj1 = { a: ‘aa’ }，obj2 = { b: ‘bb’ }，则{ …obj1, …obj2 }的结果是{ a: ‘aa’, b: ‘bb’ }。<br />在 TypeScript 中你可以为剩余参数指定类型，先来看例子：<br />const handleData = (arg1: number, ...args: number[]) => {   // }; handleData(1, \"a\"); // error 类型\"string\"的参数不能赋给类型\"number\"的参数\n<a name=\"aCBbY\"></a>\n## 3 函数重载，此重载vs彼重载\n在其他一些强类型语言中，函数重载是指定义几个函数名相同，但参数个数或类型不同的函数，在调用时传入不同的参数，编译器会自动调用适合的函数。但是 JavaScript 作为一个动态语言是没有函数重载的，只能我们自己在函数体内通过判断参数的个数、类型来指定不同的处理逻辑。来看个简单的例子\n```typescript\nconst handleData = value => {\n  if (typeof value === \"string\") {\n    return value.split(\"\");\n  } else {\n    return value\n      .toString()\n      .split(\"\")\n      .join(\"_\");\n  }\n};\n```\n这个例子中，当传入的参数为字符串时，将它进行切割，比如传入的是’abc’，返回的将是数组[‘a’, ‘b’, ‘c’]；如果传入的是一个数值类型，则将数字转为字符串然后切割成单个数字然后拼接成字符串，比如传入的是123，则返回的是’1_2_3’。你可以看到传入的参数类型不同，返回的值的类型是不同的，<br />在 TypeScript 中有函数重载的概念，但并不是定义几个同名实体函数，然后根据不同的参数个数或类型来自动调用相应的函数。TypeScript的函数重载是在类型系统层面的，是为了更好地进行类型推断。TypeScript的函数重载通过为一个函数指定多个函数类型定义，从而对函数调用的返回值进行检查。来看例子：\n```typescript\nfunction handleData(x: string): string[]; // 这个是重载的一部分，指定当参数类型为string时，返回值为string类型的元素构成的数组\nfunction handleData(x: number): string; // 这个也是重载的一部分，指定当参数类型为number时，返回值类型为string\nfunction handleData(x: any): any { // 这个就是重载的内容了，他是实体函数，不算做重载的部分\n  if (typeof x === \"string\") {\n    return x.split(\"\");\n  } else {\n    return x\n      .toString()\n      .split(\"\")\n      .join(\"_\");\n  }\n}\nhandleData(\"abc\").join(\"_\");\nhandleData(123).join(\"_\"); // error 类型\"string\"上不存在属性\"join\"\nhandleData(false); // error 类型\"boolean\"的参数不能赋给类型\"number\"的参数。\n```\n首先我们使用function关键字定义了两个同名的函数，但不同的是，函数没有实际的函数体逻辑，而是只定义函数名、参数及参数类型以及函数的返回值类型；而第三个使用function定义的同名函数，是一个完整的实体函数，包含函数名、参数及参数类型、返回值类型和函数体；这三个定义组成了一个函数——完整的带有类型定义的函数，前两个function定义的就称为_函数重载_，而第三个function并不算重载；<br />然后我们来看下匹配规则，当调用这个函数并且传入参数的时候，会从上而下在函数重载里匹配和这个参数个数和类型匹配的重载。如例子中第一个调用，传入了一个字符串\"abc\"，它符合第一个重载，所以它的返回值应该是一个字符串组成的数组，数组是可以调用join方法的，所以这里没问题；<br />第二个调用传入的是一个数值类型的123，从上到下匹配重载是符合第二个的，返回值应该是字符串类型。但这里拿到返回值后调用了数组方法join，这肯定会报错了，因为字符串无法调用这个方法；<br />最后调用时传入了一个布尔类型值false，匹配不到重载，所以会报错；<br />最后还有一点要注意的是，这里重载只能用 function 来定义，不能使用接口、类型别名等。\n<a name=\"cUviX\"></a>\n### 小结\n学习了函数类型的三种定义方式：\n\n- 基本方式：直接在定义函数实体语句中，指定参数和返回值类型；\n- 接口形式：这种方式我们在讲接口的时候已经学习过了；\n- 类型别名：这种方式是比较推荐的写法，比较简洁清晰。\n\n详细学习了函数参数的三个知识点：\n\n- 可选参数：可选参数在JavaScript中可以实现，TypeScript中需要在该参数后面加个?，且可选参数必须位于必选参数后面；；\n- 默认参数：这是在ES6标准中添加的语法，为函数参数指定默认参数，写法就是在参数名后面使用=连接默认参数\n- 剩余参数：这也是在ES6中添加的语法，可以使用...参数名来获取剩余任意多个参数，获取的是一个数组。\n\n学习了函数重载。着重强调的是，这里的函数重载区别于其他语言中的重载，TypeScript中的重载是为了针对不同参数个数和类型，推断返回值类型。<br />![5cf4bff500010be916000896.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639380599741-01dff690-389b-49c7-9943-6737d7ce0db4.jpeg#clientId=u4a462bc7-b87a-4&from=ui&id=ud459aace&margin=%5Bobject%20Object%5D&name=5cf4bff500010be916000896.jpg&originHeight=896&originWidth=1600&originalType=binary&ratio=1&size=197840&status=done&style=none&taskId=u070f9149-4014-4741-8932-98f9adecd7a)\n",
    "body_draft": "<a name=\"tHJwe\"></a>\n## 1.函数类型\n<a name=\"qkS5T\"></a>\n### (1) 为函数定义类型\n我们可以给函数定义类型，这个定义包括对参数和返回值的类型定义，我们先来看简单的定义写法：\n```typescript\nfunction add(arg1: number, arg2: number): number {\n  return x + y;\n}\n// 或者\nconst add = (arg1: number, arg2: number): number => {\n  return x + y;\n};\n```\n在上面的例子中我们用function和箭头函数两种形式定义了add函数，以展示如何定义函数类型。这里参数 arg1 和 arg2 都是数值类型，最后通过相加得到的结果也是数值类型。<br />如果在这里省略参数的类型，TypeScript 会默认这个参数是 any 类型；如果省略返回值的类型，如果函数无返回值，那么 TypeScript 会默认函数返回值是 void 类型；如果函数有返回值，那么 TypeScript 会根据我们定义的逻辑推断出返回类型。\n<a name=\"Pm9fQ\"></a>\n### (2) 完整的函数类型\n一个函数的定义包括函数名、参数、逻辑和返回值。我们为一个函数定义类型时，完整的定义应该包括参数类型和返回值类型。上面的例子中，我们都是在定义函数的指定参数类型和返回值类型。接下来我们看下，如何定义一个完整的函数类型，以及用这个函数类型来规定一个函数定义时参数和返回值需要符合的类型。先来看例子然后再进行解释：\n```typescript\nlet add: (x: number, y: number) => number;\nadd = (arg1: number, arg2: number): number => arg1 + arg2;\nadd = (arg1: string, arg2: string): string => arg1 + arg2; // error\n```\n上面这个例子中，我们首先定义了一个变量 add，给它指定了函数类型，也就是(x: number, y: number) => number，这个函数类型包含参数和返回值的类型。然后我们给 add 赋了一个实际的函数，这个函数参数类型和返回类型都和函数类型中定义的一致，所以可以赋值。后面我们又给它赋了一个新函数，而这个函数的参数类型和返回值类型都是 string 类型，这时就会报如下错误：\n```typescript\n     不能将类型\"(arg1: string, arg2: string) => string\"分配给类型\"(x: number, y: number) => number\"。   参数\"arg1\"和\"x\" 的类型不兼容。     不能将类型\"number\"分配给类型\"string\"。\n```\n <br />函数中如果使用了函数体之外定义的变量，这个变量的类型是不体现在函数类型定义的。\n<a name=\"hmuWo\"></a>\n### (3) 使用接口定义函数类型\n使用接口定义函数类型：\n```typescript\ninterface Add {\n  (x: number, y: number): number;\n}\nlet add: Add = (arg1: string, arg2: string): string => arg1 + arg2; // error 不能将类型“(arg1: string, arg2: string) => string”分配给类型“Add”\n```\n这里我们通过接口的形式定义函数类型，这个接口Add定义了这个结构是一个函数，两个参数类型都是number类型，返回值也是number类型。然后我们指定变量add类型为Add时，再要给add赋值，就必须是一个函数，且参数类型和返回值类型都要满足接口Add，显然例子中这个函数并不满足条件，所以报错了。\n<a name=\"OKKqq\"></a>\n### (4) 使用类型别名\n我们可以使用类型别名来定义函数类型，使用类型别名定义函数类型更直观易读，我们来看一下具体的写法：\n```typescript\ntype Add = (x: number, y: number) => number;\nlet add: Add = (arg1: string, arg2: string): string => arg1 + arg2; // error 不能将类型“(arg1: string, arg2: string) => string”分配给类型“Add”\n```\n使用type关键字可以为原始值、联合类型、元组以及任何我们定义的类型起一个别名。上面定义了 Add 这个别名后，Add就成为了一个和(x: number, y: number) => number一致的类型定义。例子中定义了Add类型，指定add类型为Add，但是给add赋的值并不满足Add类型要求，所以报错了。\n<a name=\"FWfKA\"></a>\n## 2.参数\n<a name=\"dDcXy\"></a>\n### (1) 可选参数\nTypeScript 会帮我们在编写代码的时候就检查出调用函数时参数中存在的一些错误，先看下面例子：\n```typescript\ntype Add = (x: number, y: number) => number;\nlet add: Add = (arg1: string, arg2: string): string => arg1 + arg2;\n\nadd(1, 2); // right\nadd(1, 2, 3); // error 应有 2 个参数，但获得 3 个\nadd(1); // error 应有 2 个参数，但获得 1 个\n```\n在 JS 中，上面例子中最后两个函数调用都不会报错, 只不过add(1, 2, 3)可以返回正确结果3，add(1)会返回NaN。<br />但有时候，我们的函数有些参数不是必须的，是可选的。在学习接口的时候我们学习过，可选参数只需在参数名后跟随一个?即可。但是接口形式的定义和今天学到的函数类型定义有一点区别，那就是参数位置的要求：<br />接口形式定义的函数类型必选参数和可选参数的位置前后是无所谓的，但是今天学到的定义形式，可选参数必须放在必选参数后面，这和在 JS 中定义函数是一致的。\n```typescript\ntype Add = (x?: number, y: number) => number; // error 必选参数不能位于可选参数后。\n```\n在TypeScript中，可选参数放到最后才行，上面例子中把可选参数x放到了必选参数y前面，所以报错了；但是在 JavaScript 中，其实是没有可选参数这个概念的，只不过是我们在写逻辑的时候，我们可能会判断某个参数是否为undefined，如果是则说明调用该函数的时候没有传这个参数，要做下兼容处理；而如果几个参数中，前面的参数是可不传的，后面的参数是需要传的，就需要在该可不传的参数位置传入一个 undefined 占位才行。\n<a name=\"bjNGa\"></a>\n### (2) 默认参数\n在 ES6 标准出来之前，我们的默认参数实现起来比较繁琐：<br />// javascript var count = 0; function countUp(step) {   step = step || 1;   count += step; }<br />上面我们定义了一个计数器增值函数，这个函数有一个参数 step，即每次增加的步长，如果不传入参数，那么 step 接受到的就是 undefined，undefined 转换为布尔值是 false，所以step || 1这里取了 1，从而达到了不传参数默认 step === 1 的效果。<br />在 ES6 中，我们定义函数时给参数设默认值就很方便了，直接在参数后面使用等号连接默认值即可：<br />// javascript const count = 0; const countUp = (step = 1) => {   count += step; };<br />你会发现，可选参数和带默认值的参数在函数调用时都是可以不传实参的，但是区别在于定义函数的时候，可选参数必须放在必选参数后面，而带默认值的参数则可放在必须参数前后都可。<br />当我们为参数指定了默认参数的时候，TypeScript 会识别默认参数的类型；当我们在调用函数时，如果给这个带默认值的参数传了别的类型的参数则会报错：<br />const add = (x: number, y = 2) => {   return x + y; }; add(1, \"a\"); // error 类型\"string\"的参数不能赋给类型\"number\"的参数<br />当然了，你也可以显式地给 y 设置类型：<br />const add = (x: number, y: number = 2) => {   return x + y; };\n<a name=\"xTpRY\"></a>\n### (3) 剩余参数\n在 JS 中，如果我们定义一个函数，这个函数可以输入任意个数的参数，那么我们就无法在定义参数列表的时候挨个定义。在 ES6 发布之前，我们需要用到 arguments 来获取参数列表。arguments 是每一个函数都包含的一个类数组对象，它包含在函数调用时传入函数的所有实际参数（简称实参），它还包含一个 length 属性，记录参数个数。来看下面的例子，我们来模拟实现函数的重载：\n```typescript\n// javascript\nfunction handleData() {\n  if (arguments.length === 1) return arguments[0] * 2;\n  else if (arguments.length === 2) return arguments[0] * arguments[1];\n  else return Array.prototype.slice.apply(arguments).join(\"_\");\n}\nhandleData(2); // 4\nhandleData(2, 3); // 6\nhandleData(1, 2, 3, 4, 5); // '1_2_3_4_5'\n// 这段代码如果在TypeScript环境中，三个对handleData函数的调用都会报错，因为handleData函数定义的时候没有参数。\n```\n上面这个函数通过判断传入实参的个数，做出不同的处理并返回结果。else 后面的逻辑是如果实参个数不为 1 和 2，那么将这些参数拼接成以\"_\"连接的字符串。<br />你应该注意到了我们使用Array.prototype.slice.apply(arguments)对 arguments 做了处理，前面我们讲过 arguments 不是数组，而是类数组对象，如果直接在 arguments 调用 join 方法，它是没有这个方法的。所以我们通过这个处理得到一个包含 arguments 中所有元素的真实数组。<br />在 ES6 中，加入了\"…\"拓展运算符，它可以将一个函数或对象进行拆解。它还支持用在函数的参数列表中，用来处理任意数量的参数：\n```typescript\nconst handleData = (arg1, ...args) => {\n  // 这里省略逻辑\n  console.log(args);\n};\nhandleData(1, 2, 3, 4, 5); // [ 2, 3, 4, 5 ]\n```\n可以看到，args 是除了 arg1 之外的所有实参的集合，它是一个数组。<br />补充：\"…\"运算符可以拆解数组和对象，比如：arr1 = [1, 2]，arr2 = [3, 4]，那么[…arr1, …arr2]的结果就是[1, 2, 3, 4]，他还可以用在方法的参数中：如果使用 arr1.push(arr2)，则 arr1 结果是[1, 2, [3, 4]]，如果你想让他们合并成一个函数而不使用 concat 方法，就可以使用 arr1.push(…arr2)。还有对象的使用方法：obj1 = { a: ‘aa’ }，obj2 = { b: ‘bb’ }，则{ …obj1, …obj2 }的结果是{ a: ‘aa’, b: ‘bb’ }。<br />在 TypeScript 中你可以为剩余参数指定类型，先来看例子：<br />const handleData = (arg1: number, ...args: number[]) => {   // }; handleData(1, \"a\"); // error 类型\"string\"的参数不能赋给类型\"number\"的参数\n<a name=\"aCBbY\"></a>\n## 3 函数重载，此重载vs彼重载\n在其他一些强类型语言中，函数重载是指定义几个函数名相同，但参数个数或类型不同的函数，在调用时传入不同的参数，编译器会自动调用适合的函数。但是 JavaScript 作为一个动态语言是没有函数重载的，只能我们自己在函数体内通过判断参数的个数、类型来指定不同的处理逻辑。来看个简单的例子\n```typescript\nconst handleData = value => {\n  if (typeof value === \"string\") {\n    return value.split(\"\");\n  } else {\n    return value\n      .toString()\n      .split(\"\")\n      .join(\"_\");\n  }\n};\n```\n这个例子中，当传入的参数为字符串时，将它进行切割，比如传入的是’abc’，返回的将是数组[‘a’, ‘b’, ‘c’]；如果传入的是一个数值类型，则将数字转为字符串然后切割成单个数字然后拼接成字符串，比如传入的是123，则返回的是’1_2_3’。你可以看到传入的参数类型不同，返回的值的类型是不同的，<br />在 TypeScript 中有函数重载的概念，但并不是定义几个同名实体函数，然后根据不同的参数个数或类型来自动调用相应的函数。TypeScript的函数重载是在类型系统层面的，是为了更好地进行类型推断。TypeScript的函数重载通过为一个函数指定多个函数类型定义，从而对函数调用的返回值进行检查。来看例子：\n```typescript\nfunction handleData(x: string): string[]; // 这个是重载的一部分，指定当参数类型为string时，返回值为string类型的元素构成的数组\nfunction handleData(x: number): string; // 这个也是重载的一部分，指定当参数类型为number时，返回值类型为string\nfunction handleData(x: any): any { // 这个就是重载的内容了，他是实体函数，不算做重载的部分\n  if (typeof x === \"string\") {\n    return x.split(\"\");\n  } else {\n    return x\n      .toString()\n      .split(\"\")\n      .join(\"_\");\n  }\n}\nhandleData(\"abc\").join(\"_\");\nhandleData(123).join(\"_\"); // error 类型\"string\"上不存在属性\"join\"\nhandleData(false); // error 类型\"boolean\"的参数不能赋给类型\"number\"的参数。\n```\n首先我们使用function关键字定义了两个同名的函数，但不同的是，函数没有实际的函数体逻辑，而是只定义函数名、参数及参数类型以及函数的返回值类型；而第三个使用function定义的同名函数，是一个完整的实体函数，包含函数名、参数及参数类型、返回值类型和函数体；这三个定义组成了一个函数——完整的带有类型定义的函数，前两个function定义的就称为_函数重载_，而第三个function并不算重载；<br />然后我们来看下匹配规则，当调用这个函数并且传入参数的时候，会从上而下在函数重载里匹配和这个参数个数和类型匹配的重载。如例子中第一个调用，传入了一个字符串\"abc\"，它符合第一个重载，所以它的返回值应该是一个字符串组成的数组，数组是可以调用join方法的，所以这里没问题；<br />第二个调用传入的是一个数值类型的123，从上到下匹配重载是符合第二个的，返回值应该是字符串类型。但这里拿到返回值后调用了数组方法join，这肯定会报错了，因为字符串无法调用这个方法；<br />最后调用时传入了一个布尔类型值false，匹配不到重载，所以会报错；<br />最后还有一点要注意的是，这里重载只能用 function 来定义，不能使用接口、类型别名等。\n<a name=\"cUviX\"></a>\n### 小结\n学习了函数类型的三种定义方式：\n\n- 基本方式：直接在定义函数实体语句中，指定参数和返回值类型；\n- 接口形式：这种方式我们在讲接口的时候已经学习过了；\n- 类型别名：这种方式是比较推荐的写法，比较简洁清晰。\n\n详细学习了函数参数的三个知识点：\n\n- 可选参数：可选参数在JavaScript中可以实现，TypeScript中需要在该参数后面加个?，且可选参数必须位于必选参数后面；；\n- 默认参数：这是在ES6标准中添加的语法，为函数参数指定默认参数，写法就是在参数名后面使用=连接默认参数\n- 剩余参数：这也是在ES6中添加的语法，可以使用...参数名来获取剩余任意多个参数，获取的是一个数组。\n\n学习了函数重载。着重强调的是，这里的函数重载区别于其他语言中的重载，TypeScript中的重载是为了针对不同参数个数和类型，推断返回值类型。<br />![5cf4bff500010be916000896.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639380599741-01dff690-389b-49c7-9943-6737d7ce0db4.jpeg#clientId=u4a462bc7-b87a-4&from=ui&id=ud459aace&margin=%5Bobject%20Object%5D&name=5cf4bff500010be916000896.jpg&originHeight=896&originWidth=1600&originalType=binary&ratio=1&size=197840&status=done&style=none&taskId=u070f9149-4014-4741-8932-98f9adecd7a)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"tHJwe\"><span class=\"ne-text\">1.函数类型</span></h2><h3 id=\"qkS5T\"><span class=\"ne-text\">(1) 为函数定义类型</span></h3><p id=\"u287a4203\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">我们可以给函数定义类型，这个定义包括对参数和返回值的类型定义，我们先来看简单的定义写法：</span></p><pre data-language=\"typescript\" id=\"zV573\" class=\"ne-codeblock language-typescript\">function add(arg1: number, arg2: number): number {\n  return x + y;\n}\n// 或者\nconst add = (arg1: number, arg2: number): number =&gt; {\n  return x + y;\n};</pre><p id=\"ub57e2642\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在上面的例子中我们用function和箭头函数两种形式定义了add函数，以展示如何定义函数类型。这里参数 arg1 和 arg2 都是数值类型，最后通过相加得到的结果也是数值类型。</span></p><p id=\"u214a565a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">如果在这里省略参数的类型，TypeScript 会默认这个参数是 any 类型；如果省略返回值的类型，如果函数无返回值，那么 TypeScript 会默认函数返回值是 void 类型；如果函数有返回值，那么 TypeScript 会根据我们定义的逻辑推断出返回类型。</span></p><h3 id=\"Pm9fQ\"><span class=\"ne-text\">(2) 完整的函数类型</span></h3><p id=\"ud69e4405\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">一个函数的定义包括函数名、参数、逻辑和返回值。我们为一个函数定义类型时，完整的定义应该包括参数类型和返回值类型。上面的例子中，我们都是在定义函数的指定参数类型和返回值类型。接下来我们看下，如何定义一个完整的函数类型，以及用这个函数类型来规定一个函数定义时参数和返回值需要符合的类型。先来看例子然后再进行解释：</span></p><pre data-language=\"typescript\" id=\"KZIJ4\" class=\"ne-codeblock language-typescript\">let add: (x: number, y: number) =&gt; number;\nadd = (arg1: number, arg2: number): number =&gt; arg1 + arg2;\nadd = (arg1: string, arg2: string): string =&gt; arg1 + arg2; // error</pre><p id=\"u359ca4f9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">上面这个例子中，我们首先定义了一个变量 add，给它指定了函数类型，也就是(x: number, y: number) =&gt; number，这个函数类型包含参数和返回值的类型。然后我们给 add 赋了一个实际的函数，这个函数参数类型和返回类型都和函数类型中定义的一致，所以可以赋值。后面我们又给它赋了一个新函数，而这个函数的参数类型和返回值类型都是 string 类型，这时就会报如下错误：</span></p><pre data-language=\"typescript\" id=\"njnr8\" class=\"ne-codeblock language-typescript\">     不能将类型&quot;(arg1: string, arg2: string) =&gt; string&quot;分配给类型&quot;(x: number, y: number) =&gt; number&quot;。   参数&quot;arg1&quot;和&quot;x&quot; 的类型不兼容。     不能将类型&quot;number&quot;分配给类型&quot;string&quot;。</pre><p id=\"u4c2f2e5f\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 24px\"> <br /></span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">函数中如果使用了函数体之外定义的变量，这个变量的类型是不体现在函数类型定义的。</span></p><h3 id=\"hmuWo\"><span class=\"ne-text\">(3) 使用接口定义函数类型</span></h3><p id=\"u567a75fc\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">使用接口定义函数类型：</span></p><pre data-language=\"typescript\" id=\"YqWWJ\" class=\"ne-codeblock language-typescript\">interface Add {\n  (x: number, y: number): number;\n}\nlet add: Add = (arg1: string, arg2: string): string =&gt; arg1 + arg2; // error 不能将类型“(arg1: string, arg2: string) =&gt; string”分配给类型“Add”</pre><p id=\"u9dd24926\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">这里我们通过接口的形式定义函数类型，这个接口Add定义了这个结构是一个函数，两个参数类型都是number类型，返回值也是number类型。然后我们指定变量add类型为Add时，再要给add赋值，就必须是一个函数，且参数类型和返回值类型都要满足接口Add，显然例子中这个函数并不满足条件，所以报错了。</span></p><h3 id=\"OKKqq\"><span class=\"ne-text\">(4) 使用类型别名</span></h3><p id=\"u207866e7\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">我们可以使用类型别名来定义函数类型，使用类型别名定义函数类型更直观易读，我们来看一下具体的写法：</span></p><pre data-language=\"typescript\" id=\"elbrS\" class=\"ne-codeblock language-typescript\">type Add = (x: number, y: number) =&gt; number;\nlet add: Add = (arg1: string, arg2: string): string =&gt; arg1 + arg2; // error 不能将类型“(arg1: string, arg2: string) =&gt; string”分配给类型“Add”</pre><p id=\"u3047348a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">使用type关键字可以为原始值、联合类型、元组以及任何我们定义的类型起一个别名。上面定义了 Add 这个别名后，Add就成为了一个和(x: number, y: number) =&gt; number一致的类型定义。例子中定义了Add类型，指定add类型为Add，但是给add赋的值并不满足Add类型要求，所以报错了。</span></p><h2 id=\"FWfKA\"><span class=\"ne-text\">2.参数</span></h2><h3 id=\"dDcXy\"><span class=\"ne-text\">(1) 可选参数</span></h3><p id=\"ufba54213\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">TypeScript 会帮我们在编写代码的时候就检查出调用函数时参数中存在的一些错误，先看下面例子：</span></p><pre data-language=\"typescript\" id=\"C90gm\" class=\"ne-codeblock language-typescript\">type Add = (x: number, y: number) =&gt; number;\nlet add: Add = (arg1: string, arg2: string): string =&gt; arg1 + arg2;\n\nadd(1, 2); // right\nadd(1, 2, 3); // error 应有 2 个参数，但获得 3 个\nadd(1); // error 应有 2 个参数，但获得 1 个</pre><p id=\"u433330f5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在 JS 中，上面例子中最后两个函数调用都不会报错, 只不过</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">add(1, 2, 3)</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">可以返回正确结果</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">3</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">，</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">add(1)</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">会返回</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">NaN</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">。</span></p><p id=\"u6a483425\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">但有时候，我们的函数有些参数不是必须的，是可选的。在学习接口的时候我们学习过，可选参数只需在参数名后跟随一个</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">?</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">即可。但是接口形式的定义和今天学到的函数类型定义有一点区别，那就是参数位置的要求：</span></p><p id=\"u1d7624a5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">接口形式定义的函数类型必选参数和可选参数的位置前后是无所谓的，但是今天学到的定义形式，可选参数必须放在必选参数后面，这和在 JS 中定义函数是一致的。</span></p><pre data-language=\"typescript\" id=\"OzWbd\" class=\"ne-codeblock language-typescript\">type Add = (x?: number, y: number) =&gt; number; // error 必选参数不能位于可选参数后。</pre><p id=\"ub88a2466\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在TypeScript中，可选参数放到最后才行，上面例子中把可选参数x放到了必选参数y前面，所以报错了；但是在 JavaScript 中，其实是没有可选参数这个概念的，只不过是我们在写逻辑的时候，我们可能会判断某个参数是否为undefined，如果是则说明调用该函数的时候没有传这个参数，要做下兼容处理；而如果几个参数中，前面的参数是可不传的，后面的参数是需要传的，就需要在该可不传的参数位置传入一个 undefined 占位才行。</span></p><h3 id=\"bjNGa\"><span class=\"ne-text\">(2) 默认参数</span></h3><p id=\"u98026991\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在 ES6 标准出来之前，我们的默认参数实现起来比较繁琐：</span></p><p id=\"u728d9feb\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(112, 128, 144); font-size: 24px\">// javascript</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">var</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> count </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(174, 129, 255); font-size: 24px\">0</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">;</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">function</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(249, 38, 114); font-size: 24px\">countUp</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">(</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">step</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">)</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">{</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">   step </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> step </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">||</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(174, 129, 255); font-size: 24px\">1</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">;</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">   count </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">+=</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> step</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">;</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">}</span></p><p id=\"u734b1dc3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">上面我们定义了一个计数器增值函数，这个函数有一个参数 step，即每次增加的步长，如果不传入参数，那么 step 接受到的就是 undefined，undefined 转换为布尔值是 false，所以</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">step || 1</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">这里取了 1，从而达到了不传参数默认 step === 1 的效果。</span></p><p id=\"ub12bce7f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在 ES6 中，我们定义函数时给参数设默认值就很方便了，直接在参数后面使用等号连接默认值即可：</span></p><p id=\"u47c13ec9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(112, 128, 144); font-size: 24px\">// javascript</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">const</span><span class=\"ne-text\" style=\"font-size: 24px\"> count </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(174, 129, 255); font-size: 24px\">0</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">;</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">const</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(249, 38, 114); font-size: 24px\">countUp</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">(</span><span class=\"ne-text\" style=\"font-size: 24px\">step </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(174, 129, 255); font-size: 24px\">1</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">)</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=&gt;</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">{</span><span class=\"ne-text\" style=\"font-size: 24px\">   count </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">+=</span><span class=\"ne-text\" style=\"font-size: 24px\"> step</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">;</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">};</span></p><p id=\"u1db5e5a4\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">你会发现，可选参数和带默认值的参数在函数调用时都是可以不传实参的，但是区别在于定义函数的时候，可选参数必须放在必选参数后面，而带默认值的参数则可放在必须参数前后都可。</span></p><p id=\"ua1b63ed0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">当我们为参数指定了默认参数的时候，TypeScript 会识别默认参数的类型；当我们在调用函数时，如果给这个带默认值的参数传了别的类型的参数则会报错：</span></p><p id=\"u9bd876a2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">const</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(249, 38, 114); font-size: 24px\">add</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">(</span><span class=\"ne-text\" style=\"font-size: 24px\">x</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">:</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">number</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">,</span><span class=\"ne-text\" style=\"font-size: 24px\"> y </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(174, 129, 255); font-size: 24px\">2</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">)</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=&gt;</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">{</span><span class=\"ne-text\" style=\"font-size: 24px\">   </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">return</span><span class=\"ne-text\" style=\"font-size: 24px\"> x </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">+</span><span class=\"ne-text\" style=\"font-size: 24px\"> y</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">;</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">};</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(249, 38, 114); font-size: 24px\">add</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">(</span><span class=\"ne-text\" style=\"color: rgb(174, 129, 255); font-size: 24px\">1</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">,</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(120, 171, 18); font-size: 24px\">&quot;a&quot;</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">);</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(112, 128, 144); font-size: 24px\">// error 类型&quot;string&quot;的参数不能赋给类型&quot;number&quot;的参数</span></p><p id=\"u9f7cce25\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">当然了，你也可以显式地给 y 设置类型：</span></p><p id=\"u5686eeb2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">const</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(249, 38, 114); font-size: 24px\">add</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">(</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">x</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">:</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">number</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">,</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> y</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">:</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">number</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(174, 129, 255); font-size: 24px\">2</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">)</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=&gt;</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">{</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">   </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">return</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> x </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">+</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> y</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">;</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">};</span></p><h3 id=\"xTpRY\"><span class=\"ne-text\">(3) 剩余参数</span></h3><p id=\"u06480c88\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在 JS 中，如果我们定义一个函数，这个函数可以输入任意个数的参数，那么我们就无法在定义参数列表的时候挨个定义。在 ES6 发布之前，我们需要用到 arguments 来获取参数列表。arguments 是每一个函数都包含的一个类数组对象，它包含在函数调用时传入函数的所有实际参数（简称实参），它还包含一个 length 属性，记录参数个数。来看下面的例子，我们来模拟实现函数的重载：</span></p><pre data-language=\"typescript\" id=\"x8LwZ\" class=\"ne-codeblock language-typescript\">// javascript\nfunction handleData() {\n  if (arguments.length === 1) return arguments[0] * 2;\n  else if (arguments.length === 2) return arguments[0] * arguments[1];\n  else return Array.prototype.slice.apply(arguments).join(&quot;_&quot;);\n}\nhandleData(2); // 4\nhandleData(2, 3); // 6\nhandleData(1, 2, 3, 4, 5); // '1_2_3_4_5'\n// 这段代码如果在TypeScript环境中，三个对handleData函数的调用都会报错，因为handleData函数定义的时候没有参数。</pre><p id=\"u4226304f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">上面这个函数通过判断传入实参的个数，做出不同的处理并返回结果。else 后面的逻辑是如果实参个数不为 1 和 2，那么将这些参数拼接成以&quot;_&quot;连接的字符串。</span></p><p id=\"u37a5fae5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">你应该注意到了我们使用</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">Array.prototype.slice.apply(arguments)</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">对 arguments 做了处理，前面我们讲过 arguments 不是数组，而是类数组对象，如果直接在 arguments 调用 join 方法，它是没有这个方法的。所以我们通过这个处理得到一个包含 arguments 中所有元素的真实数组。</span></p><p id=\"uca2684b0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在 ES6 中，加入了&quot;…&quot;拓展运算符，它可以将一个函数或对象进行拆解。它还支持用在函数的参数列表中，用来处理任意数量的参数：</span></p><pre data-language=\"typescript\" id=\"R3Ipw\" class=\"ne-codeblock language-typescript\">const handleData = (arg1, ...args) =&gt; {\n  // 这里省略逻辑\n  console.log(args);\n};\nhandleData(1, 2, 3, 4, 5); // [ 2, 3, 4, 5 ]</pre><p id=\"uae52fc9f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">可以看到，args 是除了 arg1 之外的所有实参的集合，它是一个数组。</span></p><p id=\"u234b8182\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">补充：&quot;…&quot;运算符可以拆解数组和对象，比如：arr1 = [1, 2]，arr2 = [3, 4]，那么[…arr1, …arr2]的结果就是[1, 2, 3, 4]，他还可以用在方法的参数中：如果使用 arr1.push(arr2)，则 arr1 结果是[1, 2, [3, 4]]，如果你想让他们合并成一个函数而不使用 concat 方法，就可以使用 arr1.push(…arr2)。还有对象的使用方法：obj1 = { a: ‘aa’ }，obj2 = { b: ‘bb’ }，则{ …obj1, …obj2 }的结果是{ a: ‘aa’, b: ‘bb’ }。</span></p><p id=\"u1a2cce7e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在 TypeScript 中你可以为剩余参数指定类型，先来看例子：</span></p><p id=\"u4978bf5d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">const</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(249, 38, 114); font-size: 24px\">handleData</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">(</span><span class=\"ne-text\" style=\"font-size: 24px\">arg1</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">:</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">number</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">,</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">...</span><span class=\"ne-text\" style=\"font-size: 24px\">args</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">:</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(54, 188, 214); font-size: 24px\">number</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">[])</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(166, 127, 89); font-size: 24px\">=&gt;</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">{</span><span class=\"ne-text\" style=\"font-size: 24px\">   </span><span class=\"ne-text\" style=\"color: rgb(112, 128, 144); font-size: 24px\">//</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">};</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(249, 38, 114); font-size: 24px\">handleData</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">(</span><span class=\"ne-text\" style=\"color: rgb(174, 129, 255); font-size: 24px\">1</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">,</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(120, 171, 18); font-size: 24px\">&quot;a&quot;</span><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 24px\">);</span><span class=\"ne-text\" style=\"font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(112, 128, 144); font-size: 24px\">// error 类型&quot;string&quot;的参数不能赋给类型&quot;number&quot;的参数</span></p><h2 id=\"aCBbY\"><span class=\"ne-text\">3 函数重载，此重载vs彼重载</span></h2><p id=\"ue128eb74\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在其他一些强类型语言中，函数重载是指定义几个函数名相同，但参数个数或类型不同的函数，在调用时传入不同的参数，编译器会自动调用适合的函数。但是 JavaScript 作为一个动态语言是没有函数重载的，只能我们自己在函数体内通过判断参数的个数、类型来指定不同的处理逻辑。来看个简单的例子</span></p><pre data-language=\"typescript\" id=\"iQHam\" class=\"ne-codeblock language-typescript\">const handleData = value =&gt; {\n  if (typeof value === &quot;string&quot;) {\n    return value.split(&quot;&quot;);\n  } else {\n    return value\n      .toString()\n      .split(&quot;&quot;)\n      .join(&quot;_&quot;);\n  }\n};</pre><p id=\"u4753a889\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">这个例子中，当传入的参数为字符串时，将它进行切割，比如传入的是</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">’abc’</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">，返回的将是数组</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">[‘a’, ‘b’, ‘c’]</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">；如果传入的是一个数值类型，则将数字转为字符串然后切割成单个数字然后拼接成字符串，比如传入的是</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">123</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">，则返回的是</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">’1_2_3’</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">。你可以看到传入的参数类型不同，返回的值的类型是不同的，</span></p><p id=\"u342e008f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在 TypeScript 中有函数重载的概念，但并不是定义几个同名实体函数，然后根据不同的参数个数或类型来自动调用相应的函数。TypeScript的函数重载是在类型系统层面的，是为了更好地进行类型推断。TypeScript的函数重载通过为一个函数指定多个函数类型定义，从而对函数调用的返回值进行检查。来看例子：</span></p><pre data-language=\"typescript\" id=\"rb3YX\" class=\"ne-codeblock language-typescript\">function handleData(x: string): string[]; // 这个是重载的一部分，指定当参数类型为string时，返回值为string类型的元素构成的数组\nfunction handleData(x: number): string; // 这个也是重载的一部分，指定当参数类型为number时，返回值类型为string\nfunction handleData(x: any): any { // 这个就是重载的内容了，他是实体函数，不算做重载的部分\n  if (typeof x === &quot;string&quot;) {\n    return x.split(&quot;&quot;);\n  } else {\n    return x\n      .toString()\n      .split(&quot;&quot;)\n      .join(&quot;_&quot;);\n  }\n}\nhandleData(&quot;abc&quot;).join(&quot;_&quot;);\nhandleData(123).join(&quot;_&quot;); // error 类型&quot;string&quot;上不存在属性&quot;join&quot;\nhandleData(false); // error 类型&quot;boolean&quot;的参数不能赋给类型&quot;number&quot;的参数。</pre><p id=\"u7154a5a5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">首先我们使用</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">function</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">关键字定义了两个同名的函数，但不同的是，函数没有实际的函数体逻辑，而是只定义函数名、参数及参数类型以及函数的返回值类型；而第三个使用</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">function</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">定义的同名函数，是一个完整的实体函数，包含函数名、参数及参数类型、返回值类型和函数体；这三个定义组成了一个函数——完整的带有类型定义的函数，前两个</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">function</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">定义的就称为</span><em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">函数重载</span></em><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">，而第三个</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">function</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">并不算重载；</span></p><p id=\"udfadecd1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">然后我们来看下匹配规则，当调用这个函数并且传入参数的时候，会从上而下在函数重载里匹配和这个参数个数和类型匹配的重载。如例子中第一个调用，传入了一个字符串&quot;abc&quot;，它符合第一个重载，所以它的返回值应该是一个字符串组成的数组，数组是可以调用</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">join</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">方法的，所以这里没问题；</span></p><p id=\"ub40ae018\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">第二个调用传入的是一个数值类型的123，从上到下匹配重载是符合第二个的，返回值应该是字符串类型。但这里拿到返回值后调用了数组方法</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">join</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">，这肯定会报错了，因为字符串无法调用这个方法；</span></p><p id=\"ua6437e51\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">最后调用时传入了一个布尔类型值false，匹配不到重载，所以会报错；</span></p><p id=\"u748d77da\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">最后还有一点要注意的是，这里重载只能用 function 来定义，不能使用接口、类型别名等。</span></p><h3 id=\"cUviX\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33)\">小结</span></h3><p id=\"u51de3f77\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">学习了函数类型的三种定义方式：</span></p><ul class=\"ne-ul\"><li id=\"u6f7cae2f\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">基本方式：直接在定义函数实体语句中，指定参数和返回值类型；</span></li><li id=\"u669933e6\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">接口形式：这种方式我们在讲接口的时候已经学习过了；</span></li></ul><ul class=\"ne-ul\"><li id=\"u7e3707c3\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">类型别名：这种方式是比较推荐的写法，比较简洁清晰。</span></li></ul><p id=\"ue48e2d83\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">详细学习了函数参数的三个知识点：</span></p><ul class=\"ne-ul\"><li id=\"ua490c39c\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">可选参数：可选参数在JavaScript中可以实现，TypeScript中需要在该参数后面加个</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">?</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">，且可选参数必须位于必选参数后面；；</span></li><li id=\"u7a7d6355\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">默认参数：这是在ES6标准中添加的语法，为函数参数指定默认参数，写法就是在参数名后面使用</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">=</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">连接默认参数</span></li></ul><ul class=\"ne-ul\"><li id=\"u98c06c98\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">剩余参数：这也是在ES6中添加的语法，可以使用</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">...参数名</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">来获取剩余任意多个参数，获取的是一个数组。</span></li></ul><p id=\"ue34d2540\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">学习了函数重载。着重强调的是，这里的函数重载区别于其他语言中的重载，TypeScript中的重载是为了针对不同参数个数和类型，推断返回值类型。</span></p><p id=\"u54812ff1\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639380599741-01dff690-389b-49c7-9943-6737d7ce0db4.jpeg\" width=\"1600\" id=\"ud459aace\" class=\"ne-image\"></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"tHJwe\" id=\"tHJwe\"><span data-lake-id=\"u3cbe7dee\" id=\"u3cbe7dee\">1.函数类型</span></h2><h3 data-lake-id=\"qkS5T\" id=\"qkS5T\"><span data-lake-id=\"u79e1b706\" id=\"u79e1b706\">(1) 为函数定义类型</span></h3><p data-lake-id=\"u287a4203\" id=\"u287a4203\"><span data-lake-id=\"u5b5d8abe\" id=\"u5b5d8abe\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以给函数定义类型，这个定义包括对参数和返回值的类型定义，我们先来看简单的定义写法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22function%20add(arg1%3A%20number%2C%20arg2%3A%20number)%3A%20number%20%7B%5Cn%20%20return%20x%20%2B%20y%3B%5Cn%7D%5Cn%2F%2F%20%E6%88%96%E8%80%85%5Cnconst%20add%20%3D%20(arg1%3A%20number%2C%20arg2%3A%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20return%20x%20%2B%20y%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22zV573%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub57e2642\" id=\"ub57e2642\"><span data-lake-id=\"u3e6243d5\" id=\"u3e6243d5\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在上面的例子中我们用function和箭头函数两种形式定义了add函数，以展示如何定义函数类型。这里参数 arg1 和 arg2 都是数值类型，最后通过相加得到的结果也是数值类型。</span></p><p data-lake-id=\"u214a565a\" id=\"u214a565a\"><span data-lake-id=\"u1ffaa7a0\" id=\"u1ffaa7a0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">如果在这里省略参数的类型，TypeScript 会默认这个参数是 any 类型；如果省略返回值的类型，如果函数无返回值，那么 TypeScript 会默认函数返回值是 void 类型；如果函数有返回值，那么 TypeScript 会根据我们定义的逻辑推断出返回类型。</span></p><h3 data-lake-id=\"Pm9fQ\" id=\"Pm9fQ\"><span data-lake-id=\"ud4b95eb1\" id=\"ud4b95eb1\">(2) 完整的函数类型</span></h3><p data-lake-id=\"ud69e4405\" id=\"ud69e4405\"><span data-lake-id=\"u0f2dd184\" id=\"u0f2dd184\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">一个函数的定义包括函数名、参数、逻辑和返回值。我们为一个函数定义类型时，完整的定义应该包括参数类型和返回值类型。上面的例子中，我们都是在定义函数的指定参数类型和返回值类型。接下来我们看下，如何定义一个完整的函数类型，以及用这个函数类型来规定一个函数定义时参数和返回值需要符合的类型。先来看例子然后再进行解释：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22let%20add%3A%20(x%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%3B%5Cnadd%20%3D%20(arg1%3A%20number%2C%20arg2%3A%20number)%3A%20number%20%3D%3E%20arg1%20%2B%20arg2%3B%5Cnadd%20%3D%20(arg1%3A%20string%2C%20arg2%3A%20string)%3A%20string%20%3D%3E%20arg1%20%2B%20arg2%3B%20%2F%2F%20error%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22KZIJ4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u359ca4f9\" id=\"u359ca4f9\"><span data-lake-id=\"ueb829808\" id=\"ueb829808\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面这个例子中，我们首先定义了一个变量 add，给它指定了函数类型，也就是(x: number, y: number) =&gt; number，这个函数类型包含参数和返回值的类型。然后我们给 add 赋了一个实际的函数，这个函数参数类型和返回类型都和函数类型中定义的一致，所以可以赋值。后面我们又给它赋了一个新函数，而这个函数的参数类型和返回值类型都是 string 类型，这时就会报如下错误：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%20%20%20%20%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%5C%22(arg1%3A%20string%2C%20arg2%3A%20string)%20%3D%3E%20string%5C%22%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22(x%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%5C%22%E3%80%82%20%20%20%E5%8F%82%E6%95%B0%5C%22arg1%5C%22%E5%92%8C%5C%22x%5C%22%20%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%85%BC%E5%AE%B9%E3%80%82%20%20%20%20%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E3%80%82%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22njnr8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4c2f2e5f\" id=\"u4c2f2e5f\"><span data-lake-id=\"u5e6dd5da\" id=\"u5e6dd5da\" class=\"lake-fontsize-18\"> <br /></span><span data-lake-id=\"ua1b1c2b0\" id=\"ua1b1c2b0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">函数中如果使用了函数体之外定义的变量，这个变量的类型是不体现在函数类型定义的。</span></p><h3 data-lake-id=\"hmuWo\" id=\"hmuWo\"><span data-lake-id=\"u71867e44\" id=\"u71867e44\">(3) 使用接口定义函数类型</span></h3><p data-lake-id=\"u567a75fc\" id=\"u567a75fc\"><span data-lake-id=\"u496b3508\" id=\"u496b3508\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">使用接口定义函数类型：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Add%20%7B%5Cn%20%20(x%3A%20number%2C%20y%3A%20number)%3A%20number%3B%5Cn%7D%5Cnlet%20add%3A%20Add%20%3D%20(arg1%3A%20string%2C%20arg2%3A%20string)%3A%20string%20%3D%3E%20arg1%20%2B%20arg2%3B%20%2F%2F%20error%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%E2%80%9C(arg1%3A%20string%2C%20arg2%3A%20string)%20%3D%3E%20string%E2%80%9D%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%E2%80%9CAdd%E2%80%9D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YqWWJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9dd24926\" id=\"u9dd24926\"><span data-lake-id=\"u15b6bf75\" id=\"u15b6bf75\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">这里我们通过接口的形式定义函数类型，这个接口Add定义了这个结构是一个函数，两个参数类型都是number类型，返回值也是number类型。然后我们指定变量add类型为Add时，再要给add赋值，就必须是一个函数，且参数类型和返回值类型都要满足接口Add，显然例子中这个函数并不满足条件，所以报错了。</span></p><h3 data-lake-id=\"OKKqq\" id=\"OKKqq\"><span data-lake-id=\"uddacc6a8\" id=\"uddacc6a8\">(4) 使用类型别名</span></h3><p data-lake-id=\"u207866e7\" id=\"u207866e7\"><span data-lake-id=\"ue44c6109\" id=\"ue44c6109\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以使用类型别名来定义函数类型，使用类型别名定义函数类型更直观易读，我们来看一下具体的写法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22type%20Add%20%3D%20(x%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%3B%5Cnlet%20add%3A%20Add%20%3D%20(arg1%3A%20string%2C%20arg2%3A%20string)%3A%20string%20%3D%3E%20arg1%20%2B%20arg2%3B%20%2F%2F%20error%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%E2%80%9C(arg1%3A%20string%2C%20arg2%3A%20string)%20%3D%3E%20string%E2%80%9D%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%E2%80%9CAdd%E2%80%9D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22elbrS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3047348a\" id=\"u3047348a\"><span data-lake-id=\"u8335e365\" id=\"u8335e365\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">使用type关键字可以为原始值、联合类型、元组以及任何我们定义的类型起一个别名。上面定义了 Add 这个别名后，Add就成为了一个和(x: number, y: number) =&gt; number一致的类型定义。例子中定义了Add类型，指定add类型为Add，但是给add赋的值并不满足Add类型要求，所以报错了。</span></p><h2 data-lake-id=\"FWfKA\" id=\"FWfKA\"><span data-lake-id=\"u1f7fc06e\" id=\"u1f7fc06e\">2.参数</span></h2><h3 data-lake-id=\"dDcXy\" id=\"dDcXy\"><span data-lake-id=\"u7e12258d\" id=\"u7e12258d\">(1) 可选参数</span></h3><p data-lake-id=\"ufba54213\" id=\"ufba54213\"><span data-lake-id=\"ubed52d26\" id=\"ubed52d26\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">TypeScript 会帮我们在编写代码的时候就检查出调用函数时参数中存在的一些错误，先看下面例子：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22type%20Add%20%3D%20(x%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%3B%5Cnlet%20add%3A%20Add%20%3D%20(arg1%3A%20string%2C%20arg2%3A%20string)%3A%20string%20%3D%3E%20arg1%20%2B%20arg2%3B%5Cn%5Cnadd(1%2C%202)%3B%20%2F%2F%20right%5Cnadd(1%2C%202%2C%203)%3B%20%2F%2F%20error%20%E5%BA%94%E6%9C%89%202%20%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%BD%86%E8%8E%B7%E5%BE%97%203%20%E4%B8%AA%5Cnadd(1)%3B%20%2F%2F%20error%20%E5%BA%94%E6%9C%89%202%20%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%BD%86%E8%8E%B7%E5%BE%97%201%20%E4%B8%AA%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22C90gm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u433330f5\" id=\"u433330f5\"><span data-lake-id=\"u0b63bec8\" id=\"u0b63bec8\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 JS 中，上面例子中最后两个函数调用都不会报错, 只不过</span><span data-lake-id=\"u545109ba\" id=\"u545109ba\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">add(1, 2, 3)</span><span data-lake-id=\"u47f35278\" id=\"u47f35278\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">可以返回正确结果</span><span data-lake-id=\"u4cafe004\" id=\"u4cafe004\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">3</span><span data-lake-id=\"u6bd10254\" id=\"u6bd10254\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，</span><span data-lake-id=\"uc07866a1\" id=\"uc07866a1\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">add(1)</span><span data-lake-id=\"u63d3304d\" id=\"u63d3304d\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">会返回</span><span data-lake-id=\"ub3fec046\" id=\"ub3fec046\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">NaN</span><span data-lake-id=\"u74a9ac14\" id=\"u74a9ac14\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">。</span></p><p data-lake-id=\"u6a483425\" id=\"u6a483425\"><span data-lake-id=\"u179fb65e\" id=\"u179fb65e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">但有时候，我们的函数有些参数不是必须的，是可选的。在学习接口的时候我们学习过，可选参数只需在参数名后跟随一个</span><span data-lake-id=\"u446ac7c0\" id=\"u446ac7c0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">?</span><span data-lake-id=\"u3802f3e2\" id=\"u3802f3e2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">即可。但是接口形式的定义和今天学到的函数类型定义有一点区别，那就是参数位置的要求：</span></p><p data-lake-id=\"u1d7624a5\" id=\"u1d7624a5\"><span data-lake-id=\"u4b500d62\" id=\"u4b500d62\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">接口形式定义的函数类型必选参数和可选参数的位置前后是无所谓的，但是今天学到的定义形式，可选参数必须放在必选参数后面，这和在 JS 中定义函数是一致的。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22type%20Add%20%3D%20(x%3F%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%3B%20%2F%2F%20error%20%E5%BF%85%E9%80%89%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E4%BD%8D%E4%BA%8E%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%E5%90%8E%E3%80%82%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OzWbd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub88a2466\" id=\"ub88a2466\"><span data-lake-id=\"u69d71643\" id=\"u69d71643\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在TypeScript中，可选参数放到最后才行，上面例子中把可选参数x放到了必选参数y前面，所以报错了；但是在 JavaScript 中，其实是没有可选参数这个概念的，只不过是我们在写逻辑的时候，我们可能会判断某个参数是否为undefined，如果是则说明调用该函数的时候没有传这个参数，要做下兼容处理；而如果几个参数中，前面的参数是可不传的，后面的参数是需要传的，就需要在该可不传的参数位置传入一个 undefined 占位才行。</span></p><h3 data-lake-id=\"bjNGa\" id=\"bjNGa\"><span data-lake-id=\"u67d1683d\" id=\"u67d1683d\">(2) 默认参数</span></h3><p data-lake-id=\"u98026991\" id=\"u98026991\"><span data-lake-id=\"ua12f6a07\" id=\"ua12f6a07\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 ES6 标准出来之前，我们的默认参数实现起来比较繁琐：</span></p><p data-lake-id=\"u728d9feb\" id=\"u728d9feb\"><span data-lake-id=\"u5fadb8cb\" id=\"u5fadb8cb\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">// javascript</span><span data-lake-id=\"uebbd31fd\" id=\"uebbd31fd\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ubb3505b0\" id=\"ubb3505b0\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">var</span><span data-lake-id=\"uee67df00\" id=\"uee67df00\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> count </span><span data-lake-id=\"u1e251a69\" id=\"u1e251a69\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u6d57fc34\" id=\"u6d57fc34\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u75e8d68d\" id=\"u75e8d68d\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">0</span><span data-lake-id=\"u39daca83\" id=\"u39daca83\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"ubcf74868\" id=\"ubcf74868\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"uef5bbc33\" id=\"uef5bbc33\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">function</span><span data-lake-id=\"ua1f287dd\" id=\"ua1f287dd\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u9ceca4a7\" id=\"u9ceca4a7\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">countUp</span><span data-lake-id=\"u388f9bf6\" id=\"u388f9bf6\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"u4a4b61b7\" id=\"u4a4b61b7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">step</span><span data-lake-id=\"u488fb557\" id=\"u488fb557\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">)</span><span data-lake-id=\"uc9a5ac64\" id=\"uc9a5ac64\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u1961221f\" id=\"u1961221f\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"u7da136f6\" id=\"u7da136f6\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">   step </span><span data-lake-id=\"u84be9345\" id=\"u84be9345\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u9cd1b739\" id=\"u9cd1b739\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> step </span><span data-lake-id=\"u763b439b\" id=\"u763b439b\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">||</span><span data-lake-id=\"ub1b15b85\" id=\"ub1b15b85\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ua87ea462\" id=\"ua87ea462\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">1</span><span data-lake-id=\"u63ea321e\" id=\"u63ea321e\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u56fa5d9b\" id=\"u56fa5d9b\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">   count </span><span data-lake-id=\"u981ccf33\" id=\"u981ccf33\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">+=</span><span data-lake-id=\"ua0aef47c\" id=\"ua0aef47c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> step</span><span data-lake-id=\"uc03585bc\" id=\"uc03585bc\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u58cbb1ba\" id=\"u58cbb1ba\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u12e58eab\" id=\"u12e58eab\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">}</span></p><p data-lake-id=\"u734b1dc3\" id=\"u734b1dc3\"><span data-lake-id=\"ufe0a0c54\" id=\"ufe0a0c54\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面我们定义了一个计数器增值函数，这个函数有一个参数 step，即每次增加的步长，如果不传入参数，那么 step 接受到的就是 undefined，undefined 转换为布尔值是 false，所以</span><span data-lake-id=\"u8d40508f\" id=\"u8d40508f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">step || 1</span><span data-lake-id=\"u515b0aa5\" id=\"u515b0aa5\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">这里取了 1，从而达到了不传参数默认 step === 1 的效果。</span></p><p data-lake-id=\"ub12bce7f\" id=\"ub12bce7f\"><span data-lake-id=\"u2fd7d668\" id=\"u2fd7d668\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 ES6 中，我们定义函数时给参数设默认值就很方便了，直接在参数后面使用等号连接默认值即可：</span></p><p data-lake-id=\"u47c13ec9\" id=\"u47c13ec9\"><span data-lake-id=\"ub7ebc78f\" id=\"ub7ebc78f\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">// javascript</span><span data-lake-id=\"uafcbc4a7\" id=\"uafcbc4a7\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u1762db56\" id=\"u1762db56\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"ue892179b\" id=\"ue892179b\" class=\"lake-fontsize-18\"> count </span><span data-lake-id=\"udb096184\" id=\"udb096184\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u3402bcdc\" id=\"u3402bcdc\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ucd1f4896\" id=\"ucd1f4896\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">0</span><span data-lake-id=\"u809f063f\" id=\"u809f063f\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u083898b2\" id=\"u083898b2\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u384a77f6\" id=\"u384a77f6\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"ud85db153\" id=\"ud85db153\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u42423ad8\" id=\"u42423ad8\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">countUp</span><span data-lake-id=\"u0bdc050d\" id=\"u0bdc050d\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uc8761841\" id=\"uc8761841\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u441e7434\" id=\"u441e7434\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ucab30748\" id=\"ucab30748\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"u46fef645\" id=\"u46fef645\" class=\"lake-fontsize-18\">step </span><span data-lake-id=\"u532ae4fe\" id=\"u532ae4fe\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"ud1874598\" id=\"ud1874598\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ub9622f68\" id=\"ub9622f68\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">1</span><span data-lake-id=\"ub240afd2\" id=\"ub240afd2\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">)</span><span data-lake-id=\"u24e3093c\" id=\"u24e3093c\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uf1061307\" id=\"uf1061307\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=&gt;</span><span data-lake-id=\"u0ef39e58\" id=\"u0ef39e58\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u63b5dcc5\" id=\"u63b5dcc5\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"u9fa49ffe\" id=\"u9fa49ffe\" class=\"lake-fontsize-18\">   count </span><span data-lake-id=\"ufe025be4\" id=\"ufe025be4\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">+=</span><span data-lake-id=\"uacd41ff5\" id=\"uacd41ff5\" class=\"lake-fontsize-18\"> step</span><span data-lake-id=\"u566d9811\" id=\"u566d9811\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u2d4d3024\" id=\"u2d4d3024\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u9d4d9204\" id=\"u9d4d9204\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">};</span></p><p data-lake-id=\"u1db5e5a4\" id=\"u1db5e5a4\"><span data-lake-id=\"ud054e55e\" id=\"ud054e55e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">你会发现，可选参数和带默认值的参数在函数调用时都是可以不传实参的，但是区别在于定义函数的时候，可选参数必须放在必选参数后面，而带默认值的参数则可放在必须参数前后都可。</span></p><p data-lake-id=\"ua1b63ed0\" id=\"ua1b63ed0\"><span data-lake-id=\"u0255a2bc\" id=\"u0255a2bc\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">当我们为参数指定了默认参数的时候，TypeScript 会识别默认参数的类型；当我们在调用函数时，如果给这个带默认值的参数传了别的类型的参数则会报错：</span></p><p data-lake-id=\"u9bd876a2\" id=\"u9bd876a2\"><span data-lake-id=\"uc0c729db\" id=\"uc0c729db\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"u0573b462\" id=\"u0573b462\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u313fc8ff\" id=\"u313fc8ff\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">add</span><span data-lake-id=\"ud3069bd7\" id=\"ud3069bd7\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u06e1baed\" id=\"u06e1baed\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u9d920da8\" id=\"u9d920da8\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u14a2848c\" id=\"u14a2848c\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"u203f6830\" id=\"u203f6830\" class=\"lake-fontsize-18\">x</span><span data-lake-id=\"ud264a4d0\" id=\"ud264a4d0\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"ue46f04ef\" id=\"ue46f04ef\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u76db5eb9\" id=\"u76db5eb9\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"u27ec46eb\" id=\"u27ec46eb\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"uab52afa5\" id=\"uab52afa5\" class=\"lake-fontsize-18\"> y </span><span data-lake-id=\"u0c3aec92\" id=\"u0c3aec92\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u21c3b2a1\" id=\"u21c3b2a1\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ue34130b6\" id=\"ue34130b6\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">2</span><span data-lake-id=\"u42e05da8\" id=\"u42e05da8\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">)</span><span data-lake-id=\"u1b003212\" id=\"u1b003212\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u91cffaac\" id=\"u91cffaac\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=&gt;</span><span data-lake-id=\"u014a3584\" id=\"u014a3584\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u64b04ff8\" id=\"u64b04ff8\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"ub04816b5\" id=\"ub04816b5\" class=\"lake-fontsize-18\">   </span><span data-lake-id=\"u644a8fdb\" id=\"u644a8fdb\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">return</span><span data-lake-id=\"u0e6124a7\" id=\"u0e6124a7\" class=\"lake-fontsize-18\"> x </span><span data-lake-id=\"u6d96b305\" id=\"u6d96b305\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">+</span><span data-lake-id=\"u95c4f34c\" id=\"u95c4f34c\" class=\"lake-fontsize-18\"> y</span><span data-lake-id=\"u07951b86\" id=\"u07951b86\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u821610fd\" id=\"u821610fd\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u357be4b9\" id=\"u357be4b9\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">};</span><span data-lake-id=\"u69b26c91\" id=\"u69b26c91\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ufe1d87d9\" id=\"ufe1d87d9\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">add</span><span data-lake-id=\"ub16f18d4\" id=\"ub16f18d4\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"u9e25bf4c\" id=\"u9e25bf4c\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">1</span><span data-lake-id=\"u7476a219\" id=\"u7476a219\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"ucc5f5c13\" id=\"ucc5f5c13\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u7ab96b95\" id=\"u7ab96b95\" class=\"lake-fontsize-18\" style=\"color: rgb(120, 171, 18)\">&quot;a&quot;</span><span data-lake-id=\"u74a7ebcf\" id=\"u74a7ebcf\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">);</span><span data-lake-id=\"u7279be1d\" id=\"u7279be1d\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u240fccc0\" id=\"u240fccc0\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">// error 类型&quot;string&quot;的参数不能赋给类型&quot;number&quot;的参数</span></p><p data-lake-id=\"u9f7cce25\" id=\"u9f7cce25\"><span data-lake-id=\"u4aa705bb\" id=\"u4aa705bb\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">当然了，你也可以显式地给 y 设置类型：</span></p><p data-lake-id=\"u5686eeb2\" id=\"u5686eeb2\"><span data-lake-id=\"u2d11a769\" id=\"u2d11a769\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"u94fc595e\" id=\"u94fc595e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u3272952a\" id=\"u3272952a\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">add</span><span data-lake-id=\"u819f5e14\" id=\"u819f5e14\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ub12f1b77\" id=\"ub12f1b77\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u2bf17edb\" id=\"u2bf17edb\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u0a87bb27\" id=\"u0a87bb27\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"ua1cafe7f\" id=\"ua1cafe7f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">x</span><span data-lake-id=\"uac554d3c\" id=\"uac554d3c\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"u542b7178\" id=\"u542b7178\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u8bfc4525\" id=\"u8bfc4525\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"u8027368c\" id=\"u8027368c\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"uf8c7219d\" id=\"uf8c7219d\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> y</span><span data-lake-id=\"u8114e260\" id=\"u8114e260\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"u661f34cb\" id=\"u661f34cb\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u4434dc95\" id=\"u4434dc95\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"ue3ef0695\" id=\"ue3ef0695\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u8a7476e5\" id=\"u8a7476e5\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u4769ae96\" id=\"u4769ae96\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"uf962b6cc\" id=\"uf962b6cc\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">2</span><span data-lake-id=\"u7c3ea2e0\" id=\"u7c3ea2e0\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">)</span><span data-lake-id=\"uc8974540\" id=\"uc8974540\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u4df5b6c0\" id=\"u4df5b6c0\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=&gt;</span><span data-lake-id=\"u9b5a253c\" id=\"u9b5a253c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ub4dd647e\" id=\"ub4dd647e\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"u40e1ec02\" id=\"u40e1ec02\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">   </span><span data-lake-id=\"u57bbd32d\" id=\"u57bbd32d\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">return</span><span data-lake-id=\"u994440ef\" id=\"u994440ef\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> x </span><span data-lake-id=\"u5bdfdba2\" id=\"u5bdfdba2\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">+</span><span data-lake-id=\"u326297b2\" id=\"u326297b2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> y</span><span data-lake-id=\"u027d62c9\" id=\"u027d62c9\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"uf4c16287\" id=\"uf4c16287\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ucfb26c5b\" id=\"ucfb26c5b\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">};</span></p><h3 data-lake-id=\"xTpRY\" id=\"xTpRY\"><span data-lake-id=\"ue8a0384c\" id=\"ue8a0384c\">(3) 剩余参数</span></h3><p data-lake-id=\"u06480c88\" id=\"u06480c88\"><span data-lake-id=\"u25ec8875\" id=\"u25ec8875\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 JS 中，如果我们定义一个函数，这个函数可以输入任意个数的参数，那么我们就无法在定义参数列表的时候挨个定义。在 ES6 发布之前，我们需要用到 arguments 来获取参数列表。arguments 是每一个函数都包含的一个类数组对象，它包含在函数调用时传入函数的所有实际参数（简称实参），它还包含一个 length 属性，记录参数个数。来看下面的例子，我们来模拟实现函数的重载：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%2F%2F%20javascript%5Cnfunction%20handleData()%20%7B%5Cn%20%20if%20(arguments.length%20%3D%3D%3D%201)%20return%20arguments%5B0%5D%20*%202%3B%5Cn%20%20else%20if%20(arguments.length%20%3D%3D%3D%202)%20return%20arguments%5B0%5D%20*%20arguments%5B1%5D%3B%5Cn%20%20else%20return%20Array.prototype.slice.apply(arguments).join(%5C%22_%5C%22)%3B%5Cn%7D%5CnhandleData(2)%3B%20%2F%2F%204%5CnhandleData(2%2C%203)%3B%20%2F%2F%206%5CnhandleData(1%2C%202%2C%203%2C%204%2C%205)%3B%20%2F%2F%20'1_2_3_4_5'%5Cn%2F%2F%20%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E5%A6%82%E6%9E%9C%E5%9C%A8TypeScript%E7%8E%AF%E5%A2%83%E4%B8%AD%EF%BC%8C%E4%B8%89%E4%B8%AA%E5%AF%B9handleData%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E9%83%BD%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%8C%E5%9B%A0%E4%B8%BAhandleData%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%B6%E5%80%99%E6%B2%A1%E6%9C%89%E5%8F%82%E6%95%B0%E3%80%82%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22x8LwZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4226304f\" id=\"u4226304f\"><span data-lake-id=\"ua4ff5e71\" id=\"ua4ff5e71\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面这个函数通过判断传入实参的个数，做出不同的处理并返回结果。else 后面的逻辑是如果实参个数不为 1 和 2，那么将这些参数拼接成以&quot;_&quot;连接的字符串。</span></p><p data-lake-id=\"u37a5fae5\" id=\"u37a5fae5\"><span data-lake-id=\"ub7a13bc7\" id=\"ub7a13bc7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">你应该注意到了我们使用</span><span data-lake-id=\"u43b8f9d3\" id=\"u43b8f9d3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">Array.prototype.slice.apply(arguments)</span><span data-lake-id=\"ud68d2c37\" id=\"ud68d2c37\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">对 arguments 做了处理，前面我们讲过 arguments 不是数组，而是类数组对象，如果直接在 arguments 调用 join 方法，它是没有这个方法的。所以我们通过这个处理得到一个包含 arguments 中所有元素的真实数组。</span></p><p data-lake-id=\"uca2684b0\" id=\"uca2684b0\"><span data-lake-id=\"u59180aed\" id=\"u59180aed\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 ES6 中，加入了&quot;…&quot;拓展运算符，它可以将一个函数或对象进行拆解。它还支持用在函数的参数列表中，用来处理任意数量的参数：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20handleData%20%3D%20(arg1%2C%20...args)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E9%87%8C%E7%9C%81%E7%95%A5%E9%80%BB%E8%BE%91%5Cn%20%20console.log(args)%3B%5Cn%7D%3B%5CnhandleData(1%2C%202%2C%203%2C%204%2C%205)%3B%20%2F%2F%20%5B%202%2C%203%2C%204%2C%205%20%5D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22R3Ipw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uae52fc9f\" id=\"uae52fc9f\"><span data-lake-id=\"u0a6b2078\" id=\"u0a6b2078\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">可以看到，args 是除了 arg1 之外的所有实参的集合，它是一个数组。</span></p><p data-lake-id=\"u234b8182\" id=\"u234b8182\"><span data-lake-id=\"ue6906ed3\" id=\"ue6906ed3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">补充：&quot;…&quot;运算符可以拆解数组和对象，比如：arr1 = [1, 2]，arr2 = [3, 4]，那么[…arr1, …arr2]的结果就是[1, 2, 3, 4]，他还可以用在方法的参数中：如果使用 arr1.push(arr2)，则 arr1 结果是[1, 2, [3, 4]]，如果你想让他们合并成一个函数而不使用 concat 方法，就可以使用 arr1.push(…arr2)。还有对象的使用方法：obj1 = { a: ‘aa’ }，obj2 = { b: ‘bb’ }，则{ …obj1, …obj2 }的结果是{ a: ‘aa’, b: ‘bb’ }。</span></p><p data-lake-id=\"u1a2cce7e\" id=\"u1a2cce7e\"><span data-lake-id=\"u0bde6c17\" id=\"u0bde6c17\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 TypeScript 中你可以为剩余参数指定类型，先来看例子：</span></p><p data-lake-id=\"u4978bf5d\" id=\"u4978bf5d\"><span data-lake-id=\"u2e18ffe8\" id=\"u2e18ffe8\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"ue65dd652\" id=\"ue65dd652\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u4b35cd75\" id=\"u4b35cd75\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">handleData</span><span data-lake-id=\"u483ed5cf\" id=\"u483ed5cf\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u3aa95b37\" id=\"u3aa95b37\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u1c642637\" id=\"u1c642637\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uda9552f8\" id=\"uda9552f8\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"udf2dd0e9\" id=\"udf2dd0e9\" class=\"lake-fontsize-18\">arg1</span><span data-lake-id=\"u67018374\" id=\"u67018374\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"ud8fd6a2b\" id=\"ud8fd6a2b\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u8af1891f\" id=\"u8af1891f\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"u88ae2160\" id=\"u88ae2160\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"uf6f81fe7\" id=\"uf6f81fe7\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u8793c238\" id=\"u8793c238\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">...</span><span data-lake-id=\"u9d8d75bf\" id=\"u9d8d75bf\" class=\"lake-fontsize-18\">args</span><span data-lake-id=\"uc840835e\" id=\"uc840835e\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"ue767f36a\" id=\"ue767f36a\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u45d04a4d\" id=\"u45d04a4d\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"u9252fe69\" id=\"u9252fe69\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">[])</span><span data-lake-id=\"ud5a5e620\" id=\"ud5a5e620\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u4634b0cb\" id=\"u4634b0cb\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=&gt;</span><span data-lake-id=\"uea3d5782\" id=\"uea3d5782\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u70490bb3\" id=\"u70490bb3\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"uabf0854b\" id=\"uabf0854b\" class=\"lake-fontsize-18\">   </span><span data-lake-id=\"ube00a30e\" id=\"ube00a30e\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">//</span><span data-lake-id=\"uc94c1934\" id=\"uc94c1934\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uca529ea4\" id=\"uca529ea4\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">};</span><span data-lake-id=\"ue0340760\" id=\"ue0340760\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u4a8a1873\" id=\"u4a8a1873\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">handleData</span><span data-lake-id=\"u0ea6ea22\" id=\"u0ea6ea22\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"ub32e3698\" id=\"ub32e3698\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">1</span><span data-lake-id=\"u2dd82f26\" id=\"u2dd82f26\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"udfdc2aff\" id=\"udfdc2aff\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u26cfb0e4\" id=\"u26cfb0e4\" class=\"lake-fontsize-18\" style=\"color: rgb(120, 171, 18)\">&quot;a&quot;</span><span data-lake-id=\"u675a6c26\" id=\"u675a6c26\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">);</span><span data-lake-id=\"u45d1db86\" id=\"u45d1db86\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uc63e4ebb\" id=\"uc63e4ebb\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">// error 类型&quot;string&quot;的参数不能赋给类型&quot;number&quot;的参数</span></p><h2 data-lake-id=\"aCBbY\" id=\"aCBbY\"><span data-lake-id=\"ud3f05c82\" id=\"ud3f05c82\">3 函数重载，此重载vs彼重载</span></h2><p data-lake-id=\"ue128eb74\" id=\"ue128eb74\"><span data-lake-id=\"ucd61a494\" id=\"ucd61a494\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在其他一些强类型语言中，函数重载是指定义几个函数名相同，但参数个数或类型不同的函数，在调用时传入不同的参数，编译器会自动调用适合的函数。但是 JavaScript 作为一个动态语言是没有函数重载的，只能我们自己在函数体内通过判断参数的个数、类型来指定不同的处理逻辑。来看个简单的例子</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20handleData%20%3D%20value%20%3D%3E%20%7B%5Cn%20%20if%20(typeof%20value%20%3D%3D%3D%20%5C%22string%5C%22)%20%7B%5Cn%20%20%20%20return%20value.split(%5C%22%5C%22)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20value%5Cn%20%20%20%20%20%20.toString()%5Cn%20%20%20%20%20%20.split(%5C%22%5C%22)%5Cn%20%20%20%20%20%20.join(%5C%22_%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22iQHam%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4753a889\" id=\"u4753a889\"><span data-lake-id=\"ufc5716c7\" id=\"ufc5716c7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">这个例子中，当传入的参数为字符串时，将它进行切割，比如传入的是</span><span data-lake-id=\"ue7084b65\" id=\"ue7084b65\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">’abc’</span><span data-lake-id=\"ua2a5b04d\" id=\"ua2a5b04d\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，返回的将是数组</span><span data-lake-id=\"uc76e8e82\" id=\"uc76e8e82\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">[‘a’, ‘b’, ‘c’]</span><span data-lake-id=\"u04b43add\" id=\"u04b43add\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">；如果传入的是一个数值类型，则将数字转为字符串然后切割成单个数字然后拼接成字符串，比如传入的是</span><span data-lake-id=\"u0cb21846\" id=\"u0cb21846\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">123</span><span data-lake-id=\"u6e231b84\" id=\"u6e231b84\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，则返回的是</span><span data-lake-id=\"ud4ce34f0\" id=\"ud4ce34f0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">’1_2_3’</span><span data-lake-id=\"udaa19829\" id=\"udaa19829\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">。你可以看到传入的参数类型不同，返回的值的类型是不同的，</span></p><p data-lake-id=\"u342e008f\" id=\"u342e008f\"><span data-lake-id=\"ud9c6e0c7\" id=\"ud9c6e0c7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 TypeScript 中有函数重载的概念，但并不是定义几个同名实体函数，然后根据不同的参数个数或类型来自动调用相应的函数。TypeScript的函数重载是在类型系统层面的，是为了更好地进行类型推断。TypeScript的函数重载通过为一个函数指定多个函数类型定义，从而对函数调用的返回值进行检查。来看例子：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22function%20handleData(x%3A%20string)%3A%20string%5B%5D%3B%20%2F%2F%20%E8%BF%99%E4%B8%AA%E6%98%AF%E9%87%8D%E8%BD%BD%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E6%8C%87%E5%AE%9A%E5%BD%93%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E4%B8%BAstring%E6%97%B6%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BAstring%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%83%E7%B4%A0%E6%9E%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84%5Cnfunction%20handleData(x%3A%20number)%3A%20string%3B%20%2F%2F%20%E8%BF%99%E4%B8%AA%E4%B9%9F%E6%98%AF%E9%87%8D%E8%BD%BD%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E6%8C%87%E5%AE%9A%E5%BD%93%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E4%B8%BAnumber%E6%97%B6%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%BAstring%5Cnfunction%20handleData(x%3A%20any)%3A%20any%20%7B%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%B0%B1%E6%98%AF%E9%87%8D%E8%BD%BD%E7%9A%84%E5%86%85%E5%AE%B9%E4%BA%86%EF%BC%8C%E4%BB%96%E6%98%AF%E5%AE%9E%E4%BD%93%E5%87%BD%E6%95%B0%EF%BC%8C%E4%B8%8D%E7%AE%97%E5%81%9A%E9%87%8D%E8%BD%BD%E7%9A%84%E9%83%A8%E5%88%86%5Cn%20%20if%20(typeof%20x%20%3D%3D%3D%20%5C%22string%5C%22)%20%7B%5Cn%20%20%20%20return%20x.split(%5C%22%5C%22)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20x%5Cn%20%20%20%20%20%20.toString()%5Cn%20%20%20%20%20%20.split(%5C%22%5C%22)%5Cn%20%20%20%20%20%20.join(%5C%22_%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5CnhandleData(%5C%22abc%5C%22).join(%5C%22_%5C%22)%3B%5CnhandleData(123).join(%5C%22_%5C%22)%3B%20%2F%2F%20error%20%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22join%5C%22%5CnhandleData(false)%3B%20%2F%2F%20error%20%E7%B1%BB%E5%9E%8B%5C%22boolean%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E3%80%82%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22rb3YX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7154a5a5\" id=\"u7154a5a5\"><span data-lake-id=\"ubd744698\" id=\"ubd744698\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">首先我们使用</span><span data-lake-id=\"u90cd0c6e\" id=\"u90cd0c6e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">function</span><span data-lake-id=\"u20b4a75c\" id=\"u20b4a75c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">关键字定义了两个同名的函数，但不同的是，函数没有实际的函数体逻辑，而是只定义函数名、参数及参数类型以及函数的返回值类型；而第三个使用</span><span data-lake-id=\"u6893b435\" id=\"u6893b435\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">function</span><span data-lake-id=\"u01b9b1c3\" id=\"u01b9b1c3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">定义的同名函数，是一个完整的实体函数，包含函数名、参数及参数类型、返回值类型和函数体；这三个定义组成了一个函数——完整的带有类型定义的函数，前两个</span><span data-lake-id=\"u96621bd6\" id=\"u96621bd6\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">function</span><span data-lake-id=\"uee76a511\" id=\"uee76a511\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">定义的就称为</span><em><span data-lake-id=\"u3bcf957f\" id=\"u3bcf957f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">函数重载</span></em><span data-lake-id=\"u7bd1fe82\" id=\"u7bd1fe82\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，而第三个</span><span data-lake-id=\"u9334a568\" id=\"u9334a568\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">function</span><span data-lake-id=\"u20f78e44\" id=\"u20f78e44\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">并不算重载；</span></p><p data-lake-id=\"udfadecd1\" id=\"udfadecd1\"><span data-lake-id=\"ucab11b79\" id=\"ucab11b79\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">然后我们来看下匹配规则，当调用这个函数并且传入参数的时候，会从上而下在函数重载里匹配和这个参数个数和类型匹配的重载。如例子中第一个调用，传入了一个字符串&quot;abc&quot;，它符合第一个重载，所以它的返回值应该是一个字符串组成的数组，数组是可以调用</span><span data-lake-id=\"u6e4946f9\" id=\"u6e4946f9\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">join</span><span data-lake-id=\"u9263a741\" id=\"u9263a741\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">方法的，所以这里没问题；</span></p><p data-lake-id=\"ub40ae018\" id=\"ub40ae018\"><span data-lake-id=\"u7a309c68\" id=\"u7a309c68\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">第二个调用传入的是一个数值类型的123，从上到下匹配重载是符合第二个的，返回值应该是字符串类型。但这里拿到返回值后调用了数组方法</span><span data-lake-id=\"u464c16e8\" id=\"u464c16e8\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">join</span><span data-lake-id=\"ub96542d5\" id=\"ub96542d5\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，这肯定会报错了，因为字符串无法调用这个方法；</span></p><p data-lake-id=\"ua6437e51\" id=\"ua6437e51\"><span data-lake-id=\"ue0cb4608\" id=\"ue0cb4608\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">最后调用时传入了一个布尔类型值false，匹配不到重载，所以会报错；</span></p><p data-lake-id=\"u748d77da\" id=\"u748d77da\"><span data-lake-id=\"uf6e024ae\" id=\"uf6e024ae\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">最后还有一点要注意的是，这里重载只能用 function 来定义，不能使用接口、类型别名等。</span></p><h3 data-lake-id=\"cUviX\" id=\"cUviX\"><span data-lake-id=\"u28c75252\" id=\"u28c75252\" style=\"color: rgb(28, 31, 33)\">小结</span></h3><p data-lake-id=\"u51de3f77\" id=\"u51de3f77\"><span data-lake-id=\"ua587a058\" id=\"ua587a058\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">学习了函数类型的三种定义方式：</span></p><ul list=\"u4e86bb54\"><li fid=\"u8fb659cc\" data-lake-id=\"u6f7cae2f\" id=\"u6f7cae2f\"><span data-lake-id=\"u8cdbcb28\" id=\"u8cdbcb28\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">基本方式：直接在定义函数实体语句中，指定参数和返回值类型；</span></li><li fid=\"u8fb659cc\" data-lake-id=\"u669933e6\" id=\"u669933e6\"><span data-lake-id=\"u008ae9e0\" id=\"u008ae9e0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">接口形式：这种方式我们在讲接口的时候已经学习过了；</span></li><li fid=\"u8fb659cc\" data-lake-id=\"u7e3707c3\" id=\"u7e3707c3\"><span data-lake-id=\"ufedaee3f\" id=\"ufedaee3f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">类型别名：这种方式是比较推荐的写法，比较简洁清晰。</span></li></ul><p data-lake-id=\"ue48e2d83\" id=\"ue48e2d83\"><span data-lake-id=\"u63822263\" id=\"u63822263\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">详细学习了函数参数的三个知识点：</span></p><ul list=\"u07aeecbd\"><li fid=\"u87b29eae\" data-lake-id=\"ua490c39c\" id=\"ua490c39c\"><span data-lake-id=\"uef6964df\" id=\"uef6964df\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">可选参数：可选参数在JavaScript中可以实现，TypeScript中需要在该参数后面加个</span><span data-lake-id=\"ucbfac909\" id=\"ucbfac909\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">?</span><span data-lake-id=\"u2dc269b4\" id=\"u2dc269b4\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，且可选参数必须位于必选参数后面；；</span></li><li fid=\"u87b29eae\" data-lake-id=\"u7a7d6355\" id=\"u7a7d6355\"><span data-lake-id=\"uae51d485\" id=\"uae51d485\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">默认参数：这是在ES6标准中添加的语法，为函数参数指定默认参数，写法就是在参数名后面使用</span><span data-lake-id=\"u3f2fc5a2\" id=\"u3f2fc5a2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">=</span><span data-lake-id=\"u62aaa013\" id=\"u62aaa013\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">连接默认参数</span></li><li fid=\"u87b29eae\" data-lake-id=\"u98c06c98\" id=\"u98c06c98\"><span data-lake-id=\"u8957874a\" id=\"u8957874a\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">剩余参数：这也是在ES6中添加的语法，可以使用</span><span data-lake-id=\"u57464ed2\" id=\"u57464ed2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">...参数名</span><span data-lake-id=\"ue9b09045\" id=\"ue9b09045\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">来获取剩余任意多个参数，获取的是一个数组。</span></li></ul><p data-lake-id=\"ue34d2540\" id=\"ue34d2540\"><span data-lake-id=\"uf51e906b\" id=\"uf51e906b\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">学习了函数重载。着重强调的是，这里的函数重载区别于其他语言中的重载，TypeScript中的重载是为了针对不同参数个数和类型，推断返回值类型。</span></p><p data-lake-id=\"u54812ff1\" id=\"u54812ff1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639380599741-01dff690-389b-49c7-9943-6737d7ce0db4.jpeg%22%2C%22taskId%22%3A%22u070f9149-4014-4741-8932-98f9adecd7a%22%2C%22clientId%22%3A%22u4a462bc7-b87a-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bff500010be916000896.jpg%22%2C%22size%22%3A197840%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A896%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%BB%99%E8%8F%8C%E6%AC%BE%E5%AE%9A%E4%B9%89%E7%BE%8E%E5%9E%8B%2C%E8%BF%99%E4%B8%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E6%8B%AC%E5%AF%B9%E6%A2%A6%E6%95%99%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E9%BA%A6%E5%9E%8B%E5%AE%9A%E4%B9%89%20%E4%B8%BA%E7%94%BB%E6%95%99%E5%AE%9A%E4%B9%89%E7%BE%8E%E5%9E%8B%20%E5%A6%82%E6%9E%9C%E7%9C%81%E7%95%A5%E5%8F%82%E6%95%B0%E7%9A%84%E7%BE%8E%E5%9E%8B%2CTpesciipt%E4%BC%9A%E7%84%B6%E8%AE%A4%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E6%98%AFany%E8%B5%B0%E5%9E%8B%20%E6%88%91%E4%BB%AC%E5%B8%B8%E8%A6%81%E4%B8%BA%E9%9D%A2%E8%BD%AF%E8%B4%A2%E7%BB%99%E7%9A%84%E5%8F%98%E9%87%8D%E5%AE%9A%E4%B9%89%E5%AE%8C%E6%95%B4%E7%9A%84%E9%9B%B7%E5%86%9C%E6%98%AF%E5%9E%8B%2C%E5%8D%B3%E5%8C%85%E6%8B%AC%E5%8F%82%E6%95%B0%E7%BE%8E%E5%9E%8B%E5%92%8C%E8%BF%94%E5%9B%9E%E8%A3%85%E5%9E%8B%20%E5%AE%8C%E7%94%9F%E7%9A%84%E9%80%9A%E6%95%99%E6%94%AF%E5%9E%8B%20%E7%94%BB%E6%95%B0%E6%94%AF%E5%9E%8B%20%E5%8D%97%E5%86%9C%E4%B8%AD%E5%A6%82%E5%A4%8F%E4%BD%BF%E7%94%A8%5D%E6%95%99%E4%BD%93%E4%B9%8B%E5%A4%96%E5%AE%9A%E4%B9%89%E7%9A%84%E4%BA%A4%E9%87%8F%2C%E8%BF%99%E4%B8%AA%E8%90%A5%E8%91%A3%E7%9A%84%E8%B5%B0%E5%9E%8B%E6%98%AF%E4%B8%8D%E4%BD%93%E7%8E%B0%E5%9C%A8%E5%9B%AD%E6%AC%BE%E8%B5%B0%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%9A%84%20%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E6%94%AF%E5%9E%8B%20%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%B8%85%E6%99%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%B0%E6%94%AF%E5%9E%8B%20%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%E6%9D%A5%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%AC%BE%E8%A1%A8%E5%9E%8B%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%E5%AE%9A%E4%B9%89%E5%9B%AD%E6%95%B0%E8%A1%A8%E5%9E%8B%E6%9B%B4%E7%9B%B4%E9%85%8D%E6%98%93%E8%AF%BB%20Twesaript%E4%BC%9A%E8%BE%88%E6%88%91%E4%BB%AC%E5%9C%A8%E5%A6%88%E7%BD%97%E4%BB%A3%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E6%9D%BE%E6%9F%A5%E5%87%BA%E8%B0%83%E7%94%A8%E9%9D%A2%E5%86%9C%E6%97%B6%E5%8F%82%E6%95%99%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BE%AA%20%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%20%E6%8E%A8%E5%8F%A3%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E9%9D%A2%E5%86%9C%E8%B5%B0%E5%9E%8B%E5%A2%83%E5%B2%81%E6%95%99%E5%92%8C%E5%8F%AF%E9%80%89%E8%80%83%E6%AC%BE%E7%9A%84%E4%BD%8D%E9%9C%87%E7%9A%84%E5%90%8E%E6%98%AF%E6%97%A0%E6%89%80%E5%9F%A0%E7%9A%84%2C%E4%BD%86%E6%98%AF%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%88%B0%E7%9A%84%20%E5%AE%9A%E4%B9%89%E5%BD%A2%E5%BC%8F%2C%E5%8F%AF%E9%80%89%E6%A2%A6%E6%95%99%E5%BF%85%E7%88%B1%E5%81%9A%E5%9C%A8%E9%80%89%E6%A2%A6%E6%95%99%E5%90%8E%E9%9D%A2%2C%E8%BF%99%E5%92%8C%E5%9C%A8%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%89%AF%E8%BD%AF%E6%98%AF%E4%B8%80%E8%87%B4%E7%9A%84%20%E4%B8%BA%E5%87%BD%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%AE%9A%E4%B9%89%E5%A3%B3%E5%9E%8B%20%E9%BB%98%E8%AE%A4%E6%A2%A6%E6%95%B0%20%E5%8F%82%E6%95%B0%20%E5%9C%A8%E4%B8%AD%2C%E5%A6%82%E8%8F%9C%E7%B2%BE%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%9B%B2%E5%86%9C%2C%E8%BF%99%E4%B8%AA%E6%9B%B2%E6%95%99%E5%8F%AF%E4%BB%A5%E8%82%B4%E5%85%A5%E4%BB%BB%E6%84%8F%E4%B8%AA%E8%BD%AF%E7%9A%84%E6%95%99%2C%E4%B9%88%E6%88%91%E4%BB%AC%E5%B0%B1%E6%97%A0%E6%B3%95%20%E5%9C%A8%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%88%97%E6%9D%A5%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%AA%E5%AE%9A%E4%B9%89%20%E5%89%A9%E4%B8%9C%E6%A2%A6%E6%95%B0%20%E5%9C%A8%E5%8C%BA6%E5%8F%91%E5%B8%83%E4%B9%8B%E8%BE%93%2C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0wgurenti%E6%9D%A5%E8%8E%B7%E6%9C%80%E6%A2%A6%E6%88%91%E5%88%97%E8%A1%A8%2C%E9%9B%B7gmet%E6%98%AF%E6%AF%8F%E4%B8%80%E4%B8%AA%E8%8F%8C%E6%AC%BE%E6%99%BA%E5%8C%85%20%E5%90%AB%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BE%8E%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%20%E9%9B%B7%E5%86%9C%E9%87%8D%E8%BD%BD%E6%98%AF%E6%8C%87%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B8%AA%E8%8F%8C%E5%86%9C%E5%90%8D%E7%9B%B8%E9%97%B4%2C%E4%BD%86%E5%A4%9A%E6%95%99%E4%B8%AA%E6%A0%A1%E5%B0%86%E4%BA%A4%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E9%9D%A2%E5%86%9C%2C%E5%9C%A8%E8%B0%83%E7%94%A8%E6%97%B6%E4%BC%A0%E5%85%A5%E4%B8%8D%20%E7%9A%84%E5%8F%82%E6%95%99%2C%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E9%97%B2%E9%80%82%E5%90%88%E7%9A%84%E9%9D%A2%E6%95%B0%20larit%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E6%98%AF%E6%B2%A1%E6%9C%89%E9%9D%A2%E6%95%99%E9%87%8D%E8%BD%BD%E7%9A%84%2C%E5%8F%AA%E8%83%BD%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E5%9C%A8%E9%9D%A2%E7%89%A7%E4%BD%93%E5%86%85%E9%80%9A%E8%BF%87%E5%88%A4%E6%96%AD%E6%A2%A6%E6%9D%83%20%E7%9A%84%E4%B8%AA%E6%95%B0%2C%E6%98%AF%E5%9E%8B%E6%A1%88%E6%8C%87%E5%AE%9A%E4%B8%8D%E5%90%8C%E7%9A%84%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%20%E5%8D%A7%E6%95%B0%E9%87%8D%E8%BD%BD%20%E5%9C%A8Tpescipt%E4%B8%AD%E6%9C%89%E7%94%BB%E6%95%99%E9%87%8D%E8%BD%BD%E7%9A%84%E7%93%B6%E5%BF%B5%2C%E4%BD%86%E7%95%8C%E4%B8%8D%E6%98%AF%E5%AE%9A%E7%88%B6%E5%87%A0%E4%B8%AA%E9%97%AE%E5%90%8D%E4%BD%93%E8%8F%8C%E5%86%9C%2C%E7%83%AD%E5%90%8E%E6%91%86%E4%B8%8D%E9%97%B4%E7%9A%84%E7%88%B9%20%E6%95%B0%E4%B8%AA%E6%95%B0%E8%80%B3%E7%BE%8E%E5%9E%8B%E6%9D%A5%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E7%9B%B8%E5%BA%94%E7%9A%84%E9%9D%A2%E6%95%B0%20Tpesio%E7%9A%84%E6%9B%B2%E6%88%91%E9%87%8D%E6%88%91%26%E5%9C%A8%E4%BA%A4%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%B1%85%E9%9D%A2%E7%9A%84%2C%E6%98%AF%E4%B8%BA%5D%E6%9B%B4%E8%BD%A9%E5%9C%B0%E8%BF%9B%E8%A1%8C%E8%B5%B0%E5%9E%8B%E6%8E%A8%E6%96%AD%2C%E7%9A%84%E6%AC%BE%20%E9%87%8D%E8%BD%BD%E8%BF%87%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%9B%B4%E6%95%99%E6%8C%87%E5%AE%9A%E5%A4%9A%E4%B8%AA%E9%9D%A2%E6%88%91%E7%BE%8E%E5%9E%8B%E5%AE%9A%E4%B9%89%2C%E4%BB%8E%E8%80%8C%E5%AF%B9%E5%8D%A7%E5%86%9C%E8%B0%83%E7%94%A8%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%A3%80%E6%9F%A5%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A912.66547%2C%22y%22%3A23.771515%2C%22width%22%3A507.19503%2C%22height%22%3A19.093082000000003%2C%22text%22%3A%22%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%BB%99%E8%8F%8C%E6%AC%BE%E5%AE%9A%E4%B9%89%E7%BE%8E%E5%9E%8B%2C%E8%BF%99%E4%B8%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E6%8B%AC%E5%AF%B9%E6%A2%A6%E6%95%99%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E9%BA%A6%E5%9E%8B%E5%AE%9A%E4%B9%89%22%7D%2C%7B%22x%22%3A729.39514%2C%22y%22%3A44.098%2C%22width%22%3A118.46866%2C%22height%22%3A18.25105%2C%22text%22%3A%22%E4%B8%BA%E7%94%BB%E6%95%99%E5%AE%9A%E4%B9%89%E7%BE%8E%E5%9E%8B%22%7D%2C%7B%22x%22%3A908.91473%2C%22y%22%3A63.932762%2C%22width%22%3A437.92757000000006%2C%22height%22%3A18.664704%2C%22text%22%3A%22%E5%A6%82%E6%9E%9C%E7%9C%81%E7%95%A5%E5%8F%82%E6%95%B0%E7%9A%84%E7%BE%8E%E5%9E%8B%2CTpesciipt%E4%BC%9A%E7%84%B6%E8%AE%A4%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E6%98%AFany%E8%B5%B0%E5%9E%8B%22%7D%2C%7B%22x%22%3A911.4518%2C%22y%22%3A103.8774%2C%22width%22%3A579.7078999999999%2C%22height%22%3A17.70092000000001%2C%22text%22%3A%22%E6%88%91%E4%BB%AC%E5%B8%B8%E8%A6%81%E4%B8%BA%E9%9D%A2%E8%BD%AF%E8%B4%A2%E7%BB%99%E7%9A%84%E5%8F%98%E9%87%8D%E5%AE%9A%E4%B9%89%E5%AE%8C%E6%95%B4%E7%9A%84%E9%9B%B7%E5%86%9C%E6%98%AF%E5%9E%8B%2C%E5%8D%B3%E5%8C%85%E6%8B%AC%E5%8F%82%E6%95%B0%E7%BE%8E%E5%9E%8B%E5%92%8C%E8%BF%94%E5%9B%9E%E8%A3%85%E5%9E%8B%22%7D%2C%7B%22x%22%3A728.93933%2C%22y%22%3A122.555626%2C%22width%22%3A119.50213999999994%2C%22height%22%3A17.926883999999987%2C%22text%22%3A%22%E5%AE%8C%E7%94%9F%E7%9A%84%E9%80%9A%E6%95%99%E6%94%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A570.8512%2C%22y%22%3A141.72363%2C%22width%22%3A81.71313000000009%2C%22height%22%3A20.395969999999977%2C%22text%22%3A%22%E7%94%BB%E6%95%B0%E6%94%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A909.3598%2C%22y%22%3A142.46123%2C%22width%22%3A649.2883000000002%2C%22height%22%3A17.89634000000001%2C%22text%22%3A%22%E5%8D%97%E5%86%9C%E4%B8%AD%E5%A6%82%E5%A4%8F%E4%BD%BF%E7%94%A8%5D%E6%95%99%E4%BD%93%E4%B9%8B%E5%A4%96%E5%AE%9A%E4%B9%89%E7%9A%84%E4%BA%A4%E9%87%8F%2C%E8%BF%99%E4%B8%AA%E8%90%A5%E8%91%A3%E7%9A%84%E8%B5%B0%E5%9E%8B%E6%98%AF%E4%B8%8D%E4%BD%93%E7%8E%B0%E5%9C%A8%E5%9B%AD%E6%AC%BE%E8%B5%B0%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%9A%84%22%7D%2C%7B%22x%22%3A727.24%2C%22y%22%3A179.90036%2C%22width%22%3A172.23519999999996%2C%22height%22%3A20.17313999999999%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E6%94%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A961.06775%2C%22y%22%3A181.61528%2C%22width%22%3A257.42945%2C%22height%22%3A18.19101999999998%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%B8%85%E6%99%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%B0%E6%94%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A892.7872%2C%22y%22%3A219.90688%2C%22width%22%3A293.21209999999996%2C%22height%22%3A18.553050000000013%2C%22text%22%3A%22%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%E6%9D%A5%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%AC%BE%E8%A1%A8%E5%9E%8B%22%7D%2C%7B%22x%22%3A727.13635%2C%22y%22%3A242.54137%2C%22width%22%3A103.24205000000006%2C%22height%22%3A16.20856999999998%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%22%7D%2C%7B%22x%22%3A891.0196%2C%22y%22%3A262.502%2C%22width%22%3A294.65739999999994%2C%22height%22%3A16.535500000000013%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%E5%AE%9A%E4%B9%89%E5%9B%AD%E6%95%B0%E8%A1%A8%E5%9E%8B%E6%9B%B4%E7%9B%B4%E9%85%8D%E6%98%93%E8%AF%BB%22%7D%2C%7B%22x%22%3A816.95984%2C%22y%22%3A334.02625%2C%22width%22%3A602.74226%2C%22height%22%3A23.242950000000008%2C%22text%22%3A%22Twesaript%E4%BC%9A%E8%BE%88%E6%88%91%E4%BB%AC%E5%9C%A8%E5%A6%88%E7%BD%97%E4%BB%A3%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E6%9D%BE%E6%9F%A5%E5%87%BA%E8%B0%83%E7%94%A8%E9%9D%A2%E5%86%9C%E6%97%B6%E5%8F%82%E6%95%99%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BE%AA%22%7D%2C%7B%22x%22%3A690.1626%2C%22y%22%3A367.9759%2C%22width%22%3A64.38490000000002%2C%22height%22%3A18.15092999999996%2C%22text%22%3A%22%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A817.90753%2C%22y%22%3A374.28836%2C%22width%22%3A649.23227%2C%22height%22%3A19.898939999999982%2C%22text%22%3A%22%E6%8E%A8%E5%8F%A3%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E9%9D%A2%E5%86%9C%E8%B5%B0%E5%9E%8B%E5%A2%83%E5%B2%81%E6%95%99%E5%92%8C%E5%8F%AF%E9%80%89%E8%80%83%E6%AC%BE%E7%9A%84%E4%BD%8D%E9%9C%87%E7%9A%84%E5%90%8E%E6%98%AF%E6%97%A0%E6%89%80%E5%9F%A0%E7%9A%84%2C%E4%BD%86%E6%98%AF%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%88%B0%E7%9A%84%22%7D%2C%7B%22x%22%3A816.5443%2C%22y%22%3A399.80566%2C%22width%22%3A566.6087%2C%22height%22%3A18.608040000000017%2C%22text%22%3A%22%E5%AE%9A%E4%B9%89%E5%BD%A2%E5%BC%8F%2C%E5%8F%AF%E9%80%89%E6%A2%A6%E6%95%99%E5%BF%85%E7%88%B1%E5%81%9A%E5%9C%A8%E9%80%89%E6%A2%A6%E6%95%99%E5%90%8E%E9%9D%A2%2C%E8%BF%99%E5%92%8C%E5%9C%A8%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%89%AF%E8%BD%AF%E6%98%AF%E4%B8%80%E8%87%B4%E7%9A%84%22%7D%2C%7B%22x%22%3A91.21639%2C%22y%22%3A431.04602%2C%22width%22%3A298.26448%2C%22height%22%3A25.04791%2C%22text%22%3A%22%E4%B8%BA%E5%87%BD%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%AE%9A%E4%B9%89%E5%A3%B3%E5%9E%8B%22%7D%2C%7B%22x%22%3A687.2855%2C%22y%22%3A438.3279%2C%22width%22%3A67.06350000000009%2C%22height%22%3A18.299019999999985%2C%22text%22%3A%22%E9%BB%98%E8%AE%A4%E6%A2%A6%E6%95%B0%22%7D%2C%7B%22x%22%3A572.2062%2C%22y%22%3A449.44562%2C%22width%22%3A40.38900000000001%2C%22height%22%3A21.80435%2C%22text%22%3A%22%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A816.7206%2C%22y%22%3A478.75278%2C%22width%22%3A646.2009999999999%2C%22height%22%3A19.51242000000002%2C%22text%22%3A%22%E5%9C%A8%E4%B8%AD%2C%E5%A6%82%E8%8F%9C%E7%B2%BE%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%9B%B2%E5%86%9C%2C%E8%BF%99%E4%B8%AA%E6%9B%B2%E6%95%99%E5%8F%AF%E4%BB%A5%E8%82%B4%E5%85%A5%E4%BB%BB%E6%84%8F%E4%B8%AA%E8%BD%AF%E7%9A%84%E6%95%99%2C%E4%B9%88%E6%88%91%E4%BB%AC%E5%B0%B1%E6%97%A0%E6%B3%95%22%7D%2C%7B%22x%22%3A815.422%2C%22y%22%3A501.64096%2C%22width%22%3A241.60339999999997%2C%22height%22%3A21.186800000000005%2C%22text%22%3A%22%E5%9C%A8%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%88%97%E6%9D%A5%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%AA%E5%AE%9A%E4%B9%89%22%7D%2C%7B%22x%22%3A687.34235%2C%22y%22%3A522.50323%2C%22width%22%3A68.20494999999994%2C%22height%22%3A17.29462000000001%2C%22text%22%3A%22%E5%89%A9%E4%B8%9C%E6%A2%A6%E6%95%B0%22%7D%2C%7B%22x%22%3A816.02655%2C%22y%22%3A540.28735%2C%22width%22%3A644.4592499999999%2C%22height%22%3A22.250800000000027%2C%22text%22%3A%22%E5%9C%A8%E5%8C%BA6%E5%8F%91%E5%B8%83%E4%B9%8B%E8%BE%93%2C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0wgurenti%E6%9D%A5%E8%8E%B7%E6%9C%80%E6%A2%A6%E6%88%91%E5%88%97%E8%A1%A8%2C%E9%9B%B7gmet%E6%98%AF%E6%AF%8F%E4%B8%80%E4%B8%AA%E8%8F%8C%E6%AC%BE%E6%99%BA%E5%8C%85%22%7D%2C%7B%22x%22%3A817.17664%2C%22y%22%3A565.9582%2C%22width%22%3A152.63873%2C%22height%22%3A20.075249999999983%2C%22text%22%3A%22%E5%90%AB%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BE%8E%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%22%7D%2C%7B%22x%22%3A728.17084%2C%22y%22%3A639.0577%2C%22width%22%3A642.6891599999999%2C%22height%22%3A21.06280000000004%2C%22text%22%3A%22%E9%9B%B7%E5%86%9C%E9%87%8D%E8%BD%BD%E6%98%AF%E6%8C%87%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B8%AA%E8%8F%8C%E5%86%9C%E5%90%8D%E7%9B%B8%E9%97%B4%2C%E4%BD%86%E5%A4%9A%E6%95%99%E4%B8%AA%E6%A0%A1%E5%B0%86%E4%BA%A4%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E9%9D%A2%E5%86%9C%2C%E5%9C%A8%E8%B0%83%E7%94%A8%E6%97%B6%E4%BC%A0%E5%85%A5%E4%B8%8D%22%7D%2C%7B%22x%22%3A726.7886%2C%22y%22%3A663.942%2C%22width%22%3A301.5771000000001%2C%22height%22%3A20.169099999999958%2C%22text%22%3A%22%E7%9A%84%E5%8F%82%E6%95%99%2C%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E9%97%B2%E9%80%82%E5%90%88%E7%9A%84%E9%9D%A2%E6%95%B0%22%7D%2C%7B%22x%22%3A724.502%2C%22y%22%3A704.3015%2C%22width%22%3A646.4386%2C%22height%22%3A18.06669999999997%2C%22text%22%3A%22larit%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E6%98%AF%E6%B2%A1%E6%9C%89%E9%9D%A2%E6%95%99%E9%87%8D%E8%BD%BD%E7%9A%84%2C%E5%8F%AA%E8%83%BD%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E5%9C%A8%E9%9D%A2%E7%89%A7%E4%BD%93%E5%86%85%E9%80%9A%E8%BF%87%E5%88%A4%E6%96%AD%E6%A2%A6%E6%9D%83%22%7D%2C%7B%22x%22%3A725.67206%2C%22y%22%3A726.66895%2C%22width%22%3A283.41664000000003%2C%22height%22%3A19.224950000000035%2C%22text%22%3A%22%E7%9A%84%E4%B8%AA%E6%95%B0%2C%E6%98%AF%E5%9E%8B%E6%A1%88%E6%8C%87%E5%AE%9A%E4%B8%8D%E5%90%8C%E7%9A%84%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%22%7D%2C%7B%22x%22%3A571.04956%2C%22y%22%3A746.03864%2C%22width%22%3A82.61077999999998%2C%22height%22%3A21.242259999999987%2C%22text%22%3A%22%E5%8D%A7%E6%95%B0%E9%87%8D%E8%BD%BD%22%7D%2C%7B%22x%22%3A727.81006%2C%22y%22%3A766.46466%2C%22width%22%3A645.09214%2C%22height%22%3A18.686239999999998%2C%22text%22%3A%22%E5%9C%A8Tpescipt%E4%B8%AD%E6%9C%89%E7%94%BB%E6%95%99%E9%87%8D%E8%BD%BD%E7%9A%84%E7%93%B6%E5%BF%B5%2C%E4%BD%86%E7%95%8C%E4%B8%8D%E6%98%AF%E5%AE%9A%E7%88%B6%E5%87%A0%E4%B8%AA%E9%97%AE%E5%90%8D%E4%BD%93%E8%8F%8C%E5%86%9C%2C%E7%83%AD%E5%90%8E%E6%91%86%E4%B8%8D%E9%97%B4%E7%9A%84%E7%88%B9%22%7D%2C%7B%22x%22%3A726.6058%2C%22y%22%3A791.4654%2C%22width%22%3A280.9943599999999%2C%22height%22%3A17.96214999999995%2C%22text%22%3A%22%E6%95%B0%E4%B8%AA%E6%95%B0%E8%80%B3%E7%BE%8E%E5%9E%8B%E6%9D%A5%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E7%9B%B8%E5%BA%94%E7%9A%84%E9%9D%A2%E6%95%B0%22%7D%2C%7B%22x%22%3A725.5101%2C%22y%22%3A828.7649%2C%22width%22%3A653.6457%2C%22height%22%3A19.637140000000045%2C%22text%22%3A%22Tpesio%E7%9A%84%E6%9B%B2%E6%88%91%E9%87%8D%E6%88%91%26%E5%9C%A8%E4%BA%A4%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%B1%85%E9%9D%A2%E7%9A%84%2C%E6%98%AF%E4%B8%BA%5D%E6%9B%B4%E8%BD%A9%E5%9C%B0%E8%BF%9B%E8%A1%8C%E8%B5%B0%E5%9E%8B%E6%8E%A8%E6%96%AD%2C%E7%9A%84%E6%AC%BE%22%7D%2C%7B%22x%22%3A726.75134%2C%22y%22%3A853.8422%2C%22width%22%3A594.69766%2C%22height%22%3A17.714439999999968%2C%22text%22%3A%22%E9%87%8D%E8%BD%BD%E8%BF%87%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%9B%B4%E6%95%99%E6%8C%87%E5%AE%9A%E5%A4%9A%E4%B8%AA%E9%9D%A2%E6%88%91%E7%BE%8E%E5%9E%8B%E5%AE%9A%E4%B9%89%2C%E4%BB%8E%E8%80%8C%E5%AF%B9%E5%8D%A7%E5%86%9C%E8%B0%83%E7%94%A8%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%A3%80%E6%9F%A5%22%7D%5D%2C%22id%22%3A%22ud459aace%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"tHJwe\" id=\"tHJwe\"><span data-lake-id=\"u3cbe7dee\" id=\"u3cbe7dee\">1.函数类型</span></h2><h3 data-lake-id=\"qkS5T\" id=\"qkS5T\"><span data-lake-id=\"u79e1b706\" id=\"u79e1b706\">(1) 为函数定义类型</span></h3><p data-lake-id=\"u287a4203\" id=\"u287a4203\"><span data-lake-id=\"u5b5d8abe\" id=\"u5b5d8abe\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以给函数定义类型，这个定义包括对参数和返回值的类型定义，我们先来看简单的定义写法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22function%20add(arg1%3A%20number%2C%20arg2%3A%20number)%3A%20number%20%7B%5Cn%20%20return%20x%20%2B%20y%3B%5Cn%7D%5Cn%2F%2F%20%E6%88%96%E8%80%85%5Cnconst%20add%20%3D%20(arg1%3A%20number%2C%20arg2%3A%20number)%3A%20number%20%3D%3E%20%7B%5Cn%20%20return%20x%20%2B%20y%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22zV573%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub57e2642\" id=\"ub57e2642\"><span data-lake-id=\"u3e6243d5\" id=\"u3e6243d5\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在上面的例子中我们用function和箭头函数两种形式定义了add函数，以展示如何定义函数类型。这里参数 arg1 和 arg2 都是数值类型，最后通过相加得到的结果也是数值类型。</span></p><p data-lake-id=\"u214a565a\" id=\"u214a565a\"><span data-lake-id=\"u1ffaa7a0\" id=\"u1ffaa7a0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">如果在这里省略参数的类型，TypeScript 会默认这个参数是 any 类型；如果省略返回值的类型，如果函数无返回值，那么 TypeScript 会默认函数返回值是 void 类型；如果函数有返回值，那么 TypeScript 会根据我们定义的逻辑推断出返回类型。</span></p><h3 data-lake-id=\"Pm9fQ\" id=\"Pm9fQ\"><span data-lake-id=\"ud4b95eb1\" id=\"ud4b95eb1\">(2) 完整的函数类型</span></h3><p data-lake-id=\"ud69e4405\" id=\"ud69e4405\"><span data-lake-id=\"u0f2dd184\" id=\"u0f2dd184\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">一个函数的定义包括函数名、参数、逻辑和返回值。我们为一个函数定义类型时，完整的定义应该包括参数类型和返回值类型。上面的例子中，我们都是在定义函数的指定参数类型和返回值类型。接下来我们看下，如何定义一个完整的函数类型，以及用这个函数类型来规定一个函数定义时参数和返回值需要符合的类型。先来看例子然后再进行解释：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22let%20add%3A%20(x%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%3B%5Cnadd%20%3D%20(arg1%3A%20number%2C%20arg2%3A%20number)%3A%20number%20%3D%3E%20arg1%20%2B%20arg2%3B%5Cnadd%20%3D%20(arg1%3A%20string%2C%20arg2%3A%20string)%3A%20string%20%3D%3E%20arg1%20%2B%20arg2%3B%20%2F%2F%20error%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22KZIJ4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u359ca4f9\" id=\"u359ca4f9\"><span data-lake-id=\"ueb829808\" id=\"ueb829808\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面这个例子中，我们首先定义了一个变量 add，给它指定了函数类型，也就是(x: number, y: number) =&gt; number，这个函数类型包含参数和返回值的类型。然后我们给 add 赋了一个实际的函数，这个函数参数类型和返回类型都和函数类型中定义的一致，所以可以赋值。后面我们又给它赋了一个新函数，而这个函数的参数类型和返回值类型都是 string 类型，这时就会报如下错误：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%20%20%20%20%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%5C%22(arg1%3A%20string%2C%20arg2%3A%20string)%20%3D%3E%20string%5C%22%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22(x%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%5C%22%E3%80%82%20%20%20%E5%8F%82%E6%95%B0%5C%22arg1%5C%22%E5%92%8C%5C%22x%5C%22%20%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%85%BC%E5%AE%B9%E3%80%82%20%20%20%20%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E3%80%82%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22njnr8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4c2f2e5f\" id=\"u4c2f2e5f\"><span data-lake-id=\"u5e6dd5da\" id=\"u5e6dd5da\" class=\"lake-fontsize-18\"> <br /></span><span data-lake-id=\"ua1b1c2b0\" id=\"ua1b1c2b0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">函数中如果使用了函数体之外定义的变量，这个变量的类型是不体现在函数类型定义的。</span></p><h3 data-lake-id=\"hmuWo\" id=\"hmuWo\"><span data-lake-id=\"u71867e44\" id=\"u71867e44\">(3) 使用接口定义函数类型</span></h3><p data-lake-id=\"u567a75fc\" id=\"u567a75fc\"><span data-lake-id=\"u496b3508\" id=\"u496b3508\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">使用接口定义函数类型：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Add%20%7B%5Cn%20%20(x%3A%20number%2C%20y%3A%20number)%3A%20number%3B%5Cn%7D%5Cnlet%20add%3A%20Add%20%3D%20(arg1%3A%20string%2C%20arg2%3A%20string)%3A%20string%20%3D%3E%20arg1%20%2B%20arg2%3B%20%2F%2F%20error%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%E2%80%9C(arg1%3A%20string%2C%20arg2%3A%20string)%20%3D%3E%20string%E2%80%9D%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%E2%80%9CAdd%E2%80%9D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YqWWJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9dd24926\" id=\"u9dd24926\"><span data-lake-id=\"u15b6bf75\" id=\"u15b6bf75\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">这里我们通过接口的形式定义函数类型，这个接口Add定义了这个结构是一个函数，两个参数类型都是number类型，返回值也是number类型。然后我们指定变量add类型为Add时，再要给add赋值，就必须是一个函数，且参数类型和返回值类型都要满足接口Add，显然例子中这个函数并不满足条件，所以报错了。</span></p><h3 data-lake-id=\"OKKqq\" id=\"OKKqq\"><span data-lake-id=\"uddacc6a8\" id=\"uddacc6a8\">(4) 使用类型别名</span></h3><p data-lake-id=\"u207866e7\" id=\"u207866e7\"><span data-lake-id=\"ue44c6109\" id=\"ue44c6109\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以使用类型别名来定义函数类型，使用类型别名定义函数类型更直观易读，我们来看一下具体的写法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22type%20Add%20%3D%20(x%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%3B%5Cnlet%20add%3A%20Add%20%3D%20(arg1%3A%20string%2C%20arg2%3A%20string)%3A%20string%20%3D%3E%20arg1%20%2B%20arg2%3B%20%2F%2F%20error%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%E2%80%9C(arg1%3A%20string%2C%20arg2%3A%20string)%20%3D%3E%20string%E2%80%9D%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%E2%80%9CAdd%E2%80%9D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22elbrS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3047348a\" id=\"u3047348a\"><span data-lake-id=\"u8335e365\" id=\"u8335e365\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">使用type关键字可以为原始值、联合类型、元组以及任何我们定义的类型起一个别名。上面定义了 Add 这个别名后，Add就成为了一个和(x: number, y: number) =&gt; number一致的类型定义。例子中定义了Add类型，指定add类型为Add，但是给add赋的值并不满足Add类型要求，所以报错了。</span></p><h2 data-lake-id=\"FWfKA\" id=\"FWfKA\"><span data-lake-id=\"u1f7fc06e\" id=\"u1f7fc06e\">2.参数</span></h2><h3 data-lake-id=\"dDcXy\" id=\"dDcXy\"><span data-lake-id=\"u7e12258d\" id=\"u7e12258d\">(1) 可选参数</span></h3><p data-lake-id=\"ufba54213\" id=\"ufba54213\"><span data-lake-id=\"ubed52d26\" id=\"ubed52d26\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">TypeScript 会帮我们在编写代码的时候就检查出调用函数时参数中存在的一些错误，先看下面例子：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22type%20Add%20%3D%20(x%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%3B%5Cnlet%20add%3A%20Add%20%3D%20(arg1%3A%20string%2C%20arg2%3A%20string)%3A%20string%20%3D%3E%20arg1%20%2B%20arg2%3B%5Cn%5Cnadd(1%2C%202)%3B%20%2F%2F%20right%5Cnadd(1%2C%202%2C%203)%3B%20%2F%2F%20error%20%E5%BA%94%E6%9C%89%202%20%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%BD%86%E8%8E%B7%E5%BE%97%203%20%E4%B8%AA%5Cnadd(1)%3B%20%2F%2F%20error%20%E5%BA%94%E6%9C%89%202%20%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%BD%86%E8%8E%B7%E5%BE%97%201%20%E4%B8%AA%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22C90gm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u433330f5\" id=\"u433330f5\"><span data-lake-id=\"u0b63bec8\" id=\"u0b63bec8\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 JS 中，上面例子中最后两个函数调用都不会报错, 只不过</span><span data-lake-id=\"u545109ba\" id=\"u545109ba\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">add(1, 2, 3)</span><span data-lake-id=\"u47f35278\" id=\"u47f35278\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">可以返回正确结果</span><span data-lake-id=\"u4cafe004\" id=\"u4cafe004\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">3</span><span data-lake-id=\"u6bd10254\" id=\"u6bd10254\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，</span><span data-lake-id=\"uc07866a1\" id=\"uc07866a1\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">add(1)</span><span data-lake-id=\"u63d3304d\" id=\"u63d3304d\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">会返回</span><span data-lake-id=\"ub3fec046\" id=\"ub3fec046\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">NaN</span><span data-lake-id=\"u74a9ac14\" id=\"u74a9ac14\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">。</span></p><p data-lake-id=\"u6a483425\" id=\"u6a483425\"><span data-lake-id=\"u179fb65e\" id=\"u179fb65e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">但有时候，我们的函数有些参数不是必须的，是可选的。在学习接口的时候我们学习过，可选参数只需在参数名后跟随一个</span><span data-lake-id=\"u446ac7c0\" id=\"u446ac7c0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">?</span><span data-lake-id=\"u3802f3e2\" id=\"u3802f3e2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">即可。但是接口形式的定义和今天学到的函数类型定义有一点区别，那就是参数位置的要求：</span></p><p data-lake-id=\"u1d7624a5\" id=\"u1d7624a5\"><span data-lake-id=\"u4b500d62\" id=\"u4b500d62\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">接口形式定义的函数类型必选参数和可选参数的位置前后是无所谓的，但是今天学到的定义形式，可选参数必须放在必选参数后面，这和在 JS 中定义函数是一致的。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22type%20Add%20%3D%20(x%3F%3A%20number%2C%20y%3A%20number)%20%3D%3E%20number%3B%20%2F%2F%20error%20%E5%BF%85%E9%80%89%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E4%BD%8D%E4%BA%8E%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%E5%90%8E%E3%80%82%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OzWbd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub88a2466\" id=\"ub88a2466\"><span data-lake-id=\"u69d71643\" id=\"u69d71643\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在TypeScript中，可选参数放到最后才行，上面例子中把可选参数x放到了必选参数y前面，所以报错了；但是在 JavaScript 中，其实是没有可选参数这个概念的，只不过是我们在写逻辑的时候，我们可能会判断某个参数是否为undefined，如果是则说明调用该函数的时候没有传这个参数，要做下兼容处理；而如果几个参数中，前面的参数是可不传的，后面的参数是需要传的，就需要在该可不传的参数位置传入一个 undefined 占位才行。</span></p><h3 data-lake-id=\"bjNGa\" id=\"bjNGa\"><span data-lake-id=\"u67d1683d\" id=\"u67d1683d\">(2) 默认参数</span></h3><p data-lake-id=\"u98026991\" id=\"u98026991\"><span data-lake-id=\"ua12f6a07\" id=\"ua12f6a07\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 ES6 标准出来之前，我们的默认参数实现起来比较繁琐：</span></p><p data-lake-id=\"u728d9feb\" id=\"u728d9feb\"><span data-lake-id=\"u5fadb8cb\" id=\"u5fadb8cb\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">// javascript</span><span data-lake-id=\"uebbd31fd\" id=\"uebbd31fd\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ubb3505b0\" id=\"ubb3505b0\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">var</span><span data-lake-id=\"uee67df00\" id=\"uee67df00\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> count </span><span data-lake-id=\"u1e251a69\" id=\"u1e251a69\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u6d57fc34\" id=\"u6d57fc34\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u75e8d68d\" id=\"u75e8d68d\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">0</span><span data-lake-id=\"u39daca83\" id=\"u39daca83\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"ubcf74868\" id=\"ubcf74868\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"uef5bbc33\" id=\"uef5bbc33\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">function</span><span data-lake-id=\"ua1f287dd\" id=\"ua1f287dd\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u9ceca4a7\" id=\"u9ceca4a7\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">countUp</span><span data-lake-id=\"u388f9bf6\" id=\"u388f9bf6\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"u4a4b61b7\" id=\"u4a4b61b7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">step</span><span data-lake-id=\"u488fb557\" id=\"u488fb557\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">)</span><span data-lake-id=\"uc9a5ac64\" id=\"uc9a5ac64\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u1961221f\" id=\"u1961221f\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"u7da136f6\" id=\"u7da136f6\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">   step </span><span data-lake-id=\"u84be9345\" id=\"u84be9345\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u9cd1b739\" id=\"u9cd1b739\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> step </span><span data-lake-id=\"u763b439b\" id=\"u763b439b\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">||</span><span data-lake-id=\"ub1b15b85\" id=\"ub1b15b85\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ua87ea462\" id=\"ua87ea462\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">1</span><span data-lake-id=\"u63ea321e\" id=\"u63ea321e\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u56fa5d9b\" id=\"u56fa5d9b\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">   count </span><span data-lake-id=\"u981ccf33\" id=\"u981ccf33\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">+=</span><span data-lake-id=\"ua0aef47c\" id=\"ua0aef47c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> step</span><span data-lake-id=\"uc03585bc\" id=\"uc03585bc\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u58cbb1ba\" id=\"u58cbb1ba\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u12e58eab\" id=\"u12e58eab\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">}</span></p><p data-lake-id=\"u734b1dc3\" id=\"u734b1dc3\"><span data-lake-id=\"ufe0a0c54\" id=\"ufe0a0c54\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面我们定义了一个计数器增值函数，这个函数有一个参数 step，即每次增加的步长，如果不传入参数，那么 step 接受到的就是 undefined，undefined 转换为布尔值是 false，所以</span><span data-lake-id=\"u8d40508f\" id=\"u8d40508f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">step || 1</span><span data-lake-id=\"u515b0aa5\" id=\"u515b0aa5\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">这里取了 1，从而达到了不传参数默认 step === 1 的效果。</span></p><p data-lake-id=\"ub12bce7f\" id=\"ub12bce7f\"><span data-lake-id=\"u2fd7d668\" id=\"u2fd7d668\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 ES6 中，我们定义函数时给参数设默认值就很方便了，直接在参数后面使用等号连接默认值即可：</span></p><p data-lake-id=\"u47c13ec9\" id=\"u47c13ec9\"><span data-lake-id=\"ub7ebc78f\" id=\"ub7ebc78f\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">// javascript</span><span data-lake-id=\"uafcbc4a7\" id=\"uafcbc4a7\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u1762db56\" id=\"u1762db56\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"ue892179b\" id=\"ue892179b\" class=\"lake-fontsize-18\"> count </span><span data-lake-id=\"udb096184\" id=\"udb096184\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u3402bcdc\" id=\"u3402bcdc\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ucd1f4896\" id=\"ucd1f4896\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">0</span><span data-lake-id=\"u809f063f\" id=\"u809f063f\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u083898b2\" id=\"u083898b2\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u384a77f6\" id=\"u384a77f6\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"ud85db153\" id=\"ud85db153\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u42423ad8\" id=\"u42423ad8\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">countUp</span><span data-lake-id=\"u0bdc050d\" id=\"u0bdc050d\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uc8761841\" id=\"uc8761841\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u441e7434\" id=\"u441e7434\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ucab30748\" id=\"ucab30748\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"u46fef645\" id=\"u46fef645\" class=\"lake-fontsize-18\">step </span><span data-lake-id=\"u532ae4fe\" id=\"u532ae4fe\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"ud1874598\" id=\"ud1874598\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ub9622f68\" id=\"ub9622f68\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">1</span><span data-lake-id=\"ub240afd2\" id=\"ub240afd2\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">)</span><span data-lake-id=\"u24e3093c\" id=\"u24e3093c\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uf1061307\" id=\"uf1061307\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=&gt;</span><span data-lake-id=\"u0ef39e58\" id=\"u0ef39e58\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u63b5dcc5\" id=\"u63b5dcc5\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"u9fa49ffe\" id=\"u9fa49ffe\" class=\"lake-fontsize-18\">   count </span><span data-lake-id=\"ufe025be4\" id=\"ufe025be4\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">+=</span><span data-lake-id=\"uacd41ff5\" id=\"uacd41ff5\" class=\"lake-fontsize-18\"> step</span><span data-lake-id=\"u566d9811\" id=\"u566d9811\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u2d4d3024\" id=\"u2d4d3024\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u9d4d9204\" id=\"u9d4d9204\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">};</span></p><p data-lake-id=\"u1db5e5a4\" id=\"u1db5e5a4\"><span data-lake-id=\"ud054e55e\" id=\"ud054e55e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">你会发现，可选参数和带默认值的参数在函数调用时都是可以不传实参的，但是区别在于定义函数的时候，可选参数必须放在必选参数后面，而带默认值的参数则可放在必须参数前后都可。</span></p><p data-lake-id=\"ua1b63ed0\" id=\"ua1b63ed0\"><span data-lake-id=\"u0255a2bc\" id=\"u0255a2bc\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">当我们为参数指定了默认参数的时候，TypeScript 会识别默认参数的类型；当我们在调用函数时，如果给这个带默认值的参数传了别的类型的参数则会报错：</span></p><p data-lake-id=\"u9bd876a2\" id=\"u9bd876a2\"><span data-lake-id=\"uc0c729db\" id=\"uc0c729db\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"u0573b462\" id=\"u0573b462\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u313fc8ff\" id=\"u313fc8ff\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">add</span><span data-lake-id=\"ud3069bd7\" id=\"ud3069bd7\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u06e1baed\" id=\"u06e1baed\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u9d920da8\" id=\"u9d920da8\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u14a2848c\" id=\"u14a2848c\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"u203f6830\" id=\"u203f6830\" class=\"lake-fontsize-18\">x</span><span data-lake-id=\"ud264a4d0\" id=\"ud264a4d0\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"ue46f04ef\" id=\"ue46f04ef\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u76db5eb9\" id=\"u76db5eb9\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"u27ec46eb\" id=\"u27ec46eb\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"uab52afa5\" id=\"uab52afa5\" class=\"lake-fontsize-18\"> y </span><span data-lake-id=\"u0c3aec92\" id=\"u0c3aec92\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u21c3b2a1\" id=\"u21c3b2a1\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ue34130b6\" id=\"ue34130b6\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">2</span><span data-lake-id=\"u42e05da8\" id=\"u42e05da8\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">)</span><span data-lake-id=\"u1b003212\" id=\"u1b003212\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u91cffaac\" id=\"u91cffaac\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=&gt;</span><span data-lake-id=\"u014a3584\" id=\"u014a3584\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u64b04ff8\" id=\"u64b04ff8\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"ub04816b5\" id=\"ub04816b5\" class=\"lake-fontsize-18\">   </span><span data-lake-id=\"u644a8fdb\" id=\"u644a8fdb\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">return</span><span data-lake-id=\"u0e6124a7\" id=\"u0e6124a7\" class=\"lake-fontsize-18\"> x </span><span data-lake-id=\"u6d96b305\" id=\"u6d96b305\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">+</span><span data-lake-id=\"u95c4f34c\" id=\"u95c4f34c\" class=\"lake-fontsize-18\"> y</span><span data-lake-id=\"u07951b86\" id=\"u07951b86\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"u821610fd\" id=\"u821610fd\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u357be4b9\" id=\"u357be4b9\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">};</span><span data-lake-id=\"u69b26c91\" id=\"u69b26c91\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"ufe1d87d9\" id=\"ufe1d87d9\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">add</span><span data-lake-id=\"ub16f18d4\" id=\"ub16f18d4\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"u9e25bf4c\" id=\"u9e25bf4c\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">1</span><span data-lake-id=\"u7476a219\" id=\"u7476a219\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"ucc5f5c13\" id=\"ucc5f5c13\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u7ab96b95\" id=\"u7ab96b95\" class=\"lake-fontsize-18\" style=\"color: rgb(120, 171, 18)\">&quot;a&quot;</span><span data-lake-id=\"u74a7ebcf\" id=\"u74a7ebcf\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">);</span><span data-lake-id=\"u7279be1d\" id=\"u7279be1d\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u240fccc0\" id=\"u240fccc0\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">// error 类型&quot;string&quot;的参数不能赋给类型&quot;number&quot;的参数</span></p><p data-lake-id=\"u9f7cce25\" id=\"u9f7cce25\"><span data-lake-id=\"u4aa705bb\" id=\"u4aa705bb\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">当然了，你也可以显式地给 y 设置类型：</span></p><p data-lake-id=\"u5686eeb2\" id=\"u5686eeb2\"><span data-lake-id=\"u2d11a769\" id=\"u2d11a769\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"u94fc595e\" id=\"u94fc595e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u3272952a\" id=\"u3272952a\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">add</span><span data-lake-id=\"u819f5e14\" id=\"u819f5e14\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ub12f1b77\" id=\"ub12f1b77\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u2bf17edb\" id=\"u2bf17edb\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u0a87bb27\" id=\"u0a87bb27\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"ua1cafe7f\" id=\"ua1cafe7f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">x</span><span data-lake-id=\"uac554d3c\" id=\"uac554d3c\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"u542b7178\" id=\"u542b7178\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u8bfc4525\" id=\"u8bfc4525\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"u8027368c\" id=\"u8027368c\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"uf8c7219d\" id=\"uf8c7219d\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> y</span><span data-lake-id=\"u8114e260\" id=\"u8114e260\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"u661f34cb\" id=\"u661f34cb\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u4434dc95\" id=\"u4434dc95\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"ue3ef0695\" id=\"ue3ef0695\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u8a7476e5\" id=\"u8a7476e5\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u4769ae96\" id=\"u4769ae96\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"uf962b6cc\" id=\"uf962b6cc\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">2</span><span data-lake-id=\"u7c3ea2e0\" id=\"u7c3ea2e0\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">)</span><span data-lake-id=\"uc8974540\" id=\"uc8974540\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u4df5b6c0\" id=\"u4df5b6c0\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=&gt;</span><span data-lake-id=\"u9b5a253c\" id=\"u9b5a253c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ub4dd647e\" id=\"ub4dd647e\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"u40e1ec02\" id=\"u40e1ec02\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">   </span><span data-lake-id=\"u57bbd32d\" id=\"u57bbd32d\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">return</span><span data-lake-id=\"u994440ef\" id=\"u994440ef\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> x </span><span data-lake-id=\"u5bdfdba2\" id=\"u5bdfdba2\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">+</span><span data-lake-id=\"u326297b2\" id=\"u326297b2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> y</span><span data-lake-id=\"u027d62c9\" id=\"u027d62c9\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">;</span><span data-lake-id=\"uf4c16287\" id=\"uf4c16287\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"ucfb26c5b\" id=\"ucfb26c5b\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">};</span></p><h3 data-lake-id=\"xTpRY\" id=\"xTpRY\"><span data-lake-id=\"ue8a0384c\" id=\"ue8a0384c\">(3) 剩余参数</span></h3><p data-lake-id=\"u06480c88\" id=\"u06480c88\"><span data-lake-id=\"u25ec8875\" id=\"u25ec8875\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 JS 中，如果我们定义一个函数，这个函数可以输入任意个数的参数，那么我们就无法在定义参数列表的时候挨个定义。在 ES6 发布之前，我们需要用到 arguments 来获取参数列表。arguments 是每一个函数都包含的一个类数组对象，它包含在函数调用时传入函数的所有实际参数（简称实参），它还包含一个 length 属性，记录参数个数。来看下面的例子，我们来模拟实现函数的重载：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%2F%2F%20javascript%5Cnfunction%20handleData()%20%7B%5Cn%20%20if%20(arguments.length%20%3D%3D%3D%201)%20return%20arguments%5B0%5D%20*%202%3B%5Cn%20%20else%20if%20(arguments.length%20%3D%3D%3D%202)%20return%20arguments%5B0%5D%20*%20arguments%5B1%5D%3B%5Cn%20%20else%20return%20Array.prototype.slice.apply(arguments).join(%5C%22_%5C%22)%3B%5Cn%7D%5CnhandleData(2)%3B%20%2F%2F%204%5CnhandleData(2%2C%203)%3B%20%2F%2F%206%5CnhandleData(1%2C%202%2C%203%2C%204%2C%205)%3B%20%2F%2F%20'1_2_3_4_5'%5Cn%2F%2F%20%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E5%A6%82%E6%9E%9C%E5%9C%A8TypeScript%E7%8E%AF%E5%A2%83%E4%B8%AD%EF%BC%8C%E4%B8%89%E4%B8%AA%E5%AF%B9handleData%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E9%83%BD%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%8C%E5%9B%A0%E4%B8%BAhandleData%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%B6%E5%80%99%E6%B2%A1%E6%9C%89%E5%8F%82%E6%95%B0%E3%80%82%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22x8LwZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4226304f\" id=\"u4226304f\"><span data-lake-id=\"ua4ff5e71\" id=\"ua4ff5e71\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面这个函数通过判断传入实参的个数，做出不同的处理并返回结果。else 后面的逻辑是如果实参个数不为 1 和 2，那么将这些参数拼接成以&quot;_&quot;连接的字符串。</span></p><p data-lake-id=\"u37a5fae5\" id=\"u37a5fae5\"><span data-lake-id=\"ub7a13bc7\" id=\"ub7a13bc7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">你应该注意到了我们使用</span><span data-lake-id=\"u43b8f9d3\" id=\"u43b8f9d3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">Array.prototype.slice.apply(arguments)</span><span data-lake-id=\"ud68d2c37\" id=\"ud68d2c37\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">对 arguments 做了处理，前面我们讲过 arguments 不是数组，而是类数组对象，如果直接在 arguments 调用 join 方法，它是没有这个方法的。所以我们通过这个处理得到一个包含 arguments 中所有元素的真实数组。</span></p><p data-lake-id=\"uca2684b0\" id=\"uca2684b0\"><span data-lake-id=\"u59180aed\" id=\"u59180aed\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 ES6 中，加入了&quot;…&quot;拓展运算符，它可以将一个函数或对象进行拆解。它还支持用在函数的参数列表中，用来处理任意数量的参数：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20handleData%20%3D%20(arg1%2C%20...args)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E9%87%8C%E7%9C%81%E7%95%A5%E9%80%BB%E8%BE%91%5Cn%20%20console.log(args)%3B%5Cn%7D%3B%5CnhandleData(1%2C%202%2C%203%2C%204%2C%205)%3B%20%2F%2F%20%5B%202%2C%203%2C%204%2C%205%20%5D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22R3Ipw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uae52fc9f\" id=\"uae52fc9f\"><span data-lake-id=\"u0a6b2078\" id=\"u0a6b2078\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">可以看到，args 是除了 arg1 之外的所有实参的集合，它是一个数组。</span></p><p data-lake-id=\"u234b8182\" id=\"u234b8182\"><span data-lake-id=\"ue6906ed3\" id=\"ue6906ed3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">补充：&quot;…&quot;运算符可以拆解数组和对象，比如：arr1 = [1, 2]，arr2 = [3, 4]，那么[…arr1, …arr2]的结果就是[1, 2, 3, 4]，他还可以用在方法的参数中：如果使用 arr1.push(arr2)，则 arr1 结果是[1, 2, [3, 4]]，如果你想让他们合并成一个函数而不使用 concat 方法，就可以使用 arr1.push(…arr2)。还有对象的使用方法：obj1 = { a: ‘aa’ }，obj2 = { b: ‘bb’ }，则{ …obj1, …obj2 }的结果是{ a: ‘aa’, b: ‘bb’ }。</span></p><p data-lake-id=\"u1a2cce7e\" id=\"u1a2cce7e\"><span data-lake-id=\"u0bde6c17\" id=\"u0bde6c17\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 TypeScript 中你可以为剩余参数指定类型，先来看例子：</span></p><p data-lake-id=\"u4978bf5d\" id=\"u4978bf5d\"><span data-lake-id=\"u2e18ffe8\" id=\"u2e18ffe8\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">const</span><span data-lake-id=\"ue65dd652\" id=\"ue65dd652\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u4b35cd75\" id=\"u4b35cd75\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">handleData</span><span data-lake-id=\"u483ed5cf\" id=\"u483ed5cf\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u3aa95b37\" id=\"u3aa95b37\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=</span><span data-lake-id=\"u1c642637\" id=\"u1c642637\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uda9552f8\" id=\"uda9552f8\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"udf2dd0e9\" id=\"udf2dd0e9\" class=\"lake-fontsize-18\">arg1</span><span data-lake-id=\"u67018374\" id=\"u67018374\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"ud8fd6a2b\" id=\"ud8fd6a2b\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u8af1891f\" id=\"u8af1891f\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"u88ae2160\" id=\"u88ae2160\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"uf6f81fe7\" id=\"uf6f81fe7\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u8793c238\" id=\"u8793c238\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">...</span><span data-lake-id=\"u9d8d75bf\" id=\"u9d8d75bf\" class=\"lake-fontsize-18\">args</span><span data-lake-id=\"uc840835e\" id=\"uc840835e\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">:</span><span data-lake-id=\"ue767f36a\" id=\"ue767f36a\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u45d04a4d\" id=\"u45d04a4d\" class=\"lake-fontsize-18\" style=\"color: rgb(54, 188, 214)\">number</span><span data-lake-id=\"u9252fe69\" id=\"u9252fe69\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">[])</span><span data-lake-id=\"ud5a5e620\" id=\"ud5a5e620\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u4634b0cb\" id=\"u4634b0cb\" class=\"lake-fontsize-18\" style=\"color: rgb(166, 127, 89)\">=&gt;</span><span data-lake-id=\"uea3d5782\" id=\"uea3d5782\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u70490bb3\" id=\"u70490bb3\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">{</span><span data-lake-id=\"uabf0854b\" id=\"uabf0854b\" class=\"lake-fontsize-18\">   </span><span data-lake-id=\"ube00a30e\" id=\"ube00a30e\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">//</span><span data-lake-id=\"uc94c1934\" id=\"uc94c1934\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uca529ea4\" id=\"uca529ea4\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">};</span><span data-lake-id=\"ue0340760\" id=\"ue0340760\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u4a8a1873\" id=\"u4a8a1873\" class=\"lake-fontsize-18\" style=\"color: rgb(249, 38, 114)\">handleData</span><span data-lake-id=\"u0ea6ea22\" id=\"u0ea6ea22\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">(</span><span data-lake-id=\"ub32e3698\" id=\"ub32e3698\" class=\"lake-fontsize-18\" style=\"color: rgb(174, 129, 255)\">1</span><span data-lake-id=\"u2dd82f26\" id=\"u2dd82f26\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">,</span><span data-lake-id=\"udfdc2aff\" id=\"udfdc2aff\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"u26cfb0e4\" id=\"u26cfb0e4\" class=\"lake-fontsize-18\" style=\"color: rgb(120, 171, 18)\">&quot;a&quot;</span><span data-lake-id=\"u675a6c26\" id=\"u675a6c26\" class=\"lake-fontsize-18\" style=\"color: rgb(153, 153, 153)\">);</span><span data-lake-id=\"u45d1db86\" id=\"u45d1db86\" class=\"lake-fontsize-18\"> </span><span data-lake-id=\"uc63e4ebb\" id=\"uc63e4ebb\" class=\"lake-fontsize-18\" style=\"color: rgb(112, 128, 144)\">// error 类型&quot;string&quot;的参数不能赋给类型&quot;number&quot;的参数</span></p><h2 data-lake-id=\"aCBbY\" id=\"aCBbY\"><span data-lake-id=\"ud3f05c82\" id=\"ud3f05c82\">3 函数重载，此重载vs彼重载</span></h2><p data-lake-id=\"ue128eb74\" id=\"ue128eb74\"><span data-lake-id=\"ucd61a494\" id=\"ucd61a494\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在其他一些强类型语言中，函数重载是指定义几个函数名相同，但参数个数或类型不同的函数，在调用时传入不同的参数，编译器会自动调用适合的函数。但是 JavaScript 作为一个动态语言是没有函数重载的，只能我们自己在函数体内通过判断参数的个数、类型来指定不同的处理逻辑。来看个简单的例子</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20handleData%20%3D%20value%20%3D%3E%20%7B%5Cn%20%20if%20(typeof%20value%20%3D%3D%3D%20%5C%22string%5C%22)%20%7B%5Cn%20%20%20%20return%20value.split(%5C%22%5C%22)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20value%5Cn%20%20%20%20%20%20.toString()%5Cn%20%20%20%20%20%20.split(%5C%22%5C%22)%5Cn%20%20%20%20%20%20.join(%5C%22_%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22iQHam%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u4753a889\" id=\"u4753a889\"><span data-lake-id=\"ufc5716c7\" id=\"ufc5716c7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">这个例子中，当传入的参数为字符串时，将它进行切割，比如传入的是</span><span data-lake-id=\"ue7084b65\" id=\"ue7084b65\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">’abc’</span><span data-lake-id=\"ua2a5b04d\" id=\"ua2a5b04d\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，返回的将是数组</span><span data-lake-id=\"uc76e8e82\" id=\"uc76e8e82\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">[‘a’, ‘b’, ‘c’]</span><span data-lake-id=\"u04b43add\" id=\"u04b43add\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">；如果传入的是一个数值类型，则将数字转为字符串然后切割成单个数字然后拼接成字符串，比如传入的是</span><span data-lake-id=\"u0cb21846\" id=\"u0cb21846\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">123</span><span data-lake-id=\"u6e231b84\" id=\"u6e231b84\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，则返回的是</span><span data-lake-id=\"ud4ce34f0\" id=\"ud4ce34f0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">’1_2_3’</span><span data-lake-id=\"udaa19829\" id=\"udaa19829\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">。你可以看到传入的参数类型不同，返回的值的类型是不同的，</span></p><p data-lake-id=\"u342e008f\" id=\"u342e008f\"><span data-lake-id=\"ud9c6e0c7\" id=\"ud9c6e0c7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 TypeScript 中有函数重载的概念，但并不是定义几个同名实体函数，然后根据不同的参数个数或类型来自动调用相应的函数。TypeScript的函数重载是在类型系统层面的，是为了更好地进行类型推断。TypeScript的函数重载通过为一个函数指定多个函数类型定义，从而对函数调用的返回值进行检查。来看例子：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22function%20handleData(x%3A%20string)%3A%20string%5B%5D%3B%20%2F%2F%20%E8%BF%99%E4%B8%AA%E6%98%AF%E9%87%8D%E8%BD%BD%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E6%8C%87%E5%AE%9A%E5%BD%93%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E4%B8%BAstring%E6%97%B6%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BAstring%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%83%E7%B4%A0%E6%9E%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84%5Cnfunction%20handleData(x%3A%20number)%3A%20string%3B%20%2F%2F%20%E8%BF%99%E4%B8%AA%E4%B9%9F%E6%98%AF%E9%87%8D%E8%BD%BD%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E6%8C%87%E5%AE%9A%E5%BD%93%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E4%B8%BAnumber%E6%97%B6%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%BAstring%5Cnfunction%20handleData(x%3A%20any)%3A%20any%20%7B%20%2F%2F%20%E8%BF%99%E4%B8%AA%E5%B0%B1%E6%98%AF%E9%87%8D%E8%BD%BD%E7%9A%84%E5%86%85%E5%AE%B9%E4%BA%86%EF%BC%8C%E4%BB%96%E6%98%AF%E5%AE%9E%E4%BD%93%E5%87%BD%E6%95%B0%EF%BC%8C%E4%B8%8D%E7%AE%97%E5%81%9A%E9%87%8D%E8%BD%BD%E7%9A%84%E9%83%A8%E5%88%86%5Cn%20%20if%20(typeof%20x%20%3D%3D%3D%20%5C%22string%5C%22)%20%7B%5Cn%20%20%20%20return%20x.split(%5C%22%5C%22)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20x%5Cn%20%20%20%20%20%20.toString()%5Cn%20%20%20%20%20%20.split(%5C%22%5C%22)%5Cn%20%20%20%20%20%20.join(%5C%22_%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5CnhandleData(%5C%22abc%5C%22).join(%5C%22_%5C%22)%3B%5CnhandleData(123).join(%5C%22_%5C%22)%3B%20%2F%2F%20error%20%E7%B1%BB%E5%9E%8B%5C%22string%5C%22%E4%B8%8A%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B1%9E%E6%80%A7%5C%22join%5C%22%5CnhandleData(false)%3B%20%2F%2F%20error%20%E7%B1%BB%E5%9E%8B%5C%22boolean%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8D%E8%83%BD%E8%B5%8B%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22number%5C%22%E7%9A%84%E5%8F%82%E6%95%B0%E3%80%82%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22rb3YX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7154a5a5\" id=\"u7154a5a5\"><span data-lake-id=\"ubd744698\" id=\"ubd744698\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">首先我们使用</span><span data-lake-id=\"u90cd0c6e\" id=\"u90cd0c6e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">function</span><span data-lake-id=\"u20b4a75c\" id=\"u20b4a75c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">关键字定义了两个同名的函数，但不同的是，函数没有实际的函数体逻辑，而是只定义函数名、参数及参数类型以及函数的返回值类型；而第三个使用</span><span data-lake-id=\"u6893b435\" id=\"u6893b435\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">function</span><span data-lake-id=\"u01b9b1c3\" id=\"u01b9b1c3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">定义的同名函数，是一个完整的实体函数，包含函数名、参数及参数类型、返回值类型和函数体；这三个定义组成了一个函数——完整的带有类型定义的函数，前两个</span><span data-lake-id=\"u96621bd6\" id=\"u96621bd6\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">function</span><span data-lake-id=\"uee76a511\" id=\"uee76a511\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">定义的就称为</span><em><span data-lake-id=\"u3bcf957f\" id=\"u3bcf957f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">函数重载</span></em><span data-lake-id=\"u7bd1fe82\" id=\"u7bd1fe82\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，而第三个</span><span data-lake-id=\"u9334a568\" id=\"u9334a568\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">function</span><span data-lake-id=\"u20f78e44\" id=\"u20f78e44\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">并不算重载；</span></p><p data-lake-id=\"udfadecd1\" id=\"udfadecd1\"><span data-lake-id=\"ucab11b79\" id=\"ucab11b79\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">然后我们来看下匹配规则，当调用这个函数并且传入参数的时候，会从上而下在函数重载里匹配和这个参数个数和类型匹配的重载。如例子中第一个调用，传入了一个字符串&quot;abc&quot;，它符合第一个重载，所以它的返回值应该是一个字符串组成的数组，数组是可以调用</span><span data-lake-id=\"u6e4946f9\" id=\"u6e4946f9\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">join</span><span data-lake-id=\"u9263a741\" id=\"u9263a741\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">方法的，所以这里没问题；</span></p><p data-lake-id=\"ub40ae018\" id=\"ub40ae018\"><span data-lake-id=\"u7a309c68\" id=\"u7a309c68\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">第二个调用传入的是一个数值类型的123，从上到下匹配重载是符合第二个的，返回值应该是字符串类型。但这里拿到返回值后调用了数组方法</span><span data-lake-id=\"u464c16e8\" id=\"u464c16e8\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">join</span><span data-lake-id=\"ub96542d5\" id=\"ub96542d5\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，这肯定会报错了，因为字符串无法调用这个方法；</span></p><p data-lake-id=\"ua6437e51\" id=\"ua6437e51\"><span data-lake-id=\"ue0cb4608\" id=\"ue0cb4608\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">最后调用时传入了一个布尔类型值false，匹配不到重载，所以会报错；</span></p><p data-lake-id=\"u748d77da\" id=\"u748d77da\"><span data-lake-id=\"uf6e024ae\" id=\"uf6e024ae\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">最后还有一点要注意的是，这里重载只能用 function 来定义，不能使用接口、类型别名等。</span></p><h3 data-lake-id=\"cUviX\" id=\"cUviX\"><span data-lake-id=\"u28c75252\" id=\"u28c75252\" style=\"color: rgb(28, 31, 33)\">小结</span></h3><p data-lake-id=\"u51de3f77\" id=\"u51de3f77\"><span data-lake-id=\"ua587a058\" id=\"ua587a058\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">学习了函数类型的三种定义方式：</span></p><ul list=\"u4e86bb54\"><li fid=\"u8fb659cc\" data-lake-id=\"u6f7cae2f\" id=\"u6f7cae2f\"><span data-lake-id=\"u8cdbcb28\" id=\"u8cdbcb28\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">基本方式：直接在定义函数实体语句中，指定参数和返回值类型；</span></li><li fid=\"u8fb659cc\" data-lake-id=\"u669933e6\" id=\"u669933e6\"><span data-lake-id=\"u008ae9e0\" id=\"u008ae9e0\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">接口形式：这种方式我们在讲接口的时候已经学习过了；</span></li><li fid=\"u8fb659cc\" data-lake-id=\"u7e3707c3\" id=\"u7e3707c3\"><span data-lake-id=\"ufedaee3f\" id=\"ufedaee3f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">类型别名：这种方式是比较推荐的写法，比较简洁清晰。</span></li></ul><p data-lake-id=\"ue48e2d83\" id=\"ue48e2d83\"><span data-lake-id=\"u63822263\" id=\"u63822263\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">详细学习了函数参数的三个知识点：</span></p><ul list=\"u07aeecbd\"><li fid=\"u87b29eae\" data-lake-id=\"ua490c39c\" id=\"ua490c39c\"><span data-lake-id=\"uef6964df\" id=\"uef6964df\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">可选参数：可选参数在JavaScript中可以实现，TypeScript中需要在该参数后面加个</span><span data-lake-id=\"ucbfac909\" id=\"ucbfac909\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">?</span><span data-lake-id=\"u2dc269b4\" id=\"u2dc269b4\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，且可选参数必须位于必选参数后面；；</span></li><li fid=\"u87b29eae\" data-lake-id=\"u7a7d6355\" id=\"u7a7d6355\"><span data-lake-id=\"uae51d485\" id=\"uae51d485\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">默认参数：这是在ES6标准中添加的语法，为函数参数指定默认参数，写法就是在参数名后面使用</span><span data-lake-id=\"u3f2fc5a2\" id=\"u3f2fc5a2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">=</span><span data-lake-id=\"u62aaa013\" id=\"u62aaa013\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">连接默认参数</span></li><li fid=\"u87b29eae\" data-lake-id=\"u98c06c98\" id=\"u98c06c98\"><span data-lake-id=\"u8957874a\" id=\"u8957874a\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">剩余参数：这也是在ES6中添加的语法，可以使用</span><span data-lake-id=\"u57464ed2\" id=\"u57464ed2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">...参数名</span><span data-lake-id=\"ue9b09045\" id=\"ue9b09045\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">来获取剩余任意多个参数，获取的是一个数组。</span></li></ul><p data-lake-id=\"ue34d2540\" id=\"ue34d2540\"><span data-lake-id=\"uf51e906b\" id=\"uf51e906b\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">学习了函数重载。着重强调的是，这里的函数重载区别于其他语言中的重载，TypeScript中的重载是为了针对不同参数个数和类型，推断返回值类型。</span></p><p data-lake-id=\"u54812ff1\" id=\"u54812ff1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639380599741-01dff690-389b-49c7-9943-6737d7ce0db4.jpeg%22%2C%22taskId%22%3A%22u070f9149-4014-4741-8932-98f9adecd7a%22%2C%22clientId%22%3A%22u4a462bc7-b87a-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bff500010be916000896.jpg%22%2C%22size%22%3A197840%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A896%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%BB%99%E8%8F%8C%E6%AC%BE%E5%AE%9A%E4%B9%89%E7%BE%8E%E5%9E%8B%2C%E8%BF%99%E4%B8%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E6%8B%AC%E5%AF%B9%E6%A2%A6%E6%95%99%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E9%BA%A6%E5%9E%8B%E5%AE%9A%E4%B9%89%20%E4%B8%BA%E7%94%BB%E6%95%99%E5%AE%9A%E4%B9%89%E7%BE%8E%E5%9E%8B%20%E5%A6%82%E6%9E%9C%E7%9C%81%E7%95%A5%E5%8F%82%E6%95%B0%E7%9A%84%E7%BE%8E%E5%9E%8B%2CTpesciipt%E4%BC%9A%E7%84%B6%E8%AE%A4%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E6%98%AFany%E8%B5%B0%E5%9E%8B%20%E6%88%91%E4%BB%AC%E5%B8%B8%E8%A6%81%E4%B8%BA%E9%9D%A2%E8%BD%AF%E8%B4%A2%E7%BB%99%E7%9A%84%E5%8F%98%E9%87%8D%E5%AE%9A%E4%B9%89%E5%AE%8C%E6%95%B4%E7%9A%84%E9%9B%B7%E5%86%9C%E6%98%AF%E5%9E%8B%2C%E5%8D%B3%E5%8C%85%E6%8B%AC%E5%8F%82%E6%95%B0%E7%BE%8E%E5%9E%8B%E5%92%8C%E8%BF%94%E5%9B%9E%E8%A3%85%E5%9E%8B%20%E5%AE%8C%E7%94%9F%E7%9A%84%E9%80%9A%E6%95%99%E6%94%AF%E5%9E%8B%20%E7%94%BB%E6%95%B0%E6%94%AF%E5%9E%8B%20%E5%8D%97%E5%86%9C%E4%B8%AD%E5%A6%82%E5%A4%8F%E4%BD%BF%E7%94%A8%5D%E6%95%99%E4%BD%93%E4%B9%8B%E5%A4%96%E5%AE%9A%E4%B9%89%E7%9A%84%E4%BA%A4%E9%87%8F%2C%E8%BF%99%E4%B8%AA%E8%90%A5%E8%91%A3%E7%9A%84%E8%B5%B0%E5%9E%8B%E6%98%AF%E4%B8%8D%E4%BD%93%E7%8E%B0%E5%9C%A8%E5%9B%AD%E6%AC%BE%E8%B5%B0%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%9A%84%20%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E6%94%AF%E5%9E%8B%20%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%B8%85%E6%99%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%B0%E6%94%AF%E5%9E%8B%20%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%E6%9D%A5%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%AC%BE%E8%A1%A8%E5%9E%8B%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%20%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%E5%AE%9A%E4%B9%89%E5%9B%AD%E6%95%B0%E8%A1%A8%E5%9E%8B%E6%9B%B4%E7%9B%B4%E9%85%8D%E6%98%93%E8%AF%BB%20Twesaript%E4%BC%9A%E8%BE%88%E6%88%91%E4%BB%AC%E5%9C%A8%E5%A6%88%E7%BD%97%E4%BB%A3%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E6%9D%BE%E6%9F%A5%E5%87%BA%E8%B0%83%E7%94%A8%E9%9D%A2%E5%86%9C%E6%97%B6%E5%8F%82%E6%95%99%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BE%AA%20%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%20%E6%8E%A8%E5%8F%A3%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E9%9D%A2%E5%86%9C%E8%B5%B0%E5%9E%8B%E5%A2%83%E5%B2%81%E6%95%99%E5%92%8C%E5%8F%AF%E9%80%89%E8%80%83%E6%AC%BE%E7%9A%84%E4%BD%8D%E9%9C%87%E7%9A%84%E5%90%8E%E6%98%AF%E6%97%A0%E6%89%80%E5%9F%A0%E7%9A%84%2C%E4%BD%86%E6%98%AF%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%88%B0%E7%9A%84%20%E5%AE%9A%E4%B9%89%E5%BD%A2%E5%BC%8F%2C%E5%8F%AF%E9%80%89%E6%A2%A6%E6%95%99%E5%BF%85%E7%88%B1%E5%81%9A%E5%9C%A8%E9%80%89%E6%A2%A6%E6%95%99%E5%90%8E%E9%9D%A2%2C%E8%BF%99%E5%92%8C%E5%9C%A8%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%89%AF%E8%BD%AF%E6%98%AF%E4%B8%80%E8%87%B4%E7%9A%84%20%E4%B8%BA%E5%87%BD%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%AE%9A%E4%B9%89%E5%A3%B3%E5%9E%8B%20%E9%BB%98%E8%AE%A4%E6%A2%A6%E6%95%B0%20%E5%8F%82%E6%95%B0%20%E5%9C%A8%E4%B8%AD%2C%E5%A6%82%E8%8F%9C%E7%B2%BE%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%9B%B2%E5%86%9C%2C%E8%BF%99%E4%B8%AA%E6%9B%B2%E6%95%99%E5%8F%AF%E4%BB%A5%E8%82%B4%E5%85%A5%E4%BB%BB%E6%84%8F%E4%B8%AA%E8%BD%AF%E7%9A%84%E6%95%99%2C%E4%B9%88%E6%88%91%E4%BB%AC%E5%B0%B1%E6%97%A0%E6%B3%95%20%E5%9C%A8%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%88%97%E6%9D%A5%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%AA%E5%AE%9A%E4%B9%89%20%E5%89%A9%E4%B8%9C%E6%A2%A6%E6%95%B0%20%E5%9C%A8%E5%8C%BA6%E5%8F%91%E5%B8%83%E4%B9%8B%E8%BE%93%2C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0wgurenti%E6%9D%A5%E8%8E%B7%E6%9C%80%E6%A2%A6%E6%88%91%E5%88%97%E8%A1%A8%2C%E9%9B%B7gmet%E6%98%AF%E6%AF%8F%E4%B8%80%E4%B8%AA%E8%8F%8C%E6%AC%BE%E6%99%BA%E5%8C%85%20%E5%90%AB%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BE%8E%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%20%E9%9B%B7%E5%86%9C%E9%87%8D%E8%BD%BD%E6%98%AF%E6%8C%87%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B8%AA%E8%8F%8C%E5%86%9C%E5%90%8D%E7%9B%B8%E9%97%B4%2C%E4%BD%86%E5%A4%9A%E6%95%99%E4%B8%AA%E6%A0%A1%E5%B0%86%E4%BA%A4%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E9%9D%A2%E5%86%9C%2C%E5%9C%A8%E8%B0%83%E7%94%A8%E6%97%B6%E4%BC%A0%E5%85%A5%E4%B8%8D%20%E7%9A%84%E5%8F%82%E6%95%99%2C%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E9%97%B2%E9%80%82%E5%90%88%E7%9A%84%E9%9D%A2%E6%95%B0%20larit%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E6%98%AF%E6%B2%A1%E6%9C%89%E9%9D%A2%E6%95%99%E9%87%8D%E8%BD%BD%E7%9A%84%2C%E5%8F%AA%E8%83%BD%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E5%9C%A8%E9%9D%A2%E7%89%A7%E4%BD%93%E5%86%85%E9%80%9A%E8%BF%87%E5%88%A4%E6%96%AD%E6%A2%A6%E6%9D%83%20%E7%9A%84%E4%B8%AA%E6%95%B0%2C%E6%98%AF%E5%9E%8B%E6%A1%88%E6%8C%87%E5%AE%9A%E4%B8%8D%E5%90%8C%E7%9A%84%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%20%E5%8D%A7%E6%95%B0%E9%87%8D%E8%BD%BD%20%E5%9C%A8Tpescipt%E4%B8%AD%E6%9C%89%E7%94%BB%E6%95%99%E9%87%8D%E8%BD%BD%E7%9A%84%E7%93%B6%E5%BF%B5%2C%E4%BD%86%E7%95%8C%E4%B8%8D%E6%98%AF%E5%AE%9A%E7%88%B6%E5%87%A0%E4%B8%AA%E9%97%AE%E5%90%8D%E4%BD%93%E8%8F%8C%E5%86%9C%2C%E7%83%AD%E5%90%8E%E6%91%86%E4%B8%8D%E9%97%B4%E7%9A%84%E7%88%B9%20%E6%95%B0%E4%B8%AA%E6%95%B0%E8%80%B3%E7%BE%8E%E5%9E%8B%E6%9D%A5%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E7%9B%B8%E5%BA%94%E7%9A%84%E9%9D%A2%E6%95%B0%20Tpesio%E7%9A%84%E6%9B%B2%E6%88%91%E9%87%8D%E6%88%91%26%E5%9C%A8%E4%BA%A4%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%B1%85%E9%9D%A2%E7%9A%84%2C%E6%98%AF%E4%B8%BA%5D%E6%9B%B4%E8%BD%A9%E5%9C%B0%E8%BF%9B%E8%A1%8C%E8%B5%B0%E5%9E%8B%E6%8E%A8%E6%96%AD%2C%E7%9A%84%E6%AC%BE%20%E9%87%8D%E8%BD%BD%E8%BF%87%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%9B%B4%E6%95%99%E6%8C%87%E5%AE%9A%E5%A4%9A%E4%B8%AA%E9%9D%A2%E6%88%91%E7%BE%8E%E5%9E%8B%E5%AE%9A%E4%B9%89%2C%E4%BB%8E%E8%80%8C%E5%AF%B9%E5%8D%A7%E5%86%9C%E8%B0%83%E7%94%A8%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%A3%80%E6%9F%A5%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A912.66547%2C%22y%22%3A23.771515%2C%22width%22%3A507.19503%2C%22height%22%3A19.093082000000003%2C%22text%22%3A%22%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%BB%99%E8%8F%8C%E6%AC%BE%E5%AE%9A%E4%B9%89%E7%BE%8E%E5%9E%8B%2C%E8%BF%99%E4%B8%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E6%8B%AC%E5%AF%B9%E6%A2%A6%E6%95%99%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E9%BA%A6%E5%9E%8B%E5%AE%9A%E4%B9%89%22%7D%2C%7B%22x%22%3A729.39514%2C%22y%22%3A44.098%2C%22width%22%3A118.46866%2C%22height%22%3A18.25105%2C%22text%22%3A%22%E4%B8%BA%E7%94%BB%E6%95%99%E5%AE%9A%E4%B9%89%E7%BE%8E%E5%9E%8B%22%7D%2C%7B%22x%22%3A908.91473%2C%22y%22%3A63.932762%2C%22width%22%3A437.92757000000006%2C%22height%22%3A18.664704%2C%22text%22%3A%22%E5%A6%82%E6%9E%9C%E7%9C%81%E7%95%A5%E5%8F%82%E6%95%B0%E7%9A%84%E7%BE%8E%E5%9E%8B%2CTpesciipt%E4%BC%9A%E7%84%B6%E8%AE%A4%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E6%98%AFany%E8%B5%B0%E5%9E%8B%22%7D%2C%7B%22x%22%3A911.4518%2C%22y%22%3A103.8774%2C%22width%22%3A579.7078999999999%2C%22height%22%3A17.70092000000001%2C%22text%22%3A%22%E6%88%91%E4%BB%AC%E5%B8%B8%E8%A6%81%E4%B8%BA%E9%9D%A2%E8%BD%AF%E8%B4%A2%E7%BB%99%E7%9A%84%E5%8F%98%E9%87%8D%E5%AE%9A%E4%B9%89%E5%AE%8C%E6%95%B4%E7%9A%84%E9%9B%B7%E5%86%9C%E6%98%AF%E5%9E%8B%2C%E5%8D%B3%E5%8C%85%E6%8B%AC%E5%8F%82%E6%95%B0%E7%BE%8E%E5%9E%8B%E5%92%8C%E8%BF%94%E5%9B%9E%E8%A3%85%E5%9E%8B%22%7D%2C%7B%22x%22%3A728.93933%2C%22y%22%3A122.555626%2C%22width%22%3A119.50213999999994%2C%22height%22%3A17.926883999999987%2C%22text%22%3A%22%E5%AE%8C%E7%94%9F%E7%9A%84%E9%80%9A%E6%95%99%E6%94%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A570.8512%2C%22y%22%3A141.72363%2C%22width%22%3A81.71313000000009%2C%22height%22%3A20.395969999999977%2C%22text%22%3A%22%E7%94%BB%E6%95%B0%E6%94%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A909.3598%2C%22y%22%3A142.46123%2C%22width%22%3A649.2883000000002%2C%22height%22%3A17.89634000000001%2C%22text%22%3A%22%E5%8D%97%E5%86%9C%E4%B8%AD%E5%A6%82%E5%A4%8F%E4%BD%BF%E7%94%A8%5D%E6%95%99%E4%BD%93%E4%B9%8B%E5%A4%96%E5%AE%9A%E4%B9%89%E7%9A%84%E4%BA%A4%E9%87%8F%2C%E8%BF%99%E4%B8%AA%E8%90%A5%E8%91%A3%E7%9A%84%E8%B5%B0%E5%9E%8B%E6%98%AF%E4%B8%8D%E4%BD%93%E7%8E%B0%E5%9C%A8%E5%9B%AD%E6%AC%BE%E8%B5%B0%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%9A%84%22%7D%2C%7B%22x%22%3A727.24%2C%22y%22%3A179.90036%2C%22width%22%3A172.23519999999996%2C%22height%22%3A20.17313999999999%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%99%E6%94%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A961.06775%2C%22y%22%3A181.61528%2C%22width%22%3A257.42945%2C%22height%22%3A18.19101999999998%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E6%B8%85%E6%99%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%95%B0%E6%94%AF%E5%9E%8B%22%7D%2C%7B%22x%22%3A892.7872%2C%22y%22%3A219.90688%2C%22width%22%3A293.21209999999996%2C%22height%22%3A18.553050000000013%2C%22text%22%3A%22%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%E6%9D%A5%E5%AE%9A%E4%B9%89%E9%9D%A2%E6%AC%BE%E8%A1%A8%E5%9E%8B%22%7D%2C%7B%22x%22%3A727.13635%2C%22y%22%3A242.54137%2C%22width%22%3A103.24205000000006%2C%22height%22%3A16.20856999999998%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%22%7D%2C%7B%22x%22%3A891.0196%2C%22y%22%3A262.502%2C%22width%22%3A294.65739999999994%2C%22height%22%3A16.535500000000013%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E9%BA%A6%E5%9E%8B%E5%88%AB%E5%90%8D%E5%AE%9A%E4%B9%89%E5%9B%AD%E6%95%B0%E8%A1%A8%E5%9E%8B%E6%9B%B4%E7%9B%B4%E9%85%8D%E6%98%93%E8%AF%BB%22%7D%2C%7B%22x%22%3A816.95984%2C%22y%22%3A334.02625%2C%22width%22%3A602.74226%2C%22height%22%3A23.242950000000008%2C%22text%22%3A%22Twesaript%E4%BC%9A%E8%BE%88%E6%88%91%E4%BB%AC%E5%9C%A8%E5%A6%88%E7%BD%97%E4%BB%A3%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E6%9D%BE%E6%9F%A5%E5%87%BA%E8%B0%83%E7%94%A8%E9%9D%A2%E5%86%9C%E6%97%B6%E5%8F%82%E6%95%99%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BE%AA%22%7D%2C%7B%22x%22%3A690.1626%2C%22y%22%3A367.9759%2C%22width%22%3A64.38490000000002%2C%22height%22%3A18.15092999999996%2C%22text%22%3A%22%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A817.90753%2C%22y%22%3A374.28836%2C%22width%22%3A649.23227%2C%22height%22%3A19.898939999999982%2C%22text%22%3A%22%E6%8E%A8%E5%8F%A3%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E9%9D%A2%E5%86%9C%E8%B5%B0%E5%9E%8B%E5%A2%83%E5%B2%81%E6%95%99%E5%92%8C%E5%8F%AF%E9%80%89%E8%80%83%E6%AC%BE%E7%9A%84%E4%BD%8D%E9%9C%87%E7%9A%84%E5%90%8E%E6%98%AF%E6%97%A0%E6%89%80%E5%9F%A0%E7%9A%84%2C%E4%BD%86%E6%98%AF%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%88%B0%E7%9A%84%22%7D%2C%7B%22x%22%3A816.5443%2C%22y%22%3A399.80566%2C%22width%22%3A566.6087%2C%22height%22%3A18.608040000000017%2C%22text%22%3A%22%E5%AE%9A%E4%B9%89%E5%BD%A2%E5%BC%8F%2C%E5%8F%AF%E9%80%89%E6%A2%A6%E6%95%99%E5%BF%85%E7%88%B1%E5%81%9A%E5%9C%A8%E9%80%89%E6%A2%A6%E6%95%99%E5%90%8E%E9%9D%A2%2C%E8%BF%99%E5%92%8C%E5%9C%A8%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%89%AF%E8%BD%AF%E6%98%AF%E4%B8%80%E8%87%B4%E7%9A%84%22%7D%2C%7B%22x%22%3A91.21639%2C%22y%22%3A431.04602%2C%22width%22%3A298.26448%2C%22height%22%3A25.04791%2C%22text%22%3A%22%E4%B8%BA%E5%87%BD%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%AE%9A%E4%B9%89%E5%A3%B3%E5%9E%8B%22%7D%2C%7B%22x%22%3A687.2855%2C%22y%22%3A438.3279%2C%22width%22%3A67.06350000000009%2C%22height%22%3A18.299019999999985%2C%22text%22%3A%22%E9%BB%98%E8%AE%A4%E6%A2%A6%E6%95%B0%22%7D%2C%7B%22x%22%3A572.2062%2C%22y%22%3A449.44562%2C%22width%22%3A40.38900000000001%2C%22height%22%3A21.80435%2C%22text%22%3A%22%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A816.7206%2C%22y%22%3A478.75278%2C%22width%22%3A646.2009999999999%2C%22height%22%3A19.51242000000002%2C%22text%22%3A%22%E5%9C%A8%E4%B8%AD%2C%E5%A6%82%E8%8F%9C%E7%B2%BE%E4%BB%AC%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%9B%B2%E5%86%9C%2C%E8%BF%99%E4%B8%AA%E6%9B%B2%E6%95%99%E5%8F%AF%E4%BB%A5%E8%82%B4%E5%85%A5%E4%BB%BB%E6%84%8F%E4%B8%AA%E8%BD%AF%E7%9A%84%E6%95%99%2C%E4%B9%88%E6%88%91%E4%BB%AC%E5%B0%B1%E6%97%A0%E6%B3%95%22%7D%2C%7B%22x%22%3A815.422%2C%22y%22%3A501.64096%2C%22width%22%3A241.60339999999997%2C%22height%22%3A21.186800000000005%2C%22text%22%3A%22%E5%9C%A8%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%88%97%E6%9D%A5%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%AA%E5%AE%9A%E4%B9%89%22%7D%2C%7B%22x%22%3A687.34235%2C%22y%22%3A522.50323%2C%22width%22%3A68.20494999999994%2C%22height%22%3A17.29462000000001%2C%22text%22%3A%22%E5%89%A9%E4%B8%9C%E6%A2%A6%E6%95%B0%22%7D%2C%7B%22x%22%3A816.02655%2C%22y%22%3A540.28735%2C%22width%22%3A644.4592499999999%2C%22height%22%3A22.250800000000027%2C%22text%22%3A%22%E5%9C%A8%E5%8C%BA6%E5%8F%91%E5%B8%83%E4%B9%8B%E8%BE%93%2C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0wgurenti%E6%9D%A5%E8%8E%B7%E6%9C%80%E6%A2%A6%E6%88%91%E5%88%97%E8%A1%A8%2C%E9%9B%B7gmet%E6%98%AF%E6%AF%8F%E4%B8%80%E4%B8%AA%E8%8F%8C%E6%AC%BE%E6%99%BA%E5%8C%85%22%7D%2C%7B%22x%22%3A817.17664%2C%22y%22%3A565.9582%2C%22width%22%3A152.63873%2C%22height%22%3A20.075249999999983%2C%22text%22%3A%22%E5%90%AB%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BE%8E%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%22%7D%2C%7B%22x%22%3A728.17084%2C%22y%22%3A639.0577%2C%22width%22%3A642.6891599999999%2C%22height%22%3A21.06280000000004%2C%22text%22%3A%22%E9%9B%B7%E5%86%9C%E9%87%8D%E8%BD%BD%E6%98%AF%E6%8C%87%E5%AE%9A%E4%B9%89%E5%87%A0%E4%B8%AA%E8%8F%8C%E5%86%9C%E5%90%8D%E7%9B%B8%E9%97%B4%2C%E4%BD%86%E5%A4%9A%E6%95%99%E4%B8%AA%E6%A0%A1%E5%B0%86%E4%BA%A4%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E9%9D%A2%E5%86%9C%2C%E5%9C%A8%E8%B0%83%E7%94%A8%E6%97%B6%E4%BC%A0%E5%85%A5%E4%B8%8D%22%7D%2C%7B%22x%22%3A726.7886%2C%22y%22%3A663.942%2C%22width%22%3A301.5771000000001%2C%22height%22%3A20.169099999999958%2C%22text%22%3A%22%E7%9A%84%E5%8F%82%E6%95%99%2C%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B0%83%E9%97%B2%E9%80%82%E5%90%88%E7%9A%84%E9%9D%A2%E6%95%B0%22%7D%2C%7B%22x%22%3A724.502%2C%22y%22%3A704.3015%2C%22width%22%3A646.4386%2C%22height%22%3A18.06669999999997%2C%22text%22%3A%22larit%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E6%98%AF%E6%B2%A1%E6%9C%89%E9%9D%A2%E6%95%99%E9%87%8D%E8%BD%BD%E7%9A%84%2C%E5%8F%AA%E8%83%BD%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E5%9C%A8%E9%9D%A2%E7%89%A7%E4%BD%93%E5%86%85%E9%80%9A%E8%BF%87%E5%88%A4%E6%96%AD%E6%A2%A6%E6%9D%83%22%7D%2C%7B%22x%22%3A725.67206%2C%22y%22%3A726.66895%2C%22width%22%3A283.41664000000003%2C%22height%22%3A19.224950000000035%2C%22text%22%3A%22%E7%9A%84%E4%B8%AA%E6%95%B0%2C%E6%98%AF%E5%9E%8B%E6%A1%88%E6%8C%87%E5%AE%9A%E4%B8%8D%E5%90%8C%E7%9A%84%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%22%7D%2C%7B%22x%22%3A571.04956%2C%22y%22%3A746.03864%2C%22width%22%3A82.61077999999998%2C%22height%22%3A21.242259999999987%2C%22text%22%3A%22%E5%8D%A7%E6%95%B0%E9%87%8D%E8%BD%BD%22%7D%2C%7B%22x%22%3A727.81006%2C%22y%22%3A766.46466%2C%22width%22%3A645.09214%2C%22height%22%3A18.686239999999998%2C%22text%22%3A%22%E5%9C%A8Tpescipt%E4%B8%AD%E6%9C%89%E7%94%BB%E6%95%99%E9%87%8D%E8%BD%BD%E7%9A%84%E7%93%B6%E5%BF%B5%2C%E4%BD%86%E7%95%8C%E4%B8%8D%E6%98%AF%E5%AE%9A%E7%88%B6%E5%87%A0%E4%B8%AA%E9%97%AE%E5%90%8D%E4%BD%93%E8%8F%8C%E5%86%9C%2C%E7%83%AD%E5%90%8E%E6%91%86%E4%B8%8D%E9%97%B4%E7%9A%84%E7%88%B9%22%7D%2C%7B%22x%22%3A726.6058%2C%22y%22%3A791.4654%2C%22width%22%3A280.9943599999999%2C%22height%22%3A17.96214999999995%2C%22text%22%3A%22%E6%95%B0%E4%B8%AA%E6%95%B0%E8%80%B3%E7%BE%8E%E5%9E%8B%E6%9D%A5%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E7%9B%B8%E5%BA%94%E7%9A%84%E9%9D%A2%E6%95%B0%22%7D%2C%7B%22x%22%3A725.5101%2C%22y%22%3A828.7649%2C%22width%22%3A653.6457%2C%22height%22%3A19.637140000000045%2C%22text%22%3A%22Tpesio%E7%9A%84%E6%9B%B2%E6%88%91%E9%87%8D%E6%88%91%26%E5%9C%A8%E4%BA%A4%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%B1%85%E9%9D%A2%E7%9A%84%2C%E6%98%AF%E4%B8%BA%5D%E6%9B%B4%E8%BD%A9%E5%9C%B0%E8%BF%9B%E8%A1%8C%E8%B5%B0%E5%9E%8B%E6%8E%A8%E6%96%AD%2C%E7%9A%84%E6%AC%BE%22%7D%2C%7B%22x%22%3A726.75134%2C%22y%22%3A853.8422%2C%22width%22%3A594.69766%2C%22height%22%3A17.714439999999968%2C%22text%22%3A%22%E9%87%8D%E8%BD%BD%E8%BF%87%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%9B%B4%E6%95%99%E6%8C%87%E5%AE%9A%E5%A4%9A%E4%B8%AA%E9%9D%A2%E6%88%91%E7%BE%8E%E5%9E%8B%E5%AE%9A%E4%B9%89%2C%E4%BB%8E%E8%80%8C%E5%AF%B9%E5%8D%A7%E5%86%9C%E8%B0%83%E7%94%A8%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%A3%80%E6%9F%A5%22%7D%5D%2C%22id%22%3A%22ud459aace%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-13T07:30:04.000Z",
    "deleted_at": null,
    "created_at": "2021-12-13T07:14:21.000Z",
    "updated_at": "2021-12-13T07:30:04.000Z",
    "published_at": "2021-12-13T07:30:04.000Z",
    "first_published_at": "2021-12-13T07:14:41.000Z",
    "word_count": 4164,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639380599741-01dff690-389b-49c7-9943-6737d7ce0db4.jpeg",
    "description": "1.函数类型(1) 为函数定义类型我们可以给函数定义类型，这个定义包括对参数和返回值的类型定义，我们先来看简单的定义写法：function add(arg1: number, arg2: number): number {   return x + y; } // 或者 const add =...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 62527933,
    "slug": "dg6rkf",
    "title": "接口的高阶用法",
    "book_id": 24117368,
    "book": {
      "id": 24117368,
      "type": "Book",
      "slug": "hyt0s6",
      "name": "blog",
      "user_id": 12838787,
      "description": "",
      "creator_id": 12838787,
      "public": 0,
      "items_count": 14,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2021-12-22T05:31:44.747Z",
      "updated_at": "2021-12-22T05:31:44.000Z",
      "created_at": "2021-12-09T02:39:07.000Z",
      "namespace": "u12459189/hyt0s6",
      "user": {
        "id": 12838787,
        "type": "User",
        "login": "u12459189",
        "name": "....tyuh",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
        "books_count": 8,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 2,
        "created_at": "2021-03-16T09:24:17.000Z",
        "updated_at": "2021-12-22T05:28:17.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12838787,
    "creator": {
      "id": 12838787,
      "type": "User",
      "login": "u12459189",
      "name": "....tyuh",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1615886637992-84c93c2b-ba39-496c-8721-70c255c4d544.jpeg",
      "books_count": 8,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 2,
      "created_at": "2021-03-16T09:24:17.000Z",
      "updated_at": "2021-12-22T05:28:17.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"xQK0P\"></a>\n## 1.索引类型\n我们可以使用接口描述索引的类型和通过索引得到的值的类型，比如一个数组[‘a’, ‘b’]，数字索引0对应的通过索引得到的值为’a’。我们可以同时给索引和值都设置类型，看下面的示例：\n```typescript\ninterface RoleDic {\n  [id: number]: string;\n}\nconst role1: RoleDic = {\n  0: \"super_admin\",\n  1: \"admin\"\n};\nconst role2: RoleDic = {\n  s: \"super_admin\",  // error 不能将类型\"{ s: string; a: string; }\"分配给类型\"RoleDic\"。\n  a: \"admin\"\n};\nconst role3: RoleDic = [\"super_admin\", \"admin\"];\n```\n上面的例子中 role3 定义了一个数组，索引为数值类型，值为字符串类型。<br />你也可以给索引设置readonly，从而防止索引返回值被修改。\n```typescript\ninterface RoleDic {\n  readonly [id: number]: string;\n}\nconst role: RoleDic = {\n  0: \"super_admin\"\n};\nrole[0] = \"admin\"; // error 类型\"RoleDic\"中的索引签名仅允许读取\n```\n这里有的点需要注意，你可以设置索引类型为 number。但是这样如果你将属性名设置为字符串类型，则会报错；但是如果你设置索引类型为字符串类型，那么即便你的属性名设置的是数值类型，也没问题。因为 JS 在访问属性值的时候，如果属性名是数值类型，会先将数值类型转为字符串，然后再去访问。你可以看下这个例子：\n```typescript\nconst obj = {\n  123: \"a\", // 这里定义一个数值类型的123这个属性\n  \"123\": \"b\" // 这里在定义一个字符串类型的123这个属性，这里会报错：标识符“\"123\"”重复。\n};\nconsole.log(obj); // { '123': 'b' }\n```\n如果数值类型的属性名不会转为字符串类型，那么这里数值123和字符串123是不同的两个值，则最后对象obj应该同时有这两个属性；但是实际打印出来的obj只有一个属性，属性名为字符串\"123\"，而且值为\"b\"，说明数值类型属性名123被覆盖掉了，就是因为它被转为了字符串类型属性名\"123\"；又因为一个对象中多个相同属性名的属性，定义在后面的会覆盖前面的，所以结果就是obj只保留了后面定义的属性值。\n<a name=\"Hmvww\"></a>\n## 2.继承接口\n接口可以继承，这和类一样，这提高了接口的可复用性。来看一个场景：<br />我们定义一个Vegetables接口，它会对color属性进行限制。再定义两个接口，一个为Tomato，一个为Carrot，这两个类都需要对color进行限制，而各自又有各自独有的属性限制，我们可以这样定义：\n```typescript\ninterface Vegetables {\n  color: string;\n}\ninterface Tomato {\n  color: string;\n  radius: number;\n}\ninterface Carrot {\n  color: string;\n  length: number;\n}\nconst tomato: Tomato = {\n  radius: 1.2 // error  Property 'color' is missing in type '{ radius: number; }'\n};\nconst carrot: Carrot = {\n  color: \"orange\",\n  length: 20\n};\n```\n上面定义的 tomato 变量因为缺少了从Vegetables接口继承来的 color 属性，从而报错。<br />一个接口可以被多个接口继承，同样，一个接口也可以继承多个接口，多个接口用逗号隔开。比如我们再定义一个Food接口，Tomato 也可以继承 Food： extends关键字实现继承\n```typescript\ninterface Vegetables {\n  color: string;\n}\ninterface Food {\n  type: string;\n}\ninterface Tomato extends Food, Vegetables {\n  radius: number;\n}\n\nconst tomato: Tomato = {\n  type: \"vegetables\",\n  color: \"red\",\n  radius: 1.2\n};  // 在定义tomato变量时将继承过来的color和type属性同时声明\n```\n<a name=\"pVqfc\"></a>\n## 3.混合类型接口\nJS 的类型是灵活的。在 JS 中，函数是对象类型。对象可以有属性，所以有时我们的一个对象，它既是一个函数，也包含一些属性。比如我们要实现一个计数器函数，比较直接的做法是定义一个函数和一个全局变量：\n```typescript\nlet count = 0;\nconst countUp = () => count++;\n但是这种方法需要在函数外面定义一个变量，更优一点的方法是使用闭包：\n\n// javascript\nconst countUp = (() => {\n  let count = 0;\n  return () => {\n    return ++count;\n  };\n})();\nconsole.log(countUp()); // 1\nconsole.log(countUp()); // 2\n```\n在 TypeScript3.1 版本之前，我们需要借助命名空间来实现。但是在 3.1 版本，TypeScript 支持直接给函数添加属性，虽然这在 JS 中早就支持了：\n```typescript\n// javascript\nlet countUp = () => {\n  return ++countUp.count;\n};\ncountUp.count = 0;\nconsole.log(countUp()); // 1\nconsole.log(countUp()); // 2\n```\n我们可以看到，我们把一个函数赋值给countUp，又给它绑定了一个属性count，我们的计数保存在这个 count 属性中。<br />我们可以使用混合类型接口来指定上面例子中 countUp 的类型：\n```typescript\ninterface Counter {\n  (): void; // 这里定义Counter这个结构必须包含一个函数，函数的要求是无参数，返回值为void，即无返回值\n  count: number; // 而且这个结构还必须包含一个名为count、值的类型为number类型的属性\n}\nconst getCounter = (): Counter => { // 这里定义一个函数用来返回这个计数器\n  const c = () => { // 定义一个函数，逻辑和前面例子的一样\n    c.count++;\n  };\n  c.count = 0; // 再给这个函数添加一个count属性初始值为0\n  return c; // 最后返回这个函数对象\n};\nconst counter: Counter = getCounter(); // 通过getCounter函数得到这个计数器\ncounter();\nconsole.log(counter.count); // 1\ncounter();\nconsole.log(counter.count); // 2\n```\n上面的例子中，getCounter函数返回值类型为Counter，它是一个函数，无返回值，即返回值类型为void，它还包含一个属性count，属性返回值类型为number。<br />![5cf4bfe50001f4cf16000459.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639379617272-5ef06e2b-c3f3-433f-ac28-be23bbb4dc0d.jpeg#clientId=u2f9f9128-96ea-4&from=ui&id=u2f5ed839&margin=%5Bobject%20Object%5D&name=5cf4bfe50001f4cf16000459.jpg&originHeight=459&originWidth=1600&originalType=binary&ratio=1&size=83878&status=done&style=none&taskId=u663315e4-1f66-4dc8-bb3c-638018c6f9d)\n",
    "body_draft": "<a name=\"xQK0P\"></a>\n## 1.索引类型\n我们可以使用接口描述索引的类型和通过索引得到的值的类型，比如一个数组[‘a’, ‘b’]，数字索引0对应的通过索引得到的值为’a’。我们可以同时给索引和值都设置类型，看下面的示例：\n```typescript\ninterface RoleDic {\n  [id: number]: string;\n}\nconst role1: RoleDic = {\n  0: \"super_admin\",\n  1: \"admin\"\n};\nconst role2: RoleDic = {\n  s: \"super_admin\",  // error 不能将类型\"{ s: string; a: string; }\"分配给类型\"RoleDic\"。\n  a: \"admin\"\n};\nconst role3: RoleDic = [\"super_admin\", \"admin\"];\n```\n上面的例子中 role3 定义了一个数组，索引为数值类型，值为字符串类型。<br />你也可以给索引设置readonly，从而防止索引返回值被修改。\n```typescript\ninterface RoleDic {\n  readonly [id: number]: string;\n}\nconst role: RoleDic = {\n  0: \"super_admin\"\n};\nrole[0] = \"admin\"; // error 类型\"RoleDic\"中的索引签名仅允许读取\n```\n这里有的点需要注意，你可以设置索引类型为 number。但是这样如果你将属性名设置为字符串类型，则会报错；但是如果你设置索引类型为字符串类型，那么即便你的属性名设置的是数值类型，也没问题。因为 JS 在访问属性值的时候，如果属性名是数值类型，会先将数值类型转为字符串，然后再去访问。你可以看下这个例子：\n```typescript\nconst obj = {\n  123: \"a\", // 这里定义一个数值类型的123这个属性\n  \"123\": \"b\" // 这里在定义一个字符串类型的123这个属性，这里会报错：标识符“\"123\"”重复。\n};\nconsole.log(obj); // { '123': 'b' }\n```\n如果数值类型的属性名不会转为字符串类型，那么这里数值123和字符串123是不同的两个值，则最后对象obj应该同时有这两个属性；但是实际打印出来的obj只有一个属性，属性名为字符串\"123\"，而且值为\"b\"，说明数值类型属性名123被覆盖掉了，就是因为它被转为了字符串类型属性名\"123\"；又因为一个对象中多个相同属性名的属性，定义在后面的会覆盖前面的，所以结果就是obj只保留了后面定义的属性值。\n<a name=\"Hmvww\"></a>\n## 2.继承接口\n接口可以继承，这和类一样，这提高了接口的可复用性。来看一个场景：<br />我们定义一个Vegetables接口，它会对color属性进行限制。再定义两个接口，一个为Tomato，一个为Carrot，这两个类都需要对color进行限制，而各自又有各自独有的属性限制，我们可以这样定义：\n```typescript\ninterface Vegetables {\n  color: string;\n}\ninterface Tomato {\n  color: string;\n  radius: number;\n}\ninterface Carrot {\n  color: string;\n  length: number;\n}\nconst tomato: Tomato = {\n  radius: 1.2 // error  Property 'color' is missing in type '{ radius: number; }'\n};\nconst carrot: Carrot = {\n  color: \"orange\",\n  length: 20\n};\n```\n上面定义的 tomato 变量因为缺少了从Vegetables接口继承来的 color 属性，从而报错。<br />一个接口可以被多个接口继承，同样，一个接口也可以继承多个接口，多个接口用逗号隔开。比如我们再定义一个Food接口，Tomato 也可以继承 Food： extends关键字实现继承\n```typescript\ninterface Vegetables {\n  color: string;\n}\ninterface Food {\n  type: string;\n}\ninterface Tomato extends Food, Vegetables {\n  radius: number;\n}\n\nconst tomato: Tomato = {\n  type: \"vegetables\",\n  color: \"red\",\n  radius: 1.2\n};  // 在定义tomato变量时将继承过来的color和type属性同时声明\n```\n<a name=\"pVqfc\"></a>\n## 3.混合类型接口\nJS 的类型是灵活的。在 JS 中，函数是对象类型。对象可以有属性，所以有时我们的一个对象，它既是一个函数，也包含一些属性。比如我们要实现一个计数器函数，比较直接的做法是定义一个函数和一个全局变量：\n```typescript\nlet count = 0;\nconst countUp = () => count++;\n但是这种方法需要在函数外面定义一个变量，更优一点的方法是使用闭包：\n\n// javascript\nconst countUp = (() => {\n  let count = 0;\n  return () => {\n    return ++count;\n  };\n})();\nconsole.log(countUp()); // 1\nconsole.log(countUp()); // 2\n```\n在 TypeScript3.1 版本之前，我们需要借助命名空间来实现。但是在 3.1 版本，TypeScript 支持直接给函数添加属性，虽然这在 JS 中早就支持了：\n```typescript\n// javascript\nlet countUp = () => {\n  return ++countUp.count;\n};\ncountUp.count = 0;\nconsole.log(countUp()); // 1\nconsole.log(countUp()); // 2\n```\n我们可以看到，我们把一个函数赋值给countUp，又给它绑定了一个属性count，我们的计数保存在这个 count 属性中。<br />我们可以使用混合类型接口来指定上面例子中 countUp 的类型：\n```typescript\ninterface Counter {\n  (): void; // 这里定义Counter这个结构必须包含一个函数，函数的要求是无参数，返回值为void，即无返回值\n  count: number; // 而且这个结构还必须包含一个名为count、值的类型为number类型的属性\n}\nconst getCounter = (): Counter => { // 这里定义一个函数用来返回这个计数器\n  const c = () => { // 定义一个函数，逻辑和前面例子的一样\n    c.count++;\n  };\n  c.count = 0; // 再给这个函数添加一个count属性初始值为0\n  return c; // 最后返回这个函数对象\n};\nconst counter: Counter = getCounter(); // 通过getCounter函数得到这个计数器\ncounter();\nconsole.log(counter.count); // 1\ncounter();\nconsole.log(counter.count); // 2\n```\n上面的例子中，getCounter函数返回值类型为Counter，它是一个函数，无返回值，即返回值类型为void，它还包含一个属性count，属性返回值类型为number。<br />![5cf4bfe50001f4cf16000459.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639379617272-5ef06e2b-c3f3-433f-ac28-be23bbb4dc0d.jpeg#clientId=u2f9f9128-96ea-4&from=ui&id=u2f5ed839&margin=%5Bobject%20Object%5D&name=5cf4bfe50001f4cf16000459.jpg&originHeight=459&originWidth=1600&originalType=binary&ratio=1&size=83878&status=done&style=none&taskId=u663315e4-1f66-4dc8-bb3c-638018c6f9d)\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"xQK0P\"><span class=\"ne-text\">1.索引类型</span></h2><p id=\"u86ec537a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">我们可以使用接口描述索引的类型和通过索引得到的值的类型，比如一个数组[‘a’, ‘b’]，数字索引0对应的通过索引得到的值为’a’。我们可以同时给索引和值都设置类型，看下面的示例：</span></p><pre data-language=\"typescript\" id=\"eZrUL\" class=\"ne-codeblock language-typescript\">interface RoleDic {\n  [id: number]: string;\n}\nconst role1: RoleDic = {\n  0: &quot;super_admin&quot;,\n  1: &quot;admin&quot;\n};\nconst role2: RoleDic = {\n  s: &quot;super_admin&quot;,  // error 不能将类型&quot;{ s: string; a: string; }&quot;分配给类型&quot;RoleDic&quot;。\n  a: &quot;admin&quot;\n};\nconst role3: RoleDic = [&quot;super_admin&quot;, &quot;admin&quot;];</pre><p id=\"u8a261782\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">上面的例子中 role3 定义了一个数组，索引为数值类型，值为字符串类型。</span></p><p id=\"u63a54871\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">你也可以给索引设置readonly，从而防止索引返回值被修改。</span></p><pre data-language=\"typescript\" id=\"vAh3x\" class=\"ne-codeblock language-typescript\">interface RoleDic {\n  readonly [id: number]: string;\n}\nconst role: RoleDic = {\n  0: &quot;super_admin&quot;\n};\nrole[0] = &quot;admin&quot;; // error 类型&quot;RoleDic&quot;中的索引签名仅允许读取</pre><p id=\"u652e3b27\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">这里有的点需要注意，你可以设置索引类型为 number。但是这样如果你将属性名设置为字符串类型，则会报错；但是如果你设置索引类型为字符串类型，那么即便你的属性名设置的是数值类型，也没问题。因为 JS 在访问属性值的时候，如果属性名是数值类型，会先将数值类型转为字符串，然后再去访问。你可以看下这个例子：</span></p><pre data-language=\"typescript\" id=\"J1eHr\" class=\"ne-codeblock language-typescript\">const obj = {\n  123: &quot;a&quot;, // 这里定义一个数值类型的123这个属性\n  &quot;123&quot;: &quot;b&quot; // 这里在定义一个字符串类型的123这个属性，这里会报错：标识符“&quot;123&quot;”重复。\n};\nconsole.log(obj); // { '123': 'b' }</pre><p id=\"uba1aa8da\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">如果数值类型的属性名不会转为字符串类型，那么这里数值123和字符串123是不同的两个值，则最后对象obj应该同时有这两个属性；但是实际打印出来的obj只有一个属性，属性名为字符串&quot;123&quot;，而且值为&quot;b&quot;，说明数值类型属性名123被覆盖掉了，就是因为它被转为了字符串类型属性名&quot;123&quot;；又因为一个对象中多个相同属性名的属性，定义在后面的会覆盖前面的，所以结果就是obj只保留了后面定义的属性值。</span></p><h2 id=\"Hmvww\"><span class=\"ne-text\">2.继承接口</span></h2><p id=\"u2dbc4cf1\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 24px\">接口可以继承，这和类一样，这提高了接口的可复用性。来看一个场景：</span></p><p id=\"uc499660a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">我们定义一个Vegetables接口，它会对color属性进行限制。再定义两个接口，一个为Tomato，一个为Carrot，这两个类都需要对color进行限制，而各自又有各自独有的属性限制，我们可以这样定义：</span></p><pre data-language=\"typescript\" id=\"cFTZN\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  color: string;\n}\ninterface Tomato {\n  color: string;\n  radius: number;\n}\ninterface Carrot {\n  color: string;\n  length: number;\n}\nconst tomato: Tomato = {\n  radius: 1.2 // error  Property 'color' is missing in type '{ radius: number; }'\n};\nconst carrot: Carrot = {\n  color: &quot;orange&quot;,\n  length: 20\n};</pre><p id=\"u1ec4a607\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">上面定义的</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">tomato</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">变量因为缺少了从</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">Vegetables</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">接口继承来的</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">color</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">属性，从而报错。</span></p><p id=\"u2c34964e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">一个接口可以被多个接口继承，同样，一个接口也可以继承多个接口，多个接口用逗号隔开。比如我们再定义一个Food接口，Tomato 也可以继承 Food： extends关键字实现继承</span></p><pre data-language=\"typescript\" id=\"HBwwT\" class=\"ne-codeblock language-typescript\">interface Vegetables {\n  color: string;\n}\ninterface Food {\n  type: string;\n}\ninterface Tomato extends Food, Vegetables {\n  radius: number;\n}\n\nconst tomato: Tomato = {\n  type: &quot;vegetables&quot;,\n  color: &quot;red&quot;,\n  radius: 1.2\n};  // 在定义tomato变量时将继承过来的color和type属性同时声明</pre><h2 id=\"pVqfc\"><span class=\"ne-text\">3.混合类型接口</span></h2><p id=\"u255836b6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">JS 的类型是灵活的。在 JS 中，函数是对象类型。对象可以有属性，所以有时我们的一个对象，它既是一个函数，也包含一些属性。比如我们要实现一个计数器函数，比较直接的做法是定义一个函数和一个全局变量：</span></p><pre data-language=\"typescript\" id=\"T10eW\" class=\"ne-codeblock language-typescript\">let count = 0;\nconst countUp = () =&gt; count++;\n但是这种方法需要在函数外面定义一个变量，更优一点的方法是使用闭包：\n\n// javascript\nconst countUp = (() =&gt; {\n  let count = 0;\n  return () =&gt; {\n    return ++count;\n  };\n})();\nconsole.log(countUp()); // 1\nconsole.log(countUp()); // 2</pre><p id=\"ue5def363\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">在 TypeScript3.1 版本之前，我们需要借助命名空间来实现。但是在 3.1 版本，TypeScript 支持直接给函数添加属性，虽然这在 JS 中早就支持了：</span></p><pre data-language=\"typescript\" id=\"D9jub\" class=\"ne-codeblock language-typescript\">// javascript\nlet countUp = () =&gt; {\n  return ++countUp.count;\n};\ncountUp.count = 0;\nconsole.log(countUp()); // 1\nconsole.log(countUp()); // 2</pre><p id=\"u5920abab\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">我们可以看到，我们把一个函数赋值给</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">countUp</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">，又给它绑定了一个属性</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">count</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">，我们的计数保存在这个</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">count</span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\"> </span><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">属性中。</span></p><p id=\"u29ddca27\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">我们可以使用混合类型接口来指定上面例子中 countUp 的类型：</span></p><pre data-language=\"typescript\" id=\"Fmkbs\" class=\"ne-codeblock language-typescript\">interface Counter {\n  (): void; // 这里定义Counter这个结构必须包含一个函数，函数的要求是无参数，返回值为void，即无返回值\n  count: number; // 而且这个结构还必须包含一个名为count、值的类型为number类型的属性\n}\nconst getCounter = (): Counter =&gt; { // 这里定义一个函数用来返回这个计数器\n  const c = () =&gt; { // 定义一个函数，逻辑和前面例子的一样\n    c.count++;\n  };\n  c.count = 0; // 再给这个函数添加一个count属性初始值为0\n  return c; // 最后返回这个函数对象\n};\nconst counter: Counter = getCounter(); // 通过getCounter函数得到这个计数器\ncounter();\nconsole.log(counter.count); // 1\ncounter();\nconsole.log(counter.count); // 2</pre><p id=\"u9fda82f6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(28, 31, 33); font-size: 24px\">上面的例子中，getCounter函数返回值类型为Counter，它是一个函数，无返回值，即返回值类型为void，它还包含一个属性count，属性返回值类型为number。</span></p><p id=\"u067424ba\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639379617272-5ef06e2b-c3f3-433f-ac28-be23bbb4dc0d.jpeg\" width=\"1600\" id=\"u2f5ed839\" class=\"ne-image\"></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"xQK0P\" id=\"xQK0P\"><span data-lake-id=\"ucb0e17fa\" id=\"ucb0e17fa\">1.索引类型</span></h2><p data-lake-id=\"u86ec537a\" id=\"u86ec537a\"><span data-lake-id=\"u28586f31\" id=\"u28586f31\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以使用接口描述索引的类型和通过索引得到的值的类型，比如一个数组[‘a’, ‘b’]，数字索引0对应的通过索引得到的值为’a’。我们可以同时给索引和值都设置类型，看下面的示例：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20RoleDic%20%7B%5Cn%20%20%5Bid%3A%20number%5D%3A%20string%3B%5Cn%7D%5Cnconst%20role1%3A%20RoleDic%20%3D%20%7B%5Cn%20%200%3A%20%5C%22super_admin%5C%22%2C%5Cn%20%201%3A%20%5C%22admin%5C%22%5Cn%7D%3B%5Cnconst%20role2%3A%20RoleDic%20%3D%20%7B%5Cn%20%20s%3A%20%5C%22super_admin%5C%22%2C%20%20%2F%2F%20error%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%5C%22%7B%20s%3A%20string%3B%20a%3A%20string%3B%20%7D%5C%22%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22RoleDic%5C%22%E3%80%82%5Cn%20%20a%3A%20%5C%22admin%5C%22%5Cn%7D%3B%5Cnconst%20role3%3A%20RoleDic%20%3D%20%5B%5C%22super_admin%5C%22%2C%20%5C%22admin%5C%22%5D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22eZrUL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u8a261782\" id=\"u8a261782\"><span data-lake-id=\"uf9d63151\" id=\"uf9d63151\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面的例子中 role3 定义了一个数组，索引为数值类型，值为字符串类型。</span></p><p data-lake-id=\"u63a54871\" id=\"u63a54871\"><span data-lake-id=\"u0a5ea151\" id=\"u0a5ea151\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">你也可以给索引设置readonly，从而防止索引返回值被修改。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20RoleDic%20%7B%5Cn%20%20readonly%20%5Bid%3A%20number%5D%3A%20string%3B%5Cn%7D%5Cnconst%20role%3A%20RoleDic%20%3D%20%7B%5Cn%20%200%3A%20%5C%22super_admin%5C%22%5Cn%7D%3B%5Cnrole%5B0%5D%20%3D%20%5C%22admin%5C%22%3B%20%2F%2F%20error%20%E7%B1%BB%E5%9E%8B%5C%22RoleDic%5C%22%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%E4%BB%85%E5%85%81%E8%AE%B8%E8%AF%BB%E5%8F%96%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22vAh3x%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u652e3b27\" id=\"u652e3b27\"><span data-lake-id=\"u28ee070a\" id=\"u28ee070a\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">这里有的点需要注意，你可以设置索引类型为 number。但是这样如果你将属性名设置为字符串类型，则会报错；但是如果你设置索引类型为字符串类型，那么即便你的属性名设置的是数值类型，也没问题。因为 JS 在访问属性值的时候，如果属性名是数值类型，会先将数值类型转为字符串，然后再去访问。你可以看下这个例子：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20obj%20%3D%20%7B%5Cn%20%20123%3A%20%5C%22a%5C%22%2C%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E7%9A%84123%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%5Cn%20%20%5C%22123%5C%22%3A%20%5C%22b%5C%22%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E7%9A%84123%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%9A%E6%A0%87%E8%AF%86%E7%AC%A6%E2%80%9C%5C%22123%5C%22%E2%80%9D%E9%87%8D%E5%A4%8D%E3%80%82%5Cn%7D%3B%5Cnconsole.log(obj)%3B%20%2F%2F%20%7B%20'123'%3A%20'b'%20%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22J1eHr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uba1aa8da\" id=\"uba1aa8da\"><span data-lake-id=\"uda90252d\" id=\"uda90252d\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">如果数值类型的属性名不会转为字符串类型，那么这里数值123和字符串123是不同的两个值，则最后对象obj应该同时有这两个属性；但是实际打印出来的obj只有一个属性，属性名为字符串&quot;123&quot;，而且值为&quot;b&quot;，说明数值类型属性名123被覆盖掉了，就是因为它被转为了字符串类型属性名&quot;123&quot;；又因为一个对象中多个相同属性名的属性，定义在后面的会覆盖前面的，所以结果就是obj只保留了后面定义的属性值。</span></p><h2 data-lake-id=\"Hmvww\" id=\"Hmvww\"><span data-lake-id=\"u47873513\" id=\"u47873513\">2.继承接口</span></h2><p data-lake-id=\"u2dbc4cf1\" id=\"u2dbc4cf1\"><span data-lake-id=\"u75c1667e\" id=\"u75c1667e\" class=\"lake-fontsize-18\">接口可以继承，这和类一样，这提高了接口的可复用性。来看一个场景：</span></p><p data-lake-id=\"uc499660a\" id=\"uc499660a\"><span data-lake-id=\"ub151400b\" id=\"ub151400b\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们定义一个Vegetables接口，它会对color属性进行限制。再定义两个接口，一个为Tomato，一个为Carrot，这两个类都需要对color进行限制，而各自又有各自独有的属性限制，我们可以这样定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%7D%5Cninterface%20Tomato%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%20%20radius%3A%20number%3B%5Cn%7D%5Cninterface%20Carrot%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%20%20length%3A%20number%3B%5Cn%7D%5Cnconst%20tomato%3A%20Tomato%20%3D%20%7B%5Cn%20%20radius%3A%201.2%20%2F%2F%20error%20%20Property%20'color'%20is%20missing%20in%20type%20'%7B%20radius%3A%20number%3B%20%7D'%5Cn%7D%3B%5Cnconst%20carrot%3A%20Carrot%20%3D%20%7B%5Cn%20%20color%3A%20%5C%22orange%5C%22%2C%5Cn%20%20length%3A%2020%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22cFTZN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1ec4a607\" id=\"u1ec4a607\"><span data-lake-id=\"u66f2cfda\" id=\"u66f2cfda\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面定义的</span><span data-lake-id=\"uacb53af3\" id=\"uacb53af3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u123c3d4c\" id=\"u123c3d4c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">tomato</span><span data-lake-id=\"u058b929a\" id=\"u058b929a\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"uc9ccca52\" id=\"uc9ccca52\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">变量因为缺少了从</span><span data-lake-id=\"u08091439\" id=\"u08091439\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">Vegetables</span><span data-lake-id=\"u7d4006a3\" id=\"u7d4006a3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">接口继承来的</span><span data-lake-id=\"u623b6a6c\" id=\"u623b6a6c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u2ac79636\" id=\"u2ac79636\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">color</span><span data-lake-id=\"u6547421a\" id=\"u6547421a\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"uf2fbeba4\" id=\"uf2fbeba4\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">属性，从而报错。</span></p><p data-lake-id=\"u2c34964e\" id=\"u2c34964e\"><span data-lake-id=\"u7e5411c2\" id=\"u7e5411c2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">一个接口可以被多个接口继承，同样，一个接口也可以继承多个接口，多个接口用逗号隔开。比如我们再定义一个Food接口，Tomato 也可以继承 Food： extends关键字实现继承</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%7D%5Cninterface%20Food%20%7B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cninterface%20Tomato%20extends%20Food%2C%20Vegetables%20%7B%5Cn%20%20radius%3A%20number%3B%5Cn%7D%5Cn%5Cnconst%20tomato%3A%20Tomato%20%3D%20%7B%5Cn%20%20type%3A%20%5C%22vegetables%5C%22%2C%5Cn%20%20color%3A%20%5C%22red%5C%22%2C%5Cn%20%20radius%3A%201.2%5Cn%7D%3B%20%20%2F%2F%20%E5%9C%A8%E5%AE%9A%E4%B9%89tomato%E5%8F%98%E9%87%8F%E6%97%B6%E5%B0%86%E7%BB%A7%E6%89%BF%E8%BF%87%E6%9D%A5%E7%9A%84color%E5%92%8Ctype%E5%B1%9E%E6%80%A7%E5%90%8C%E6%97%B6%E5%A3%B0%E6%98%8E%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HBwwT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"pVqfc\" id=\"pVqfc\"><span data-lake-id=\"u42b06590\" id=\"u42b06590\">3.混合类型接口</span></h2><p data-lake-id=\"u255836b6\" id=\"u255836b6\"><span data-lake-id=\"uc7d0cdda\" id=\"uc7d0cdda\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">JS 的类型是灵活的。在 JS 中，函数是对象类型。对象可以有属性，所以有时我们的一个对象，它既是一个函数，也包含一些属性。比如我们要实现一个计数器函数，比较直接的做法是定义一个函数和一个全局变量：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22let%20count%20%3D%200%3B%5Cnconst%20countUp%20%3D%20()%20%3D%3E%20count%2B%2B%3B%5Cn%E4%BD%86%E6%98%AF%E8%BF%99%E7%A7%8D%E6%96%B9%E6%B3%95%E9%9C%80%E8%A6%81%E5%9C%A8%E5%87%BD%E6%95%B0%E5%A4%96%E9%9D%A2%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E6%9B%B4%E4%BC%98%E4%B8%80%E7%82%B9%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%EF%BC%9A%5Cn%5Cn%2F%2F%20javascript%5Cnconst%20countUp%20%3D%20(()%20%3D%3E%20%7B%5Cn%20%20let%20count%20%3D%200%3B%5Cn%20%20return%20()%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%2B%2Bcount%3B%5Cn%20%20%7D%3B%5Cn%7D)()%3B%5Cnconsole.log(countUp())%3B%20%2F%2F%201%5Cnconsole.log(countUp())%3B%20%2F%2F%202%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22T10eW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue5def363\" id=\"ue5def363\"><span data-lake-id=\"u44faa0e2\" id=\"u44faa0e2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 TypeScript3.1 版本之前，我们需要借助命名空间来实现。但是在 3.1 版本，TypeScript 支持直接给函数添加属性，虽然这在 JS 中早就支持了：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%2F%2F%20javascript%5Cnlet%20countUp%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20return%20%2B%2BcountUp.count%3B%5Cn%7D%3B%5CncountUp.count%20%3D%200%3B%5Cnconsole.log(countUp())%3B%20%2F%2F%201%5Cnconsole.log(countUp())%3B%20%2F%2F%202%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22D9jub%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5920abab\" id=\"u5920abab\"><span data-lake-id=\"u13394f01\" id=\"u13394f01\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以看到，我们把一个函数赋值给</span><span data-lake-id=\"uf6e4fd7e\" id=\"uf6e4fd7e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">countUp</span><span data-lake-id=\"ub98dba02\" id=\"ub98dba02\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，又给它绑定了一个属性</span><span data-lake-id=\"u2de20a86\" id=\"u2de20a86\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">count</span><span data-lake-id=\"ufa0aaa94\" id=\"ufa0aaa94\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，我们的计数保存在这个</span><span data-lake-id=\"u5a68c80b\" id=\"u5a68c80b\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u30286b2f\" id=\"u30286b2f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">count</span><span data-lake-id=\"u6e265de7\" id=\"u6e265de7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u960e999c\" id=\"u960e999c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">属性中。</span></p><p data-lake-id=\"u29ddca27\" id=\"u29ddca27\"><span data-lake-id=\"u33e29327\" id=\"u33e29327\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以使用混合类型接口来指定上面例子中 countUp 的类型：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Counter%20%7B%5Cn%20%20()%3A%20void%3B%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%AE%9A%E4%B9%89Counter%E8%BF%99%E4%B8%AA%E7%BB%93%E6%9E%84%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%EF%BC%8C%E5%87%BD%E6%95%B0%E7%9A%84%E8%A6%81%E6%B1%82%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BAvoid%EF%BC%8C%E5%8D%B3%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%20%20count%3A%20number%3B%20%2F%2F%20%E8%80%8C%E4%B8%94%E8%BF%99%E4%B8%AA%E7%BB%93%E6%9E%84%E8%BF%98%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BAcount%E3%80%81%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%BAnumber%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B1%9E%E6%80%A7%5Cn%7D%5Cnconst%20getCounter%20%3D%20()%3A%20Counter%20%3D%3E%20%7B%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E7%94%A8%E6%9D%A5%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E8%AE%A1%E6%95%B0%E5%99%A8%5Cn%20%20const%20c%20%3D%20()%20%3D%3E%20%7B%20%2F%2F%20%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%EF%BC%8C%E9%80%BB%E8%BE%91%E5%92%8C%E5%89%8D%E9%9D%A2%E4%BE%8B%E5%AD%90%E7%9A%84%E4%B8%80%E6%A0%B7%5Cn%20%20%20%20c.count%2B%2B%3B%5Cn%20%20%7D%3B%5Cn%20%20c.count%20%3D%200%3B%20%2F%2F%20%E5%86%8D%E7%BB%99%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAcount%E5%B1%9E%E6%80%A7%E5%88%9D%E5%A7%8B%E5%80%BC%E4%B8%BA0%5Cn%20%20return%20c%3B%20%2F%2F%20%E6%9C%80%E5%90%8E%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%5Cn%7D%3B%5Cnconst%20counter%3A%20Counter%20%3D%20getCounter()%3B%20%2F%2F%20%E9%80%9A%E8%BF%87getCounter%E5%87%BD%E6%95%B0%E5%BE%97%E5%88%B0%E8%BF%99%E4%B8%AA%E8%AE%A1%E6%95%B0%E5%99%A8%5Cncounter()%3B%5Cnconsole.log(counter.count)%3B%20%2F%2F%201%5Cncounter()%3B%5Cnconsole.log(counter.count)%3B%20%2F%2F%202%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Fmkbs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9fda82f6\" id=\"u9fda82f6\"><span data-lake-id=\"u5b089dde\" id=\"u5b089dde\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面的例子中，getCounter函数返回值类型为Counter，它是一个函数，无返回值，即返回值类型为void，它还包含一个属性count，属性返回值类型为number。</span></p><p data-lake-id=\"u067424ba\" id=\"u067424ba\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639379617272-5ef06e2b-c3f3-433f-ac28-be23bbb4dc0d.jpeg%22%2C%22taskId%22%3A%22u663315e4-1f66-4dc8-bb3c-638018c6f9d%22%2C%22clientId%22%3A%22u2f9f9128-96ea-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfe50001f4cf16000459.jpg%22%2C%22size%22%3A83878%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A459%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%9E%E7%B4%A2%E5%BC%95%E7%9A%84%E7%BE%8E%E5%9E%8B%E5%92%8C%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E5%BE%97%E5%88%B0%E7%9A%84%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%20%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%99%E7%B4%A2%E5%BC%95%E8%AE%BE%E7%BD%AEreadonly%2C%E4%BB%8E%E8%80%8C%E9%98%B2%E6%AD%A2%E7%B4%A2%E5%BC%95%E8%BF%94%E5%8F%A3%E5%80%BC%E8%A2%AB%E4%BF%AE%E6%94%B9.%20%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%2C%E8%BF%99%E5%92%8C%E6%98%AF%E4%B8%80%E6%A0%B7%2C%E8%BF%99%E6%8F%90%E5%95%86%E4%BA%86%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%20%E7%BB%A7%E6%89%BF%E6%8E%A5%E5%8F%A3%20%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%2C%E5%90%8C%E6%A0%B7%2C%E4%B8%80%E4%B8%AA%E6%8E%A5%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%B4%E6%89%BF%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%2C%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%94%A8%E9%80%97%E5%8F%B7%E9%9A%94%E5%BC%80%20%E7%9A%84%E7%BE%8E%E5%9E%8B%E6%98%AF%E7%81%B5%E6%B4%BB%E7%9A%84%2C%E5%9C%A8%E4%B8%AD%2C%E5%9B%B0%E5%86%9C%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%BE%8E%E5%9E%8B%2C%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%B1%9E%E6%80%A7%2C%E6%89%80%E4%BB%A5%E6%9C%89%E6%97%B6%E6%88%91%E4%BB%AC%E4%B8%80%E4%B8%AA%E5%AF%B9%20%E8%B1%A1%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AB%E6%95%B0%2C%E4%B9%9F%E5%8C%85%E5%90%AB%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%20%E6%B7%B7%E5%90%88%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3%20%E5%9C%A831%E7%89%88%E6%9C%AC%2CTypescript%E6%94%AF%E6%8C%81%E7%9B%B4%E6%8E%A5%E7%BB%99%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A674.6851%2C%22y%22%3A23.945284%2C%22width%22%3A480.4147999999999%2C%22height%22%3A25.389013%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%9E%E7%B4%A2%E5%BC%95%E7%9A%84%E7%BE%8E%E5%9E%8B%E5%92%8C%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E5%BE%97%E5%88%B0%E7%9A%84%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A484.14493%2C%22y%22%3A47.158607%2C%22width%22%3A98.16186999999996%2C%22height%22%3A26.628762999999992%2C%22text%22%3A%22%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A673.9192%2C%22y%22%3A74.33475%2C%22width%22%3A516.9613999999999%2C%22height%22%3A22.967884999999995%2C%22text%22%3A%22%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%99%E7%B4%A2%E5%BC%95%E8%AE%BE%E7%BD%AEreadonly%2C%E4%BB%8E%E8%80%8C%E9%98%B2%E6%AD%A2%E7%B4%A2%E5%BC%95%E8%BF%94%E5%8F%A3%E5%80%BC%E8%A2%AB%E4%BF%AE%E6%94%B9.%22%7D%2C%7B%22x%22%3A676.2327%2C%22y%22%3A164.20067%2C%22width%22%3A491.9087999999999%2C%22height%22%3A24.884410000000003%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%2C%E8%BF%99%E5%92%8C%E6%98%AF%E4%B8%80%E6%A0%B7%2C%E8%BF%99%E6%8F%90%E5%95%86%E4%BA%86%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%22%7D%2C%7B%22x%22%3A481.19992%2C%22y%22%3A202.62743%2C%22width%22%3A97.30277999999998%2C%22height%22%3A23.94833%2C%22text%22%3A%22%E7%BB%A7%E6%89%BF%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A675.92035%2C%22y%22%3A215.1411%2C%22width%22%3A409.20944999999995%2C%22height%22%3A20.566789999999997%2C%22text%22%3A%22%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%2C%E5%90%8C%E6%A0%B7%2C%E4%B8%80%E4%B8%AA%E6%8E%A5%22%7D%2C%7B%22x%22%3A101.69938%2C%22y%22%3A215.42857%2C%22width%22%3A210.68577999999997%2C%22height%22%3A28.86246%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95%22%7D%2C%7B%22x%22%3A676.8528%2C%22y%22%3A244.00511%2C%22width%22%3A410.8497000000001%2C%22height%22%3A22.64186000000001%2C%22text%22%3A%22%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%B4%E6%89%BF%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%2C%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%94%A8%E9%80%97%E5%8F%B7%E9%9A%94%E5%BC%80%22%7D%2C%7B%22x%22%3A728.48444%2C%22y%22%3A332.40146%2C%22width%22%3A781.9808600000001%2C%22height%22%3A22.948440000000005%2C%22text%22%3A%22%E7%9A%84%E7%BE%8E%E5%9E%8B%E6%98%AF%E7%81%B5%E6%B4%BB%E7%9A%84%2C%E5%9C%A8%E4%B8%AD%2C%E5%9B%B0%E5%86%9C%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%BE%8E%E5%9E%8B%2C%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%B1%9E%E6%80%A7%2C%E6%89%80%E4%BB%A5%E6%9C%89%E6%97%B6%E6%88%91%E4%BB%AC%E4%B8%80%E4%B8%AA%E5%AF%B9%22%7D%2C%7B%22x%22%3A727.4429%2C%22y%22%3A363.2624%2C%22width%22%3A330.9870000000001%2C%22height%22%3A21.03706999999997%2C%22text%22%3A%22%E8%B1%A1%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AB%E6%95%B0%2C%E4%B9%9F%E5%8C%85%E5%90%AB%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%22%7D%2C%7B%22x%22%3A482.3991%2C%22y%22%3A368.26865%2C%22width%22%3A149.55140000000006%2C%22height%22%3A26.75943000000001%2C%22text%22%3A%22%E6%B7%B7%E5%90%88%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A727.5272%2C%22y%22%3A410.21533%2C%22width%22%3A420.2895000000001%2C%22height%22%3A21.39672999999999%2C%22text%22%3A%22%E5%9C%A831%E7%89%88%E6%9C%AC%2CTypescript%E6%94%AF%E6%8C%81%E7%9B%B4%E6%8E%A5%E7%BB%99%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%22%7D%5D%2C%22id%22%3A%22u2f5ed839%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"xQK0P\" id=\"xQK0P\"><span data-lake-id=\"ucb0e17fa\" id=\"ucb0e17fa\">1.索引类型</span></h2><p data-lake-id=\"u86ec537a\" id=\"u86ec537a\"><span data-lake-id=\"u28586f31\" id=\"u28586f31\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以使用接口描述索引的类型和通过索引得到的值的类型，比如一个数组[‘a’, ‘b’]，数字索引0对应的通过索引得到的值为’a’。我们可以同时给索引和值都设置类型，看下面的示例：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20RoleDic%20%7B%5Cn%20%20%5Bid%3A%20number%5D%3A%20string%3B%5Cn%7D%5Cnconst%20role1%3A%20RoleDic%20%3D%20%7B%5Cn%20%200%3A%20%5C%22super_admin%5C%22%2C%5Cn%20%201%3A%20%5C%22admin%5C%22%5Cn%7D%3B%5Cnconst%20role2%3A%20RoleDic%20%3D%20%7B%5Cn%20%20s%3A%20%5C%22super_admin%5C%22%2C%20%20%2F%2F%20error%20%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%5C%22%7B%20s%3A%20string%3B%20a%3A%20string%3B%20%7D%5C%22%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%5C%22RoleDic%5C%22%E3%80%82%5Cn%20%20a%3A%20%5C%22admin%5C%22%5Cn%7D%3B%5Cnconst%20role3%3A%20RoleDic%20%3D%20%5B%5C%22super_admin%5C%22%2C%20%5C%22admin%5C%22%5D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22eZrUL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u8a261782\" id=\"u8a261782\"><span data-lake-id=\"uf9d63151\" id=\"uf9d63151\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面的例子中 role3 定义了一个数组，索引为数值类型，值为字符串类型。</span></p><p data-lake-id=\"u63a54871\" id=\"u63a54871\"><span data-lake-id=\"u0a5ea151\" id=\"u0a5ea151\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">你也可以给索引设置readonly，从而防止索引返回值被修改。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20RoleDic%20%7B%5Cn%20%20readonly%20%5Bid%3A%20number%5D%3A%20string%3B%5Cn%7D%5Cnconst%20role%3A%20RoleDic%20%3D%20%7B%5Cn%20%200%3A%20%5C%22super_admin%5C%22%5Cn%7D%3B%5Cnrole%5B0%5D%20%3D%20%5C%22admin%5C%22%3B%20%2F%2F%20error%20%E7%B1%BB%E5%9E%8B%5C%22RoleDic%5C%22%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%E4%BB%85%E5%85%81%E8%AE%B8%E8%AF%BB%E5%8F%96%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22vAh3x%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u652e3b27\" id=\"u652e3b27\"><span data-lake-id=\"u28ee070a\" id=\"u28ee070a\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">这里有的点需要注意，你可以设置索引类型为 number。但是这样如果你将属性名设置为字符串类型，则会报错；但是如果你设置索引类型为字符串类型，那么即便你的属性名设置的是数值类型，也没问题。因为 JS 在访问属性值的时候，如果属性名是数值类型，会先将数值类型转为字符串，然后再去访问。你可以看下这个例子：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22const%20obj%20%3D%20%7B%5Cn%20%20123%3A%20%5C%22a%5C%22%2C%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E7%9A%84123%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%5Cn%20%20%5C%22123%5C%22%3A%20%5C%22b%5C%22%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%9C%A8%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E7%9A%84123%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%9A%E6%A0%87%E8%AF%86%E7%AC%A6%E2%80%9C%5C%22123%5C%22%E2%80%9D%E9%87%8D%E5%A4%8D%E3%80%82%5Cn%7D%3B%5Cnconsole.log(obj)%3B%20%2F%2F%20%7B%20'123'%3A%20'b'%20%7D%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22J1eHr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uba1aa8da\" id=\"uba1aa8da\"><span data-lake-id=\"uda90252d\" id=\"uda90252d\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">如果数值类型的属性名不会转为字符串类型，那么这里数值123和字符串123是不同的两个值，则最后对象obj应该同时有这两个属性；但是实际打印出来的obj只有一个属性，属性名为字符串&quot;123&quot;，而且值为&quot;b&quot;，说明数值类型属性名123被覆盖掉了，就是因为它被转为了字符串类型属性名&quot;123&quot;；又因为一个对象中多个相同属性名的属性，定义在后面的会覆盖前面的，所以结果就是obj只保留了后面定义的属性值。</span></p><h2 data-lake-id=\"Hmvww\" id=\"Hmvww\"><span data-lake-id=\"u47873513\" id=\"u47873513\">2.继承接口</span></h2><p data-lake-id=\"u2dbc4cf1\" id=\"u2dbc4cf1\"><span data-lake-id=\"u75c1667e\" id=\"u75c1667e\" class=\"lake-fontsize-18\">接口可以继承，这和类一样，这提高了接口的可复用性。来看一个场景：</span></p><p data-lake-id=\"uc499660a\" id=\"uc499660a\"><span data-lake-id=\"ub151400b\" id=\"ub151400b\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们定义一个Vegetables接口，它会对color属性进行限制。再定义两个接口，一个为Tomato，一个为Carrot，这两个类都需要对color进行限制，而各自又有各自独有的属性限制，我们可以这样定义：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%7D%5Cninterface%20Tomato%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%20%20radius%3A%20number%3B%5Cn%7D%5Cninterface%20Carrot%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%20%20length%3A%20number%3B%5Cn%7D%5Cnconst%20tomato%3A%20Tomato%20%3D%20%7B%5Cn%20%20radius%3A%201.2%20%2F%2F%20error%20%20Property%20'color'%20is%20missing%20in%20type%20'%7B%20radius%3A%20number%3B%20%7D'%5Cn%7D%3B%5Cnconst%20carrot%3A%20Carrot%20%3D%20%7B%5Cn%20%20color%3A%20%5C%22orange%5C%22%2C%5Cn%20%20length%3A%2020%5Cn%7D%3B%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22cFTZN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1ec4a607\" id=\"u1ec4a607\"><span data-lake-id=\"u66f2cfda\" id=\"u66f2cfda\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面定义的</span><span data-lake-id=\"uacb53af3\" id=\"uacb53af3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u123c3d4c\" id=\"u123c3d4c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">tomato</span><span data-lake-id=\"u058b929a\" id=\"u058b929a\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"uc9ccca52\" id=\"uc9ccca52\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">变量因为缺少了从</span><span data-lake-id=\"u08091439\" id=\"u08091439\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">Vegetables</span><span data-lake-id=\"u7d4006a3\" id=\"u7d4006a3\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">接口继承来的</span><span data-lake-id=\"u623b6a6c\" id=\"u623b6a6c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u2ac79636\" id=\"u2ac79636\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">color</span><span data-lake-id=\"u6547421a\" id=\"u6547421a\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"uf2fbeba4\" id=\"uf2fbeba4\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">属性，从而报错。</span></p><p data-lake-id=\"u2c34964e\" id=\"u2c34964e\"><span data-lake-id=\"u7e5411c2\" id=\"u7e5411c2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">一个接口可以被多个接口继承，同样，一个接口也可以继承多个接口，多个接口用逗号隔开。比如我们再定义一个Food接口，Tomato 也可以继承 Food： extends关键字实现继承</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Vegetables%20%7B%5Cn%20%20color%3A%20string%3B%5Cn%7D%5Cninterface%20Food%20%7B%5Cn%20%20type%3A%20string%3B%5Cn%7D%5Cninterface%20Tomato%20extends%20Food%2C%20Vegetables%20%7B%5Cn%20%20radius%3A%20number%3B%5Cn%7D%5Cn%5Cnconst%20tomato%3A%20Tomato%20%3D%20%7B%5Cn%20%20type%3A%20%5C%22vegetables%5C%22%2C%5Cn%20%20color%3A%20%5C%22red%5C%22%2C%5Cn%20%20radius%3A%201.2%5Cn%7D%3B%20%20%2F%2F%20%E5%9C%A8%E5%AE%9A%E4%B9%89tomato%E5%8F%98%E9%87%8F%E6%97%B6%E5%B0%86%E7%BB%A7%E6%89%BF%E8%BF%87%E6%9D%A5%E7%9A%84color%E5%92%8Ctype%E5%B1%9E%E6%80%A7%E5%90%8C%E6%97%B6%E5%A3%B0%E6%98%8E%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HBwwT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"pVqfc\" id=\"pVqfc\"><span data-lake-id=\"u42b06590\" id=\"u42b06590\">3.混合类型接口</span></h2><p data-lake-id=\"u255836b6\" id=\"u255836b6\"><span data-lake-id=\"uc7d0cdda\" id=\"uc7d0cdda\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">JS 的类型是灵活的。在 JS 中，函数是对象类型。对象可以有属性，所以有时我们的一个对象，它既是一个函数，也包含一些属性。比如我们要实现一个计数器函数，比较直接的做法是定义一个函数和一个全局变量：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22let%20count%20%3D%200%3B%5Cnconst%20countUp%20%3D%20()%20%3D%3E%20count%2B%2B%3B%5Cn%E4%BD%86%E6%98%AF%E8%BF%99%E7%A7%8D%E6%96%B9%E6%B3%95%E9%9C%80%E8%A6%81%E5%9C%A8%E5%87%BD%E6%95%B0%E5%A4%96%E9%9D%A2%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%8C%E6%9B%B4%E4%BC%98%E4%B8%80%E7%82%B9%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%EF%BC%9A%5Cn%5Cn%2F%2F%20javascript%5Cnconst%20countUp%20%3D%20(()%20%3D%3E%20%7B%5Cn%20%20let%20count%20%3D%200%3B%5Cn%20%20return%20()%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%2B%2Bcount%3B%5Cn%20%20%7D%3B%5Cn%7D)()%3B%5Cnconsole.log(countUp())%3B%20%2F%2F%201%5Cnconsole.log(countUp())%3B%20%2F%2F%202%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22T10eW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue5def363\" id=\"ue5def363\"><span data-lake-id=\"u44faa0e2\" id=\"u44faa0e2\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">在 TypeScript3.1 版本之前，我们需要借助命名空间来实现。但是在 3.1 版本，TypeScript 支持直接给函数添加属性，虽然这在 JS 中早就支持了：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%2F%2F%20javascript%5Cnlet%20countUp%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20return%20%2B%2BcountUp.count%3B%5Cn%7D%3B%5CncountUp.count%20%3D%200%3B%5Cnconsole.log(countUp())%3B%20%2F%2F%201%5Cnconsole.log(countUp())%3B%20%2F%2F%202%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22D9jub%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5920abab\" id=\"u5920abab\"><span data-lake-id=\"u13394f01\" id=\"u13394f01\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以看到，我们把一个函数赋值给</span><span data-lake-id=\"uf6e4fd7e\" id=\"uf6e4fd7e\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">countUp</span><span data-lake-id=\"ub98dba02\" id=\"ub98dba02\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，又给它绑定了一个属性</span><span data-lake-id=\"u2de20a86\" id=\"u2de20a86\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">count</span><span data-lake-id=\"ufa0aaa94\" id=\"ufa0aaa94\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">，我们的计数保存在这个</span><span data-lake-id=\"u5a68c80b\" id=\"u5a68c80b\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u30286b2f\" id=\"u30286b2f\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">count</span><span data-lake-id=\"u6e265de7\" id=\"u6e265de7\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\"> </span><span data-lake-id=\"u960e999c\" id=\"u960e999c\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">属性中。</span></p><p data-lake-id=\"u29ddca27\" id=\"u29ddca27\"><span data-lake-id=\"u33e29327\" id=\"u33e29327\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">我们可以使用混合类型接口来指定上面例子中 countUp 的类型：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Counter%20%7B%5Cn%20%20()%3A%20void%3B%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%AE%9A%E4%B9%89Counter%E8%BF%99%E4%B8%AA%E7%BB%93%E6%9E%84%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%EF%BC%8C%E5%87%BD%E6%95%B0%E7%9A%84%E8%A6%81%E6%B1%82%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BAvoid%EF%BC%8C%E5%8D%B3%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%20%20count%3A%20number%3B%20%2F%2F%20%E8%80%8C%E4%B8%94%E8%BF%99%E4%B8%AA%E7%BB%93%E6%9E%84%E8%BF%98%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BAcount%E3%80%81%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%BAnumber%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B1%9E%E6%80%A7%5Cn%7D%5Cnconst%20getCounter%20%3D%20()%3A%20Counter%20%3D%3E%20%7B%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E7%94%A8%E6%9D%A5%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E8%AE%A1%E6%95%B0%E5%99%A8%5Cn%20%20const%20c%20%3D%20()%20%3D%3E%20%7B%20%2F%2F%20%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%EF%BC%8C%E9%80%BB%E8%BE%91%E5%92%8C%E5%89%8D%E9%9D%A2%E4%BE%8B%E5%AD%90%E7%9A%84%E4%B8%80%E6%A0%B7%5Cn%20%20%20%20c.count%2B%2B%3B%5Cn%20%20%7D%3B%5Cn%20%20c.count%20%3D%200%3B%20%2F%2F%20%E5%86%8D%E7%BB%99%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAcount%E5%B1%9E%E6%80%A7%E5%88%9D%E5%A7%8B%E5%80%BC%E4%B8%BA0%5Cn%20%20return%20c%3B%20%2F%2F%20%E6%9C%80%E5%90%8E%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%5Cn%7D%3B%5Cnconst%20counter%3A%20Counter%20%3D%20getCounter()%3B%20%2F%2F%20%E9%80%9A%E8%BF%87getCounter%E5%87%BD%E6%95%B0%E5%BE%97%E5%88%B0%E8%BF%99%E4%B8%AA%E8%AE%A1%E6%95%B0%E5%99%A8%5Cncounter()%3B%5Cnconsole.log(counter.count)%3B%20%2F%2F%201%5Cncounter()%3B%5Cnconsole.log(counter.count)%3B%20%2F%2F%202%22%2C%22autoWrap%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Fmkbs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9fda82f6\" id=\"u9fda82f6\"><span data-lake-id=\"u5b089dde\" id=\"u5b089dde\" class=\"lake-fontsize-18\" style=\"color: rgb(28, 31, 33)\">上面的例子中，getCounter函数返回值类型为Counter，它是一个函数，无返回值，即返回值类型为void，它还包含一个属性count，属性返回值类型为number。</span></p><p data-lake-id=\"u067424ba\" id=\"u067424ba\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F12838787%2F1639379617272-5ef06e2b-c3f3-433f-ac28-be23bbb4dc0d.jpeg%22%2C%22taskId%22%3A%22u663315e4-1f66-4dc8-bb3c-638018c6f9d%22%2C%22clientId%22%3A%22u2f9f9128-96ea-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%225cf4bfe50001f4cf16000459.jpg%22%2C%22size%22%3A83878%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A459%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%9E%E7%B4%A2%E5%BC%95%E7%9A%84%E7%BE%8E%E5%9E%8B%E5%92%8C%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E5%BE%97%E5%88%B0%E7%9A%84%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%20%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%99%E7%B4%A2%E5%BC%95%E8%AE%BE%E7%BD%AEreadonly%2C%E4%BB%8E%E8%80%8C%E9%98%B2%E6%AD%A2%E7%B4%A2%E5%BC%95%E8%BF%94%E5%8F%A3%E5%80%BC%E8%A2%AB%E4%BF%AE%E6%94%B9.%20%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%2C%E8%BF%99%E5%92%8C%E6%98%AF%E4%B8%80%E6%A0%B7%2C%E8%BF%99%E6%8F%90%E5%95%86%E4%BA%86%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%20%E7%BB%A7%E6%89%BF%E6%8E%A5%E5%8F%A3%20%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%2C%E5%90%8C%E6%A0%B7%2C%E4%B8%80%E4%B8%AA%E6%8E%A5%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%B4%E6%89%BF%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%2C%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%94%A8%E9%80%97%E5%8F%B7%E9%9A%94%E5%BC%80%20%E7%9A%84%E7%BE%8E%E5%9E%8B%E6%98%AF%E7%81%B5%E6%B4%BB%E7%9A%84%2C%E5%9C%A8%E4%B8%AD%2C%E5%9B%B0%E5%86%9C%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%BE%8E%E5%9E%8B%2C%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%B1%9E%E6%80%A7%2C%E6%89%80%E4%BB%A5%E6%9C%89%E6%97%B6%E6%88%91%E4%BB%AC%E4%B8%80%E4%B8%AA%E5%AF%B9%20%E8%B1%A1%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AB%E6%95%B0%2C%E4%B9%9F%E5%8C%85%E5%90%AB%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%20%E6%B7%B7%E5%90%88%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3%20%E5%9C%A831%E7%89%88%E6%9C%AC%2CTypescript%E6%94%AF%E6%8C%81%E7%9B%B4%E6%8E%A5%E7%BB%99%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A674.6851%2C%22y%22%3A23.945284%2C%22width%22%3A480.4147999999999%2C%22height%22%3A25.389013%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%9E%E7%B4%A2%E5%BC%95%E7%9A%84%E7%BE%8E%E5%9E%8B%E5%92%8C%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E5%BE%97%E5%88%B0%E7%9A%84%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A484.14493%2C%22y%22%3A47.158607%2C%22width%22%3A98.16186999999996%2C%22height%22%3A26.628762999999992%2C%22text%22%3A%22%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A673.9192%2C%22y%22%3A74.33475%2C%22width%22%3A516.9613999999999%2C%22height%22%3A22.967884999999995%2C%22text%22%3A%22%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%99%E7%B4%A2%E5%BC%95%E8%AE%BE%E7%BD%AEreadonly%2C%E4%BB%8E%E8%80%8C%E9%98%B2%E6%AD%A2%E7%B4%A2%E5%BC%95%E8%BF%94%E5%8F%A3%E5%80%BC%E8%A2%AB%E4%BF%AE%E6%94%B9.%22%7D%2C%7B%22x%22%3A676.2327%2C%22y%22%3A164.20067%2C%22width%22%3A491.9087999999999%2C%22height%22%3A24.884410000000003%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%2C%E8%BF%99%E5%92%8C%E6%98%AF%E4%B8%80%E6%A0%B7%2C%E8%BF%99%E6%8F%90%E5%95%86%E4%BA%86%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%22%7D%2C%7B%22x%22%3A481.19992%2C%22y%22%3A202.62743%2C%22width%22%3A97.30277999999998%2C%22height%22%3A23.94833%2C%22text%22%3A%22%E7%BB%A7%E6%89%BF%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A675.92035%2C%22y%22%3A215.1411%2C%22width%22%3A409.20944999999995%2C%22height%22%3A20.566789999999997%2C%22text%22%3A%22%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%2C%E5%90%8C%E6%A0%B7%2C%E4%B8%80%E4%B8%AA%E6%8E%A5%22%7D%2C%7B%22x%22%3A101.69938%2C%22y%22%3A215.42857%2C%22width%22%3A210.68577999999997%2C%22height%22%3A28.86246%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95%22%7D%2C%7B%22x%22%3A676.8528%2C%22y%22%3A244.00511%2C%22width%22%3A410.8497000000001%2C%22height%22%3A22.64186000000001%2C%22text%22%3A%22%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%B4%E6%89%BF%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%2C%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E7%94%A8%E9%80%97%E5%8F%B7%E9%9A%94%E5%BC%80%22%7D%2C%7B%22x%22%3A728.48444%2C%22y%22%3A332.40146%2C%22width%22%3A781.9808600000001%2C%22height%22%3A22.948440000000005%2C%22text%22%3A%22%E7%9A%84%E7%BE%8E%E5%9E%8B%E6%98%AF%E7%81%B5%E6%B4%BB%E7%9A%84%2C%E5%9C%A8%E4%B8%AD%2C%E5%9B%B0%E5%86%9C%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%BE%8E%E5%9E%8B%2C%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%B1%9E%E6%80%A7%2C%E6%89%80%E4%BB%A5%E6%9C%89%E6%97%B6%E6%88%91%E4%BB%AC%E4%B8%80%E4%B8%AA%E5%AF%B9%22%7D%2C%7B%22x%22%3A727.4429%2C%22y%22%3A363.2624%2C%22width%22%3A330.9870000000001%2C%22height%22%3A21.03706999999997%2C%22text%22%3A%22%E8%B1%A1%E4%BB%96%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AB%E6%95%B0%2C%E4%B9%9F%E5%8C%85%E5%90%AB%E4%B8%80%E4%BA%9B%E5%B1%9E%E6%80%A7%22%7D%2C%7B%22x%22%3A482.3991%2C%22y%22%3A368.26865%2C%22width%22%3A149.55140000000006%2C%22height%22%3A26.75943000000001%2C%22text%22%3A%22%E6%B7%B7%E5%90%88%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A727.5272%2C%22y%22%3A410.21533%2C%22width%22%3A420.2895000000001%2C%22height%22%3A21.39672999999999%2C%22text%22%3A%22%E5%9C%A831%E7%89%88%E6%9C%AC%2CTypescript%E6%94%AF%E6%8C%81%E7%9B%B4%E6%8E%A5%E7%BB%99%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%22%7D%5D%2C%22id%22%3A%22u2f5ed839%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2021-12-13T07:13:42.000Z",
    "deleted_at": null,
    "created_at": "2021-12-13T07:00:17.000Z",
    "updated_at": "2021-12-13T07:13:42.000Z",
    "published_at": "2021-12-13T07:13:42.000Z",
    "first_published_at": "2021-12-13T07:02:20.000Z",
    "word_count": 1507,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/12838787/1639379617272-5ef06e2b-c3f3-433f-ac28-be23bbb4dc0d.jpeg",
    "description": "1.索引类型我们可以使用接口描述索引的类型和通过索引得到的值的类型，比如一个数组[‘a’, ‘b’]，数字索引0对应的通过索引得到的值为’a’。我们可以同时给索引和值都设置类型，看下面的示例：interface RoleDic {   [id: number]: string; } const...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]